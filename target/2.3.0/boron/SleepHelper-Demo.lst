
/Users/chipmc/Documents/Maker/Particle/Utilities/SleepHelper-Demo/target/2.3.0/boron/SleepHelper-Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000f210  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e3230  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001e4  2003e20c  000e3234  0002e20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000400  2003e3f0  2003e3f0  0003e3f0  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000e3418  000e3418  00033418  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000e3444  000e3444  00033444  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002bf3bc  00000000  00000000  00033448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00022c14  00000000  00000000  002f2804  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00067c83  00000000  00000000  00315418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003ef8  00000000  00000000  0037d09b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00010250  00000000  00000000  00380f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000456bd  00000000  00000000  003911e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00065db9  00000000  00000000  003d68a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00189d65  00000000  00000000  0043c659  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c818  00000000  00000000  005c63c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00b ffa7 	bl	dff84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00b ffc9 	bl	dffd4 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e20c 	.word	0x2003e20c
   d404c:	000e3234 	.word	0x000e3234
   d4050:	2003e3f0 	.word	0x2003e3f0
   d4054:	2003e3f0 	.word	0x2003e3f0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f00b f8f7 	bl	df254 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000e31ec 	.word	0x000e31ec
   d4080:	000e3224 	.word	0x000e3224

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bf72 	b.w	d4f6c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f981 	bl	d4390 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f00b b897 	b.w	df1c4 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f008 b995 	b.w	dc3c4 <malloc>

000d409a <_Znaj>:
   d409a:	f008 b993 	b.w	dc3c4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f008 b999 	b.w	dc3d4 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f008 b997 	b.w	dc3d4 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f008 f828 	bl	dc104 <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000dbd45 	.word	0x000dbd45

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3

000d40d6 <_ZNSt17_Function_handlerIFbmEZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E9_M_invokeERKSt9_Any_dataOm>:
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
	{ return __r; }
   d40d6:	6800      	ldr	r0, [r0, #0]
     * so, however only do so if you use a sleep mode that will completely power down the modem. Otherwise, it's 
     * possible that then modem will never be fully reset.
     */
    SleepHelper &withMaximumTimeToConnect(std::chrono::milliseconds timeMs) { 
        return withMaximumTimeToConnectFunction([timeMs](system_tick_t ms) {
            return (ms >= timeMs.count());
   d40d8:	680a      	ldr	r2, [r1, #0]
   d40da:	e9d0 0100 	ldrd	r0, r1, [r0]
   d40de:	2300      	movs	r3, #0
   d40e0:	4282      	cmp	r2, r0
   d40e2:	418b      	sbcs	r3, r1
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d40e4:	bfac      	ite	ge
   d40e6:	2001      	movge	r0, #1
   d40e8:	2000      	movlt	r0, #0
   d40ea:	4770      	bx	lr

000d40ec <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d40ec:	2a02      	cmp	r2, #2
   d40ee:	d006      	beq.n	d40fe <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
   d40f0:	2a03      	cmp	r2, #3
   d40f2:	d002      	beq.n	d40fa <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
   d40f4:	2a01      	cmp	r2, #1
   d40f6:	d100      	bne.n	d40fa <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40f8:	6001      	str	r1, [r0, #0]
	}
   d40fa:	2000      	movs	r0, #0
   d40fc:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40fe:	680b      	ldr	r3, [r1, #0]
   d4100:	6003      	str	r3, [r0, #0]
	}
   d4102:	e7fa      	b.n	d40fa <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>

000d4104 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d4104:	2a02      	cmp	r2, #2
   d4106:	d006      	beq.n	d4116 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x12>
   d4108:	2a03      	cmp	r2, #3
   d410a:	d002      	beq.n	d4112 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
   d410c:	2a01      	cmp	r2, #1
   d410e:	d100      	bne.n	d4112 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4110:	6001      	str	r1, [r0, #0]
	}
   d4112:	2000      	movs	r0, #0
   d4114:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4116:	680b      	ldr	r3, [r1, #0]
   d4118:	6003      	str	r3, [r0, #0]
	}
   d411a:	e7fa      	b.n	d4112 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>

000d411c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUliE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d411c:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d411e:	bf08      	it	eq
   d4120:	6001      	streq	r1, [r0, #0]
	}
   d4122:	2000      	movs	r0, #0
   d4124:	4770      	bx	lr

000d4126 <_ZNSt14_Function_base13_Base_managerIZZ5setupENKUlRN11SleepHelper16AppCallbackStateEE_clES3_EUlRN5spark10JSONWriterEE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d4126:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4128:	bf08      	it	eq
   d412a:	6001      	streq	r1, [r0, #0]
	}
   d412c:	2000      	movs	r0, #0
   d412e:	4770      	bx	lr

000d4130 <_ZNSt14_Function_base13_Base_managerIZ5setupEUlRN11SleepHelper16AppCallbackStateEE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d4130:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4132:	bf08      	it	eq
   d4134:	6001      	streq	r1, [r0, #0]
	}
   d4136:	2000      	movs	r0, #0
   d4138:	4770      	bx	lr

000d413a <_ZNSt14_Function_base13_Base_managerIZ5setupEUlRK17SystemSleepResultE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d413a:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d413c:	bf08      	it	eq
   d413e:	6001      	streq	r1, [r0, #0]
	}
   d4140:	2000      	movs	r0, #0
   d4142:	4770      	bx	lr

000d4144 <_ZNSt17_Function_handlerIFbbEZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4144:	b508      	push	{r3, lr}
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d4146:	2100      	movs	r1, #0
   d4148:	6800      	ldr	r0, [r0, #0]
   d414a:	f001 facd 	bl	d56e8 <_ZN6AB18056setWDTEi>
      }
   d414e:	2001      	movs	r0, #1
   d4150:	bd08      	pop	{r3, pc}

000d4152 <_ZNSt17_Function_handlerIFbRK17SystemSleepResultEZN11SleepHelper14withAB1805_WDTER6AB1805EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4152:	b508      	push	{r3, lr}
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d4154:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d4158:	6800      	ldr	r0, [r0, #0]
   d415a:	f001 fac5 	bl	d56e8 <_ZN6AB18056setWDTEi>
      }
   d415e:	2001      	movs	r0, #1
   d4160:	bd08      	pop	{r3, pc}

000d4162 <_ZNSt17_Function_handlerIFbRK17SystemSleepResultEZ5setupEUlS2_E0_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4162:	b508      	push	{r3, lr}
                Log.info(dataStr);          // Visibility to the payload in the webhook
            }
            return false;
        })
        .withWakeFunction([](const SystemSleepResult &sleepResult) {
            delay(2000);                       // Delay so we can capture in serial monitor
   d4164:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4168:	f008 f9a4 	bl	dc4b4 <delay>
      }
   d416c:	2001      	movs	r0, #1
   d416e:	bd08      	pop	{r3, pc}

000d4170 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4170:	b538      	push	{r3, r4, r5, lr}
        });

        withSleepReadyFunction([maxTimeToPublish](AppCallbackState &state, system_tick_t ms) {
            bool canSleep = false;

            if (state.callbackState == AppCallbackState::CALLBACK_STATE_START) { 
   d4172:	680b      	ldr	r3, [r1, #0]
   d4174:	3301      	adds	r3, #1
   d4176:	460d      	mov	r5, r1
   d4178:	d109      	bne.n	d418e <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x1e>
                // On first call to sleep ready, resume publishing
                PublishQueuePosix::instance().setPausePublishing(false);
   d417a:	f003 fd25 	bl	d7bc8 <_ZN17PublishQueuePosix8instanceEv>
     * the next event (if any) will not be attempted.
     * 
     * This is used by the automated test tool; you probably won't need to manually
     * manage this under normal circumstances.
     */
    void setPausePublishing(bool value) { pausePublishing = value; }
   d417e:	2400      	movs	r4, #0
                state.callbackState = 1;
   d4180:	2301      	movs	r3, #1
   d4182:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
   d4186:	602b      	str	r3, [r5, #0]
      }
   d4188:	f084 0001 	eor.w	r0, r4, #1
   d418c:	bd38      	pop	{r3, r4, r5, pc}
   d418e:	6803      	ldr	r3, [r0, #0]
   d4190:	e9d3 0100 	ldrd	r0, r1, [r3]
            }
            else {
                if (maxTimeToPublish.count() != 0 && ms >= maxTimeToPublish.count()) {
   d4194:	ea50 0301 	orrs.w	r3, r0, r1
   d4198:	d009      	beq.n	d41ae <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x3e>
   d419a:	6812      	ldr	r2, [r2, #0]
   d419c:	2300      	movs	r3, #0
   d419e:	4282      	cmp	r2, r0
   d41a0:	418b      	sbcs	r3, r1
   d41a2:	db04      	blt.n	d41ae <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x3e>
                    PublishQueuePosix::instance().setPausePublishing(true);
   d41a4:	f003 fd10 	bl	d7bc8 <_ZN17PublishQueuePosix8instanceEv>
   d41a8:	2301      	movs	r3, #1
   d41aa:	f880 30b2 	strb.w	r3, [r0, #178]	; 0xb2
                }
                canSleep = PublishQueuePosix::instance().getCanSleep();
   d41ae:	f003 fd0b 	bl	d7bc8 <_ZN17PublishQueuePosix8instanceEv>
   d41b2:	f890 40b3 	ldrb.w	r4, [r0, #179]	; 0xb3
                if (canSleep) {
   d41b6:	2c00      	cmp	r4, #0
   d41b8:	d0e6      	beq.n	d4188 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x18>
                    PublishQueuePosix::instance().setPausePublishing(true);
   d41ba:	f003 fd05 	bl	d7bc8 <_ZN17PublishQueuePosix8instanceEv>
   d41be:	2301      	movs	r3, #1
   d41c0:	f880 30b2 	strb.w	r3, [r0, #178]	; 0xb2
                    PublishQueuePosix::instance().writeQueueToFiles();
   d41c4:	f003 fd00 	bl	d7bc8 <_ZN17PublishQueuePosix8instanceEv>
   d41c8:	f003 fd5c 	bl	d7c84 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d41cc:	e7dc      	b.n	d4188 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x18>

000d41ce <_ZNSt17_Function_handlerIFbiEZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUliE_E9_M_invokeERKSt9_Any_dataOi>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d41ce:	b508      	push	{r3, lr}
            PublishQueuePosix::instance().setPausePublishing(true);
   d41d0:	f003 fcfa 	bl	d7bc8 <_ZN17PublishQueuePosix8instanceEv>
   d41d4:	2301      	movs	r3, #1
   d41d6:	f880 30b2 	strb.w	r3, [r0, #178]	; 0xb2
      }
   d41da:	4618      	mov	r0, r3
   d41dc:	bd08      	pop	{r3, pc}

000d41de <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d41de:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d41e0:	b538      	push	{r3, r4, r5, lr}
   d41e2:	4604      	mov	r4, r0
	  switch (__op)
   d41e4:	d007      	beq.n	d41f6 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x18>
   d41e6:	2a03      	cmp	r2, #3
   d41e8:	d010      	beq.n	d420c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2e>
   d41ea:	2a01      	cmp	r2, #1
   d41ec:	d101      	bne.n	d41f2 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d41ee:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d41f0:	6003      	str	r3, [r0, #0]
	}
   d41f2:	2000      	movs	r0, #0
   d41f4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d41f6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d41f8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d41fa:	f7ff ff4c 	bl	d4096 <_Znwj>
   d41fe:	b118      	cbz	r0, d4208 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2a>
   d4200:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4204:	e9c0 2300 	strd	r2, r3, [r0]
	  __dest._M_access<_Functor*>() =
   d4208:	6020      	str	r0, [r4, #0]
	}
   d420a:	e7f2      	b.n	d41f2 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d420c:	6800      	ldr	r0, [r0, #0]
   d420e:	2800      	cmp	r0, #0
   d4210:	d0ef      	beq.n	d41f2 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
   d4212:	2108      	movs	r1, #8
   d4214:	f00b f926 	bl	df464 <_ZdlPvj>
   d4218:	e7eb      	b.n	d41f2 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

000d421a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	  switch (__op)
   d421a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d421c:	b538      	push	{r3, r4, r5, lr}
   d421e:	4604      	mov	r4, r0
	  switch (__op)
   d4220:	d007      	beq.n	d4232 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x18>
   d4222:	2a03      	cmp	r2, #3
   d4224:	d010      	beq.n	d4248 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2e>
   d4226:	2a01      	cmp	r2, #1
   d4228:	d101      	bne.n	d422e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d422a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d422c:	6003      	str	r3, [r0, #0]
	}
   d422e:	2000      	movs	r0, #0
   d4230:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4232:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d4234:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4236:	f7ff ff2e 	bl	d4096 <_Znwj>
   d423a:	b118      	cbz	r0, d4244 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
   d423c:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4240:	e9c0 2300 	strd	r2, r3, [r0]
	  __dest._M_access<_Functor*>() =
   d4244:	6020      	str	r0, [r4, #0]
	}
   d4246:	e7f2      	b.n	d422e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4248:	6800      	ldr	r0, [r0, #0]
   d424a:	2800      	cmp	r0, #0
   d424c:	d0ef      	beq.n	d422e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   d424e:	2108      	movs	r1, #8
   d4250:	f00b f908 	bl	df464 <_ZdlPvj>
   d4254:	e7eb      	b.n	d422e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	...

000d4258 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4258:	4b0a      	ldr	r3, [pc, #40]	; (d4284 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d425a:	b510      	push	{r4, lr}
   d425c:	4604      	mov	r4, r0
   d425e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4260:	f009 fb82 	bl	dd968 <_ZN5spark10LogManager8instanceEv>
   d4264:	4621      	mov	r1, r4
   d4266:	f009 fd44 	bl	ddcf2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d426a:	f00a ff63 	bl	df134 <_Z16_fetch_usbserialv>
   d426e:	f00a ff55 	bl	df11c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4272:	4620      	mov	r0, r4
   d4274:	4b04      	ldr	r3, [pc, #16]	; (d4288 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4276:	f840 3b04 	str.w	r3, [r0], #4
   d427a:	f009 fc27 	bl	ddacc <_ZN5spark6detail9LogFilterD1Ev>
    }
   d427e:	4620      	mov	r0, r4
   d4280:	bd10      	pop	{r4, pc}
   d4282:	bf00      	nop
   d4284:	000e2288 	.word	0x000e2288
   d4288:	000e2270 	.word	0x000e2270

000d428c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d428c:	b510      	push	{r4, lr}
   d428e:	4604      	mov	r4, r0
    }
   d4290:	f7ff ffe2 	bl	d4258 <_ZN5spark16SerialLogHandlerD1Ev>
   d4294:	4620      	mov	r0, r4
   d4296:	2124      	movs	r1, #36	; 0x24
   d4298:	f00b f8e4 	bl	df464 <_ZdlPvj>
   d429c:	4620      	mov	r0, r4
   d429e:	bd10      	pop	{r4, pc}

000d42a0 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ5setupENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d42a0:	b538      	push	{r3, r4, r5, lr}
   d42a2:	460c      	mov	r4, r1
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
    return this->name(name, strlen(name));
   d42a4:	2201      	movs	r2, #1
   d42a6:	490e      	ldr	r1, [pc, #56]	; (d42e0 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ5setupENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x40>)
   d42a8:	4620      	mov	r0, r4
   d42aa:	f009 f993 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d42ae:	4605      	mov	r5, r0
                    writer.name("t").value((int) Time.now());
   d42b0:	f00a fe3f 	bl	def32 <_ZN9TimeClass3nowEv>
   d42b4:	4601      	mov	r1, r0
   d42b6:	4628      	mov	r0, r5
   d42b8:	f009 f8ce 	bl	dd458 <_ZN5spark10JSONWriter5valueEi>
   d42bc:	4909      	ldr	r1, [pc, #36]	; (d42e4 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ5setupENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x44>)
   d42be:	2201      	movs	r2, #1
   d42c0:	4620      	mov	r0, r4
   d42c2:	f009 f987 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d42c6:	4604      	mov	r4, r0
                    writer.name("c").value(readTempC(), 1);
   d42c8:	f001 f89c 	bl	d5404 <_Z9readTempCv>
   d42cc:	f00b faa2 	bl	df814 <__aeabi_ui2d>
   d42d0:	ec41 0b10 	vmov	d0, r0, r1
   d42d4:	4620      	mov	r0, r4
   d42d6:	2101      	movs	r1, #1
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d42d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d42dc:	f009 b8e0 	b.w	dd4a0 <_ZN5spark10JSONWriter5valueEdi>
   d42e0:	000e2954 	.word	0x000e2954
   d42e4:	000e2ad3 	.word	0x000e2ad3

000d42e8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d42e8:	b510      	push	{r4, lr}
      if (_M_manager)
   d42ea:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d42ec:	4604      	mov	r4, r0
      if (_M_manager)
   d42ee:	b113      	cbz	r3, d42f6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42f0:	2203      	movs	r2, #3
   d42f2:	4601      	mov	r1, r0
   d42f4:	4798      	blx	r3
    }
   d42f6:	4620      	mov	r0, r4
   d42f8:	bd10      	pop	{r4, pc}

000d42fa <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d42fa:	b40e      	push	{r1, r2, r3}
   d42fc:	b510      	push	{r4, lr}
   d42fe:	b08d      	sub	sp, #52	; 0x34
   d4300:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4302:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4304:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4308:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d430a:	2300      	movs	r3, #0
   d430c:	2020      	movs	r0, #32
   d430e:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4312:	e9cd 4200 	strd	r4, r2, [sp]
   d4316:	201e      	movs	r0, #30
   d4318:	aa04      	add	r2, sp, #16
   d431a:	f007 ff13 	bl	dc144 <log_message_v>
}
   d431e:	b00d      	add	sp, #52	; 0x34
   d4320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4324:	b003      	add	sp, #12
   d4326:	4770      	bx	lr

000d4328 <_ZN23LocalTimeRestrictedDateD1Ev>:
 *
 * This class can specify that something (typically a LocalTimeHMSRestricted or a LocalTimeRange) only
 * applies on certain dates. This can be a mask of days of the week, optionally with specific
 * dates that should be disallowed. Or you can schedule only on specific dates. 
 */
class LocalTimeRestrictedDate {
   d4328:	b510      	push	{r4, lr}
   d432a:	4604      	mov	r4, r0
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   d432c:	6900      	ldr	r0, [r0, #16]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d432e:	b108      	cbz	r0, d4334 <_ZN23LocalTimeRestrictedDateD1Ev+0xc>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4330:	f7ff feb5 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   d4334:	6860      	ldr	r0, [r4, #4]
	if (__p)
   d4336:	b108      	cbz	r0, d433c <_ZN23LocalTimeRestrictedDateD1Ev+0x14>
   d4338:	f7ff feb1 	bl	d409e <_ZdlPv>
   d433c:	4620      	mov	r0, r4
   d433e:	bd10      	pop	{r4, pc}

000d4340 <_ZN14LocalTimeRangeC1Ev>:
    /**
     * @brief Construct a new Time Range object with the range of the entire day (inclusive) 
     * 
     * This is start = 00:00:00, end = 23:59:59. The system clock does not have a concept of leap seconds.
     */
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d4340:	b510      	push	{r4, lr}
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d4342:	237f      	movs	r3, #127	; 0x7f
   d4344:	7003      	strb	r3, [r0, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
   d4346:	2300      	movs	r3, #0
   d4348:	e9c0 3301 	strd	r3, r3, [r0, #4]
   d434c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   d4350:	e9c0 3305 	strd	r3, r3, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d4354:	4604      	mov	r4, r0
   d4356:	4905      	ldr	r1, [pc, #20]	; (d436c <_ZN14LocalTimeRangeC1Ev+0x2c>)
   d4358:	301c      	adds	r0, #28
   d435a:	f002 f989 	bl	d6670 <_ZN12LocalTimeHMSC1EPKc>
   d435e:	4904      	ldr	r1, [pc, #16]	; (d4370 <_ZN14LocalTimeRangeC1Ev+0x30>)
   d4360:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d4364:	f002 f984 	bl	d6670 <_ZN12LocalTimeHMSC1EPKc>
    }
   d4368:	4620      	mov	r0, r4
   d436a:	bd10      	pop	{r4, pc}
   d436c:	000e2198 	.word	0x000e2198
   d4370:	000e21a1 	.word	0x000e21a1

000d4374 <_ZN14LocalTimeRangeD1Ev>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d4374:	b510      	push	{r4, lr}
   d4376:	4604      	mov	r4, r0
   d4378:	3024      	adds	r0, #36	; 0x24
   d437a:	f001 ffc7 	bl	d630c <_ZN12LocalTimeHMSD1Ev>
   d437e:	f104 001c 	add.w	r0, r4, #28
   d4382:	f001 ffc3 	bl	d630c <_ZN12LocalTimeHMSD1Ev>
   d4386:	4620      	mov	r0, r4
   d4388:	f7ff ffce 	bl	d4328 <_ZN23LocalTimeRestrictedDateD1Ev>
   d438c:	4620      	mov	r0, r4
   d438e:	bd10      	pop	{r4, pc}

000d4390 <loop>:
        .withMinuteOfHour(2);

    SleepHelper::instance().setup();
}

void loop() {
   d4390:	b508      	push	{r3, lr}
    SleepHelper::instance().loop();
   d4392:	f005 f9bd 	bl	d9710 <_ZN11SleepHelper8instanceEv>
   d4396:	f007 fc38 	bl	dbc0a <_ZN11SleepHelper4loopEv>

    ab1805.loop();
   d439a:	4804      	ldr	r0, [pc, #16]	; (d43ac <loop+0x1c>)
   d439c:	f001 fd26 	bl	d5dec <_ZN6AB18054loopEv>
    PublishQueuePosix::instance().loop();
   d43a0:	f003 fc12 	bl	d7bc8 <_ZN17PublishQueuePosix8instanceEv>
}
   d43a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    PublishQueuePosix::instance().loop();
   d43a8:	f003 bb00 	b.w	d79ac <_ZN17PublishQueuePosix4loopEv>
   d43ac:	2003e400 	.word	0x2003e400

000d43b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43b0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d43b2:	e9d0 5300 	ldrd	r5, r3, [r0]
   d43b6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43b8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d43ba:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d43be:	42ae      	cmp	r6, r5
   d43c0:	d004      	beq.n	d43cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d43c2:	4628      	mov	r0, r5
   d43c4:	f00a fa50 	bl	de868 <_ZN6StringD1Ev>
   d43c8:	3514      	adds	r5, #20
   d43ca:	e7f8      	b.n	d43be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d43cc:	6820      	ldr	r0, [r4, #0]
   d43ce:	f008 f801 	bl	dc3d4 <free>
    AllocatorT::free(data_);
}
   d43d2:	4620      	mov	r0, r4
   d43d4:	bd70      	pop	{r4, r5, r6, pc}

000d43d6 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>:
       *  (i.e. capacity() == size() in the new %vector).
       *
       *  The newly-created %vector uses a copy of the allocator object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */
      vector(const vector& __x)
   d43d6:	b570      	push	{r4, r5, r6, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d43d8:	e9d1 3500 	ldrd	r3, r5, [r1]
   d43dc:	1aed      	subs	r5, r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   d43de:	2300      	movs	r3, #0
   d43e0:	e9c0 3300 	strd	r3, r3, [r0]
   d43e4:	6083      	str	r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d43e6:	10ab      	asrs	r3, r5, #2
      vector(const vector& __x)
   d43e8:	4604      	mov	r4, r0
   d43ea:	460e      	mov	r6, r1
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d43ec:	d017      	beq.n	d441e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x48>
	if (__n > this->max_size())
   d43ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   d43f2:	d301      	bcc.n	d43f8 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x22>
	  std::__throw_bad_alloc();
   d43f4:	f00b f83c 	bl	df470 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d43f8:	4628      	mov	r0, r5
   d43fa:	f7ff fe4c 	bl	d4096 <_Znwj>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d43fe:	4405      	add	r5, r0
   d4400:	60a5      	str	r5, [r4, #8]

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d4402:	e9d6 5300 	ldrd	r5, r3, [r6]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d4406:	e9c4 0000 	strd	r0, r0, [r4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d440a:	462a      	mov	r2, r5
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
   d440c:	4601      	mov	r1, r0
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   d440e:	4293      	cmp	r3, r2
   d4410:	d007      	beq.n	d4422 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x4c>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d4412:	b109      	cbz	r1, d4418 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x42>
   d4414:	6816      	ldr	r6, [r2, #0]
   d4416:	600e      	str	r6, [r1, #0]
   d4418:	3104      	adds	r1, #4
   d441a:	3204      	adds	r2, #4
   d441c:	e7f7      	b.n	d440e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x38>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d441e:	4618      	mov	r0, r3
   d4420:	e7ed      	b.n	d43fe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x28>
	this->_M_impl._M_finish =
   d4422:	1b5b      	subs	r3, r3, r5
   d4424:	4403      	add	r3, r0
   d4426:	6063      	str	r3, [r4, #4]
      }
   d4428:	4620      	mov	r0, r4
   d442a:	bd70      	pop	{r4, r5, r6, pc}

000d442c <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d442c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d442e:	2300      	movs	r3, #0
   d4430:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4432:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4434:	4604      	mov	r4, r0
   d4436:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4438:	b12b      	cbz	r3, d4446 <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d443a:	2202      	movs	r2, #2
   d443c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d443e:	68eb      	ldr	r3, [r5, #12]
   d4440:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4442:	68ab      	ldr	r3, [r5, #8]
   d4444:	60a3      	str	r3, [r4, #8]
	}
    }
   d4446:	4620      	mov	r0, r4
   d4448:	bd38      	pop	{r3, r4, r5, pc}
	...

000d444c <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ5setupEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d444c:	b510      	push	{r4, lr}
   d444e:	b08e      	sub	sp, #56	; 0x38
            if (Time.isValid()) {
   d4450:	f00a fd52 	bl	deef8 <_ZN9TimeClass7isValidEv>
   d4454:	2800      	cmp	r0, #0
   d4456:	d03a      	beq.n	d44ce <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ5setupEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x82>
                SleepHelper::instance().addEvent([](JSONWriter &writer) {
   d4458:	f005 f95a 	bl	d9710 <_ZN11SleepHelper8instanceEv>
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d445c:	4b1d      	ldr	r3, [pc, #116]	; (d44d4 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ5setupEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x88>)
   d445e:	9305      	str	r3, [sp, #20]
   d4460:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   d4462:	4b1d      	ldr	r3, [pc, #116]	; (d44d8 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ5setupEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x8c>)
   d4464:	9304      	str	r3, [sp, #16]
        wakeEventFunctions.addEvent(callback);
   d4466:	a902      	add	r1, sp, #8
   d4468:	a806      	add	r0, sp, #24
   d446a:	f7ff ffdf 	bl	d442c <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_>
            eventHistory.addEvent(callback);
   d446e:	a906      	add	r1, sp, #24
   d4470:	a80a      	add	r0, sp, #40	; 0x28
   d4472:	f7ff ffdb 	bl	d442c <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_>
   d4476:	a90a      	add	r1, sp, #40	; 0x28
   d4478:	f504 60ea 	add.w	r0, r4, #1872	; 0x750
   d447c:	f005 f9b2 	bl	d97e4 <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE>
    class function<_Res(_ArgTypes...)>
   d4480:	a80a      	add	r0, sp, #40	; 0x28
   d4482:	f7ff ff31 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d4486:	a806      	add	r0, sp, #24
   d4488:	f7ff ff2e 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d448c:	a802      	add	r0, sp, #8
   d448e:	f7ff ff2b 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
                snprintf(dataStr,sizeof(dataStr),"t: %4.2f",current.tempC);
   d4492:	4b12      	ldr	r3, [pc, #72]	; (d44dc <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ5setupEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x90>)
   d4494:	6818      	ldr	r0, [r3, #0]
   d4496:	f00b f9df 	bl	df858 <__aeabi_f2d>
   d449a:	4a11      	ldr	r2, [pc, #68]	; (d44e0 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ5setupEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x94>)
   d449c:	e9cd 0100 	strd	r0, r1, [sp]
   d44a0:	2110      	movs	r1, #16
   d44a2:	a80a      	add	r0, sp, #40	; 0x28
   d44a4:	f007 ffb6 	bl	dc414 <snprintf>
                PublishQueuePosix::instance().publish("Test", dataStr, PRIVATE);
   d44a8:	f003 fb8e 	bl	d7bc8 <_ZN17PublishQueuePosix8instanceEv>
    return val_;
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
   d44ac:	4b0d      	ldr	r3, [pc, #52]	; (d44e4 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ5setupEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x98>)
		return publishCommon(eventName, data, 60, flags1, flags2);
   d44ae:	2100      	movs	r1, #0
   d44b0:	781a      	ldrb	r2, [r3, #0]
   d44b2:	6803      	ldr	r3, [r0, #0]
   d44b4:	f88d 1004 	strb.w	r1, [sp, #4]
   d44b8:	f88d 2000 	strb.w	r2, [sp]
   d44bc:	681c      	ldr	r4, [r3, #0]
   d44be:	490a      	ldr	r1, [pc, #40]	; (d44e8 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ5setupEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x9c>)
   d44c0:	233c      	movs	r3, #60	; 0x3c
   d44c2:	aa0a      	add	r2, sp, #40	; 0x28
   d44c4:	47a0      	blx	r4
                Log.info(dataStr);          // Visibility to the payload in the webhook
   d44c6:	4809      	ldr	r0, [pc, #36]	; (d44ec <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ5setupEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xa0>)
   d44c8:	a90a      	add	r1, sp, #40	; 0x28
   d44ca:	f7ff ff16 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
      }
   d44ce:	2000      	movs	r0, #0
   d44d0:	b00e      	add	sp, #56	; 0x38
   d44d2:	bd10      	pop	{r4, pc}
   d44d4:	000d42a1 	.word	0x000d42a1
   d44d8:	000d4127 	.word	0x000d4127
   d44dc:	2003e420 	.word	0x2003e420
   d44e0:	000e21aa 	.word	0x000e21aa
   d44e4:	2003e3fc 	.word	0x2003e3fc
   d44e8:	000e21b3 	.word	0x000e21b3
   d44ec:	2003e578 	.word	0x2003e578

000d44f0 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   d44f0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d44f2:	2300      	movs	r3, #0
   d44f4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d44f6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d44f8:	4604      	mov	r4, r0
   d44fa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d44fc:	b12b      	cbz	r3, d450a <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d44fe:	2202      	movs	r2, #2
   d4500:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4502:	68eb      	ldr	r3, [r5, #12]
   d4504:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4506:	68ab      	ldr	r3, [r5, #8]
   d4508:	60a3      	str	r3, [r4, #8]
    }
   d450a:	4620      	mov	r0, r4
   d450c:	bd38      	pop	{r3, r4, r5, pc}

000d450e <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   d450e:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4510:	2300      	movs	r3, #0
   d4512:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4514:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4516:	4604      	mov	r4, r0
   d4518:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d451a:	b12b      	cbz	r3, d4528 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d451c:	2202      	movs	r2, #2
   d451e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4520:	68eb      	ldr	r3, [r5, #12]
   d4522:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4524:	68ab      	ldr	r3, [r5, #8]
   d4526:	60a3      	str	r3, [r4, #8]
    }
   d4528:	4620      	mov	r0, r4
   d452a:	bd38      	pop	{r3, r4, r5, pc}

000d452c <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   d452c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d452e:	2300      	movs	r3, #0
   d4530:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4532:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4534:	4604      	mov	r4, r0
   d4536:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4538:	b12b      	cbz	r3, d4546 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d453a:	2202      	movs	r2, #2
   d453c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d453e:	68eb      	ldr	r3, [r5, #12]
   d4540:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4542:	68ab      	ldr	r3, [r5, #8]
   d4544:	60a3      	str	r3, [r4, #8]
    }
   d4546:	4620      	mov	r0, r4
   d4548:	bd38      	pop	{r3, r4, r5, pc}

000d454a <_ZNSt8functionIFbiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d454a:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d454c:	2300      	movs	r3, #0
   d454e:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4550:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4552:	4604      	mov	r4, r0
   d4554:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4556:	b12b      	cbz	r3, d4564 <_ZNSt8functionIFbiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4558:	2202      	movs	r2, #2
   d455a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d455c:	68eb      	ldr	r3, [r5, #12]
   d455e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4560:	68ab      	ldr	r3, [r5, #8]
   d4562:	60a3      	str	r3, [r4, #8]
    }
   d4564:	4620      	mov	r0, r4
   d4566:	bd38      	pop	{r3, r4, r5, pc}

000d4568 <_ZNSt8functionIFbbEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d4568:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d456a:	2300      	movs	r3, #0
   d456c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d456e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4570:	4604      	mov	r4, r0
   d4572:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4574:	b12b      	cbz	r3, d4582 <_ZNSt8functionIFbbEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4576:	2202      	movs	r2, #2
   d4578:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d457a:	68eb      	ldr	r3, [r5, #12]
   d457c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d457e:	68ab      	ldr	r3, [r5, #8]
   d4580:	60a3      	str	r3, [r4, #8]
    }
   d4582:	4620      	mov	r0, r4
   d4584:	bd38      	pop	{r3, r4, r5, pc}

000d4586 <_ZNSt8functionIFbmEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d4586:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4588:	2300      	movs	r3, #0
   d458a:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d458c:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d458e:	4604      	mov	r4, r0
   d4590:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4592:	b12b      	cbz	r3, d45a0 <_ZNSt8functionIFbmEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4594:	2202      	movs	r2, #2
   d4596:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4598:	68eb      	ldr	r3, [r5, #12]
   d459a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d459c:	68ab      	ldr	r3, [r5, #8]
   d459e:	60a3      	str	r3, [r4, #8]
    }
   d45a0:	4620      	mov	r0, r4
   d45a2:	bd38      	pop	{r3, r4, r5, pc}

000d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d45a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (n > 0) {
   d45a8:	f1b1 0800 	subs.w	r8, r1, #0
    bool realloc(int n) {
   d45ac:	4607      	mov	r7, r0
        if (n > 0) {
   d45ae:	dd35      	ble.n	d461c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x78>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d45b0:	f04f 0914 	mov.w	r9, #20
    return ::malloc(size);
   d45b4:	fb09 f008 	mul.w	r0, r9, r8
   d45b8:	f007 ff04 	bl	dc3c4 <malloc>
            if (!d) {
   d45bc:	4605      	mov	r5, r0
   d45be:	b3a8      	cbz	r0, d462c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x88>
            move(d, data_, data_ + size_);
   d45c0:	e9d7 4600 	ldrd	r4, r6, [r7]
        if (dest > p && dest < end) {
   d45c4:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   d45c6:	fb09 4606 	mla	r6, r9, r6, r4
        if (dest > p && dest < end) {
   d45ca:	d215      	bcs.n	d45f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
   d45cc:	4286      	cmp	r6, r0
   d45ce:	d914      	bls.n	d45fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
            --end;
   d45d0:	3e14      	subs	r6, #20
            dest += end - p - 1;
   d45d2:	f1a4 0914 	sub.w	r9, r4, #20
   d45d6:	1b34      	subs	r4, r6, r4
   d45d8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d45da:	45b1      	cmp	r9, r6
   d45dc:	d01f      	beq.n	d461e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
                new(dest) T(std::move(*end));
   d45de:	b12c      	cbz	r4, d45ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x48>
   d45e0:	4631      	mov	r1, r6
   d45e2:	4620      	mov	r0, r4
   d45e4:	f00a f9bc 	bl	de960 <_ZN6StringC1EOS_>
   d45e8:	7c33      	ldrb	r3, [r6, #16]
   d45ea:	7423      	strb	r3, [r4, #16]
   d45ec:	4630      	mov	r0, r6
   d45ee:	f00a f93b 	bl	de868 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d45f2:	3e14      	subs	r6, #20
   d45f4:	3c14      	subs	r4, #20
   d45f6:	e7f0      	b.n	d45da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x36>
        } else if (dest != p) {
   d45f8:	d011      	beq.n	d461e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
   d45fa:	46a9      	mov	r9, r5
            for (; p != end; ++p, ++dest) {
   d45fc:	42a6      	cmp	r6, r4
   d45fe:	d00e      	beq.n	d461e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
   d4600:	4621      	mov	r1, r4
   d4602:	4648      	mov	r0, r9
   d4604:	f00a f9ac 	bl	de960 <_ZN6StringC1EOS_>
   d4608:	7c23      	ldrb	r3, [r4, #16]
   d460a:	f889 3010 	strb.w	r3, [r9, #16]
   d460e:	4620      	mov	r0, r4
   d4610:	f00a f92a 	bl	de868 <_ZN6StringD1Ev>
   d4614:	3414      	adds	r4, #20
   d4616:	f109 0914 	add.w	r9, r9, #20
   d461a:	e7ef      	b.n	d45fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x58>
        T* d = nullptr;
   d461c:	2500      	movs	r5, #0
    ::free(ptr);
   d461e:	6838      	ldr	r0, [r7, #0]
   d4620:	f007 fed8 	bl	dc3d4 <free>
        data_ = d;
   d4624:	603d      	str	r5, [r7, #0]
        capacity_ = n;
   d4626:	f8c7 8008 	str.w	r8, [r7, #8]
        return true;
   d462a:	2001      	movs	r0, #1
    }
   d462c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4634:	2300      	movs	r3, #0
   d4636:	e9c0 3300 	strd	r3, r3, [r0]
   d463a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d463c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d463e:	6849      	ldr	r1, [r1, #4]
   d4640:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4642:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4644:	dd17      	ble.n	d4676 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
   d4646:	f7ff ffad 	bl	d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d464a:	b1a0      	cbz	r0, d4676 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d464c:	e9d5 6300 	ldrd	r6, r3, [r5]
   d4650:	f04f 0814 	mov.w	r8, #20
   d4654:	6827      	ldr	r7, [r4, #0]
   d4656:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   d465a:	45b0      	cmp	r8, r6
   d465c:	d009      	beq.n	d4672 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
   d465e:	b12f      	cbz	r7, d466c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
   d4660:	4631      	mov	r1, r6
   d4662:	4638      	mov	r0, r7
   d4664:	f00a f996 	bl	de994 <_ZN6StringC1ERKS_>
   d4668:	7c33      	ldrb	r3, [r6, #16]
   d466a:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
   d466c:	3614      	adds	r6, #20
   d466e:	3714      	adds	r7, #20
   d4670:	e7f3      	b.n	d465a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
   d4672:	686b      	ldr	r3, [r5, #4]
   d4674:	6063      	str	r3, [r4, #4]
}
   d4676:	4620      	mov	r0, r4
   d4678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d467c:	b513      	push	{r0, r1, r4, lr}
   d467e:	460b      	mov	r3, r1
   d4680:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4682:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4686:	466c      	mov	r4, sp
   d4688:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d468c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4690:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4694:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4698:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d469c:	b002      	add	sp, #8
   d469e:	bd10      	pop	{r4, pc}

000d46a0 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d46a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d46a4:	4607      	mov	r7, r0
   d46a6:	4688      	mov	r8, r1
   d46a8:	4616      	mov	r6, r2
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
   d46aa:	4615      	mov	r5, r2
   d46ac:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d46ae:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d46b2:	4544      	cmp	r4, r8
   d46b4:	d014      	beq.n	d46e0 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d46b6:	b16d      	cbz	r5, d46d4 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   d46b8:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d46bc:	4629      	mov	r1, r5
   d46be:	4620      	mov	r0, r4
   d46c0:	f7ff ffdc 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d46c4:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d46c6:	68aa      	ldr	r2, [r5, #8]
   d46c8:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d46ca:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d46cc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d46ce:	68ea      	ldr	r2, [r5, #12]
   d46d0:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d46d2:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d46d4:	4620      	mov	r0, r4
   d46d6:	f7ff fe07 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d46da:	3410      	adds	r4, #16
   d46dc:	3510      	adds	r5, #16
   d46de:	e7e8      	b.n	d46b2 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
   d46e0:	1be0      	subs	r0, r4, r7
    }
   d46e2:	4430      	add	r0, r6
   d46e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d46e8 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d46e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d46ec:	4607      	mov	r7, r0
   d46ee:	4688      	mov	r8, r1
   d46f0:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d46f2:	4615      	mov	r5, r2
   d46f4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d46f6:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d46fa:	4544      	cmp	r4, r8
   d46fc:	d014      	beq.n	d4728 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x40>
   d46fe:	b16d      	cbz	r5, d471c <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x34>
   d4700:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4704:	4629      	mov	r1, r5
   d4706:	4620      	mov	r0, r4
   d4708:	f7ff ffb8 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d470c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d470e:	68aa      	ldr	r2, [r5, #8]
   d4710:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4712:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4714:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4716:	68ea      	ldr	r2, [r5, #12]
   d4718:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d471a:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d471c:	4620      	mov	r0, r4
   d471e:	f7ff fde3 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d4722:	3410      	adds	r4, #16
   d4724:	3510      	adds	r5, #16
   d4726:	e7e8      	b.n	d46fa <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x12>
      return __cur;
   d4728:	1be0      	subs	r0, r4, r7
    }
   d472a:	4430      	add	r0, r6
   d472c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4730 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4734:	4607      	mov	r7, r0
   d4736:	4688      	mov	r8, r1
   d4738:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d473a:	4615      	mov	r5, r2
   d473c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d473e:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4742:	4544      	cmp	r4, r8
   d4744:	d014      	beq.n	d4770 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x40>
   d4746:	b16d      	cbz	r5, d4764 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x34>
   d4748:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d474c:	4629      	mov	r1, r5
   d474e:	4620      	mov	r0, r4
   d4750:	f7ff ff94 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4754:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4756:	68aa      	ldr	r2, [r5, #8]
   d4758:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d475a:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d475c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d475e:	68ea      	ldr	r2, [r5, #12]
   d4760:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4762:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4764:	4620      	mov	r0, r4
   d4766:	f7ff fdbf 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d476a:	3410      	adds	r4, #16
   d476c:	3510      	adds	r5, #16
   d476e:	e7e8      	b.n	d4742 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x12>
      return __cur;
   d4770:	1be0      	subs	r0, r4, r7
    }
   d4772:	4430      	add	r0, r6
   d4774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4778 <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d477c:	4607      	mov	r7, r0
   d477e:	4688      	mov	r8, r1
   d4780:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4782:	4615      	mov	r5, r2
   d4784:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4786:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d478a:	4544      	cmp	r4, r8
   d478c:	d014      	beq.n	d47b8 <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
   d478e:	b16d      	cbz	r5, d47ac <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   d4790:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4794:	4629      	mov	r1, r5
   d4796:	4620      	mov	r0, r4
   d4798:	f7ff ff70 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d479c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d479e:	68aa      	ldr	r2, [r5, #8]
   d47a0:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d47a2:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d47a4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d47a6:	68ea      	ldr	r2, [r5, #12]
   d47a8:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d47aa:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d47ac:	4620      	mov	r0, r4
   d47ae:	f7ff fd9b 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d47b2:	3410      	adds	r4, #16
   d47b4:	3510      	adds	r5, #16
   d47b6:	e7e8      	b.n	d478a <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   d47b8:	1be0      	subs	r0, r4, r7
    }
   d47ba:	4430      	add	r0, r6
   d47bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d47c0 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d47c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d47c4:	4607      	mov	r7, r0
   d47c6:	4688      	mov	r8, r1
   d47c8:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d47ca:	4615      	mov	r5, r2
   d47cc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d47ce:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d47d2:	4544      	cmp	r4, r8
   d47d4:	d014      	beq.n	d4800 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
   d47d6:	b16d      	cbz	r5, d47f4 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   d47d8:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d47dc:	4629      	mov	r1, r5
   d47de:	4620      	mov	r0, r4
   d47e0:	f7ff ff4c 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d47e4:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d47e6:	68aa      	ldr	r2, [r5, #8]
   d47e8:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d47ea:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d47ec:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d47ee:	68ea      	ldr	r2, [r5, #12]
   d47f0:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d47f2:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d47f4:	4620      	mov	r0, r4
   d47f6:	f7ff fd77 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d47fa:	3410      	adds	r4, #16
   d47fc:	3510      	adds	r5, #16
   d47fe:	e7e8      	b.n	d47d2 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   d4800:	1be0      	subs	r0, r4, r7
    }
   d4802:	4430      	add	r0, r6
   d4804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4808 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d480c:	4607      	mov	r7, r0
   d480e:	4688      	mov	r8, r1
   d4810:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4812:	4615      	mov	r5, r2
   d4814:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4816:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d481a:	4544      	cmp	r4, r8
   d481c:	d014      	beq.n	d4848 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x40>
   d481e:	b16d      	cbz	r5, d483c <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x34>
   d4820:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4824:	4629      	mov	r1, r5
   d4826:	4620      	mov	r0, r4
   d4828:	f7ff ff28 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d482c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d482e:	68aa      	ldr	r2, [r5, #8]
   d4830:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4832:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4834:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4836:	68ea      	ldr	r2, [r5, #12]
   d4838:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d483a:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d483c:	4620      	mov	r0, r4
   d483e:	f7ff fd53 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d4842:	3410      	adds	r4, #16
   d4844:	3510      	adds	r5, #16
   d4846:	e7e8      	b.n	d481a <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x12>
      return __cur;
   d4848:	1be0      	subs	r0, r4, r7
    }
   d484a:	4430      	add	r0, r6
   d484c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4850 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d4850:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4854:	e9d0 7900 	ldrd	r7, r9, [r0]
   d4858:	4688      	mov	r8, r1

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d485a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d485e:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4860:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d4864:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d4868:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d486a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d486e:	d102      	bne.n	d4876 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d4870:	481a      	ldr	r0, [pc, #104]	; (d48dc <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
   d4872:	f00a fe00 	bl	df476 <_ZSt20__throw_length_errorPKc>
   d4876:	2c01      	cmp	r4, #1
   d4878:	4622      	mov	r2, r4
   d487a:	bf38      	it	cc
   d487c:	2201      	movcc	r2, #1
   d487e:	18a4      	adds	r4, r4, r2
   d4880:	eba8 0a07 	sub.w	sl, r8, r7

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4884:	d228      	bcs.n	d48d8 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4886:	b14c      	cbz	r4, d489c <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4c>
   d4888:	429c      	cmp	r4, r3
   d488a:	bf28      	it	cs
   d488c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d488e:	0120      	lsls	r0, r4, #4
   d4890:	9101      	str	r1, [sp, #4]
   d4892:	f7ff fc00 	bl	d4096 <_Znwj>
   d4896:	9901      	ldr	r1, [sp, #4]
   d4898:	4605      	mov	r5, r0
   d489a:	e000      	b.n	d489e <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4e>
   d489c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d489e:	eb15 000a 	adds.w	r0, r5, sl
   d48a2:	d001      	beq.n	d48a8 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x58>
   d48a4:	f7ff fe24 	bl	d44f0 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
   d48a8:	4641      	mov	r1, r8
   d48aa:	462a      	mov	r2, r5
   d48ac:	4638      	mov	r0, r7
   d48ae:	f7ff ff3f 	bl	d4730 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d48b2:	4649      	mov	r1, r9
   d48b4:	f100 0210 	add.w	r2, r0, #16
   d48b8:	4640      	mov	r0, r8
   d48ba:	f7ff ff39 	bl	d4730 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d48be:	4680      	mov	r8, r0
	if (__p)
   d48c0:	b117      	cbz	r7, d48c8 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x78>
	::operator delete(__p);
   d48c2:	4638      	mov	r0, r7
   d48c4:	f7ff fbeb 	bl	d409e <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d48c8:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d48cc:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d48d0:	60b4      	str	r4, [r6, #8]
    }
   d48d2:	b002      	add	sp, #8
   d48d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d48d8:	461c      	mov	r4, r3
   d48da:	e7d8      	b.n	d488e <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3e>
   d48dc:	000e21b8 	.word	0x000e21b8

000d48e0 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE9push_backERKS5_>:
      push_back(const value_type& __x)
   d48e0:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d48e2:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d48e6:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d48e8:	4604      	mov	r4, r0
   d48ea:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d48ec:	d007      	beq.n	d48fe <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE9push_backERKS5_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d48ee:	b113      	cbz	r3, d48f6 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE9push_backERKS5_+0x16>
   d48f0:	4618      	mov	r0, r3
   d48f2:	f7ff fdfd 	bl	d44f0 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   d48f6:	6863      	ldr	r3, [r4, #4]
   d48f8:	3310      	adds	r3, #16
   d48fa:	6063      	str	r3, [r4, #4]
      }
   d48fc:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d48fe:	4619      	mov	r1, r3
   d4900:	f7ff ffa6 	bl	d4850 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
   d4904:	e7fa      	b.n	d48fc <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE9push_backERKS5_+0x1c>
	...

000d4908 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d4908:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d490c:	e9d0 7900 	ldrd	r7, r9, [r0]
   d4910:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d4912:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d4916:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4918:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d491c:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d4920:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4922:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d4926:	d102      	bne.n	d492e <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d4928:	481a      	ldr	r0, [pc, #104]	; (d4994 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
   d492a:	f00a fda4 	bl	df476 <_ZSt20__throw_length_errorPKc>
   d492e:	2c01      	cmp	r4, #1
   d4930:	4622      	mov	r2, r4
   d4932:	bf38      	it	cc
   d4934:	2201      	movcc	r2, #1
   d4936:	18a4      	adds	r4, r4, r2
   d4938:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d493c:	d228      	bcs.n	d4990 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d493e:	b14c      	cbz	r4, d4954 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4c>
   d4940:	429c      	cmp	r4, r3
   d4942:	bf28      	it	cs
   d4944:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4946:	0120      	lsls	r0, r4, #4
   d4948:	9101      	str	r1, [sp, #4]
   d494a:	f7ff fba4 	bl	d4096 <_Znwj>
   d494e:	9901      	ldr	r1, [sp, #4]
   d4950:	4605      	mov	r5, r0
   d4952:	e000      	b.n	d4956 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4e>
   d4954:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4956:	eb15 000a 	adds.w	r0, r5, sl
   d495a:	d001      	beq.n	d4960 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x58>
   d495c:	f7ff fdd7 	bl	d450e <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>
   d4960:	4641      	mov	r1, r8
   d4962:	462a      	mov	r2, r5
   d4964:	4638      	mov	r0, r7
   d4966:	f7ff ff4f 	bl	d4808 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d496a:	4649      	mov	r1, r9
   d496c:	f100 0210 	add.w	r2, r0, #16
   d4970:	4640      	mov	r0, r8
   d4972:	f7ff ff49 	bl	d4808 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d4976:	4680      	mov	r8, r0
	if (__p)
   d4978:	b117      	cbz	r7, d4980 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x78>
	::operator delete(__p);
   d497a:	4638      	mov	r0, r7
   d497c:	f7ff fb8f 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4980:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d4984:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4988:	60b4      	str	r4, [r6, #8]
    }
   d498a:	b002      	add	sp, #8
   d498c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4990:	461c      	mov	r4, r3
   d4992:	e7d8      	b.n	d4946 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3e>
   d4994:	000e21b8 	.word	0x000e21b8

000d4998 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d4998:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d499c:	e9d0 7900 	ldrd	r7, r9, [r0]
   d49a0:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d49a2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d49a6:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d49a8:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d49ac:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d49b0:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d49b2:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d49b6:	d102      	bne.n	d49be <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d49b8:	481a      	ldr	r0, [pc, #104]	; (d4a24 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
   d49ba:	f00a fd5c 	bl	df476 <_ZSt20__throw_length_errorPKc>
   d49be:	2c01      	cmp	r4, #1
   d49c0:	4622      	mov	r2, r4
   d49c2:	bf38      	it	cc
   d49c4:	2201      	movcc	r2, #1
   d49c6:	18a4      	adds	r4, r4, r2
   d49c8:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d49cc:	d228      	bcs.n	d4a20 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d49ce:	b14c      	cbz	r4, d49e4 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4c>
   d49d0:	429c      	cmp	r4, r3
   d49d2:	bf28      	it	cs
   d49d4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d49d6:	0120      	lsls	r0, r4, #4
   d49d8:	9101      	str	r1, [sp, #4]
   d49da:	f7ff fb5c 	bl	d4096 <_Znwj>
   d49de:	9901      	ldr	r1, [sp, #4]
   d49e0:	4605      	mov	r5, r0
   d49e2:	e000      	b.n	d49e6 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4e>
   d49e4:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d49e6:	eb15 000a 	adds.w	r0, r5, sl
   d49ea:	d001      	beq.n	d49f0 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x58>
   d49ec:	f7ff fd9e 	bl	d452c <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
   d49f0:	4641      	mov	r1, r8
   d49f2:	462a      	mov	r2, r5
   d49f4:	4638      	mov	r0, r7
   d49f6:	f7ff fe77 	bl	d46e8 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d49fa:	4649      	mov	r1, r9
   d49fc:	f100 0210 	add.w	r2, r0, #16
   d4a00:	4640      	mov	r0, r8
   d4a02:	f7ff fe71 	bl	d46e8 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d4a06:	4680      	mov	r8, r0
	if (__p)
   d4a08:	b117      	cbz	r7, d4a10 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x78>
	::operator delete(__p);
   d4a0a:	4638      	mov	r0, r7
   d4a0c:	f7ff fb47 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4a10:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d4a14:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4a18:	60b4      	str	r4, [r6, #8]
    }
   d4a1a:	b002      	add	sp, #8
   d4a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4a20:	461c      	mov	r4, r3
   d4a22:	e7d8      	b.n	d49d6 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3e>
   d4a24:	000e21b8 	.word	0x000e21b8

000d4a28 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d4a28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4a2c:	e9d0 7900 	ldrd	r7, r9, [r0]
   d4a30:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d4a32:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d4a36:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4a38:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d4a3c:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d4a40:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4a42:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d4a46:	d102      	bne.n	d4a4e <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d4a48:	481a      	ldr	r0, [pc, #104]	; (d4ab4 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   d4a4a:	f00a fd14 	bl	df476 <_ZSt20__throw_length_errorPKc>
   d4a4e:	2c01      	cmp	r4, #1
   d4a50:	4622      	mov	r2, r4
   d4a52:	bf38      	it	cc
   d4a54:	2201      	movcc	r2, #1
   d4a56:	18a4      	adds	r4, r4, r2
   d4a58:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4a5c:	d228      	bcs.n	d4ab0 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4a5e:	b14c      	cbz	r4, d4a74 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   d4a60:	429c      	cmp	r4, r3
   d4a62:	bf28      	it	cs
   d4a64:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4a66:	0120      	lsls	r0, r4, #4
   d4a68:	9101      	str	r1, [sp, #4]
   d4a6a:	f7ff fb14 	bl	d4096 <_Znwj>
   d4a6e:	9901      	ldr	r1, [sp, #4]
   d4a70:	4605      	mov	r5, r0
   d4a72:	e000      	b.n	d4a76 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   d4a74:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4a76:	eb15 000a 	adds.w	r0, r5, sl
   d4a7a:	d001      	beq.n	d4a80 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   d4a7c:	f7ff fd65 	bl	d454a <_ZNSt8functionIFbiEEC1ERKS1_>
   d4a80:	4641      	mov	r1, r8
   d4a82:	462a      	mov	r2, r5
   d4a84:	4638      	mov	r0, r7
   d4a86:	f7ff fe9b 	bl	d47c0 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d4a8a:	4649      	mov	r1, r9
   d4a8c:	f100 0210 	add.w	r2, r0, #16
   d4a90:	4640      	mov	r0, r8
   d4a92:	f7ff fe95 	bl	d47c0 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d4a96:	4680      	mov	r8, r0
	if (__p)
   d4a98:	b117      	cbz	r7, d4aa0 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   d4a9a:	4638      	mov	r0, r7
   d4a9c:	f7ff faff 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4aa0:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d4aa4:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4aa8:	60b4      	str	r4, [r6, #8]
    }
   d4aaa:	b002      	add	sp, #8
   d4aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4ab0:	461c      	mov	r4, r3
   d4ab2:	e7d8      	b.n	d4a66 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   d4ab4:	000e21b8 	.word	0x000e21b8

000d4ab8 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d4ab8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4abc:	e9d0 7900 	ldrd	r7, r9, [r0]
   d4ac0:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d4ac2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d4ac6:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4ac8:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d4acc:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d4ad0:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4ad2:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d4ad6:	d102      	bne.n	d4ade <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d4ad8:	481a      	ldr	r0, [pc, #104]	; (d4b44 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   d4ada:	f00a fccc 	bl	df476 <_ZSt20__throw_length_errorPKc>
   d4ade:	2c01      	cmp	r4, #1
   d4ae0:	4622      	mov	r2, r4
   d4ae2:	bf38      	it	cc
   d4ae4:	2201      	movcc	r2, #1
   d4ae6:	18a4      	adds	r4, r4, r2
   d4ae8:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4aec:	d228      	bcs.n	d4b40 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4aee:	b14c      	cbz	r4, d4b04 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   d4af0:	429c      	cmp	r4, r3
   d4af2:	bf28      	it	cs
   d4af4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4af6:	0120      	lsls	r0, r4, #4
   d4af8:	9101      	str	r1, [sp, #4]
   d4afa:	f7ff facc 	bl	d4096 <_Znwj>
   d4afe:	9901      	ldr	r1, [sp, #4]
   d4b00:	4605      	mov	r5, r0
   d4b02:	e000      	b.n	d4b06 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   d4b04:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4b06:	eb15 000a 	adds.w	r0, r5, sl
   d4b0a:	d001      	beq.n	d4b10 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   d4b0c:	f7ff fd2c 	bl	d4568 <_ZNSt8functionIFbbEEC1ERKS1_>
   d4b10:	4641      	mov	r1, r8
   d4b12:	462a      	mov	r2, r5
   d4b14:	4638      	mov	r0, r7
   d4b16:	f7ff fe2f 	bl	d4778 <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d4b1a:	4649      	mov	r1, r9
   d4b1c:	f100 0210 	add.w	r2, r0, #16
   d4b20:	4640      	mov	r0, r8
   d4b22:	f7ff fe29 	bl	d4778 <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d4b26:	4680      	mov	r8, r0
	if (__p)
   d4b28:	b117      	cbz	r7, d4b30 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   d4b2a:	4638      	mov	r0, r7
   d4b2c:	f7ff fab7 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4b30:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d4b34:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4b38:	60b4      	str	r4, [r6, #8]
    }
   d4b3a:	b002      	add	sp, #8
   d4b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4b40:	461c      	mov	r4, r3
   d4b42:	e7d8      	b.n	d4af6 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   d4b44:	000e21b8 	.word	0x000e21b8

000d4b48 <_ZN11SleepHelper14withAB1805_WDTER6AB1805>:
    SleepHelper &withAB1805_WDT(AB1805 &ab1805) {
   d4b48:	b530      	push	{r4, r5, lr}
   d4b4a:	b089      	sub	sp, #36	; 0x24
	    _M_invoker = &_My_handler::_M_invoke;
   d4b4c:	4b1e      	ldr	r3, [pc, #120]	; (d4bc8 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x80>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4b4e:	9100      	str	r1, [sp, #0]
   d4b50:	4604      	mov	r4, r0
   d4b52:	460d      	mov	r5, r1
	    _M_invoker = &_My_handler::_M_invoke;
   d4b54:	9303      	str	r3, [sp, #12]
        wakeFunctions.add(fn); 
   d4b56:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   d4b58:	4b1c      	ldr	r3, [pc, #112]	; (d4bcc <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x84>)
   d4b5a:	9302      	str	r3, [sp, #8]
   d4b5c:	a804      	add	r0, sp, #16
   d4b5e:	f7ff fcc7 	bl	d44f0 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
            callbackFunctions.push_back(callback);
   d4b62:	a904      	add	r1, sp, #16
   d4b64:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
   d4b68:	f7ff feba 	bl	d48e0 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE9push_backERKS5_>
    class function<_Res(_ArgTypes...)>
   d4b6c:	a804      	add	r0, sp, #16
   d4b6e:	f7ff fbbb 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d4b72:	4668      	mov	r0, sp
   d4b74:	f7ff fbb8 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   d4b78:	4b15      	ldr	r3, [pc, #84]	; (d4bd0 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x88>)
   d4b7a:	9303      	str	r3, [sp, #12]
        sleepOrResetFunctions.add(fn); 
   d4b7c:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   d4b7e:	4b15      	ldr	r3, [pc, #84]	; (d4bd4 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x8c>)
   d4b80:	9302      	str	r3, [sp, #8]
   d4b82:	a804      	add	r0, sp, #16
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4b84:	9500      	str	r5, [sp, #0]
   d4b86:	f7ff fcef 	bl	d4568 <_ZNSt8functionIFbbEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4b8a:	f8d4 06fc 	ldr.w	r0, [r4, #1788]	; 0x6fc
   d4b8e:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
   d4b92:	4298      	cmp	r0, r3
   d4b94:	d011      	beq.n	d4bba <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x72>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4b96:	b110      	cbz	r0, d4b9e <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x56>
   d4b98:	a904      	add	r1, sp, #16
   d4b9a:	f7ff fce5 	bl	d4568 <_ZNSt8functionIFbbEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   d4b9e:	f8d4 36fc 	ldr.w	r3, [r4, #1788]	; 0x6fc
   d4ba2:	3310      	adds	r3, #16
   d4ba4:	f8c4 36fc 	str.w	r3, [r4, #1788]	; 0x6fc
    class function<_Res(_ArgTypes...)>
   d4ba8:	a804      	add	r0, sp, #16
   d4baa:	f7ff fb9d 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d4bae:	4668      	mov	r0, sp
   d4bb0:	f7ff fb9a 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
    }
   d4bb4:	4620      	mov	r0, r4
   d4bb6:	b009      	add	sp, #36	; 0x24
   d4bb8:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d4bba:	4601      	mov	r1, r0
   d4bbc:	aa04      	add	r2, sp, #16
   d4bbe:	f504 60df 	add.w	r0, r4, #1784	; 0x6f8
   d4bc2:	f7ff ff79 	bl	d4ab8 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   d4bc6:	e7ef      	b.n	d4ba8 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x60>
   d4bc8:	000d4153 	.word	0x000d4153
   d4bcc:	000d40ed 	.word	0x000d40ed
   d4bd0:	000d4145 	.word	0x000d4145
   d4bd4:	000d4105 	.word	0x000d4105

000d4bd8 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d4bd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4bdc:	e9d0 7900 	ldrd	r7, r9, [r0]
   d4be0:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d4be2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d4be6:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4be8:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d4bec:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d4bf0:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4bf2:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d4bf6:	d102      	bne.n	d4bfe <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d4bf8:	481a      	ldr	r0, [pc, #104]	; (d4c64 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   d4bfa:	f00a fc3c 	bl	df476 <_ZSt20__throw_length_errorPKc>
   d4bfe:	2c01      	cmp	r4, #1
   d4c00:	4622      	mov	r2, r4
   d4c02:	bf38      	it	cc
   d4c04:	2201      	movcc	r2, #1
   d4c06:	18a4      	adds	r4, r4, r2
   d4c08:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4c0c:	d228      	bcs.n	d4c60 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4c0e:	b14c      	cbz	r4, d4c24 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   d4c10:	429c      	cmp	r4, r3
   d4c12:	bf28      	it	cs
   d4c14:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4c16:	0120      	lsls	r0, r4, #4
   d4c18:	9101      	str	r1, [sp, #4]
   d4c1a:	f7ff fa3c 	bl	d4096 <_Znwj>
   d4c1e:	9901      	ldr	r1, [sp, #4]
   d4c20:	4605      	mov	r5, r0
   d4c22:	e000      	b.n	d4c26 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   d4c24:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4c26:	eb15 000a 	adds.w	r0, r5, sl
   d4c2a:	d001      	beq.n	d4c30 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   d4c2c:	f7ff fcab 	bl	d4586 <_ZNSt8functionIFbmEEC1ERKS1_>
   d4c30:	4641      	mov	r1, r8
   d4c32:	462a      	mov	r2, r5
   d4c34:	4638      	mov	r0, r7
   d4c36:	f7ff fd33 	bl	d46a0 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d4c3a:	4649      	mov	r1, r9
   d4c3c:	f100 0210 	add.w	r2, r0, #16
   d4c40:	4640      	mov	r0, r8
   d4c42:	f7ff fd2d 	bl	d46a0 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d4c46:	4680      	mov	r8, r0
	if (__p)
   d4c48:	b117      	cbz	r7, d4c50 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   d4c4a:	4638      	mov	r0, r7
   d4c4c:	f7ff fa27 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4c50:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d4c54:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4c58:	60b4      	str	r4, [r6, #8]
    }
   d4c5a:	b002      	add	sp, #8
   d4c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4c60:	461c      	mov	r4, r3
   d4c62:	e7d8      	b.n	d4c16 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   d4c64:	000e21b8 	.word	0x000e21b8

000d4c68 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d4c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4c6c:	e9d0 8a00 	ldrd	r8, sl, [r0]
   d4c70:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   d4c72:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4c76:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
   d4c7a:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   d4c7e:	4607      	mov	r7, r0
   d4c80:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4c82:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   d4c86:	d102      	bne.n	d4c8e <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d4c88:	4825      	ldr	r0, [pc, #148]	; (d4d20 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb8>)
   d4c8a:	f00a fbf4 	bl	df476 <_ZSt20__throw_length_errorPKc>
   d4c8e:	2c01      	cmp	r4, #1
   d4c90:	4622      	mov	r2, r4
   d4c92:	bf38      	it	cc
   d4c94:	2201      	movcc	r2, #1
   d4c96:	18a4      	adds	r4, r4, r2
   d4c98:	eba1 0608 	sub.w	r6, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4c9c:	d23d      	bcs.n	d4d1a <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4c9e:	b13c      	cbz	r4, d4cb0 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
   d4ca0:	429c      	cmp	r4, r3
   d4ca2:	bf28      	it	cs
   d4ca4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4ca6:	00e0      	lsls	r0, r4, #3
   d4ca8:	f7ff f9f5 	bl	d4096 <_Znwj>
   d4cac:	4605      	mov	r5, r0
   d4cae:	e000      	b.n	d4cb2 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x4a>
   d4cb0:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4cb2:	19ab      	adds	r3, r5, r6
   d4cb4:	bf1c      	itt	ne
   d4cb6:	e9db 0100 	ldrdne	r0, r1, [fp]
   d4cba:	e9c3 0100 	strdne	r0, r1, [r3]
   d4cbe:	2300      	movs	r3, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4cc0:	eb08 0203 	add.w	r2, r8, r3
   d4cc4:	4591      	cmp	r9, r2
   d4cc6:	d00a      	beq.n	d4cde <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x76>
   d4cc8:	eb15 0c03 	adds.w	ip, r5, r3
   d4ccc:	bf18      	it	ne
   d4cce:	e9d2 0100 	ldrdne	r0, r1, [r2]
   d4cd2:	f103 0308 	add.w	r3, r3, #8
   d4cd6:	bf18      	it	ne
   d4cd8:	e9cc 0100 	strdne	r0, r1, [ip]
   d4cdc:	e7f0      	b.n	d4cc0 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x58>
	      ++__new_finish;
   d4cde:	3608      	adds	r6, #8
   d4ce0:	442e      	add	r6, r5
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4ce2:	4632      	mov	r2, r6
   d4ce4:	464b      	mov	r3, r9
      for (; __first != __last; ++__first, (void)++__cur)
   d4ce6:	4553      	cmp	r3, sl
   d4ce8:	f102 0208 	add.w	r2, r2, #8
   d4cec:	d005      	beq.n	d4cfa <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x92>
   d4cee:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4cf2:	3308      	adds	r3, #8
   d4cf4:	e902 0003 	stmdb	r2, {r0, r1}
   d4cf8:	e7f5      	b.n	d4ce6 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7e>
   d4cfa:	eba3 0309 	sub.w	r3, r3, r9
   d4cfe:	441e      	add	r6, r3
	if (__p)
   d4d00:	f1b8 0f00 	cmp.w	r8, #0
   d4d04:	d002      	beq.n	d4d0c <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>
	::operator delete(__p);
   d4d06:	4640      	mov	r0, r8
   d4d08:	f7ff f9c9 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4d0c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   d4d10:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4d14:	60bc      	str	r4, [r7, #8]
    }
   d4d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4d1a:	461c      	mov	r4, r3
   d4d1c:	e7c3      	b.n	d4ca6 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
   d4d1e:	bf00      	nop
   d4d20:	000e21b8 	.word	0x000e21b8

000d4d24 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
   d4d24:	b510      	push	{r4, lr}
   d4d26:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4d28:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
   d4d2c:	428c      	cmp	r4, r1
      vector<_Tp, _Alloc>::
   d4d2e:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4d30:	d008      	beq.n	d4d44 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4d32:	b11c      	cbz	r4, d4d3c <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x18>
   d4d34:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4d38:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   d4d3c:	685a      	ldr	r2, [r3, #4]
   d4d3e:	3208      	adds	r2, #8
   d4d40:	605a      	str	r2, [r3, #4]
      }
   d4d42:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   d4d44:	4621      	mov	r1, r4
   d4d46:	f7ff ff8f 	bl	d4c68 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
   d4d4a:	e7fa      	b.n	d4d42 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x1e>

000d4d4c <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE>:
    SleepHelper &withPublishQueuePosixRK(std::chrono::milliseconds maxTimeToPublish = 0ms) {
   d4d4c:	b570      	push	{r4, r5, r6, lr}
   d4d4e:	b08a      	sub	sp, #40	; 0x28
   d4d50:	4604      	mov	r4, r0
   d4d52:	461d      	mov	r5, r3
	    _M_invoker = &_My_handler::_M_invoke;
   d4d54:	4b2f      	ldr	r3, [pc, #188]	; (d4e14 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0xc8>)
   d4d56:	9305      	str	r3, [sp, #20]
        wakeOrBootFunctions.add(fn); 
   d4d58:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d4d5a:	4b2f      	ldr	r3, [pc, #188]	; (d4e18 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0xcc>)
   d4d5c:	9304      	str	r3, [sp, #16]
   d4d5e:	a806      	add	r0, sp, #24
    SleepHelper &withPublishQueuePosixRK(std::chrono::milliseconds maxTimeToPublish = 0ms) {
   d4d60:	4616      	mov	r6, r2
        wakeOrBootFunctions.add(fn); 
   d4d62:	f7ff fbf2 	bl	d454a <_ZNSt8functionIFbiEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4d66:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
   d4d6a:	f8d4 36f4 	ldr.w	r3, [r4, #1780]	; 0x6f4
   d4d6e:	4298      	cmp	r0, r3
   d4d70:	d041      	beq.n	d4df6 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0xaa>
   d4d72:	b110      	cbz	r0, d4d7a <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x2e>
   d4d74:	a906      	add	r1, sp, #24
   d4d76:	f7ff fbe8 	bl	d454a <_ZNSt8functionIFbiEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   d4d7a:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
   d4d7e:	3310      	adds	r3, #16
   d4d80:	f8c4 36f0 	str.w	r3, [r4, #1776]	; 0x6f0
    class function<_Res(_ArgTypes...)>
   d4d84:	a806      	add	r0, sp, #24
   d4d86:	f7ff faaf 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d4d8a:	a802      	add	r0, sp, #8
   d4d8c:	f7ff faac 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
    _Function_base() : _M_manager(nullptr) { }
   d4d90:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d92:	2008      	movs	r0, #8
    _Function_base() : _M_manager(nullptr) { }
   d4d94:	9304      	str	r3, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d96:	f7ff f97e 	bl	d4096 <_Znwj>
   d4d9a:	b108      	cbz	r0, d4da0 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x54>
   d4d9c:	e9c0 6500 	strd	r6, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d4da0:	4b1e      	ldr	r3, [pc, #120]	; (d4e1c <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0xd0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4da2:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d4da4:	9305      	str	r3, [sp, #20]
        sleepReadyFunctions.add(fn); 
   d4da6:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d4da8:	4b1d      	ldr	r3, [pc, #116]	; (d4e20 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0xd4>)
   d4daa:	9304      	str	r3, [sp, #16]
   d4dac:	a806      	add	r0, sp, #24
   d4dae:	f7ff fbbd 	bl	d452c <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4db2:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
   d4db6:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
   d4dba:	4298      	cmp	r0, r3
   d4dbc:	d022      	beq.n	d4e04 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0xb8>
   d4dbe:	b110      	cbz	r0, d4dc6 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x7a>
   d4dc0:	a906      	add	r1, sp, #24
   d4dc2:	f7ff fbb3 	bl	d452c <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   d4dc6:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
   d4dca:	3310      	adds	r3, #16
   d4dcc:	f8c4 36cc 	str.w	r3, [r4, #1740]	; 0x6cc
    class AppCallbackState {
   d4dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4dd4:	2200      	movs	r2, #0
      { emplace_back(std::move(__x)); }
   d4dd6:	4669      	mov	r1, sp
   d4dd8:	f204 60d4 	addw	r0, r4, #1748	; 0x6d4
   d4ddc:	e9cd 3200 	strd	r3, r2, [sp]
   d4de0:	f7ff ffa0 	bl	d4d24 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
    class function<_Res(_ArgTypes...)>
   d4de4:	a806      	add	r0, sp, #24
   d4de6:	f7ff fa7f 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d4dea:	a802      	add	r0, sp, #8
   d4dec:	f7ff fa7c 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
            // This callback returns false when you can sleep, and true to stay awake, so reverse boolean
            return !canSleep;
        });

        return *this;
    }
   d4df0:	4620      	mov	r0, r4
   d4df2:	b00a      	add	sp, #40	; 0x28
   d4df4:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   d4df6:	4601      	mov	r1, r0
   d4df8:	aa06      	add	r2, sp, #24
   d4dfa:	f204 60ec 	addw	r0, r4, #1772	; 0x6ec
   d4dfe:	f7ff fe13 	bl	d4a28 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   d4e02:	e7bf      	b.n	d4d84 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x38>
   d4e04:	4601      	mov	r1, r0
   d4e06:	aa06      	add	r2, sp, #24
   d4e08:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
   d4e0c:	f7ff fdc4 	bl	d4998 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   d4e10:	e7de      	b.n	d4dd0 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x84>
   d4e12:	bf00      	nop
   d4e14:	000d41cf 	.word	0x000d41cf
   d4e18:	000d411d 	.word	0x000d411d
   d4e1c:	000d4171 	.word	0x000d4171
   d4e20:	000d421b 	.word	0x000d421b

000d4e24 <_GLOBAL__sub_I_logHandler>:
}
   d4e24:	b530      	push	{r4, r5, lr}
        val_(val) {
   d4e26:	4b47      	ldr	r3, [pc, #284]	; (d4f44 <_GLOBAL__sub_I_logHandler+0x120>)
        level_(level) {
   d4e28:	4947      	ldr	r1, [pc, #284]	; (d4f48 <_GLOBAL__sub_I_logHandler+0x124>)
   d4e2a:	b097      	sub	sp, #92	; 0x5c
   d4e2c:	2401      	movs	r4, #1
   d4e2e:	701c      	strb	r4, [r3, #0]
   d4e30:	a80c      	add	r0, sp, #48	; 0x30
   d4e32:	f009 fd64 	bl	de8fe <_ZN6StringC1EPKc>
   d4e36:	4945      	ldr	r1, [pc, #276]	; (d4f4c <_GLOBAL__sub_I_logHandler+0x128>)
   d4e38:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
   d4e3c:	a811      	add	r0, sp, #68	; 0x44
   d4e3e:	f009 fd5e 	bl	de8fe <_ZN6StringC1EPKc>
        capacity_(0) {
   d4e42:	2300      	movs	r3, #0
    if (n > 0 && realloc(n)) {
   d4e44:	2102      	movs	r1, #2
   d4e46:	4668      	mov	r0, sp
        capacity_(0) {
   d4e48:	e9cd 3300 	strd	r3, r3, [sp]
   d4e4c:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
   d4e50:	9302      	str	r3, [sp, #8]
    if (n > 0 && realloc(n)) {
   d4e52:	f7ff fba7 	bl	d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d4e56:	b198      	cbz	r0, d4e80 <_GLOBAL__sub_I_logHandler+0x5c>
        copy(data_, values.begin(), values.end());
   d4e58:	9c00      	ldr	r4, [sp, #0]
            new(dest) T(*p);
   d4e5a:	b134      	cbz	r4, d4e6a <_GLOBAL__sub_I_logHandler+0x46>
class LogCategoryFilter {
   d4e5c:	a90c      	add	r1, sp, #48	; 0x30
   d4e5e:	4620      	mov	r0, r4
   d4e60:	f009 fd98 	bl	de994 <_ZN6StringC1ERKS_>
   d4e64:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   d4e68:	7423      	strb	r3, [r4, #16]
   d4e6a:	a911      	add	r1, sp, #68	; 0x44
   d4e6c:	f104 0014 	add.w	r0, r4, #20
   d4e70:	f009 fd90 	bl	de994 <_ZN6StringC1ERKS_>
   d4e74:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d4e78:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        size_ = n;
   d4e7c:	2302      	movs	r3, #2
   d4e7e:	9301      	str	r3, [sp, #4]
            StreamLogHandler(Serial, level, filters) {
   d4e80:	f00a f958 	bl	df134 <_Z16_fetch_usbserialv>
   d4e84:	4669      	mov	r1, sp
   d4e86:	4605      	mov	r5, r0
   d4e88:	a803      	add	r0, sp, #12
        filter_(level, filters) {
   d4e8a:	4c31      	ldr	r4, [pc, #196]	; (d4f50 <_GLOBAL__sub_I_logHandler+0x12c>)
   d4e8c:	f7ff fbd0 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   d4e90:	a903      	add	r1, sp, #12
   d4e92:	a806      	add	r0, sp, #24
   d4e94:	f7ff fbcc 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4e98:	4b2e      	ldr	r3, [pc, #184]	; (d4f54 <_GLOBAL__sub_I_logHandler+0x130>)
   d4e9a:	6023      	str	r3, [r4, #0]
   d4e9c:	a906      	add	r1, sp, #24
   d4e9e:	a809      	add	r0, sp, #36	; 0x24
   d4ea0:	f7ff fbc6 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4ea4:	aa09      	add	r2, sp, #36	; 0x24
   d4ea6:	211e      	movs	r1, #30
   d4ea8:	1d20      	adds	r0, r4, #4
   d4eaa:	f009 f87c 	bl	ddfa6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4eae:	a809      	add	r0, sp, #36	; 0x24
   d4eb0:	f7ff fa7e 	bl	d43b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4eb4:	a806      	add	r0, sp, #24
   d4eb6:	f7ff fa7b 	bl	d43b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4eba:	4b27      	ldr	r3, [pc, #156]	; (d4f58 <_GLOBAL__sub_I_logHandler+0x134>)
   d4ebc:	6023      	str	r3, [r4, #0]
   d4ebe:	6225      	str	r5, [r4, #32]
   d4ec0:	a803      	add	r0, sp, #12
   d4ec2:	f7ff fa75 	bl	d43b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4ec6:	4b25      	ldr	r3, [pc, #148]	; (d4f5c <_GLOBAL__sub_I_logHandler+0x138>)
   d4ec8:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4eca:	f00a f933 	bl	df134 <_Z16_fetch_usbserialv>
   d4ece:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4ed2:	f00a f91f 	bl	df114 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4ed6:	f008 fd47 	bl	dd968 <_ZN5spark10LogManager8instanceEv>
   d4eda:	4621      	mov	r1, r4
   d4edc:	f008 fff5 	bl	ddeca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
});                        
   d4ee0:	4668      	mov	r0, sp
   d4ee2:	f7ff fa65 	bl	d43b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
class LogCategoryFilter {
   d4ee6:	a811      	add	r0, sp, #68	; 0x44
   d4ee8:	f009 fcbe 	bl	de868 <_ZN6StringD1Ev>
   d4eec:	a80c      	add	r0, sp, #48	; 0x30
   d4eee:	f009 fcbb 	bl	de868 <_ZN6StringD1Ev>
SYSTEM_THREAD(ENABLED);
   d4ef2:	2100      	movs	r1, #0
   d4ef4:	2001      	movs	r0, #1
   d4ef6:	f007 f96f 	bl	dc1d8 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4efa:	4b19      	ldr	r3, [pc, #100]	; (d4f60 <_GLOBAL__sub_I_logHandler+0x13c>)
    SleepResult() {}
   d4efc:	4a19      	ldr	r2, [pc, #100]	; (d4f64 <_GLOBAL__sub_I_logHandler+0x140>)
   d4efe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4f00:	2400      	movs	r4, #0
   d4f02:	601c      	str	r4, [r3, #0]
   d4f04:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d4f06:	719c      	strb	r4, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4f08:	2002      	movs	r0, #2
   d4f0a:	f007 f94d 	bl	dc1a8 <set_system_mode>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d4f0e:	2101      	movs	r1, #1
   d4f10:	2004      	movs	r0, #4
   d4f12:	f006 fef7 	bl	dbd04 <HAL_Feature_Set>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d4f16:	f00a fa81 	bl	df41c <_Z19__fetch_global_Wirev>
   d4f1a:	2269      	movs	r2, #105	; 0x69
   d4f1c:	4601      	mov	r1, r0
   d4f1e:	4812      	ldr	r0, [pc, #72]	; (d4f68 <_GLOBAL__sub_I_logHandler+0x144>)
   d4f20:	f000 faf2 	bl	d5508 <_ZN6AB1805C1ER7TwoWireh>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4f24:	f00a f9c8 	bl	df2b8 <spark_protocol_instance>
   d4f28:	4623      	mov	r3, r4
   d4f2a:	4622      	mov	r2, r4
   d4f2c:	210d      	movs	r1, #13
   d4f2e:	f00a f9cb 	bl	df2c8 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4f32:	f00a f9c1 	bl	df2b8 <spark_protocol_instance>
   d4f36:	4623      	mov	r3, r4
   d4f38:	4622      	mov	r2, r4
   d4f3a:	4621      	mov	r1, r4
   d4f3c:	f00a f9cc 	bl	df2d8 <spark_protocol_set_product_firmware_version>
}
   d4f40:	b017      	add	sp, #92	; 0x5c
   d4f42:	bd30      	pop	{r4, r5, pc}
   d4f44:	2003e3fc 	.word	0x2003e3fc
   d4f48:	000e21d2 	.word	0x000e21d2
   d4f4c:	000e21db 	.word	0x000e21db
   d4f50:	2003e440 	.word	0x2003e440
   d4f54:	000e2270 	.word	0x000e2270
   d4f58:	000e2dd4 	.word	0x000e2dd4
   d4f5c:	000e2288 	.word	0x000e2288
   d4f60:	2003e3f0 	.word	0x2003e3f0
   d4f64:	ffff0000 	.word	0xffff0000
   d4f68:	2003e400 	.word	0x2003e400

000d4f6c <setup>:
void setup() {
   d4f6c:	b530      	push	{r4, r5, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4f6e:	2300      	movs	r3, #0
   d4f70:	b0ad      	sub	sp, #180	; 0xb4
   d4f72:	4999      	ldr	r1, [pc, #612]	; (d51d8 <setup+0x26c>)
   d4f74:	4899      	ldr	r0, [pc, #612]	; (d51dc <setup+0x270>)
   d4f76:	2204      	movs	r2, #4
   d4f78:	f007 f974 	bl	dc264 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4f7c:	4a98      	ldr	r2, [pc, #608]	; (d51e0 <setup+0x274>)
   d4f7e:	4999      	ldr	r1, [pc, #612]	; (d51e4 <setup+0x278>)
   d4f80:	4899      	ldr	r0, [pc, #612]	; (d51e8 <setup+0x27c>)
   d4f82:	f007 fb5e 	bl	dc642 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4f86:	4a99      	ldr	r2, [pc, #612]	; (d51ec <setup+0x280>)
   d4f88:	4999      	ldr	r1, [pc, #612]	; (d51f0 <setup+0x284>)
   d4f8a:	4897      	ldr	r0, [pc, #604]	; (d51e8 <setup+0x27c>)
   d4f8c:	f007 fb59 	bl	dc642 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4f90:	4a98      	ldr	r2, [pc, #608]	; (d51f4 <setup+0x288>)
   d4f92:	4999      	ldr	r1, [pc, #612]	; (d51f8 <setup+0x28c>)
   d4f94:	4894      	ldr	r0, [pc, #592]	; (d51e8 <setup+0x27c>)
   d4f96:	f007 fb54 	bl	dc642 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        ab1805.setup();
   d4f9a:	4898      	ldr	r0, [pc, #608]	; (d51fc <setup+0x290>)
   d4f9c:	2101      	movs	r1, #1
   d4f9e:	f000 fe45 	bl	d5c2c <_ZN6AB18055setupEb>
        ab1805.resetConfig();
   d4fa2:	2100      	movs	r1, #0
   d4fa4:	4895      	ldr	r0, [pc, #596]	; (d51fc <setup+0x290>)
   d4fa6:	f000 fc23 	bl	d57f0 <_ZN6AB180511resetConfigEm>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d4faa:	217c      	movs	r1, #124	; 0x7c
   d4fac:	4893      	ldr	r0, [pc, #588]	; (d51fc <setup+0x290>)
   d4fae:	f000 fb9b 	bl	d56e8 <_ZN6AB18056setWDTEi>
	PublishQueuePosix::instance().setup();
   d4fb2:	f002 fe09 	bl	d7bc8 <_ZN17PublishQueuePosix8instanceEv>
   d4fb6:	f003 f815 	bl	d7fe4 <_ZN17PublishQueuePosix5setupEv>
    SleepHelper::instance()
   d4fba:	f004 fba9 	bl	d9710 <_ZN11SleepHelper8instanceEv>
        minimumCellularOffTimeMs = timeMs.count();
   d4fbe:	4b90      	ldr	r3, [pc, #576]	; (d5200 <setup+0x294>)
   d4fc0:	f8c0 37a0 	str.w	r3, [r0, #1952]	; 0x7a0
   d4fc4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4fc6:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4fc8:	2008      	movs	r0, #8
    _Function_base() : _M_manager(nullptr) { }
   d4fca:	930d      	str	r3, [sp, #52]	; 0x34
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4fcc:	f7ff f863 	bl	d4096 <_Znwj>
   d4fd0:	b118      	cbz	r0, d4fda <setup+0x6e>
   d4fd2:	4a8c      	ldr	r2, [pc, #560]	; (d5204 <setup+0x298>)
   d4fd4:	2300      	movs	r3, #0
   d4fd6:	e9c0 2300 	strd	r2, r3, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d4fda:	4b8b      	ldr	r3, [pc, #556]	; (d5208 <setup+0x29c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4fdc:	900b      	str	r0, [sp, #44]	; 0x2c
	    _M_invoker = &_My_handler::_M_invoke;
   d4fde:	930e      	str	r3, [sp, #56]	; 0x38
        maximumTimeToConnectFunctions.add(fn); 
   d4fe0:	a90b      	add	r1, sp, #44	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   d4fe2:	4b8a      	ldr	r3, [pc, #552]	; (d520c <setup+0x2a0>)
   d4fe4:	930d      	str	r3, [sp, #52]	; 0x34
   d4fe6:	a816      	add	r0, sp, #88	; 0x58
   d4fe8:	f7ff facd 	bl	d4586 <_ZNSt8functionIFbmEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4fec:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
   d4ff0:	f8d4 370c 	ldr.w	r3, [r4, #1804]	; 0x70c
   d4ff4:	4298      	cmp	r0, r3
   d4ff6:	f000 80e0 	beq.w	d51ba <setup+0x24e>
   d4ffa:	b110      	cbz	r0, d5002 <setup+0x96>
   d4ffc:	a916      	add	r1, sp, #88	; 0x58
   d4ffe:	f7ff fac2 	bl	d4586 <_ZNSt8functionIFbmEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   d5002:	f8d4 3708 	ldr.w	r3, [r4, #1800]	; 0x708
   d5006:	3310      	adds	r3, #16
   d5008:	f8c4 3708 	str.w	r3, [r4, #1800]	; 0x708
    class function<_Res(_ArgTypes...)>
   d500c:	a816      	add	r0, sp, #88	; 0x58
   d500e:	f7ff f96b 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d5012:	a80b      	add	r0, sp, #44	; 0x2c
   d5014:	f7ff f968 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
     * | Sydney, Australia   | "AEST-10AEDT,M10.1.0/02:00:00,M4.1.0/03:00:00" | 
     * | Adelaide, Australia | "ACST-9:30ACDT,M10.1.0/02:00:00,M4.1.0/03:00:00" |
     * 
     */
    SleepHelper &withTimeConfig(const char *tzConfig) {
        LocalTime::instance().withConfig(tzConfig);
   d5018:	f001 fde2 	bl	d6be0 <_ZN9LocalTime8instanceEv>
   d501c:	497c      	ldr	r1, [pc, #496]	; (d5210 <setup+0x2a4>)
   d501e:	4605      	mov	r5, r0
   d5020:	a816      	add	r0, sp, #88	; 0x58
   d5022:	f001 fd01 	bl	d6a28 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   d5026:	a917      	add	r1, sp, #92	; 0x5c
   d5028:	f105 0008 	add.w	r0, r5, #8
   d502c:	f009 fca3 	bl	de976 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d5030:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d5032:	61eb      	str	r3, [r5, #28]
class LocalTimePosixTimezone {
   d5034:	a91d      	add	r1, sp, #116	; 0x74
   d5036:	f105 0020 	add.w	r0, r5, #32
   d503a:	f009 fc9c 	bl	de976 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d503e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   d5040:	636b      	str	r3, [r5, #52]	; 0x34
class LocalTimeChange {
   d5042:	9b24      	ldr	r3, [sp, #144]	; 0x90
   d5044:	63eb      	str	r3, [r5, #60]	; 0x3c
class LocalTimeHMS {
   d5046:	9b26      	ldr	r3, [sp, #152]	; 0x98
   d5048:	646b      	str	r3, [r5, #68]	; 0x44
class LocalTimeChange {
   d504a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   d504c:	64eb      	str	r3, [r5, #76]	; 0x4c
class LocalTimeHMS {
   d504e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   d5050:	656b      	str	r3, [r5, #84]	; 0x54
class LocalTimePosixTimezone {
   d5052:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
   d5056:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
   d505a:	a816      	add	r0, sp, #88	; 0x58
   d505c:	f001 f96e 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
            this->path = path;
   d5060:	496c      	ldr	r1, [pc, #432]	; (d5214 <setup+0x2a8>)
   d5062:	f204 7054 	addw	r0, r4, #1876	; 0x754
   d5066:	f009 fca8 	bl	de9ba <_ZN6StringaSEPKc>
            this->eventHistoryKey = key;
   d506a:	496b      	ldr	r1, [pc, #428]	; (d5218 <setup+0x2ac>)
   d506c:	f204 706c 	addw	r0, r4, #1900	; 0x76c
   d5070:	f009 fca3 	bl	de9ba <_ZN6StringaSEPKc>
	    _M_invoker = &_My_handler::_M_invoke;
   d5074:	4b69      	ldr	r3, [pc, #420]	; (d521c <setup+0x2b0>)
   d5076:	9307      	str	r3, [sp, #28]
        dataCaptureFunctions.add(fn);
   d5078:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   d507a:	4b69      	ldr	r3, [pc, #420]	; (d5220 <setup+0x2b4>)
   d507c:	9306      	str	r3, [sp, #24]
   d507e:	a816      	add	r0, sp, #88	; 0x58
   d5080:	f7ff fa45 	bl	d450e <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d5084:	f8d4 06b4 	ldr.w	r0, [r4, #1716]	; 0x6b4
   d5088:	f8d4 36b8 	ldr.w	r3, [r4, #1720]	; 0x6b8
   d508c:	4298      	cmp	r0, r3
   d508e:	f000 809b 	beq.w	d51c8 <setup+0x25c>
   d5092:	b110      	cbz	r0, d509a <setup+0x12e>
   d5094:	a916      	add	r1, sp, #88	; 0x58
   d5096:	f7ff fa3a 	bl	d450e <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   d509a:	f8d4 36b4 	ldr.w	r3, [r4, #1716]	; 0x6b4
   d509e:	3310      	adds	r3, #16
   d50a0:	f8c4 36b4 	str.w	r3, [r4, #1716]	; 0x6b4
    class AppCallbackState {
   d50a4:	2500      	movs	r5, #0
   d50a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      { emplace_back(std::move(__x)); }
   d50aa:	a90b      	add	r1, sp, #44	; 0x2c
   d50ac:	f204 60bc 	addw	r0, r4, #1724	; 0x6bc
   d50b0:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
   d50b4:	f7ff fe36 	bl	d4d24 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
    class function<_Res(_ArgTypes...)>
   d50b8:	a816      	add	r0, sp, #88	; 0x58
   d50ba:	f7ff f915 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   d50be:	4b59      	ldr	r3, [pc, #356]	; (d5224 <setup+0x2b8>)
   d50c0:	930e      	str	r3, [sp, #56]	; 0x38
        wakeFunctions.add(fn); 
   d50c2:	a90b      	add	r1, sp, #44	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   d50c4:	4b58      	ldr	r3, [pc, #352]	; (d5228 <setup+0x2bc>)
   d50c6:	930d      	str	r3, [sp, #52]	; 0x34
   d50c8:	a816      	add	r0, sp, #88	; 0x58
   d50ca:	f7ff fa11 	bl	d44f0 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
            callbackFunctions.push_back(callback);
   d50ce:	a916      	add	r1, sp, #88	; 0x58
   d50d0:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
   d50d4:	f7ff fc04 	bl	d48e0 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE9push_backERKS5_>
    class function<_Res(_ArgTypes...)>
   d50d8:	a816      	add	r0, sp, #88	; 0x58
   d50da:	f7ff f905 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
        .withAB1805_WDT(ab1805)                // Stop the watchdog before sleep or reset, and resume after wake
   d50de:	4947      	ldr	r1, [pc, #284]	; (d51fc <setup+0x290>)
   d50e0:	4620      	mov	r0, r4
   d50e2:	f7ff fd31 	bl	d4b48 <_ZN11SleepHelper14withAB1805_WDTER6AB1805>
        .withPublishQueuePosixRK()             // Manage both internal publish queueing and PublishQueuePosixRK
   d50e6:	2200      	movs	r2, #0
   d50e8:	2300      	movs	r3, #0
   d50ea:	f7ff fe2f 	bl	d4d4c <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE>
   d50ee:	a80b      	add	r0, sp, #44	; 0x2c
   d50f0:	f7ff f8fa 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d50f4:	a804      	add	r0, sp, #16
   d50f6:	f7ff f8f7 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
    SleepHelper::instance().getScheduleFull()
   d50fa:	f004 fb09 	bl	d9710 <_ZN11SleepHelper8instanceEv>
     * @brief Get the full wake schedule
     * 
     * @return LocalTimeSchedule& 
     */
    LocalTimeSchedule &getScheduleFull() {
        return scheduleManager.getScheduleByName("full");
   d50fe:	494b      	ldr	r1, [pc, #300]	; (d522c <setup+0x2c0>)
   d5100:	f500 60c7 	add.w	r0, r0, #1592	; 0x638
   d5104:	f002 fbc8 	bl	d7898 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        .withMinuteOfHour(15, LocalTimeRange(LocalTimeHMS("09:00:00"), LocalTimeHMS("16:59:59"), LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_WEEKDAY)))
   d5108:	4949      	ldr	r1, [pc, #292]	; (d5230 <setup+0x2c4>)
   d510a:	4604      	mov	r4, r0
   d510c:	4668      	mov	r0, sp
   d510e:	f001 faaf 	bl	d6670 <_ZN12LocalTimeHMSC1EPKc>
   d5112:	4948      	ldr	r1, [pc, #288]	; (d5234 <setup+0x2c8>)
   d5114:	a802      	add	r0, sp, #8
   d5116:	f001 faab 	bl	d6670 <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d511a:	233e      	movs	r3, #62	; 0x3e
class LocalTimeRestrictedDate {
   d511c:	a905      	add	r1, sp, #20
   d511e:	a80c      	add	r0, sp, #48	; 0x30
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d5120:	f88d 3010 	strb.w	r3, [sp, #16]
class LocalTimeRestrictedDate {
   d5124:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	: _M_start(), _M_finish(), _M_end_of_storage()
   d5128:	e9cd 5505 	strd	r5, r5, [sp, #20]
   d512c:	e9cd 5507 	strd	r5, r5, [sp, #28]
   d5130:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   d5134:	f7ff f94f 	bl	d43d6 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d5138:	a908      	add	r1, sp, #32
   d513a:	a80f      	add	r0, sp, #60	; 0x3c
   d513c:	f7ff f94b 	bl	d43d6 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
class LocalTimeHMS {
   d5140:	9a01      	ldr	r2, [sp, #4]
   d5142:	4b3d      	ldr	r3, [pc, #244]	; (d5238 <setup+0x2cc>)
   d5144:	9312      	str	r3, [sp, #72]	; 0x48
   d5146:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
   d514a:	210f      	movs	r1, #15
   d514c:	9b03      	ldr	r3, [sp, #12]
   d514e:	9315      	str	r3, [sp, #84]	; 0x54
   d5150:	aa0b      	add	r2, sp, #44	; 0x2c
   d5152:	4620      	mov	r0, r4
   d5154:	f002 fa8d 	bl	d7672 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d5158:	4604      	mov	r4, r0
        .withHourOfDay(2);
   d515a:	a816      	add	r0, sp, #88	; 0x58
   d515c:	f7ff f8f0 	bl	d4340 <_ZN14LocalTimeRangeC1Ev>
   d5160:	aa16      	add	r2, sp, #88	; 0x58
   d5162:	2102      	movs	r1, #2
   d5164:	4620      	mov	r0, r4
   d5166:	f002 fa9e 	bl	d76a6 <_ZN17LocalTimeSchedule13withHourOfDayEi14LocalTimeRange>
   d516a:	a816      	add	r0, sp, #88	; 0x58
   d516c:	f7ff f902 	bl	d4374 <_ZN14LocalTimeRangeD1Ev>
        .withMinuteOfHour(15, LocalTimeRange(LocalTimeHMS("09:00:00"), LocalTimeHMS("16:59:59"), LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_WEEKDAY)))
   d5170:	a80b      	add	r0, sp, #44	; 0x2c
   d5172:	f7ff f8ff 	bl	d4374 <_ZN14LocalTimeRangeD1Ev>
   d5176:	a804      	add	r0, sp, #16
   d5178:	f7ff f8d6 	bl	d4328 <_ZN23LocalTimeRestrictedDateD1Ev>
   d517c:	a802      	add	r0, sp, #8
   d517e:	f001 f8c5 	bl	d630c <_ZN12LocalTimeHMSD1Ev>
   d5182:	4668      	mov	r0, sp
   d5184:	f001 f8c2 	bl	d630c <_ZN12LocalTimeHMSD1Ev>
    SleepHelper::instance().getScheduleDataCapture()
   d5188:	f004 fac2 	bl	d9710 <_ZN11SleepHelper8instanceEv>
     * 
     * @return LocalTimeSchedule& 
     * 
     */
    LocalTimeSchedule &getScheduleDataCapture() {
        return scheduleManager.getScheduleByName("data");
   d518c:	492b      	ldr	r1, [pc, #172]	; (d523c <setup+0x2d0>)
   d518e:	f500 60c7 	add.w	r0, r0, #1592	; 0x638
   d5192:	f002 fb81 	bl	d7898 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
   d5196:	4604      	mov	r4, r0
        .withMinuteOfHour(2);
   d5198:	a816      	add	r0, sp, #88	; 0x58
   d519a:	f7ff f8d1 	bl	d4340 <_ZN14LocalTimeRangeC1Ev>
   d519e:	aa16      	add	r2, sp, #88	; 0x58
   d51a0:	2102      	movs	r1, #2
   d51a2:	4620      	mov	r0, r4
   d51a4:	f002 fa65 	bl	d7672 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d51a8:	a816      	add	r0, sp, #88	; 0x58
   d51aa:	f7ff f8e3 	bl	d4374 <_ZN14LocalTimeRangeD1Ev>
    SleepHelper::instance().setup();
   d51ae:	f004 faaf 	bl	d9710 <_ZN11SleepHelper8instanceEv>
   d51b2:	f005 fa63 	bl	da67c <_ZN11SleepHelper5setupEv>
}
   d51b6:	b02d      	add	sp, #180	; 0xb4
   d51b8:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d51ba:	4601      	mov	r1, r0
   d51bc:	aa16      	add	r2, sp, #88	; 0x58
   d51be:	f204 7004 	addw	r0, r4, #1796	; 0x704
   d51c2:	f7ff fd09 	bl	d4bd8 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   d51c6:	e721      	b.n	d500c <setup+0xa0>
   d51c8:	4601      	mov	r1, r0
   d51ca:	aa16      	add	r2, sp, #88	; 0x58
   d51cc:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   d51d0:	f7ff fb9a 	bl	d4908 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   d51d4:	e766      	b.n	d50a4 <setup+0x138>
   d51d6:	bf00      	nop
   d51d8:	2003e474 	.word	0x2003e474
   d51dc:	000e21e7 	.word	0x000e21e7
   d51e0:	000e21ed 	.word	0x000e21ed
   d51e4:	000d5345 	.word	0x000d5345
   d51e8:	000dc617 	.word	0x000dc617
   d51ec:	000e21f6 	.word	0x000e21f6
   d51f0:	000d52b5 	.word	0x000d52b5
   d51f4:	000e2204 	.word	0x000e2204
   d51f8:	000d52e5 	.word	0x000d52e5
   d51fc:	2003e400 	.word	0x2003e400
   d5200:	000493e0 	.word	0x000493e0
   d5204:	000a1220 	.word	0x000a1220
   d5208:	000d40d7 	.word	0x000d40d7
   d520c:	000d41df 	.word	0x000d41df
   d5210:	000e2213 	.word	0x000e2213
   d5214:	000e223c 	.word	0x000e223c
   d5218:	000e224c 	.word	0x000e224c
   d521c:	000d444d 	.word	0x000d444d
   d5220:	000d4131 	.word	0x000d4131
   d5224:	000d4163 	.word	0x000d4163
   d5228:	000d413b 	.word	0x000d413b
   d522c:	000e224f 	.word	0x000e224f
   d5230:	000e2254 	.word	0x000e2254
   d5234:	000e225d 	.word	0x000e225d
   d5238:	000e2568 	.word	0x000e2568
   d523c:	000e25ef 	.word	0x000e25ef

000d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5240:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d5242:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d5244:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d5246:	b17c      	cbz	r4, d5268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d5248:	6863      	ldr	r3, [r4, #4]
   d524a:	3b01      	subs	r3, #1
   d524c:	6063      	str	r3, [r4, #4]
   d524e:	b95b      	cbnz	r3, d5268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d5250:	6823      	ldr	r3, [r4, #0]
   d5252:	4620      	mov	r0, r4
   d5254:	689b      	ldr	r3, [r3, #8]
   d5256:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5258:	68a3      	ldr	r3, [r4, #8]
   d525a:	3b01      	subs	r3, #1
   d525c:	60a3      	str	r3, [r4, #8]
   d525e:	b91b      	cbnz	r3, d5268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5260:	6823      	ldr	r3, [r4, #0]
   d5262:	4620      	mov	r0, r4
   d5264:	68db      	ldr	r3, [r3, #12]
   d5266:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d5268:	4628      	mov	r0, r5
   d526a:	bd38      	pop	{r3, r4, r5, pc}

000d526c <_Z11setWakeTime6String.part.0>:
 * @param command A string indicating what the closing hour of the facility is in 24-hour time.
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setWakeTime(String command)
   d526c:	b500      	push	{lr}
  char data[256];
  int tempTime = strtol(command,&pEND,10);                             // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wakeTime = tempTime;
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.wakeTime);
   d526e:	4b0d      	ldr	r3, [pc, #52]	; (d52a4 <_Z11setWakeTime6String.part.0+0x38>)
   d5270:	4a0d      	ldr	r2, [pc, #52]	; (d52a8 <_Z11setWakeTime6String.part.0+0x3c>)
   d5272:	7adb      	ldrb	r3, [r3, #11]
int setWakeTime(String command)
   d5274:	b0c5      	sub	sp, #276	; 0x114
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.wakeTime);
   d5276:	f44f 7180 	mov.w	r1, #256	; 0x100
   d527a:	a804      	add	r0, sp, #16
   d527c:	f007 f8ca 	bl	dc414 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5280:	4b0a      	ldr	r3, [pc, #40]	; (d52ac <_Z11setWakeTime6String.part.0+0x40>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5282:	490b      	ldr	r1, [pc, #44]	; (d52b0 <_Z11setWakeTime6String.part.0+0x44>)
   d5284:	781b      	ldrb	r3, [r3, #0]
   d5286:	f88d 3000 	strb.w	r3, [sp]
   d528a:	aa04      	add	r2, sp, #16
   d528c:	233c      	movs	r3, #60	; 0x3c
   d528e:	a802      	add	r0, sp, #8
   d5290:	f007 fae4 	bl	dc85c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5294:	a803      	add	r0, sp, #12
   d5296:	f7ff ffd3 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Time",data, PRIVATE);
  }
  return 1;
}
   d529a:	2001      	movs	r0, #1
   d529c:	b045      	add	sp, #276	; 0x114
   d529e:	f85d fb04 	ldr.w	pc, [sp], #4
   d52a2:	bf00      	nop
   d52a4:	2003e464 	.word	0x2003e464
   d52a8:	000e2298 	.word	0x000e2298
   d52ac:	2003e484 	.word	0x2003e484
   d52b0:	000e21ff 	.word	0x000e21ff

000d52b4 <_Z11setWakeTime6String>:
{
   d52b4:	b507      	push	{r0, r1, r2, lr}
  int tempTime = strtol(command,&pEND,10);                             // Looks for the first integer and interprets it
   d52b6:	220a      	movs	r2, #10
   d52b8:	6800      	ldr	r0, [r0, #0]
   d52ba:	a901      	add	r1, sp, #4
   d52bc:	f00b fe30 	bl	e0f20 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   d52c0:	2817      	cmp	r0, #23
   d52c2:	d809      	bhi.n	d52d8 <_Z11setWakeTime6String+0x24>
  sysStatus.wakeTime = tempTime;
   d52c4:	4b06      	ldr	r3, [pc, #24]	; (d52e0 <_Z11setWakeTime6String+0x2c>)
   d52c6:	72d8      	strb	r0, [r3, #11]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d52c8:	f006 ffec 	bl	dc2a4 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d52cc:	b130      	cbz	r0, d52dc <_Z11setWakeTime6String+0x28>
   d52ce:	f7ff ffcd 	bl	d526c <_Z11setWakeTime6String.part.0>
}
   d52d2:	b003      	add	sp, #12
   d52d4:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   d52d8:	2000      	movs	r0, #0
   d52da:	e7fa      	b.n	d52d2 <_Z11setWakeTime6String+0x1e>
  return 1;
   d52dc:	2001      	movs	r0, #1
   d52de:	e7f8      	b.n	d52d2 <_Z11setWakeTime6String+0x1e>
   d52e0:	2003e464 	.word	0x2003e464

000d52e4 <_Z12setSleepTime6String>:
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setSleepTime(String command)
{
   d52e4:	b500      	push	{lr}
   d52e6:	b0c7      	sub	sp, #284	; 0x11c
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d52e8:	6800      	ldr	r0, [r0, #0]
   d52ea:	220a      	movs	r2, #10
   d52ec:	a903      	add	r1, sp, #12
   d52ee:	f00b fe17 	bl	e0f20 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d52f2:	2818      	cmp	r0, #24
   d52f4:	d81a      	bhi.n	d532c <_Z12setSleepTime6String+0x48>
  sysStatus.sleepTime = tempTime;
   d52f6:	4b0f      	ldr	r3, [pc, #60]	; (d5334 <_Z12setSleepTime6String+0x50>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.sleepTime);
   d52f8:	4a0f      	ldr	r2, [pc, #60]	; (d5338 <_Z12setSleepTime6String+0x54>)
  sysStatus.sleepTime = tempTime;
   d52fa:	7318      	strb	r0, [r3, #12]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.sleepTime);
   d52fc:	f44f 7180 	mov.w	r1, #256	; 0x100
   d5300:	4603      	mov	r3, r0
   d5302:	a806      	add	r0, sp, #24
   d5304:	f007 f886 	bl	dc414 <snprintf>
   d5308:	f006 ffcc 	bl	dc2a4 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d530c:	b160      	cbz	r0, d5328 <_Z12setSleepTime6String+0x44>
   d530e:	4b0b      	ldr	r3, [pc, #44]	; (d533c <_Z12setSleepTime6String+0x58>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5310:	490b      	ldr	r1, [pc, #44]	; (d5340 <_Z12setSleepTime6String+0x5c>)
   d5312:	781b      	ldrb	r3, [r3, #0]
   d5314:	f88d 3000 	strb.w	r3, [sp]
   d5318:	a804      	add	r0, sp, #16
   d531a:	233c      	movs	r3, #60	; 0x3c
   d531c:	aa06      	add	r2, sp, #24
   d531e:	f007 fa9d 	bl	dc85c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d5322:	a805      	add	r0, sp, #20
   d5324:	f7ff ff8c 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d5328:	2001      	movs	r0, #1
   d532a:	e000      	b.n	d532e <_Z12setSleepTime6String+0x4a>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d532c:	2000      	movs	r0, #0
}
   d532e:	b047      	add	sp, #284	; 0x11c
   d5330:	f85d fb04 	ldr.w	pc, [sp], #4
   d5334:	2003e464 	.word	0x2003e464
   d5338:	000e22ac 	.word	0x000e22ac
   d533c:	2003e484 	.word	0x2003e484
   d5340:	000e21ff 	.word	0x000e21ff

000d5344 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d5344:	b530      	push	{r4, r5, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5346:	4924      	ldr	r1, [pc, #144]	; (d53d8 <_Z15setLowPowerMode6String+0x94>)
   d5348:	b08b      	sub	sp, #44	; 0x2c
   d534a:	4604      	mov	r4, r0
   d534c:	f009 fbb2 	bl	deab4 <_ZNK6String6equalsEPKc>
  char lowPowerModeStr[24];

  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d5350:	b338      	cbz	r0, d53a2 <_Z15setLowPowerMode6String+0x5e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d5352:	4921      	ldr	r1, [pc, #132]	; (d53d8 <_Z15setLowPowerMode6String+0x94>)
   d5354:	4620      	mov	r0, r4
   d5356:	f009 fbad 	bl	deab4 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d535a:	4605      	mov	r5, r0
   d535c:	bb48      	cbnz	r0, d53b2 <_Z15setLowPowerMode6String+0x6e>
   d535e:	491f      	ldr	r1, [pc, #124]	; (d53dc <_Z15setLowPowerMode6String+0x98>)
   d5360:	4620      	mov	r0, r4
   d5362:	f009 fba7 	bl	deab4 <_ZNK6String6equalsEPKc>
    Log.info(lowPowerModeStr);
    if (Particle.connected()) {
      Particle.publish("Mode",lowPowerModeStr, PRIVATE);
    }
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d5366:	2800      	cmp	r0, #0
   d5368:	d033      	beq.n	d53d2 <_Z15setLowPowerMode6String+0x8e>
  {
    sysStatus.lowPowerMode = false;
   d536a:	4b1d      	ldr	r3, [pc, #116]	; (d53e0 <_Z15setLowPowerMode6String+0x9c>)
    strncpy(lowPowerModeStr,"Cleared Low Power Mode",  sizeof(lowPowerModeStr));
   d536c:	491d      	ldr	r1, [pc, #116]	; (d53e4 <_Z15setLowPowerMode6String+0xa0>)
    sysStatus.lowPowerMode = false;
   d536e:	729d      	strb	r5, [r3, #10]
    strncpy(lowPowerModeStr,"Cleared Low Power Mode",  sizeof(lowPowerModeStr));
   d5370:	2218      	movs	r2, #24
   d5372:	a804      	add	r0, sp, #16
   d5374:	f00a fed3 	bl	e011e <strncpy>
    Log.info(lowPowerModeStr);
   d5378:	481b      	ldr	r0, [pc, #108]	; (d53e8 <_Z15setLowPowerMode6String+0xa4>)
   d537a:	a904      	add	r1, sp, #16
   d537c:	f7fe ffbd 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5380:	f006 ff90 	bl	dc2a4 <spark_cloud_flag_connected>
    if (!Particle.connected()) {                                 // In case we are not connected, we will do so now.
   d5384:	bb28      	cbnz	r0, d53d2 <_Z15setLowPowerMode6String+0x8e>
   d5386:	4b19      	ldr	r3, [pc, #100]	; (d53ec <_Z15setLowPowerMode6String+0xa8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5388:	4919      	ldr	r1, [pc, #100]	; (d53f0 <_Z15setLowPowerMode6String+0xac>)
   d538a:	781b      	ldrb	r3, [r3, #0]
   d538c:	f88d 3000 	strb.w	r3, [sp]
   d5390:	a802      	add	r0, sp, #8
   d5392:	233c      	movs	r3, #60	; 0x3c
   d5394:	aa04      	add	r2, sp, #16
   d5396:	f007 fa61 	bl	dc85c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d539a:	a803      	add	r0, sp, #12
   d539c:	f7ff ff50 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53a0:	e017      	b.n	d53d2 <_Z15setLowPowerMode6String+0x8e>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d53a2:	490e      	ldr	r1, [pc, #56]	; (d53dc <_Z15setLowPowerMode6String+0x98>)
   d53a4:	4620      	mov	r0, r4
   d53a6:	f009 fb85 	bl	deab4 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d53aa:	2800      	cmp	r0, #0
   d53ac:	d1d1      	bne.n	d5352 <_Z15setLowPowerMode6String+0xe>
      Particle.publish("Mode",lowPowerModeStr, PRIVATE);
    }
  }
  return 1;
   d53ae:	b00b      	add	sp, #44	; 0x2c
   d53b0:	bd30      	pop	{r4, r5, pc}
    sysStatus.lowPowerMode = true;
   d53b2:	4b0b      	ldr	r3, [pc, #44]	; (d53e0 <_Z15setLowPowerMode6String+0x9c>)
    strncpy(lowPowerModeStr,"Low Power Mode", sizeof(lowPowerModeStr));
   d53b4:	490f      	ldr	r1, [pc, #60]	; (d53f4 <_Z15setLowPowerMode6String+0xb0>)
   d53b6:	2218      	movs	r2, #24
    sysStatus.lowPowerMode = true;
   d53b8:	2401      	movs	r4, #1
    strncpy(lowPowerModeStr,"Low Power Mode", sizeof(lowPowerModeStr));
   d53ba:	a804      	add	r0, sp, #16
    sysStatus.lowPowerMode = true;
   d53bc:	729c      	strb	r4, [r3, #10]
    strncpy(lowPowerModeStr,"Low Power Mode", sizeof(lowPowerModeStr));
   d53be:	f00a feae 	bl	e011e <strncpy>
    Log.info(lowPowerModeStr);
   d53c2:	4809      	ldr	r0, [pc, #36]	; (d53e8 <_Z15setLowPowerMode6String+0xa4>)
   d53c4:	a904      	add	r1, sp, #16
   d53c6:	f7fe ff98 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d53ca:	f006 ff6b 	bl	dc2a4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d53ce:	2800      	cmp	r0, #0
   d53d0:	d1d9      	bne.n	d5386 <_Z15setLowPowerMode6String+0x42>
  return 1;
   d53d2:	2001      	movs	r0, #1
   d53d4:	e7eb      	b.n	d53ae <_Z15setLowPowerMode6String+0x6a>
   d53d6:	bf00      	nop
   d53d8:	000e2d5e 	.word	0x000e2d5e
   d53dc:	000e2cf6 	.word	0x000e2cf6
   d53e0:	2003e464 	.word	0x2003e464
   d53e4:	000e22c3 	.word	0x000e22c3
   d53e8:	2003e578 	.word	0x2003e578
   d53ec:	2003e484 	.word	0x2003e484
   d53f0:	000e22d5 	.word	0x000e22d5
   d53f4:	000e22cb 	.word	0x000e22cb

000d53f8 <_GLOBAL__sub_I__Z11setWakeTime6String>:
        val_(val) {
   d53f8:	4b01      	ldr	r3, [pc, #4]	; (d5400 <_GLOBAL__sub_I__Z11setWakeTime6String+0x8>)
   d53fa:	2201      	movs	r2, #1
   d53fc:	701a      	strb	r2, [r3, #0]
   d53fe:	4770      	bx	lr
   d5400:	2003e484 	.word	0x2003e484

000d5404 <_Z9readTempCv>:
 * 
 * @returns Returns true if succesful and puts the data into the current object
 * 
 */

bool readTempC() {
   d5404:	b510      	push	{r4, lr}

    digitalWrite(TMP36_POWER_PIN, HIGH);
   d5406:	4b1d      	ldr	r3, [pc, #116]	; (d547c <_Z9readTempCv+0x78>)
bool readTempC() {
   d5408:	ed2d 8b02 	vpush	{d8}
    digitalWrite(TMP36_POWER_PIN, HIGH);
   d540c:	881c      	ldrh	r4, [r3, #0]
bool readTempC() {
   d540e:	b082      	sub	sp, #8
    digitalWrite(TMP36_POWER_PIN, HIGH);
   d5410:	2101      	movs	r1, #1
   d5412:	4620      	mov	r0, r4
   d5414:	f009 ffa6 	bl	df364 <digitalWrite>
    delay(2);
   d5418:	2002      	movs	r0, #2
   d541a:	f007 f84b 	bl	dc4b4 <delay>

    int adcValue = analogRead(TMP36_SENSE_PIN);
   d541e:	4b18      	ldr	r3, [pc, #96]	; (d5480 <_Z9readTempCv+0x7c>)
   d5420:	8818      	ldrh	r0, [r3, #0]
   d5422:	f009 ffcb 	bl	df3bc <analogRead>
   d5426:	ee08 0a10 	vmov	s16, r0
    digitalWrite(TMP36_POWER_PIN, LOW);
   d542a:	2100      	movs	r1, #0
   d542c:	4620      	mov	r0, r4
   d542e:	f009 ff99 	bl	df364 <digitalWrite>

    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   d5432:	eddf 7a14 	vldr	s15, [pc, #80]	; d5484 <_Z9readTempCv+0x80>
   d5436:	ed9f 7a14 	vldr	s14, [pc, #80]	; d5488 <_Z9readTempCv+0x84>
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!

    // As configured above, connect VCC to A1 and Analog Out to A0.

    current.tempC = (mV - 500) / 10;
   d543a:	4b14      	ldr	r3, [pc, #80]	; (d548c <_Z9readTempCv+0x88>)
    float mV = ((float)adcValue) * 3300 / 4095;
   d543c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    current.tempC = (mV - 500) / 10;
   d5440:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    float mV = ((float)adcValue) * 3300 / 4095;
   d5444:	ee28 8a27 	vmul.f32	s16, s16, s15
   d5448:	eec8 7a07 	vdiv.f32	s15, s16, s14
    current.tempC = (mV - 500) / 10;
   d544c:	ed9f 7a10 	vldr	s14, [pc, #64]	; d5490 <_Z9readTempCv+0x8c>
   d5450:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d5454:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    snprintf(tempString,sizeof(tempString), "%4.2f C", current.tempC);
   d5458:	ee17 0a10 	vmov	r0, s14
    current.tempC = (mV - 500) / 10;
   d545c:	ed83 7a00 	vstr	s14, [r3]
    snprintf(tempString,sizeof(tempString), "%4.2f C", current.tempC);
   d5460:	f00a f9fa 	bl	df858 <__aeabi_f2d>
   d5464:	4a0b      	ldr	r2, [pc, #44]	; (d5494 <_Z9readTempCv+0x90>)
   d5466:	e9cd 0100 	strd	r0, r1, [sp]
   d546a:	2110      	movs	r1, #16
   d546c:	480a      	ldr	r0, [pc, #40]	; (d5498 <_Z9readTempCv+0x94>)
   d546e:	f006 ffd1 	bl	dc414 <snprintf>

    return true;
}
   d5472:	2001      	movs	r0, #1
   d5474:	b002      	add	sp, #8
   d5476:	ecbd 8b02 	vpop	{d8}
   d547a:	bd10      	pop	{r4, pc}
   d547c:	000e2c20 	.word	0x000e2c20
   d5480:	000e2c22 	.word	0x000e2c22
   d5484:	454e4000 	.word	0x454e4000
   d5488:	457ff000 	.word	0x457ff000
   d548c:	2003e420 	.word	0x2003e420
   d5490:	43fa0000 	.word	0x43fa0000
   d5494:	000e22da 	.word	0x000e22da
   d5498:	2003e474 	.word	0x2003e474

000d549c <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d549c:	4770      	bx	lr

000d549e <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d549e:	b510      	push	{r4, lr}
}
   d54a0:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d54a2:	4604      	mov	r4, r0
}
   d54a4:	f009 ffde 	bl	df464 <_ZdlPvj>
   d54a8:	4620      	mov	r0, r4
   d54aa:	bd10      	pop	{r4, pc}

000d54ac <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d54ac:	b40e      	push	{r1, r2, r3}
   d54ae:	b510      	push	{r4, lr}
   d54b0:	b08d      	sub	sp, #52	; 0x34
   d54b2:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d54b4:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d54b6:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d54ba:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d54bc:	2300      	movs	r3, #0
   d54be:	2020      	movs	r0, #32
   d54c0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d54c4:	e9cd 4200 	strd	r4, r2, [sp]
   d54c8:	2001      	movs	r0, #1
   d54ca:	aa04      	add	r2, sp, #16
   d54cc:	f006 fe3a 	bl	dc144 <log_message_v>
}
   d54d0:	b00d      	add	sp, #52	; 0x34
   d54d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d54d6:	b003      	add	sp, #12
   d54d8:	4770      	bx	lr

000d54da <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d54da:	b40e      	push	{r1, r2, r3}
   d54dc:	b510      	push	{r4, lr}
   d54de:	b08d      	sub	sp, #52	; 0x34
   d54e0:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d54e2:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d54e4:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d54e8:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d54ea:	2300      	movs	r3, #0
   d54ec:	2020      	movs	r0, #32
   d54ee:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d54f2:	e9cd 4200 	strd	r4, r2, [sp]
   d54f6:	2032      	movs	r0, #50	; 0x32
   d54f8:	aa04      	add	r2, sp, #16
   d54fa:	f006 fe23 	bl	dc144 <log_message_v>
}
   d54fe:	b00d      	add	sp, #52	; 0x34
   d5500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5504:	b003      	add	sp, #12
   d5506:	4770      	bx	lr

000d5508 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5508:	b510      	push	{r4, lr}
   d550a:	7202      	strb	r2, [r0, #8]
   d550c:	22ff      	movs	r2, #255	; 0xff
   d550e:	8142      	strh	r2, [r0, #10]
   d5510:	2200      	movs	r2, #0
   d5512:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d5516:	6142      	str	r2, [r0, #20]
   d5518:	7602      	strb	r2, [r0, #24]
   d551a:	61c2      	str	r2, [r0, #28]
    instance = this;
   d551c:	4a02      	ldr	r2, [pc, #8]	; (d5528 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d551e:	4c03      	ldr	r4, [pc, #12]	; (d552c <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d5520:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5522:	e9c0 4100 	strd	r4, r1, [r0]
}
   d5526:	bd10      	pop	{r4, pc}
   d5528:	2003e48c 	.word	0x2003e48c
   d552c:	000e24e4 	.word	0x000e24e4

000d5530 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d5530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5534:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d5538:	4604      	mov	r4, r0
   d553a:	4689      	mov	r9, r1
   d553c:	4616      	mov	r6, r2
   d553e:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d5540:	f1b8 0f00 	cmp.w	r8, #0
   d5544:	d002      	beq.n	d554c <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d5546:	6840      	ldr	r0, [r0, #4]
   d5548:	f007 fbb1 	bl	dccae <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d554c:	7a21      	ldrb	r1, [r4, #8]
   d554e:	6860      	ldr	r0, [r4, #4]
   d5550:	f007 fba5 	bl	dcc9e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d5554:	6860      	ldr	r0, [r4, #4]
   d5556:	6803      	ldr	r3, [r0, #0]
   d5558:	4649      	mov	r1, r9
   d555a:	689b      	ldr	r3, [r3, #8]
   d555c:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d555e:	6860      	ldr	r0, [r4, #4]
   d5560:	2100      	movs	r1, #0
   d5562:	f007 fba0 	bl	dcca6 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d5566:	4605      	mov	r5, r0
   d5568:	bb00      	cbnz	r0, d55ac <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d556a:	2301      	movs	r3, #1
   d556c:	7a21      	ldrb	r1, [r4, #8]
   d556e:	6860      	ldr	r0, [r4, #4]
   d5570:	463a      	mov	r2, r7
   d5572:	f007 fb82 	bl	dcc7a <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d5576:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d5578:	4603      	mov	r3, r0
        if (count == num) {
   d557a:	d109      	bne.n	d5590 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d557c:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d557e:	42be      	cmp	r6, r7
   d5580:	d01c      	beq.n	d55bc <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d5582:	6860      	ldr	r0, [r4, #4]
   d5584:	6803      	ldr	r3, [r0, #0]
   d5586:	695b      	ldr	r3, [r3, #20]
   d5588:	4798      	blx	r3
   d558a:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d558e:	e7f6      	b.n	d557e <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d5590:	490b      	ldr	r1, [pc, #44]	; (d55c0 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d5592:	480c      	ldr	r0, [pc, #48]	; (d55c4 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5594:	464a      	mov	r2, r9
   d5596:	f7ff ffa0 	bl	d54da <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d559a:	f1b8 0f00 	cmp.w	r8, #0
   d559e:	d002      	beq.n	d55a6 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d55a0:	6860      	ldr	r0, [r4, #4]
   d55a2:	f007 fb8d 	bl	dccc0 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d55a6:	4628      	mov	r0, r5
   d55a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d55ac:	4603      	mov	r3, r0
   d55ae:	4906      	ldr	r1, [pc, #24]	; (d55c8 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d55b0:	4804      	ldr	r0, [pc, #16]	; (d55c4 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d55b2:	464a      	mov	r2, r9
   d55b4:	f7ff ff91 	bl	d54da <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d55b8:	2500      	movs	r5, #0
   d55ba:	e7ee      	b.n	d559a <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d55bc:	2501      	movs	r5, #1
   d55be:	e7ec      	b.n	d559a <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d55c0:	000e22e2 	.word	0x000e22e2
   d55c4:	2003e488 	.word	0x2003e488
   d55c8:	000e2307 	.word	0x000e2307

000d55cc <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d55cc:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d55ce:	9300      	str	r3, [sp, #0]
   d55d0:	2301      	movs	r3, #1
   d55d2:	f7ff ffad 	bl	d5530 <_ZN6AB180513readRegistersEhPhjb>
}
   d55d6:	b003      	add	sp, #12
   d55d8:	f85d fb04 	ldr.w	pc, [sp], #4

000d55dc <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d55dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d55de:	8943      	ldrh	r3, [r0, #10]
   d55e0:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d55e2:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d55e4:	d010      	beq.n	d5608 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d55e6:	4e19      	ldr	r6, [pc, #100]	; (d564c <_ZN6AB180510detectChipEv+0x70>)
   d55e8:	4d19      	ldr	r5, [pc, #100]	; (d5650 <_ZN6AB180510detectChipEv+0x74>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d55ea:	f006 fbb3 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d55ee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d55f2:	d209      	bcs.n	d5608 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d55f4:	8960      	ldrh	r0, [r4, #10]
   d55f6:	f009 fece 	bl	df396 <digitalRead>
   d55fa:	2801      	cmp	r0, #1
   d55fc:	d004      	beq.n	d5608 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d55fe:	4631      	mov	r1, r6
   d5600:	4628      	mov	r0, r5
   d5602:	f7fe fe7a 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
   d5606:	e7f0      	b.n	d55ea <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d5608:	2301      	movs	r3, #1
   d560a:	f10d 0207 	add.w	r2, sp, #7
   d560e:	2128      	movs	r1, #40	; 0x28
   d5610:	4620      	mov	r0, r4
   d5612:	f7ff ffdb 	bl	d55cc <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d5616:	b930      	cbnz	r0, d5626 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d5618:	480d      	ldr	r0, [pc, #52]	; (d5650 <_ZN6AB180510detectChipEv+0x74>)
   d561a:	490e      	ldr	r1, [pc, #56]	; (d5654 <_ZN6AB180510detectChipEv+0x78>)
   d561c:	f7fe fe6d 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
   d5620:	2000      	movs	r0, #0
}
   d5622:	b002      	add	sp, #8
   d5624:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d5626:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d562a:	2b18      	cmp	r3, #24
   d562c:	d1f4      	bne.n	d5618 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d562e:	2301      	movs	r3, #1
   d5630:	f10d 0207 	add.w	r2, sp, #7
   d5634:	2129      	movs	r1, #41	; 0x29
   d5636:	4620      	mov	r0, r4
   d5638:	f7ff ffc8 	bl	d55cc <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d563c:	2800      	cmp	r0, #0
   d563e:	d0eb      	beq.n	d5618 <_ZN6AB180510detectChipEv+0x3c>
   d5640:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5644:	2b05      	cmp	r3, #5
   d5646:	d1e7      	bne.n	d5618 <_ZN6AB180510detectChipEv+0x3c>
   d5648:	e7eb      	b.n	d5622 <_ZN6AB180510detectChipEv+0x46>
   d564a:	bf00      	nop
   d564c:	000e232b 	.word	0x000e232b
   d5650:	2003e488 	.word	0x2003e488
   d5654:	000e2340 	.word	0x000e2340

000d5658 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d5658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d565c:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d5660:	4604      	mov	r4, r0
   d5662:	460f      	mov	r7, r1
   d5664:	4615      	mov	r5, r2
   d5666:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d5668:	f1b8 0f00 	cmp.w	r8, #0
   d566c:	d002      	beq.n	d5674 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d566e:	6840      	ldr	r0, [r0, #4]
   d5670:	f007 fb1d 	bl	dccae <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d5674:	7a21      	ldrb	r1, [r4, #8]
   d5676:	6860      	ldr	r0, [r4, #4]
   d5678:	f007 fb11 	bl	dcc9e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d567c:	6860      	ldr	r0, [r4, #4]
   d567e:	6803      	ldr	r3, [r0, #0]
   d5680:	4639      	mov	r1, r7
   d5682:	689b      	ldr	r3, [r3, #8]
   d5684:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d5686:	442e      	add	r6, r5
   d5688:	42b5      	cmp	r5, r6
   d568a:	6860      	ldr	r0, [r4, #4]
   d568c:	d005      	beq.n	d569a <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d568e:	6803      	ldr	r3, [r0, #0]
   d5690:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5694:	689b      	ldr	r3, [r3, #8]
   d5696:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d5698:	e7f6      	b.n	d5688 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d569a:	2101      	movs	r1, #1
   d569c:	f007 fb03 	bl	dcca6 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d56a0:	4603      	mov	r3, r0
   d56a2:	b170      	cbz	r0, d56c2 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d56a4:	4908      	ldr	r1, [pc, #32]	; (d56c8 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d56a6:	4809      	ldr	r0, [pc, #36]	; (d56cc <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d56a8:	463a      	mov	r2, r7
   d56aa:	f7ff ff16 	bl	d54da <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d56ae:	2500      	movs	r5, #0
    }

    if (lock) {
   d56b0:	f1b8 0f00 	cmp.w	r8, #0
   d56b4:	d002      	beq.n	d56bc <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d56b6:	6860      	ldr	r0, [r4, #4]
   d56b8:	f007 fb02 	bl	dccc0 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d56bc:	4628      	mov	r0, r5
   d56be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d56c2:	2501      	movs	r5, #1
   d56c4:	e7f4      	b.n	d56b0 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d56c6:	bf00      	nop
   d56c8:	000e234d 	.word	0x000e234d
   d56cc:	2003e488 	.word	0x2003e488

000d56d0 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d56d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d56d2:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d56d6:	9300      	str	r3, [sp, #0]
   d56d8:	f10d 020f 	add.w	r2, sp, #15
   d56dc:	2301      	movs	r3, #1
   d56de:	f7ff ffbb 	bl	d5658 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d56e2:	b005      	add	sp, #20
   d56e4:	f85d fb04 	ldr.w	pc, [sp], #4

000d56e8 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d56e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d56ea:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d56ec:	460c      	mov	r4, r1
   d56ee:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d56f0:	491a      	ldr	r1, [pc, #104]	; (d575c <_ZN6AB18056setWDTEi+0x74>)
   d56f2:	481b      	ldr	r0, [pc, #108]	; (d5760 <_ZN6AB18056setWDTEi+0x78>)
   d56f4:	f7fe fe01 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d56f8:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d56fa:	bfb8      	it	lt
   d56fc:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d56fe:	b97c      	cbnz	r4, d5720 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d5700:	2301      	movs	r3, #1
   d5702:	4622      	mov	r2, r4
   d5704:	211b      	movs	r1, #27
   d5706:	4628      	mov	r0, r5
   d5708:	f7ff ffe2 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d570c:	4915      	ldr	r1, [pc, #84]	; (d5764 <_ZN6AB18056setWDTEi+0x7c>)
   d570e:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d5710:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5712:	4813      	ldr	r0, [pc, #76]	; (d5760 <_ZN6AB18056setWDTEi+0x78>)
   d5714:	f7ff feca 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d5718:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d571a:	616c      	str	r4, [r5, #20]
}
   d571c:	4630      	mov	r0, r6
   d571e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d5720:	2c03      	cmp	r4, #3
   d5722:	dd19      	ble.n	d5758 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d5724:	10a7      	asrs	r7, r4, #2
   d5726:	2f1f      	cmp	r7, #31
   d5728:	bfa8      	it	ge
   d572a:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d572c:	00ba      	lsls	r2, r7, #2
   d572e:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d5732:	2301      	movs	r3, #1
   d5734:	b2d2      	uxtb	r2, r2
   d5736:	211b      	movs	r1, #27
   d5738:	4628      	mov	r0, r5
   d573a:	f7ff ffc9 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d573e:	463a      	mov	r2, r7
   d5740:	4603      	mov	r3, r0
   d5742:	4909      	ldr	r1, [pc, #36]	; (d5768 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5744:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5746:	4806      	ldr	r0, [pc, #24]	; (d5760 <_ZN6AB18056setWDTEi+0x78>)
   d5748:	f7ff feb0 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d574c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d5750:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d5752:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5754:	616f      	str	r7, [r5, #20]
   d5756:	e7e1      	b.n	d571c <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d5758:	2701      	movs	r7, #1
   d575a:	e7e7      	b.n	d572c <_ZN6AB18056setWDTEi+0x44>
   d575c:	000e2372 	.word	0x000e2372
   d5760:	2003e488 	.word	0x2003e488
   d5764:	000e237c 	.word	0x000e237c
   d5768:	000e2398 	.word	0x000e2398

000d576c <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d576c:	460b      	mov	r3, r1
    if (instance) {
   d576e:	4907      	ldr	r1, [pc, #28]	; (d578c <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5770:	4602      	mov	r2, r0
    if (instance) {
   d5772:	6808      	ldr	r0, [r1, #0]
   d5774:	b148      	cbz	r0, d578a <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d5776:	2b00      	cmp	r3, #0
   d5778:	bf08      	it	eq
   d577a:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d577e:	d104      	bne.n	d578a <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d5780:	68c3      	ldr	r3, [r0, #12]
   d5782:	b113      	cbz	r3, d578a <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d5784:	2100      	movs	r1, #0
   d5786:	f7ff bfaf 	b.w	d56e8 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d578a:	4770      	bx	lr
   d578c:	2003e48c 	.word	0x2003e48c

000d5790 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d5790:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5794:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5798:	4605      	mov	r5, r0
   d579a:	4616      	mov	r6, r2
   d579c:	461f      	mov	r7, r3
    if (lock) {
   d579e:	f1b8 0f00 	cmp.w	r8, #0
   d57a2:	d004      	beq.n	d57ae <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d57a4:	6840      	ldr	r0, [r0, #4]
   d57a6:	9101      	str	r1, [sp, #4]
   d57a8:	f007 fa81 	bl	dccae <_ZN7TwoWire4lockEv>
   d57ac:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d57ae:	9101      	str	r1, [sp, #4]
   d57b0:	2300      	movs	r3, #0
   d57b2:	f10d 020f 	add.w	r2, sp, #15
   d57b6:	4628      	mov	r0, r5
   d57b8:	f7ff ff08 	bl	d55cc <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d57bc:	4604      	mov	r4, r0
   d57be:	b160      	cbz	r0, d57da <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d57c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d57c4:	ea03 0206 	and.w	r2, r3, r6
   d57c8:	433a      	orrs	r2, r7
        if (newValue != value) {
   d57ca:	4293      	cmp	r3, r2
   d57cc:	d005      	beq.n	d57da <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d57ce:	9901      	ldr	r1, [sp, #4]
   d57d0:	2300      	movs	r3, #0
   d57d2:	4628      	mov	r0, r5
   d57d4:	f7ff ff7c 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
   d57d8:	4604      	mov	r4, r0
    if (lock) {
   d57da:	f1b8 0f00 	cmp.w	r8, #0
   d57de:	d002      	beq.n	d57e6 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d57e0:	6868      	ldr	r0, [r5, #4]
   d57e2:	f007 fa6d 	bl	dccc0 <_ZN7TwoWire6unlockEv>
}
   d57e6:	4620      	mov	r0, r4
   d57e8:	b004      	add	sp, #16
   d57ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d57f0 <_ZN6AB180511resetConfigEm>:
bool AB1805::resetConfig(uint32_t flags) {
   d57f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d57f2:	4604      	mov	r4, r0
    _log.trace("resetConfig(0x%08lx)", flags);
   d57f4:	460a      	mov	r2, r1
   d57f6:	483f      	ldr	r0, [pc, #252]	; (d58f4 <_ZN6AB180511resetConfigEm+0x104>)
bool AB1805::resetConfig(uint32_t flags) {
   d57f8:	460d      	mov	r5, r1
    _log.trace("resetConfig(0x%08lx)", flags);
   d57fa:	493f      	ldr	r1, [pc, #252]	; (d58f8 <_ZN6AB180511resetConfigEm+0x108>)
   d57fc:	f7ff fe56 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
    wire.lock();
   d5800:	6860      	ldr	r0, [r4, #4]
   d5802:	f007 fa54 	bl	dccae <_ZN7TwoWire4lockEv>
    writeRegister(REG_STATUS, REG_STATUS_DEFAULT, false);
   d5806:	2300      	movs	r3, #0
   d5808:	461a      	mov	r2, r3
   d580a:	210f      	movs	r1, #15
   d580c:	4620      	mov	r0, r4
   d580e:	f7ff ff5f 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_1, REG_CTRL_1_DEFAULT, false);
   d5812:	2300      	movs	r3, #0
   d5814:	2213      	movs	r2, #19
   d5816:	2110      	movs	r1, #16
   d5818:	4620      	mov	r0, r4
   d581a:	f7ff ff59 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_2, REG_CTRL_2_DEFAULT, false);
   d581e:	2300      	movs	r3, #0
   d5820:	223c      	movs	r2, #60	; 0x3c
   d5822:	2111      	movs	r1, #17
   d5824:	4620      	mov	r0, r4
   d5826:	f7ff ff53 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_INT_MASK, REG_INT_MASK_DEFAULT, false);
   d582a:	2300      	movs	r3, #0
   d582c:	22e0      	movs	r2, #224	; 0xe0
   d582e:	2112      	movs	r1, #18
   d5830:	4620      	mov	r0, r4
   d5832:	f7ff ff4d 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SQW, REG_SQW_DEFAULT, false);
   d5836:	2300      	movs	r3, #0
   d5838:	2226      	movs	r2, #38	; 0x26
   d583a:	2113      	movs	r1, #19
   d583c:	4620      	mov	r0, r4
   d583e:	f7ff ff47 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT, false);
   d5842:	2300      	movs	r3, #0
   d5844:	461a      	mov	r2, r3
   d5846:	2117      	movs	r1, #23
   d5848:	4620      	mov	r0, r4
   d584a:	f7ff ff41 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0) {
   d584e:	f015 0301 	ands.w	r3, r5, #1
   d5852:	d048      	beq.n	d58e6 <_ZN6AB180511resetConfigEm+0xf6>
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
   d5854:	2300      	movs	r3, #0
   d5856:	9300      	str	r3, [sp, #0]
   d5858:	22e3      	movs	r2, #227	; 0xe3
   d585a:	2323      	movs	r3, #35	; 0x23
   d585c:	2118      	movs	r1, #24
   d585e:	4620      	mov	r0, r4
   d5860:	f7ff ff96 	bl	d5790 <_ZN6AB180512maskRegisterEhhhb>
    writeRegister(REG_TIMER, REG_TIMER_DEFAULT, false);
   d5864:	2300      	movs	r3, #0
   d5866:	461a      	mov	r2, r3
   d5868:	2119      	movs	r1, #25
   d586a:	4620      	mov	r0, r4
   d586c:	f7ff ff30 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT, false);
   d5870:	2300      	movs	r3, #0
   d5872:	461a      	mov	r2, r3
   d5874:	211a      	movs	r1, #26
   d5876:	4620      	mov	r0, r4
   d5878:	f7ff ff2a 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_WDT, REG_WDT_DEFAULT, false);
   d587c:	2300      	movs	r3, #0
   d587e:	461a      	mov	r2, r3
   d5880:	211b      	movs	r1, #27
   d5882:	4620      	mov	r0, r4
   d5884:	f7ff ff24 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
   d5888:	f015 0f02 	tst.w	r5, #2
    writeRegister(REG_OSC_CTRL, oscCtrl, false);
   d588c:	f04f 0300 	mov.w	r3, #0
   d5890:	bf0c      	ite	eq
   d5892:	461a      	moveq	r2, r3
   d5894:	2288      	movne	r2, #136	; 0x88
   d5896:	211c      	movs	r1, #28
   d5898:	4620      	mov	r0, r4
   d589a:	f7ff ff19 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TRICKLE, REG_TRICKLE_DEFAULT, false);
   d589e:	2300      	movs	r3, #0
   d58a0:	461a      	mov	r2, r3
   d58a2:	2120      	movs	r1, #32
   d58a4:	4620      	mov	r0, r4
   d58a6:	f7ff ff13 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT, false);
   d58aa:	2300      	movs	r3, #0
   d58ac:	22f0      	movs	r2, #240	; 0xf0
   d58ae:	2121      	movs	r1, #33	; 0x21
   d58b0:	4620      	mov	r0, r4
   d58b2:	f7ff ff0d 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_AFCTRL, REG_AFCTRL_DEFAULT, false);
   d58b6:	2300      	movs	r3, #0
   d58b8:	461a      	mov	r2, r3
   d58ba:	2126      	movs	r1, #38	; 0x26
   d58bc:	4620      	mov	r0, r4
   d58be:	f7ff ff07 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT, false);
   d58c2:	2300      	movs	r3, #0
   d58c4:	2280      	movs	r2, #128	; 0x80
   d58c6:	2127      	movs	r1, #39	; 0x27
   d58c8:	4620      	mov	r0, r4
   d58ca:	f7ff ff01 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_OCTRL, REG_OCTRL_DEFAULT, false);
   d58ce:	2300      	movs	r3, #0
   d58d0:	461a      	mov	r2, r3
   d58d2:	2130      	movs	r1, #48	; 0x30
   d58d4:	4620      	mov	r0, r4
   d58d6:	f7ff fefb 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
    wire.unlock();
   d58da:	6860      	ldr	r0, [r4, #4]
   d58dc:	f007 f9f0 	bl	dccc0 <_ZN7TwoWire6unlockEv>
}
   d58e0:	2001      	movs	r0, #1
   d58e2:	b003      	add	sp, #12
   d58e4:	bd30      	pop	{r4, r5, pc}
        writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT, false);
   d58e6:	2223      	movs	r2, #35	; 0x23
   d58e8:	2118      	movs	r1, #24
   d58ea:	4620      	mov	r0, r4
   d58ec:	f7ff fef0 	bl	d56d0 <_ZN6AB180513writeRegisterEhhb>
   d58f0:	e7b8      	b.n	d5864 <_ZN6AB180511resetConfigEm+0x74>
   d58f2:	bf00      	nop
   d58f4:	2003e488 	.word	0x2003e488
   d58f8:	000e23bc 	.word	0x000e23bc

000d58fc <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d58fc:	b513      	push	{r0, r1, r4, lr}
   d58fe:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5900:	f10d 0207 	add.w	r2, sp, #7
   d5904:	f7ff fe62 	bl	d55cc <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d5908:	b128      	cbz	r0, d5916 <_ZN6AB180510isBitClearEhhb+0x1a>
   d590a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d590e:	421c      	tst	r4, r3
   d5910:	bf0c      	ite	eq
   d5912:	2001      	moveq	r0, #1
   d5914:	2000      	movne	r0, #0
}
   d5916:	b002      	add	sp, #8
   d5918:	bd10      	pop	{r4, pc}

000d591a <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d591a:	b513      	push	{r0, r1, r4, lr}
   d591c:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d591e:	f10d 0207 	add.w	r2, sp, #7
   d5922:	f7ff fe53 	bl	d55cc <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d5926:	b128      	cbz	r0, d5934 <_ZN6AB18058isBitSetEhhb+0x1a>
   d5928:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d592c:	421c      	tst	r4, r3
   d592e:	bf14      	ite	ne
   d5930:	2001      	movne	r0, #1
   d5932:	2000      	moveq	r0, #0
}
   d5934:	b002      	add	sp, #8
   d5936:	bd10      	pop	{r4, pc}

000d5938 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5938:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d593a:	43d2      	mvns	r2, r2
   d593c:	9300      	str	r3, [sp, #0]
   d593e:	b2d2      	uxtb	r2, r2
   d5940:	2300      	movs	r3, #0
   d5942:	f7ff ff25 	bl	d5790 <_ZN6AB180512maskRegisterEhhhb>
}
   d5946:	b003      	add	sp, #12
   d5948:	f85d fb04 	ldr.w	pc, [sp], #4

000d594c <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d594c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d594e:	2301      	movs	r3, #1
   d5950:	f10d 0207 	add.w	r2, sp, #7
   d5954:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d5956:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d5958:	f7ff fe38 	bl	d55cc <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d595c:	4605      	mov	r5, r0
   d595e:	b938      	cbnz	r0, d5970 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d5960:	491e      	ldr	r1, [pc, #120]	; (d59dc <_ZN6AB180516updateWakeReasonEv+0x90>)
   d5962:	481f      	ldr	r0, [pc, #124]	; (d59e0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5964:	22ad      	movs	r2, #173	; 0xad
   d5966:	f7ff fdb8 	bl	d54da <_ZNK5spark6Logger5errorEPKcz>
}
   d596a:	4628      	mov	r0, r5
   d596c:	b003      	add	sp, #12
   d596e:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d5970:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5974:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d5978:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d597c:	d00b      	beq.n	d5996 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d597e:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d5980:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5982:	210f      	movs	r1, #15
   d5984:	4620      	mov	r0, r4
   d5986:	f7ff ffd7 	bl	d5938 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d598a:	4a16      	ldr	r2, [pc, #88]	; (d59e4 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d598c:	4916      	ldr	r1, [pc, #88]	; (d59e8 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d598e:	4814      	ldr	r0, [pc, #80]	; (d59e0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5990:	f7fe fcb3 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
   d5994:	e7e9      	b.n	d596a <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d5996:	2208      	movs	r2, #8
   d5998:	2117      	movs	r1, #23
   d599a:	4620      	mov	r0, r4
   d599c:	f7ff ffbd 	bl	d591a <_ZN6AB18058isBitSetEhhb>
   d59a0:	b118      	cbz	r0, d59aa <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d59a2:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d59a4:	4a11      	ldr	r2, [pc, #68]	; (d59ec <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d59a6:	61e3      	str	r3, [r4, #28]
   d59a8:	e7f0      	b.n	d598c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d59aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d59ae:	071a      	lsls	r2, r3, #28
   d59b0:	d509      	bpl.n	d59c6 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d59b2:	2303      	movs	r3, #3
   d59b4:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d59b6:	2208      	movs	r2, #8
   d59b8:	2301      	movs	r3, #1
   d59ba:	210f      	movs	r1, #15
   d59bc:	4620      	mov	r0, r4
   d59be:	f7ff ffbb 	bl	d5938 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d59c2:	4a0b      	ldr	r2, [pc, #44]	; (d59f0 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d59c4:	e7e2      	b.n	d598c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d59c6:	075b      	lsls	r3, r3, #29
   d59c8:	d5cf      	bpl.n	d596a <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d59ca:	2204      	movs	r2, #4
   d59cc:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d59ce:	2301      	movs	r3, #1
   d59d0:	210f      	movs	r1, #15
   d59d2:	4620      	mov	r0, r4
   d59d4:	f7ff ffb0 	bl	d5938 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d59d8:	4a06      	ldr	r2, [pc, #24]	; (d59f4 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d59da:	e7d7      	b.n	d598c <_ZN6AB180516updateWakeReasonEv+0x40>
   d59dc:	000e2400 	.word	0x000e2400
   d59e0:	2003e488 	.word	0x2003e488
   d59e4:	000e23d1 	.word	0x000e23d1
   d59e8:	000e241f 	.word	0x000e241f
   d59ec:	000e23da 	.word	0x000e23da
   d59f0:	000e23ea 	.word	0x000e23ea
   d59f4:	000e23fa 	.word	0x000e23fa

000d59f8 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d59f8:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d59fa:	9300      	str	r3, [sp, #0]
   d59fc:	4613      	mov	r3, r2
   d59fe:	22ff      	movs	r2, #255	; 0xff
   d5a00:	f7ff fec6 	bl	d5790 <_ZN6AB180512maskRegisterEhhhb>
}
   d5a04:	b003      	add	sp, #12
   d5a06:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a0a <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d5a0a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5a0e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5a12:	4605      	mov	r5, r0
   d5a14:	460c      	mov	r4, r1
   d5a16:	4691      	mov	r9, r2
   d5a18:	461f      	mov	r7, r3
    if (lock) {
   d5a1a:	f1ba 0f00 	cmp.w	sl, #0
   d5a1e:	d002      	beq.n	d5a26 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d5a20:	6840      	ldr	r0, [r0, #4]
   d5a22:	f007 f944 	bl	dccae <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d5a26:	b307      	cbz	r7, d5a6a <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d5a28:	2f20      	cmp	r7, #32
   d5a2a:	463e      	mov	r6, r7
   d5a2c:	bf28      	it	cs
   d5a2e:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d5a30:	2c7f      	cmp	r4, #127	; 0x7f
   d5a32:	d826      	bhi.n	d5a82 <_ZN6AB18057readRamEjPhjb+0x78>
   d5a34:	1933      	adds	r3, r6, r4
   d5a36:	2b80      	cmp	r3, #128	; 0x80
   d5a38:	d901      	bls.n	d5a3e <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d5a3a:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5a3e:	2301      	movs	r3, #1
   d5a40:	2204      	movs	r2, #4
   d5a42:	213f      	movs	r1, #63	; 0x3f
   d5a44:	4628      	mov	r0, r5
   d5a46:	f7ff ff77 	bl	d5938 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d5a4a:	2300      	movs	r3, #0
   d5a4c:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d5a50:	9300      	str	r3, [sp, #0]
   d5a52:	464a      	mov	r2, r9
   d5a54:	4633      	mov	r3, r6
   d5a56:	b2c9      	uxtb	r1, r1
   d5a58:	4628      	mov	r0, r5
   d5a5a:	f7ff fd69 	bl	d5530 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d5a5e:	4680      	mov	r8, r0
   d5a60:	b128      	cbz	r0, d5a6e <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d5a62:	4434      	add	r4, r6
        dataLen -= count;
   d5a64:	1bbf      	subs	r7, r7, r6
        data += count;
   d5a66:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d5a68:	e7dd      	b.n	d5a26 <_ZN6AB18057readRamEjPhjb+0x1c>
   d5a6a:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d5a6e:	f1ba 0f00 	cmp.w	sl, #0
   d5a72:	d002      	beq.n	d5a7a <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d5a74:	6868      	ldr	r0, [r5, #4]
   d5a76:	f007 f923 	bl	dccc0 <_ZN7TwoWire6unlockEv>
}
   d5a7a:	4640      	mov	r0, r8
   d5a7c:	b002      	add	sp, #8
   d5a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5a82:	2301      	movs	r3, #1
   d5a84:	2204      	movs	r2, #4
   d5a86:	213f      	movs	r1, #63	; 0x3f
   d5a88:	4628      	mov	r0, r5
   d5a8a:	f7ff ffb5 	bl	d59f8 <_ZN6AB180514setRegisterBitEhhb>
   d5a8e:	e7dc      	b.n	d5a4a <_ZN6AB18057readRamEjPhjb+0x40>

000d5a90 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d5a90:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5a94:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5a98:	4605      	mov	r5, r0
   d5a9a:	460c      	mov	r4, r1
   d5a9c:	4691      	mov	r9, r2
   d5a9e:	461f      	mov	r7, r3
    if (lock) {
   d5aa0:	f1ba 0f00 	cmp.w	sl, #0
   d5aa4:	d002      	beq.n	d5aac <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d5aa6:	6840      	ldr	r0, [r0, #4]
   d5aa8:	f007 f901 	bl	dccae <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d5aac:	b307      	cbz	r7, d5af0 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d5aae:	2f1f      	cmp	r7, #31
   d5ab0:	463e      	mov	r6, r7
   d5ab2:	bf28      	it	cs
   d5ab4:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d5ab6:	2c7f      	cmp	r4, #127	; 0x7f
   d5ab8:	d826      	bhi.n	d5b08 <_ZN6AB18058writeRamEjPKhjb+0x78>
   d5aba:	1933      	adds	r3, r6, r4
   d5abc:	2b80      	cmp	r3, #128	; 0x80
   d5abe:	d901      	bls.n	d5ac4 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d5ac0:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5ac4:	2301      	movs	r3, #1
   d5ac6:	2204      	movs	r2, #4
   d5ac8:	213f      	movs	r1, #63	; 0x3f
   d5aca:	4628      	mov	r0, r5
   d5acc:	f7ff ff34 	bl	d5938 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d5ad0:	2300      	movs	r3, #0
   d5ad2:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d5ad6:	9300      	str	r3, [sp, #0]
   d5ad8:	464a      	mov	r2, r9
   d5ada:	4633      	mov	r3, r6
   d5adc:	b2c9      	uxtb	r1, r1
   d5ade:	4628      	mov	r0, r5
   d5ae0:	f7ff fdba 	bl	d5658 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d5ae4:	4680      	mov	r8, r0
   d5ae6:	b128      	cbz	r0, d5af4 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d5ae8:	4434      	add	r4, r6
        dataLen -= count;
   d5aea:	1bbf      	subs	r7, r7, r6
        data += count;
   d5aec:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d5aee:	e7dd      	b.n	d5aac <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d5af0:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d5af4:	f1ba 0f00 	cmp.w	sl, #0
   d5af8:	d002      	beq.n	d5b00 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d5afa:	6868      	ldr	r0, [r5, #4]
   d5afc:	f007 f8e0 	bl	dccc0 <_ZN7TwoWire6unlockEv>
}
   d5b00:	4640      	mov	r0, r8
   d5b02:	b002      	add	sp, #8
   d5b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5b08:	2301      	movs	r3, #1
   d5b0a:	2204      	movs	r2, #4
   d5b0c:	213f      	movs	r1, #63	; 0x3f
   d5b0e:	4628      	mov	r0, r5
   d5b10:	f7ff ff72 	bl	d59f8 <_ZN6AB180514setRegisterBitEhhb>
   d5b14:	e7dc      	b.n	d5ad0 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d5b18 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d5b18:	b530      	push	{r4, r5, lr}
   d5b1a:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d5b1c:	680d      	ldr	r5, [r1, #0]
   d5b1e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d5b22:	9503      	str	r5, [sp, #12]
   d5b24:	684d      	ldr	r5, [r1, #4]
   d5b26:	9502      	str	r5, [sp, #8]
   d5b28:	688d      	ldr	r5, [r1, #8]
   d5b2a:	9501      	str	r5, [sp, #4]
   d5b2c:	68c9      	ldr	r1, [r1, #12]
   d5b2e:	9100      	str	r1, [sp, #0]
   d5b30:	3301      	adds	r3, #1
   d5b32:	4904      	ldr	r1, [pc, #16]	; (d5b44 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d5b34:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d5b38:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d5b3a:	f009 f803 	bl	deb44 <_ZN6String6formatEPKcz>
}
   d5b3e:	4620      	mov	r0, r4
   d5b40:	b005      	add	sp, #20
   d5b42:	bd30      	pop	{r4, r5, pc}
   d5b44:	000e2430 	.word	0x000e2430

000d5b48 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d5b48:	1103      	asrs	r3, r0, #4
}
   d5b4a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d5b4c:	f000 000f 	and.w	r0, r0, #15
}
   d5b50:	fb02 0003 	mla	r0, r2, r3, r0
   d5b54:	4770      	bx	lr

000d5b56 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d5b56:	b538      	push	{r3, r4, r5, lr}
   d5b58:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d5b5a:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d5b5c:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d5b5e:	f7ff fff3 	bl	d5b48 <_ZN6AB180510bcdToValueEh>
   d5b62:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d5b64:	7860      	ldrb	r0, [r4, #1]
   d5b66:	f7ff ffef 	bl	d5b48 <_ZN6AB180510bcdToValueEh>
   d5b6a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d5b6c:	78a0      	ldrb	r0, [r4, #2]
   d5b6e:	f7ff ffeb 	bl	d5b48 <_ZN6AB180510bcdToValueEh>
   d5b72:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d5b74:	78e0      	ldrb	r0, [r4, #3]
   d5b76:	f7ff ffe7 	bl	d5b48 <_ZN6AB180510bcdToValueEh>
   d5b7a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d5b7c:	7920      	ldrb	r0, [r4, #4]
   d5b7e:	f7ff ffe3 	bl	d5b48 <_ZN6AB180510bcdToValueEh>
   d5b82:	3801      	subs	r0, #1
   d5b84:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d5b86:	b92d      	cbnz	r5, d5b94 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d5b88:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d5b8a:	7828      	ldrb	r0, [r5, #0]
   d5b8c:	f7ff ffdc 	bl	d5b48 <_ZN6AB180510bcdToValueEh>
   d5b90:	6188      	str	r0, [r1, #24]
}
   d5b92:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d5b94:	7960      	ldrb	r0, [r4, #5]
   d5b96:	f7ff ffd7 	bl	d5b48 <_ZN6AB180510bcdToValueEh>
   d5b9a:	3064      	adds	r0, #100	; 0x64
   d5b9c:	1da5      	adds	r5, r4, #6
   d5b9e:	6148      	str	r0, [r1, #20]
   d5ba0:	e7f3      	b.n	d5b8a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d5ba4 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5ba4:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5ba6:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5ba8:	b088      	sub	sp, #32
   d5baa:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5bac:	461a      	mov	r2, r3
   d5bae:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5bb0:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5bb2:	f7ff fea3 	bl	d58fc <_ZN6AB180510isBitClearEhhb>
   d5bb6:	b1f0      	cbz	r0, d5bf6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d5bb8:	2308      	movs	r3, #8
   d5bba:	2601      	movs	r6, #1
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	9600      	str	r6, [sp, #0]
   d5bc0:	eb0d 0203 	add.w	r2, sp, r3
   d5bc4:	2100      	movs	r1, #0
   d5bc6:	f7ff fcb3 	bl	d5530 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d5bca:	4604      	mov	r4, r0
   d5bcc:	b198      	cbz	r0, d5bf6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d5bce:	4632      	mov	r2, r6
   d5bd0:	4629      	mov	r1, r5
   d5bd2:	f10d 0009 	add.w	r0, sp, #9
   d5bd6:	f7ff ffbe 	bl	d5b56 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d5bda:	a804      	add	r0, sp, #16
   d5bdc:	f7ff ff9c 	bl	d5b18 <_ZN6AB180510tmToStringEPK2tm>
   d5be0:	4808      	ldr	r0, [pc, #32]	; (d5c04 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d5be2:	9a04      	ldr	r2, [sp, #16]
   d5be4:	4908      	ldr	r1, [pc, #32]	; (d5c08 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d5be6:	f7fe fb88 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
   d5bea:	a804      	add	r0, sp, #16
   d5bec:	f008 fe3c 	bl	de868 <_ZN6StringD1Ev>
}
   d5bf0:	4620      	mov	r0, r4
   d5bf2:	b008      	add	sp, #32
   d5bf4:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d5bf6:	2224      	movs	r2, #36	; 0x24
   d5bf8:	2100      	movs	r1, #0
   d5bfa:	4628      	mov	r0, r5
   d5bfc:	f00a f9ea 	bl	dffd4 <memset>
   d5c00:	2400      	movs	r4, #0
   d5c02:	e7f5      	b.n	d5bf0 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d5c04:	2003e488 	.word	0x2003e488
   d5c08:	000e244e 	.word	0x000e244e

000d5c0c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d5c0c:	b530      	push	{r4, r5, lr}
   d5c0e:	b08b      	sub	sp, #44	; 0x2c
   d5c10:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d5c12:	a901      	add	r1, sp, #4
   d5c14:	f7ff ffc6 	bl	d5ba4 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d5c18:	4604      	mov	r4, r0
   d5c1a:	b120      	cbz	r0, d5c26 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d5c1c:	a801      	add	r0, sp, #4
   d5c1e:	f006 fc41 	bl	dc4a4 <mktime>
   d5c22:	e9c5 0100 	strd	r0, r1, [r5]
}
   d5c26:	4620      	mov	r0, r4
   d5c28:	b00b      	add	sp, #44	; 0x2c
   d5c2a:	bd30      	pop	{r4, r5, pc}

000d5c2c <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d5c2c:	b510      	push	{r4, lr}
   d5c2e:	4604      	mov	r4, r0
   d5c30:	b088      	sub	sp, #32
    if (callBegin) {
   d5c32:	b111      	cbz	r1, d5c3a <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d5c34:	6840      	ldr	r0, [r0, #4]
   d5c36:	f007 f803 	bl	dcc40 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d5c3a:	4620      	mov	r0, r4
   d5c3c:	f7ff fcce 	bl	d55dc <_ZN6AB180510detectChipEv>
   d5c40:	b370      	cbz	r0, d5ca0 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d5c42:	4620      	mov	r0, r4
   d5c44:	f7ff fe82 	bl	d594c <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d5c48:	2301      	movs	r3, #1
   d5c4a:	461a      	mov	r2, r3
   d5c4c:	2110      	movs	r1, #16
   d5c4e:	4620      	mov	r0, r4
   d5c50:	f7ff fe54 	bl	d58fc <_ZN6AB180510isBitClearEhhb>
   d5c54:	b1d8      	cbz	r0, d5c8e <_ZN6AB18055setupEb+0x62>
   d5c56:	f009 f94f 	bl	deef8 <_ZN9TimeClass7isValidEv>
   d5c5a:	b9c0      	cbnz	r0, d5c8e <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d5c5c:	a902      	add	r1, sp, #8
   d5c5e:	4620      	mov	r0, r4
   d5c60:	f7ff ffd4 	bl	d5c0c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d5c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d5c68:	f009 f84d 	bl	ded06 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d5c6c:	4b0f      	ldr	r3, [pc, #60]	; (d5cac <_ZN6AB18055setupEb+0x80>)
   d5c6e:	4910      	ldr	r1, [pc, #64]	; (d5cb0 <_ZN6AB18055setupEb+0x84>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	9300      	str	r3, [sp, #0]
   d5c74:	a804      	add	r0, sp, #16
   d5c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d5c7a:	f009 f8fb 	bl	dee74 <_ZN9TimeClass6formatExPKc>
   d5c7e:	480d      	ldr	r0, [pc, #52]	; (d5cb4 <_ZN6AB18055setupEb+0x88>)
   d5c80:	9a04      	ldr	r2, [sp, #16]
   d5c82:	490d      	ldr	r1, [pc, #52]	; (d5cb8 <_ZN6AB18055setupEb+0x8c>)
   d5c84:	f7fe fb39 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
   d5c88:	a804      	add	r0, sp, #16
   d5c8a:	f008 fded 	bl	de868 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d5c8e:	4a0b      	ldr	r2, [pc, #44]	; (d5cbc <_ZN6AB18055setupEb+0x90>)
   d5c90:	2300      	movs	r3, #0
   d5c92:	2100      	movs	r1, #0
   d5c94:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d5c98:	f006 fa96 	bl	dc1c8 <system_subscribe_event>
}
   d5c9c:	b008      	add	sp, #32
   d5c9e:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d5ca0:	4907      	ldr	r1, [pc, #28]	; (d5cc0 <_ZN6AB18055setupEb+0x94>)
   d5ca2:	4804      	ldr	r0, [pc, #16]	; (d5cb4 <_ZN6AB18055setupEb+0x88>)
   d5ca4:	f7ff fc19 	bl	d54da <_ZNK5spark6Logger5errorEPKcz>
   d5ca8:	e7f1      	b.n	d5c8e <_ZN6AB18055setupEb+0x62>
   d5caa:	bf00      	nop
   d5cac:	2003e214 	.word	0x2003e214
   d5cb0:	2003e5cc 	.word	0x2003e5cc
   d5cb4:	2003e488 	.word	0x2003e488
   d5cb8:	000e245c 	.word	0x000e245c
   d5cbc:	000d576d 	.word	0x000d576d
   d5cc0:	000e2479 	.word	0x000e2479

000d5cc4 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d5cc4:	220a      	movs	r2, #10
   d5cc6:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d5cca:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d5cce:	fb93 f1f2 	sdiv	r1, r3, r2
   d5cd2:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d5cd6:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d5cda:	b2c0      	uxtb	r0, r0
   d5cdc:	4770      	bx	lr

000d5cde <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d5cde:	b570      	push	{r4, r5, r6, lr}
   d5ce0:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d5ce2:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d5ce4:	460c      	mov	r4, r1
   d5ce6:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d5ce8:	f7ff ffec 	bl	d5cc4 <_ZN6AB180510valueToBcdEi>
   d5cec:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d5cee:	6868      	ldr	r0, [r5, #4]
   d5cf0:	f7ff ffe8 	bl	d5cc4 <_ZN6AB180510valueToBcdEi>
   d5cf4:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d5cf6:	68a8      	ldr	r0, [r5, #8]
   d5cf8:	f7ff ffe4 	bl	d5cc4 <_ZN6AB180510valueToBcdEi>
   d5cfc:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d5cfe:	68e8      	ldr	r0, [r5, #12]
   d5d00:	f7ff ffe0 	bl	d5cc4 <_ZN6AB180510valueToBcdEi>
   d5d04:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d5d06:	6928      	ldr	r0, [r5, #16]
   d5d08:	3001      	adds	r0, #1
   d5d0a:	f7ff ffdb 	bl	d5cc4 <_ZN6AB180510valueToBcdEi>
   d5d0e:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d5d10:	b92e      	cbnz	r6, d5d1e <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d5d12:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d5d14:	69a8      	ldr	r0, [r5, #24]
   d5d16:	f7ff ffd5 	bl	d5cc4 <_ZN6AB180510valueToBcdEi>
   d5d1a:	7030      	strb	r0, [r6, #0]
}
   d5d1c:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d5d1e:	696a      	ldr	r2, [r5, #20]
   d5d20:	2364      	movs	r3, #100	; 0x64
   d5d22:	fb92 f0f3 	sdiv	r0, r2, r3
   d5d26:	fb03 2010 	mls	r0, r3, r0, r2
   d5d2a:	f7ff ffcb 	bl	d5cc4 <_ZN6AB180510valueToBcdEi>
   d5d2e:	1da6      	adds	r6, r4, #6
   d5d30:	7160      	strb	r0, [r4, #5]
   d5d32:	e7ef      	b.n	d5d14 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d5d34 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d5d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5d36:	b087      	sub	sp, #28
   d5d38:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d5d3a:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d5d3c:	4616      	mov	r6, r2
   d5d3e:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d5d40:	f7ff feea 	bl	d5b18 <_ZN6AB180510tmToStringEPK2tm>
   d5d44:	481e      	ldr	r0, [pc, #120]	; (d5dc0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d5d46:	9a02      	ldr	r2, [sp, #8]
   d5d48:	491e      	ldr	r1, [pc, #120]	; (d5dc4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d5d4a:	f7fe fad6 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
   d5d4e:	a802      	add	r0, sp, #8
   d5d50:	f008 fd8a 	bl	de868 <_ZN6StringD1Ev>
    if (lock) {
   d5d54:	b116      	cbz	r6, d5d5c <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d5d56:	6868      	ldr	r0, [r5, #4]
   d5d58:	f006 ffa9 	bl	dccae <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d5d5c:	4620      	mov	r0, r4
   d5d5e:	2201      	movs	r2, #1
   d5d60:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d5d64:	2700      	movs	r7, #0
   d5d66:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d5d6a:	f7ff ffb8 	bl	d5cde <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d5d6e:	2301      	movs	r3, #1
   d5d70:	461a      	mov	r2, r3
   d5d72:	2110      	movs	r1, #16
   d5d74:	4628      	mov	r0, r5
   d5d76:	f7ff fe3f 	bl	d59f8 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d5d7a:	4604      	mov	r4, r0
   d5d7c:	b1e8      	cbz	r0, d5dba <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d5d7e:	2308      	movs	r3, #8
   d5d80:	9700      	str	r7, [sp, #0]
   d5d82:	eb0d 0203 	add.w	r2, sp, r3
   d5d86:	4639      	mov	r1, r7
   d5d88:	4628      	mov	r0, r5
   d5d8a:	f7ff fc65 	bl	d5658 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d5d8e:	4604      	mov	r4, r0
   d5d90:	b160      	cbz	r0, d5dac <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d5d92:	2301      	movs	r3, #1
   d5d94:	461a      	mov	r2, r3
   d5d96:	2110      	movs	r1, #16
   d5d98:	4628      	mov	r0, r5
   d5d9a:	f7ff fdcd 	bl	d5938 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d5d9e:	b116      	cbz	r6, d5da6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d5da0:	6868      	ldr	r0, [r5, #4]
   d5da2:	f006 ff8d 	bl	dccc0 <_ZN7TwoWire6unlockEv>
}
   d5da6:	4620      	mov	r0, r4
   d5da8:	b007      	add	sp, #28
   d5daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d5dac:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d5db0:	4905      	ldr	r1, [pc, #20]	; (d5dc8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d5db2:	4803      	ldr	r0, [pc, #12]	; (d5dc0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d5db4:	f7ff fb91 	bl	d54da <_ZNK5spark6Logger5errorEPKcz>
   d5db8:	e7f1      	b.n	d5d9e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d5dba:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d5dbe:	e7f7      	b.n	d5db0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d5dc0:	2003e488 	.word	0x2003e488
   d5dc4:	000e2491 	.word	0x000e2491
   d5dc8:	000e249f 	.word	0x000e249f

000d5dcc <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d5dcc:	b513      	push	{r0, r1, r4, lr}
   d5dce:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d5dd0:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d5dd2:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d5dd6:	f00a f8c3 	bl	dff60 <gmtime>
    return setRtcFromTm(tm, lock);
   d5dda:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d5dde:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d5de0:	4620      	mov	r0, r4
   d5de2:	f7ff ffa7 	bl	d5d34 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d5de6:	b002      	add	sp, #8
   d5de8:	bd10      	pop	{r4, pc}
	...

000d5dec <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d5dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d5dee:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d5df0:	b089      	sub	sp, #36	; 0x24
   d5df2:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d5df4:	bb75      	cbnz	r5, d5e54 <_ZN6AB18054loopEv+0x68>
   d5df6:	f009 f87f 	bl	deef8 <_ZN9TimeClass7isValidEv>
   d5dfa:	b358      	cbz	r0, d5e54 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d5dfc:	2600      	movs	r6, #0
   d5dfe:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d5e00:	a904      	add	r1, sp, #16
   d5e02:	4628      	mov	r0, r5
        tm = 0;
   d5e04:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d5e08:	f006 fa64 	bl	dc2d4 <spark_sync_time_last>
   d5e0c:	b310      	cbz	r0, d5e54 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d5e0e:	2501      	movs	r5, #1
   d5e10:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d5e12:	f009 f88e 	bl	def32 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d5e16:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d5e18:	4602      	mov	r2, r0
   d5e1a:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d5e1c:	4620      	mov	r0, r4
        time_t time = Time.now();
   d5e1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d5e22:	f7ff ffd3 	bl	d5dcc <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d5e26:	a902      	add	r1, sp, #8
   d5e28:	4620      	mov	r0, r4
        time = 0;
   d5e2a:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d5e2e:	f7ff feed 	bl	d5c0c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d5e32:	4b12      	ldr	r3, [pc, #72]	; (d5e7c <_ZN6AB18054loopEv+0x90>)
   d5e34:	4912      	ldr	r1, [pc, #72]	; (d5e80 <_ZN6AB18054loopEv+0x94>)
   d5e36:	681b      	ldr	r3, [r3, #0]
   d5e38:	9300      	str	r3, [sp, #0]
   d5e3a:	a804      	add	r0, sp, #16
   d5e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d5e40:	f009 f818 	bl	dee74 <_ZN9TimeClass6formatExPKc>
   d5e44:	480f      	ldr	r0, [pc, #60]	; (d5e84 <_ZN6AB18054loopEv+0x98>)
   d5e46:	9a04      	ldr	r2, [sp, #16]
   d5e48:	490f      	ldr	r1, [pc, #60]	; (d5e88 <_ZN6AB18054loopEv+0x9c>)
   d5e4a:	f7fe fa56 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
   d5e4e:	a804      	add	r0, sp, #16
   d5e50:	f008 fd0a 	bl	de868 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d5e54:	6963      	ldr	r3, [r4, #20]
   d5e56:	b173      	cbz	r3, d5e76 <_ZN6AB18054loopEv+0x8a>
   d5e58:	f005 ff7c 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d5e5c:	6923      	ldr	r3, [r4, #16]
   d5e5e:	1ac0      	subs	r0, r0, r3
   d5e60:	6963      	ldr	r3, [r4, #20]
   d5e62:	4298      	cmp	r0, r3
   d5e64:	d307      	bcc.n	d5e76 <_ZN6AB18054loopEv+0x8a>
   d5e66:	f005 ff75 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d5e6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d5e6e:	6120      	str	r0, [r4, #16]
            setWDT();
   d5e70:	4620      	mov	r0, r4
   d5e72:	f7ff fc39 	bl	d56e8 <_ZN6AB18056setWDTEi>
}
   d5e76:	b009      	add	sp, #36	; 0x24
   d5e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5e7a:	bf00      	nop
   d5e7c:	2003e214 	.word	0x2003e214
   d5e80:	2003e5cc 	.word	0x2003e5cc
   d5e84:	2003e488 	.word	0x2003e488
   d5e88:	000e24ba 	.word	0x000e24ba

000d5e8c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d5e8c:	4b01      	ldr	r3, [pc, #4]	; (d5e94 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d5e8e:	4a02      	ldr	r2, [pc, #8]	; (d5e98 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d5e90:	601a      	str	r2, [r3, #0]
}
   d5e92:	4770      	bx	lr
   d5e94:	2003e488 	.word	0x2003e488
   d5e98:	000e24d0 	.word	0x000e24d0

000d5e9c <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d5e9c:	2a02      	cmp	r2, #2
   d5e9e:	d006      	beq.n	d5eae <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x12>
   d5ea0:	2a03      	cmp	r2, #3
   d5ea2:	d002      	beq.n	d5eaa <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d5ea4:	2a01      	cmp	r2, #1
   d5ea6:	d100      	bne.n	d5eaa <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5ea8:	6001      	str	r1, [r0, #0]
	}
   d5eaa:	2000      	movs	r0, #0
   d5eac:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d5eae:	680b      	ldr	r3, [r1, #0]
   d5eb0:	6003      	str	r3, [r0, #0]
	}
   d5eb2:	e7fa      	b.n	d5eaa <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>

000d5eb4 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5eb4:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d5eb6:	2301      	movs	r3, #1
   d5eb8:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d5eba:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d5ebc:	4604      	mov	r4, r0
        if (th->func) {
   d5ebe:	b143      	cbz	r3, d5ed2 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d5ec0:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ec2:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d5ec4:	2301      	movs	r3, #1
   d5ec6:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d5ec8:	2000      	movs	r0, #0
    }
   d5eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d5ece:	f005 bf11 	b.w	dbcf4 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5ed2:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d5ed4:	2800      	cmp	r0, #0
   d5ed6:	d0f5      	beq.n	d5ec4 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d5ed8:	6883      	ldr	r3, [r0, #8]
   d5eda:	b90b      	cbnz	r3, d5ee0 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d5edc:	f009 face 	bl	df47c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ee0:	68c3      	ldr	r3, [r0, #12]
   d5ee2:	e7ee      	b.n	d5ec2 <_ZN6Thread3runEPv+0xe>

000d5ee4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d5ee4:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d5ee6:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d5ee8:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d5eea:	b135      	cbz	r5, d5efa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d5eec:	4628      	mov	r0, r5
   d5eee:	f7fe f9fb 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d5ef2:	2110      	movs	r1, #16
   d5ef4:	4628      	mov	r0, r5
   d5ef6:	f009 fab5 	bl	df464 <_ZdlPvj>
   d5efa:	4620      	mov	r0, r4
   d5efc:	2114      	movs	r1, #20
      }
   d5efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d5f02:	f009 baaf 	b.w	df464 <_ZdlPvj>

000d5f06 <_ZN6Thread7disposeEv>:
    void dispose()
   d5f06:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5f08:	6803      	ldr	r3, [r0, #0]
   d5f0a:	4604      	mov	r4, r0
        if (!isValid())
   d5f0c:	b1ab      	cbz	r3, d5f3a <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   d5f0e:	6858      	ldr	r0, [r3, #4]
   d5f10:	f005 fea0 	bl	dbc54 <os_thread_is_current>
   d5f14:	b988      	cbnz	r0, d5f3a <_ZN6Thread7disposeEv+0x34>
   d5f16:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d5f18:	7c5a      	ldrb	r2, [r3, #17]
   d5f1a:	b912      	cbnz	r2, d5f22 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d5f1c:	6858      	ldr	r0, [r3, #4]
   d5f1e:	f005 fea1 	bl	dbc64 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d5f22:	6823      	ldr	r3, [r4, #0]
   d5f24:	6858      	ldr	r0, [r3, #4]
   d5f26:	f005 fea5 	bl	dbc74 <os_thread_cleanup>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f2a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5f2c:	2300      	movs	r3, #0
   d5f2e:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d5f30:	b118      	cbz	r0, d5f3a <_ZN6Thread7disposeEv+0x34>
    }
   d5f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5f36:	f7ff bfd5 	b.w	d5ee4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d5f3a:	bd10      	pop	{r4, pc}

000d5f3c <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   d5f3c:	4a05      	ldr	r2, [pc, #20]	; (d5f54 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   d5f3e:	6002      	str	r2, [r0, #0]
   d5f40:	2200      	movs	r2, #0
   d5f42:	6042      	str	r2, [r0, #4]
   d5f44:	7302      	strb	r2, [r0, #12]
        val_(0) {
   d5f46:	f880 22bd 	strb.w	r2, [r0, #701]	; 0x2bd
    _Function_base() : _M_manager(nullptr) { }
   d5f4a:	f8c0 22c8 	str.w	r2, [r0, #712]	; 0x2c8
   d5f4e:	f8c0 22d0 	str.w	r2, [r0, #720]	; 0x2d0
}
   d5f52:	4770      	bx	lr
   d5f54:	000e2510 	.word	0x000e2510

000d5f58 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   d5f58:	b510      	push	{r4, lr}
    if (!_instance) {
   d5f5a:	4c07      	ldr	r4, [pc, #28]	; (d5f78 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   d5f5c:	6823      	ldr	r3, [r4, #0]
   d5f5e:	b943      	cbnz	r3, d5f72 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   d5f60:	f44f 7035 	mov.w	r0, #724	; 0x2d4
   d5f64:	f7fe f897 	bl	d4096 <_Znwj>
   d5f68:	4603      	mov	r3, r0
   d5f6a:	b108      	cbz	r0, d5f70 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   d5f6c:	f7ff ffe6 	bl	d5f3c <_ZN19BackgroundPublishRKC1Ev>
   d5f70:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   d5f72:	6820      	ldr	r0, [r4, #0]
   d5f74:	bd10      	pop	{r4, pc}
   d5f76:	bf00      	nop
   d5f78:	2003e490 	.word	0x2003e490

000d5f7c <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   d5f7c:	b538      	push	{r3, r4, r5, lr}
   d5f7e:	4604      	mov	r4, r0
    if(thread)
   d5f80:	6840      	ldr	r0, [r0, #4]
   d5f82:	b190      	cbz	r0, d5faa <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   d5f84:	2302      	movs	r3, #2
   d5f86:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   d5f88:	f7ff ffbd 	bl	d5f06 <_ZN6Thread7disposeEv>
        delete thread;
   d5f8c:	6865      	ldr	r5, [r4, #4]
   d5f8e:	b155      	cbz	r5, d5fa6 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   d5f90:	4628      	mov	r0, r5
   d5f92:	f7ff ffb8 	bl	d5f06 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   d5f96:	6828      	ldr	r0, [r5, #0]
   d5f98:	b108      	cbz	r0, d5f9e <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   d5f9a:	f7ff ffa3 	bl	d5ee4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d5f9e:	2104      	movs	r1, #4
   d5fa0:	4628      	mov	r0, r5
   d5fa2:	f009 fa5f 	bl	df464 <_ZdlPvj>
        thread = NULL;
   d5fa6:	2300      	movs	r3, #0
   d5fa8:	6063      	str	r3, [r4, #4]
    }
}
   d5faa:	bd38      	pop	{r3, r4, r5, pc}

000d5fac <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d5fac:	b510      	push	{r4, lr}
   d5fae:	4b05      	ldr	r3, [pc, #20]	; (d5fc4 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   d5fb0:	6003      	str	r3, [r0, #0]
   d5fb2:	4604      	mov	r4, r0
    stop();
   d5fb4:	f7ff ffe2 	bl	d5f7c <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   d5fb8:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d5fbc:	f7fe f994 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
}
   d5fc0:	4620      	mov	r0, r4
   d5fc2:	bd10      	pop	{r4, pc}
   d5fc4:	000e2510 	.word	0x000e2510

000d5fc8 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d5fc8:	b510      	push	{r4, lr}
   d5fca:	4604      	mov	r4, r0
}
   d5fcc:	f7ff ffee 	bl	d5fac <_ZN19BackgroundPublishRKD1Ev>
   d5fd0:	4620      	mov	r0, r4
   d5fd2:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   d5fd6:	f009 fa45 	bl	df464 <_ZdlPvj>
   d5fda:	4620      	mov	r0, r4
   d5fdc:	bd10      	pop	{r4, pc}

000d5fde <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   d5fde:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5fe0:	4604      	mov	r4, r0
   d5fe2:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   d5fe4:	f100 060d 	add.w	r6, r0, #13
   d5fe8:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   d5fec:	7b23      	ldrb	r3, [r4, #12]
   d5fee:	b91b      	cbnz	r3, d5ff8 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   d5ff0:	2001      	movs	r0, #1
   d5ff2:	f006 fa5f 	bl	dc4b4 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   d5ff6:	e7f9      	b.n	d5fec <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   d5ff8:	7b23      	ldrb	r3, [r4, #12]
   d5ffa:	2b02      	cmp	r3, #2
   d5ffc:	d062      	beq.n	d60c4 <_ZN19BackgroundPublishRK8thread_fEv+0xe6>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   d5ffe:	68a0      	ldr	r0, [r4, #8]
   d6000:	f005 fe48 	bl	dbc94 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   d6004:	68a0      	ldr	r0, [r4, #8]
   d6006:	f005 fe4d 	bl	dbca4 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d600a:	f894 32bd 	ldrb.w	r3, [r4, #701]	; 0x2bd
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d600e:	f88d 3000 	strb.w	r3, [sp]
   d6012:	463a      	mov	r2, r7
   d6014:	233c      	movs	r3, #60	; 0x3c
   d6016:	4631      	mov	r1, r6
   d6018:	a806      	add	r0, sp, #24
   d601a:	f006 fc1f 	bl	dc85c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d601e:	9d06      	ldr	r5, [sp, #24]
   d6020:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d6022:	b933      	cbnz	r3, d6032 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   d6024:	7b23      	ldrb	r3, [r4, #12]
   d6026:	2b02      	cmp	r3, #2
   d6028:	d003      	beq.n	d6032 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   d602a:	2001      	movs	r0, #1
   d602c:	f006 fa42 	bl	dc4b4 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d6030:	e7f5      	b.n	d601e <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   d6032:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d6036:	b31b      	cbz	r3, d6080 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6038:	2000      	movs	r0, #0
   d603a:	f006 f8d5 	bl	dc1e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d603e:	b120      	cbz	r0, d604a <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   d6040:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6042:	b913      	cbnz	r3, d604a <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   d6044:	f006 f91e 	bl	dc284 <spark_process>
    }
   d6048:	e7fa      	b.n	d6040 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d604a:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   d604c:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   d6050:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   d6052:	1e59      	subs	r1, r3, #1
   d6054:	424b      	negs	r3, r1
   d6056:	414b      	adcs	r3, r1
   d6058:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   d605c:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d6060:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d6064:	b90b      	cbnz	r3, d606a <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   d6066:	f009 fa09 	bl	df47c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d606a:	ab05      	add	r3, sp, #20
   d606c:	9300      	str	r3, [sp, #0]
   d606e:	f8d4 52cc 	ldr.w	r5, [r4, #716]	; 0x2cc
   d6072:	ab04      	add	r3, sp, #16
   d6074:	aa03      	add	r2, sp, #12
   d6076:	f10d 010b 	add.w	r1, sp, #11
   d607a:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d607e:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   d6080:	68a0      	ldr	r0, [r4, #8]
   d6082:	f005 fe07 	bl	dbc94 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   d6086:	7b23      	ldrb	r3, [r4, #12]
   d6088:	2b02      	cmp	r3, #2
   d608a:	d015      	beq.n	d60b8 <_ZN19BackgroundPublishRK8thread_fEv+0xda>
	if (_M_manager)
   d608c:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
            {
                return;
            }
            event_context = NULL;
   d6090:	2500      	movs	r5, #0
   d6092:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
   d6096:	b133      	cbz	r3, d60a6 <_ZN19BackgroundPublishRK8thread_fEv+0xc8>
            completed_cb = NULL;
   d6098:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d609c:	2203      	movs	r2, #3
   d609e:	4608      	mov	r0, r1
   d60a0:	4798      	blx	r3
	    _M_invoker = nullptr;
   d60a2:	e9c4 55b2 	strd	r5, r5, [r4, #712]	; 0x2c8
            state = BACKGROUND_PUBLISH_IDLE;
   d60a6:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   d60a8:	68a0      	ldr	r0, [r4, #8]
   d60aa:	7323      	strb	r3, [r4, #12]
   d60ac:	f005 fdfa 	bl	dbca4 <os_mutex_unlock>
   d60b0:	a807      	add	r0, sp, #28
   d60b2:	f7ff f8c5 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60b6:	e799      	b.n	d5fec <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   d60b8:	68a0      	ldr	r0, [r4, #8]
   d60ba:	f005 fdf3 	bl	dbca4 <os_mutex_unlock>
   d60be:	a807      	add	r0, sp, #28
   d60c0:	f7ff f8be 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d60c4:	b009      	add	sp, #36	; 0x24
   d60c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d60c8 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   d60c8:	6800      	ldr	r0, [r0, #0]
   d60ca:	f7ff bf88 	b.w	d5fde <_ZN19BackgroundPublishRK8thread_fEv>
	...

000d60d0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d60d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d60d4:	4606      	mov	r6, r0
   d60d6:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d60d8:	2014      	movs	r0, #20
   d60da:	4926      	ldr	r1, [pc, #152]	; (d6174 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d60dc:	4617      	mov	r7, r2
   d60de:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d60e0:	f009 f9c2 	bl	df468 <_ZnwjRKSt9nothrow_t>
   d60e4:	4604      	mov	r4, r0
   d60e6:	b130      	cbz	r0, d60f6 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d60e8:	2200      	movs	r2, #0
            exited(false) {
   d60ea:	e9c0 2200 	strd	r2, r2, [r0]
   d60ee:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d60f2:	7402      	strb	r2, [r0, #16]
   d60f4:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d60f6:	6034      	str	r4, [r6, #0]
        if (!d_) {
   d60f8:	2c00      	cmp	r4, #0
   d60fa:	d031      	beq.n	d6160 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d60fc:	491d      	ldr	r1, [pc, #116]	; (d6174 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   d60fe:	2010      	movs	r0, #16
   d6100:	f009 f9b2 	bl	df468 <_ZnwjRKSt9nothrow_t>
   d6104:	4605      	mov	r5, r0
   d6106:	b168      	cbz	r0, d6124 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   d6108:	2300      	movs	r3, #0
   d610a:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d610c:	4601      	mov	r1, r0
   d610e:	4638      	mov	r0, r7
   d6110:	f7fe fab4 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6114:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6116:	68aa      	ldr	r2, [r5, #8]
   d6118:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d611a:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d611c:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d611e:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6120:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6122:	60fa      	str	r2, [r7, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6124:	6827      	ldr	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6126:	6025      	str	r5, [r4, #0]
	if (__p != pointer())
   d6128:	b137      	cbz	r7, d6138 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   d612a:	4638      	mov	r0, r7
   d612c:	f7fe f8dc 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d6130:	2110      	movs	r1, #16
   d6132:	4638      	mov	r0, r7
   d6134:	f009 f996 	bl	df464 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6138:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d613a:	6803      	ldr	r3, [r0, #0]
   d613c:	b183      	cbz	r3, d6160 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d613e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6140:	464a      	mov	r2, r9
   d6142:	e9cd 0300 	strd	r0, r3, [sp]
   d6146:	4641      	mov	r1, r8
   d6148:	4b0b      	ldr	r3, [pc, #44]	; (d6178 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   d614a:	3004      	adds	r0, #4
   d614c:	f005 fd7a 	bl	dbc44 <os_thread_create>
   d6150:	b930      	cbnz	r0, d6160 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   d6152:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   d6154:	7c1b      	ldrb	r3, [r3, #16]
   d6156:	b94b      	cbnz	r3, d616c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   d6158:	2001      	movs	r0, #1
   d615a:	f005 fdeb 	bl	dbd34 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d615e:	e7f8      	b.n	d6152 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6160:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6162:	2300      	movs	r3, #0
   d6164:	6033      	str	r3, [r6, #0]
	if (__p != pointer())
   d6166:	b108      	cbz	r0, d616c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   d6168:	f7ff febc 	bl	d5ee4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d616c:	4630      	mov	r0, r6
   d616e:	b003      	add	sp, #12
   d6170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6174:	000e2f20 	.word	0x000e2f20
   d6178:	000d5eb5 	.word	0x000d5eb5

000d617c <_ZN19BackgroundPublishRK5startEv>:
{
   d617c:	b530      	push	{r4, r5, lr}
    if(!thread)
   d617e:	6843      	ldr	r3, [r0, #4]
{
   d6180:	b087      	sub	sp, #28
   d6182:	4604      	mov	r4, r0
    if(!thread)
   d6184:	b9c3      	cbnz	r3, d61b8 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   d6186:	3008      	adds	r0, #8
   d6188:	f005 fd7c 	bl	dbc84 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   d618c:	4b0b      	ldr	r3, [pc, #44]	; (d61bc <_ZN19BackgroundPublishRK5startEv+0x40>)
   d618e:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   d6190:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   d6192:	4b0b      	ldr	r3, [pc, #44]	; (d61c0 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6194:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d6196:	9304      	str	r3, [sp, #16]
   d6198:	f7fd ff7d 	bl	d4096 <_Znwj>
   d619c:	4605      	mov	r5, r0
   d619e:	b138      	cbz	r0, d61b0 <_ZN19BackgroundPublishRK5startEv+0x34>
   d61a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d61a4:	9300      	str	r3, [sp, #0]
   d61a6:	4907      	ldr	r1, [pc, #28]	; (d61c4 <_ZN19BackgroundPublishRK5startEv+0x48>)
   d61a8:	2302      	movs	r3, #2
   d61aa:	aa02      	add	r2, sp, #8
   d61ac:	f7ff ff90 	bl	d60d0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   d61b0:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   d61b2:	a802      	add	r0, sp, #8
   d61b4:	f7fe f898 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
}
   d61b8:	b007      	add	sp, #28
   d61ba:	bd30      	pop	{r4, r5, pc}
   d61bc:	000d60c9 	.word	0x000d60c9
   d61c0:	000d5e9d 	.word	0x000d5e9d
   d61c4:	000e24f4 	.word	0x000e24f4

000d61c8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   d61c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d61cc:	4604      	mov	r4, r0
   d61ce:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   d61d0:	6880      	ldr	r0, [r0, #8]
   d61d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d61d4:	4698      	mov	r8, r3
   d61d6:	460d      	mov	r5, r1
   d61d8:	4616      	mov	r6, r2
   d61da:	f005 fd5b 	bl	dbc94 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   d61de:	6863      	ldr	r3, [r4, #4]
   d61e0:	b11b      	cbz	r3, d61ea <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   d61e2:	7b23      	ldrb	r3, [r4, #12]
   d61e4:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d61e8:	b133      	cbz	r3, d61f8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   d61ea:	68a0      	ldr	r0, [r4, #8]
   d61ec:	f005 fd5a 	bl	dbca4 <os_mutex_unlock>
    {
        return false;
   d61f0:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   d61f2:	b005      	add	sp, #20
   d61f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d61f8:	68a0      	ldr	r0, [r4, #8]
   d61fa:	f005 fd53 	bl	dbca4 <os_mutex_unlock>
    if(!name)
   d61fe:	2d00      	cmp	r5, #0
   d6200:	d03d      	beq.n	d627e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   d6202:	2241      	movs	r2, #65	; 0x41
   d6204:	4629      	mov	r1, r5
   d6206:	f104 000d 	add.w	r0, r4, #13
   d620a:	f009 ff88 	bl	e011e <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   d620e:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   d6212:	b38e      	cbz	r6, d6278 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   d6214:	f240 226f 	movw	r2, #623	; 0x26f
   d6218:	4631      	mov	r1, r6
   d621a:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   d621e:	f009 ff7e 	bl	e011e <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   d6222:	f884 92bc 	strb.w	r9, [r4, #700]	; 0x2bc
    _Function_base() : _M_manager(nullptr) { }
   d6226:	2300      	movs	r3, #0
   d6228:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d622a:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   d622c:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
      if (static_cast<bool>(__x))
   d6230:	b13b      	cbz	r3, d6242 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6232:	2202      	movs	r2, #2
   d6234:	4639      	mov	r1, r7
   d6236:	4668      	mov	r0, sp
   d6238:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d623a:	68fb      	ldr	r3, [r7, #12]
   d623c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d623e:	68bb      	ldr	r3, [r7, #8]
   d6240:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d6242:	4629      	mov	r1, r5
   d6244:	4668      	mov	r0, sp
   d6246:	f7fe fa19 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d624a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d624c:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
      __b = _GLIBCXX_MOVE(__tmp);
   d6250:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6254:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6256:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d6258:	4668      	mov	r0, sp
   d625a:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
      __b = _GLIBCXX_MOVE(__tmp);
   d625e:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
      __a = _GLIBCXX_MOVE(__b);
   d6262:	9203      	str	r2, [sp, #12]
   d6264:	f7fe f840 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   d6268:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d626a:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
    state = BACKGROUND_PUBLISH_REQUESTED;
   d626e:	2001      	movs	r0, #1
    event_flags = flags;
   d6270:	f884 82bd 	strb.w	r8, [r4, #701]	; 0x2bd
    state = BACKGROUND_PUBLISH_REQUESTED;
   d6274:	7320      	strb	r0, [r4, #12]
    return true;
   d6276:	e7bc      	b.n	d61f2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   d6278:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   d627c:	e7d3      	b.n	d6226 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   d627e:	4628      	mov	r0, r5
   d6280:	e7b7      	b.n	d61f2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000d6284 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d6284:	b510      	push	{r4, lr}
   d6286:	4b05      	ldr	r3, [pc, #20]	; (d629c <_ZN10JsonBufferD1Ev+0x18>)
   d6288:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d628a:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   d628c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d628e:	b91b      	cbnz	r3, d6298 <_ZN10JsonBufferD1Ev+0x14>
   d6290:	6840      	ldr	r0, [r0, #4]
   d6292:	b108      	cbz	r0, d6298 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d6294:	f006 f89e 	bl	dc3d4 <free>
	}
}
   d6298:	4620      	mov	r0, r4
   d629a:	bd10      	pop	{r4, pc}
   d629c:	000e2520 	.word	0x000e2520

000d62a0 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   d62a0:	b510      	push	{r4, lr}
   d62a2:	4604      	mov	r4, r0
}
   d62a4:	f7ff ffee 	bl	d6284 <_ZN10JsonBufferD1Ev>
   d62a8:	4620      	mov	r0, r4
   d62aa:	2114      	movs	r1, #20
   d62ac:	f009 f8da 	bl	df464 <_ZdlPvj>
   d62b0:	4620      	mov	r0, r4
   d62b2:	bd10      	pop	{r4, pc}

000d62b4 <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d62b4:	b510      	push	{r4, lr}
   d62b6:	4b07      	ldr	r3, [pc, #28]	; (d62d4 <_ZN10JsonParserD1Ev+0x20>)
   d62b8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   d62ba:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   d62bc:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   d62be:	b91b      	cbnz	r3, d62c8 <_ZN10JsonParserD1Ev+0x14>
   d62c0:	6940      	ldr	r0, [r0, #20]
   d62c2:	b108      	cbz	r0, d62c8 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   d62c4:	f006 f886 	bl	dc3d4 <free>
JsonParser::~JsonParser() {
   d62c8:	4620      	mov	r0, r4
   d62ca:	f7ff ffdb 	bl	d6284 <_ZN10JsonBufferD1Ev>
	}
}
   d62ce:	4620      	mov	r0, r4
   d62d0:	bd10      	pop	{r4, pc}
   d62d2:	bf00      	nop
   d62d4:	000e2530 	.word	0x000e2530

000d62d8 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   d62d8:	b510      	push	{r4, lr}
   d62da:	4604      	mov	r4, r0
}
   d62dc:	f7ff ffea 	bl	d62b4 <_ZN10JsonParserD1Ev>
   d62e0:	4620      	mov	r0, r4
   d62e2:	212c      	movs	r1, #44	; 0x2c
   d62e4:	f009 f8be 	bl	df464 <_ZdlPvj>
   d62e8:	4620      	mov	r0, r4
   d62ea:	bd10      	pop	{r4, pc}

000d62ec <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   d62ec:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d62ee:	e9c0 1201 	strd	r1, r2, [r0, #4]
   d62f2:	2200      	movs	r2, #0
   d62f4:	60c2      	str	r2, [r0, #12]
   d62f6:	2201      	movs	r2, #1
   d62f8:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d62fa:	6143      	str	r3, [r0, #20]
   d62fc:	4a02      	ldr	r2, [pc, #8]	; (d6308 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   d62fe:	9b02      	ldr	r3, [sp, #8]
   d6300:	6002      	str	r2, [r0, #0]
   d6302:	61c3      	str	r3, [r0, #28]
}
   d6304:	bd10      	pop	{r4, pc}
   d6306:	bf00      	nop
   d6308:	000e2530 	.word	0x000e2530

000d630c <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   d630c:	4770      	bx	lr

000d630e <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   d630e:	4770      	bx	lr

000d6310 <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      }
   d6310:	2001      	movs	r0, #1
   d6312:	4770      	bx	lr

000d6314 <_ZNSt14_Function_base13_Base_managerIZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlR21LocalTimeScheduleItemE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d6314:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6316:	bf08      	it	eq
   d6318:	6001      	streq	r1, [r0, #0]
	}
   d631a:	2000      	movs	r0, #0
   d631c:	4770      	bx	lr

000d631e <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   d631e:	b510      	push	{r4, lr}
}
   d6320:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   d6322:	4604      	mov	r4, r0
}
   d6324:	f009 f89e 	bl	df464 <_ZdlPvj>
   d6328:	4620      	mov	r0, r4
   d632a:	bd10      	pop	{r4, pc}

000d632c <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   d632c:	b510      	push	{r4, lr}
}
   d632e:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   d6330:	4604      	mov	r4, r0
}
   d6332:	f009 f897 	bl	df464 <_ZdlPvj>
   d6336:	4620      	mov	r0, r4
   d6338:	bd10      	pop	{r4, pc}
	...

000d633c <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d633c:	b510      	push	{r4, lr}
   d633e:	4b05      	ldr	r3, [pc, #20]	; (d6354 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   d6340:	4604      	mov	r4, r0
   d6342:	f840 3b1c 	str.w	r3, [r0], #28
   d6346:	f008 fa8f 	bl	de868 <_ZN6StringD1Ev>
   d634a:	1d20      	adds	r0, r4, #4
   d634c:	f008 fa8c 	bl	de868 <_ZN6StringD1Ev>
}
   d6350:	4620      	mov	r0, r4
   d6352:	bd10      	pop	{r4, pc}
   d6354:	000e2588 	.word	0x000e2588

000d6358 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d6358:	b510      	push	{r4, lr}
   d635a:	4604      	mov	r4, r0
}
   d635c:	f7ff ffee 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
   d6360:	4620      	mov	r0, r4
   d6362:	2158      	movs	r1, #88	; 0x58
   d6364:	f009 f87e 	bl	df464 <_ZdlPvj>
   d6368:	4620      	mov	r0, r4
   d636a:	bd10      	pop	{r4, pc}

000d636c <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   d636c:	b510      	push	{r4, lr}
   d636e:	4b04      	ldr	r3, [pc, #16]	; (d6380 <_ZN9LocalTimeD1Ev+0x14>)
   d6370:	4604      	mov	r4, r0
   d6372:	f840 3b04 	str.w	r3, [r0], #4
   d6376:	f7ff ffe1 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
   d637a:	4620      	mov	r0, r4
   d637c:	bd10      	pop	{r4, pc}
   d637e:	bf00      	nop
   d6380:	000e2558 	.word	0x000e2558

000d6384 <_ZN9LocalTimeD0Ev>:
   d6384:	b510      	push	{r4, lr}
   d6386:	4604      	mov	r4, r0
   d6388:	f7ff fff0 	bl	d636c <_ZN9LocalTimeD1Ev>
   d638c:	4620      	mov	r0, r4
   d638e:	2160      	movs	r1, #96	; 0x60
   d6390:	f009 f868 	bl	df464 <_ZdlPvj>
   d6394:	4620      	mov	r0, r4
   d6396:	bd10      	pop	{r4, pc}

000d6398 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   d6398:	f020 0302 	bic.w	r3, r0, #2
   d639c:	2b01      	cmp	r3, #1
   d639e:	d003      	beq.n	d63a8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   d63a0:	1f43      	subs	r3, r0, #5
   d63a2:	4258      	negs	r0, r3
   d63a4:	4158      	adcs	r0, r3
   d63a6:	4770      	bx	lr
   d63a8:	4618      	mov	r0, r3
   d63aa:	4770      	bx	lr

000d63ac <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>:
	if (__p)
   d63ac:	b108      	cbz	r0, d63b2 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0+0x6>
	::operator delete(__p);
   d63ae:	f7fd be76 	b.w	d409e <_ZdlPv>
      }
   d63b2:	4770      	bx	lr

000d63b4 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   d63b4:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d63b6:	b148      	cbz	r0, d63cc <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->max_size())
   d63b8:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   d63bc:	d301      	bcc.n	d63c2 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   d63be:	f009 f857 	bl	df470 <_ZSt17__throw_bad_allocv>
      }
   d63c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d63c6:	0080      	lsls	r0, r0, #2
   d63c8:	f7fd be65 	b.w	d4096 <_Znwj>
   d63cc:	bd08      	pop	{r3, pc}

000d63ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63ce:	680b      	ldr	r3, [r1, #0]
   d63d0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d63d2:	684b      	ldr	r3, [r1, #4]
   d63d4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d63d6:	b113      	cbz	r3, d63de <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d63d8:	685a      	ldr	r2, [r3, #4]
   d63da:	3201      	adds	r2, #1
   d63dc:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63de:	4770      	bx	lr

000d63e0 <_ZNK12LocalTimeHMS9compareToERKS_>:
        if (hour < other.hour) {
   d63e0:	f990 2004 	ldrsb.w	r2, [r0, #4]
   d63e4:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d63e8:	429a      	cmp	r2, r3
   d63ea:	db13      	blt.n	d6414 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
        if (hour > other.hour) {
   d63ec:	dc10      	bgt.n	d6410 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
            if (minute < other.minute) {
   d63ee:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d63f2:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d63f6:	429a      	cmp	r2, r3
   d63f8:	db0c      	blt.n	d6414 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
            if (minute > other.minute) {
   d63fa:	dc09      	bgt.n	d6410 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
                if (second < other.second) {
   d63fc:	f990 2006 	ldrsb.w	r2, [r0, #6]
   d6400:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d6404:	429a      	cmp	r2, r3
   d6406:	db05      	blt.n	d6414 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
                if (second > other.second) {
   d6408:	bfcc      	ite	gt
   d640a:	2001      	movgt	r0, #1
   d640c:	2000      	movle	r0, #0
   d640e:	4770      	bx	lr
            return +1;
   d6410:	2001      	movs	r0, #1
   d6412:	4770      	bx	lr
            return -1;
   d6414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
   d6418:	4770      	bx	lr
	...

000d641c <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   d641c:	4a02      	ldr	r2, [pc, #8]	; (d6428 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   d641e:	6002      	str	r2, [r0, #0]
   d6420:	684a      	ldr	r2, [r1, #4]
   d6422:	6042      	str	r2, [r0, #4]
   d6424:	4770      	bx	lr
   d6426:	bf00      	nop
   d6428:	000e2568 	.word	0x000e2568

000d642c <_ZN12LocalTimeHMSaSERKS_>:
   d642c:	f991 2004 	ldrsb.w	r2, [r1, #4]
   d6430:	7102      	strb	r2, [r0, #4]
   d6432:	f991 2005 	ldrsb.w	r2, [r1, #5]
   d6436:	7142      	strb	r2, [r0, #5]
   d6438:	f991 2006 	ldrsb.w	r2, [r1, #6]
   d643c:	7182      	strb	r2, [r0, #6]
   d643e:	f991 2007 	ldrsb.w	r2, [r1, #7]
   d6442:	71c2      	strb	r2, [r0, #7]
   d6444:	4770      	bx	lr

000d6446 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>:
    int compareTo(LocalTimeHMS hms) const {
   d6446:	b538      	push	{r3, r4, r5, lr}
   d6448:	460c      	mov	r4, r1
   d644a:	4605      	mov	r5, r0
        return compareTo(other) < 0;
   d644c:	f100 011c 	add.w	r1, r0, #28
   d6450:	4620      	mov	r0, r4
   d6452:	f7ff ffc5 	bl	d63e0 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms < hmsStart) {
   d6456:	2800      	cmp	r0, #0
   d6458:	db09      	blt.n	d646e <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x28>
        return compareTo(other) > 0;
   d645a:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d645e:	4620      	mov	r0, r4
   d6460:	f7ff ffbe 	bl	d63e0 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms > hmsEnd) {
   d6464:	2800      	cmp	r0, #0
   d6466:	bfd4      	ite	le
   d6468:	2000      	movle	r0, #0
   d646a:	2001      	movgt	r0, #1
    }
   d646c:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   d646e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6472:	e7fb      	b.n	d646c <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x26>

000d6474 <_ZN22LocalTimePosixTimezoneaSERKS_>:
class LocalTimePosixTimezone {
   d6474:	b538      	push	{r3, r4, r5, lr}
   d6476:	4604      	mov	r4, r0
   d6478:	460d      	mov	r5, r1
   d647a:	3004      	adds	r0, #4
   d647c:	3104      	adds	r1, #4
   d647e:	f008 fa7a 	bl	de976 <_ZN6StringaSERKS_>
   d6482:	f105 0114 	add.w	r1, r5, #20
   d6486:	f104 0014 	add.w	r0, r4, #20
   d648a:	f7ff ffcf 	bl	d642c <_ZN12LocalTimeHMSaSERKS_>
   d648e:	f105 011c 	add.w	r1, r5, #28
   d6492:	f104 001c 	add.w	r0, r4, #28
   d6496:	f008 fa6e 	bl	de976 <_ZN6StringaSERKS_>
   d649a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d649e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d64a2:	f7ff ffc3 	bl	d642c <_ZN12LocalTimeHMSaSERKS_>
class LocalTimeChange {
   d64a6:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   d64aa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   d64ae:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   d64b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   d64b6:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   d64ba:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   d64be:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   d64c2:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   d64c6:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d64ca:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d64ce:	f7ff ffad 	bl	d642c <_ZN12LocalTimeHMSaSERKS_>
   d64d2:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   d64d6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d64da:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   d64de:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   d64e2:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   d64e6:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   d64ea:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   d64ee:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   d64f2:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d64f6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d64fa:	f7ff ff97 	bl	d642c <_ZN12LocalTimeHMSaSERKS_>
class LocalTimePosixTimezone {
   d64fe:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d6502:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d6506:	4620      	mov	r0, r4
   d6508:	bd38      	pop	{r3, r4, r5, pc}

000d650a <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   d650a:	694a      	ldr	r2, [r1, #20]
   d650c:	6803      	ldr	r3, [r0, #0]
   d650e:	f362 0316 	bfi	r3, r2, #0, #23
   d6512:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   d6514:	690b      	ldr	r3, [r1, #16]
   d6516:	1c5a      	adds	r2, r3, #1
   d6518:	8843      	ldrh	r3, [r0, #2]
   d651a:	f362 13ca 	bfi	r3, r2, #7, #4
   d651e:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   d6520:	68ca      	ldr	r2, [r1, #12]
   d6522:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d6526:	f362 03c7 	bfi	r3, r2, #3, #5
   d652a:	70c3      	strb	r3, [r0, #3]
}
   d652c:	4770      	bx	lr

000d652e <_ZNK12LocalTimeYMD12getDayOfWeekEv>:
int LocalTimeYMD::getDayOfWeek() const {
   d652e:	b510      	push	{r4, lr}
   d6530:	4604      	mov	r4, r0
   d6532:	b08c      	sub	sp, #48	; 0x30
    struct tm timeInfo = {0};
   d6534:	2224      	movs	r2, #36	; 0x24
   d6536:	2100      	movs	r1, #0
   d6538:	a803      	add	r0, sp, #12
   d653a:	f009 fd4b 	bl	dffd4 <memset>
    timeInfo.tm_year = ymd.year;
   d653e:	6823      	ldr	r3, [r4, #0]
   d6540:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d6544:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d6546:	8863      	ldrh	r3, [r4, #2]
   d6548:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d654c:	3b01      	subs	r3, #1
   d654e:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday = ymd.day;
   d6550:	78e3      	ldrb	r3, [r4, #3]
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   d6552:	a803      	add	r0, sp, #12
    timeInfo.tm_mday = ymd.day;
   d6554:	08db      	lsrs	r3, r3, #3
   d6556:	9306      	str	r3, [sp, #24]
    return mktime(pTimeInfo);
   d6558:	f005 ffa4 	bl	dc4a4 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d655c:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d6560:	a903      	add	r1, sp, #12
   d6562:	4668      	mov	r0, sp
   d6564:	f005 ff8e 	bl	dc484 <localtime_r>
}
   d6568:	9809      	ldr	r0, [sp, #36]	; 0x24
   d656a:	b00c      	add	sp, #48	; 0x30
   d656c:	bd10      	pop	{r4, pc}

000d656e <_ZN12LocalTimeYMD6addDayEi>:
void LocalTimeYMD::addDay(int numberOfDays) {
   d656e:	b530      	push	{r4, r5, lr}
   d6570:	4604      	mov	r4, r0
   d6572:	b08d      	sub	sp, #52	; 0x34
    struct tm timeInfo = {0};
   d6574:	2224      	movs	r2, #36	; 0x24
void LocalTimeYMD::addDay(int numberOfDays) {
   d6576:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d6578:	a803      	add	r0, sp, #12
   d657a:	2100      	movs	r1, #0
   d657c:	f009 fd2a 	bl	dffd4 <memset>
    timeInfo.tm_year = ymd.year;
   d6580:	6823      	ldr	r3, [r4, #0]
    timeInfo.tm_mday = ymd.day;
   d6582:	78e1      	ldrb	r1, [r4, #3]
    timeInfo.tm_year = ymd.year;
   d6584:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d6588:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d658a:	8863      	ldrh	r3, [r4, #2]
   d658c:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d6590:	3b01      	subs	r3, #1
    timeInfo.tm_mday += numberOfDays;
   d6592:	eb05 05d1 	add.w	r5, r5, r1, lsr #3
    return mktime(pTimeInfo);
   d6596:	a803      	add	r0, sp, #12
    timeInfo.tm_mon = ymd.month - 1;
   d6598:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday += numberOfDays;
   d659a:	9506      	str	r5, [sp, #24]
    return mktime(pTimeInfo);
   d659c:	f005 ff82 	bl	dc4a4 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d65a0:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d65a4:	a903      	add	r1, sp, #12
   d65a6:	4668      	mov	r0, sp
   d65a8:	f005 ff6c 	bl	dc484 <localtime_r>
    fromTimeInfo(&timeInfo);
   d65ac:	a903      	add	r1, sp, #12
   d65ae:	4620      	mov	r0, r4
   d65b0:	f7ff ffab 	bl	d650a <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d65b4:	b00d      	add	sp, #52	; 0x34
   d65b6:	bd30      	pop	{r4, r5, pc}

000d65b8 <_ZNK12LocalTimeYMD9compareToES_>:
    if (ymd.year < other.ymd.year) {
   d65b8:	6803      	ldr	r3, [r0, #0]
   d65ba:	f3c1 0216 	ubfx	r2, r1, #0, #23
   d65be:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d65c2:	4293      	cmp	r3, r2
   d65c4:	d313      	bcc.n	d65ee <_ZNK12LocalTimeYMD9compareToES_+0x36>
    if (ymd.year > other.ymd.year) {
   d65c6:	d810      	bhi.n	d65ea <_ZNK12LocalTimeYMD9compareToES_+0x32>
        if (ymd.month < other.ymd.month) {
   d65c8:	8842      	ldrh	r2, [r0, #2]
   d65ca:	f3c1 53c3 	ubfx	r3, r1, #23, #4
   d65ce:	f3c2 12c3 	ubfx	r2, r2, #7, #4
   d65d2:	429a      	cmp	r2, r3
   d65d4:	d30b      	bcc.n	d65ee <_ZNK12LocalTimeYMD9compareToES_+0x36>
        if (ymd.month > other.ymd.month) {
   d65d6:	d808      	bhi.n	d65ea <_ZNK12LocalTimeYMD9compareToES_+0x32>
            if (ymd.day < other.ymd.day) {
   d65d8:	78c3      	ldrb	r3, [r0, #3]
   d65da:	08db      	lsrs	r3, r3, #3
   d65dc:	ebb3 6fd1 	cmp.w	r3, r1, lsr #27
   d65e0:	d305      	bcc.n	d65ee <_ZNK12LocalTimeYMD9compareToES_+0x36>
            if (ymd.day > other.ymd.day) {
   d65e2:	bf8c      	ite	hi
   d65e4:	2001      	movhi	r0, #1
   d65e6:	2000      	movls	r0, #0
   d65e8:	4770      	bx	lr
        cmp = +1;
   d65ea:	2001      	movs	r0, #1
   d65ec:	4770      	bx	lr
        cmp = -1;
   d65ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d65f2:	4770      	bx	lr

000d65f4 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   d65f4:	4a02      	ldr	r2, [pc, #8]	; (d6600 <_ZN12LocalTimeHMSC1Ev+0xc>)
   d65f6:	6002      	str	r2, [r0, #0]
   d65f8:	2200      	movs	r2, #0
   d65fa:	6042      	str	r2, [r0, #4]
}
   d65fc:	4770      	bx	lr
   d65fe:	bf00      	nop
   d6600:	000e2568 	.word	0x000e2568

000d6604 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   d6604:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   d6606:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   d6608:	b087      	sub	sp, #28
    hour = minute = second = 0;
   d660a:	8083      	strh	r3, [r0, #4]
   d660c:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   d660e:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d6610:	ab05      	add	r3, sp, #20
   d6612:	9300      	str	r3, [sp, #0]
   d6614:	4913      	ldr	r1, [pc, #76]	; (d6664 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   d6616:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d6618:	ab04      	add	r3, sp, #16
   d661a:	aa03      	add	r2, sp, #12
   d661c:	4628      	mov	r0, r5
   d661e:	f005 fef1 	bl	dc404 <sscanf>
   d6622:	2803      	cmp	r0, #3
   d6624:	d107      	bne.n	d6636 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   d6626:	9b03      	ldr	r3, [sp, #12]
   d6628:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d662a:	9b04      	ldr	r3, [sp, #16]
   d662c:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   d662e:	9b05      	ldr	r3, [sp, #20]
   d6630:	71a3      	strb	r3, [r4, #6]
}
   d6632:	b007      	add	sp, #28
   d6634:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   d6636:	490c      	ldr	r1, [pc, #48]	; (d6668 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   d6638:	ab04      	add	r3, sp, #16
   d663a:	aa03      	add	r2, sp, #12
   d663c:	4628      	mov	r0, r5
   d663e:	f005 fee1 	bl	dc404 <sscanf>
   d6642:	2802      	cmp	r0, #2
   d6644:	d104      	bne.n	d6650 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   d6646:	9b03      	ldr	r3, [sp, #12]
   d6648:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d664a:	9b04      	ldr	r3, [sp, #16]
   d664c:	7163      	strb	r3, [r4, #5]
   d664e:	e7f0      	b.n	d6632 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   d6650:	4906      	ldr	r1, [pc, #24]	; (d666c <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   d6652:	aa03      	add	r2, sp, #12
   d6654:	4628      	mov	r0, r5
   d6656:	f005 fed5 	bl	dc404 <sscanf>
   d665a:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   d665c:	bf04      	itt	eq
   d665e:	9b03      	ldreq	r3, [sp, #12]
   d6660:	7123      	strbeq	r3, [r4, #4]
}
   d6662:	e7e6      	b.n	d6632 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   d6664:	000e2538 	.word	0x000e2538
   d6668:	000e253b 	.word	0x000e253b
   d666c:	000e2379 	.word	0x000e2379

000d6670 <_ZN12LocalTimeHMSC1EPKc>:
LocalTimeHMS::LocalTimeHMS(const char *str) {
   d6670:	b510      	push	{r4, lr}
   d6672:	4b04      	ldr	r3, [pc, #16]	; (d6684 <_ZN12LocalTimeHMSC1EPKc+0x14>)
   d6674:	6003      	str	r3, [r0, #0]
   d6676:	2300      	movs	r3, #0
   d6678:	4604      	mov	r4, r0
   d667a:	6043      	str	r3, [r0, #4]
    parse(str);
   d667c:	f7ff ffc2 	bl	d6604 <_ZN12LocalTimeHMS5parseEPKc>
}
   d6680:	4620      	mov	r0, r4
   d6682:	bd10      	pop	{r4, pc}
   d6684:	000e2568 	.word	0x000e2568

000d6688 <_ZN21LocalTimeScheduleItemC1Ev>:
    LocalTimeScheduleItem() {
   d6688:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   d668a:	2500      	movs	r5, #0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d668c:	237f      	movs	r3, #127	; 0x7f
    LocalTimeScheduleItem() {
   d668e:	4604      	mov	r4, r0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d6690:	7003      	strb	r3, [r0, #0]
   d6692:	e9c0 5501 	strd	r5, r5, [r0, #4]
   d6696:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d669a:	e9c0 5505 	strd	r5, r5, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d669e:	490a      	ldr	r1, [pc, #40]	; (d66c8 <_ZN21LocalTimeScheduleItemC1Ev+0x40>)
   d66a0:	301c      	adds	r0, #28
   d66a2:	f7ff ffe5 	bl	d6670 <_ZN12LocalTimeHMSC1EPKc>
   d66a6:	4909      	ldr	r1, [pc, #36]	; (d66cc <_ZN21LocalTimeScheduleItemC1Ev+0x44>)
   d66a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d66ac:	f7ff ffe0 	bl	d6670 <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeScheduleItem() {
   d66b0:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   d66b4:	4906      	ldr	r1, [pc, #24]	; (d66d0 <_ZN21LocalTimeScheduleItemC1Ev+0x48>)
   d66b6:	6365      	str	r5, [r4, #52]	; 0x34
   d66b8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d66bc:	f008 f91f 	bl	de8fe <_ZN6StringC1EPKc>
   d66c0:	64a5      	str	r5, [r4, #72]	; 0x48
    }
   d66c2:	4620      	mov	r0, r4
   d66c4:	bd38      	pop	{r3, r4, r5, pc}
   d66c6:	bf00      	nop
   d66c8:	000e2198 	.word	0x000e2198
   d66cc:	000e21a1 	.word	0x000e21a1
   d66d0:	000e296f 	.word	0x000e296f

000d66d4 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   d66d4:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d66d8:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d66dc:	f990 1006 	ldrsb.w	r1, [r0, #6]
   d66e0:	2b00      	cmp	r3, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   d66e2:	bfb8      	it	lt
   d66e4:	4808      	ldrlt	r0, [pc, #32]	; (d6708 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   d66e6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   d66ea:	ea4f 0282 	mov.w	r2, r2, lsl #2
   d66ee:	bfbd      	ittte	lt
   d66f0:	fb00 2003 	mlalt	r0, r0, r3, r2
   d66f4:	1840      	addlt	r0, r0, r1
   d66f6:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   d66f8:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   d66fc:	bfa4      	itt	ge
   d66fe:	fb00 2303 	mlage	r3, r0, r3, r2
   d6702:	1858      	addge	r0, r3, r1
}
   d6704:	4770      	bx	lr
   d6706:	bf00      	nop
   d6708:	fffff1f0 	.word	0xfffff1f0

000d670c <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   d670c:	f990 3007 	ldrsb.w	r3, [r0, #7]
   d6710:	b943      	cbnz	r3, d6724 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   d6712:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d6716:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   d6718:	f990 3005 	ldrsb.w	r3, [r0, #5]
   d671c:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   d671e:	f990 3006 	ldrsb.w	r3, [r0, #6]
   d6722:	600b      	str	r3, [r1, #0]
}
   d6724:	4770      	bx	lr

000d6726 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   d6726:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   d672a:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   d672c:	b9b3      	cbnz	r3, d675c <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   d672e:	f990 5004 	ldrsb.w	r5, [r0, #4]
   d6732:	688c      	ldr	r4, [r1, #8]
   d6734:	442c      	add	r4, r5
   d6736:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   d673a:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   d673c:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   d6740:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   d6742:	bfb5      	itete	lt
   d6744:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   d6746:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   d6748:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   d674a:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   d674c:	bfb5      	itete	lt
   d674e:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   d6752:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   d6756:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   d6758:	189b      	addge	r3, r3, r2
   d675a:	600b      	str	r3, [r1, #0]
}
   d675c:	bd30      	pop	{r4, r5, pc}

000d675e <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const {
   d675e:	b538      	push	{r3, r4, r5, lr}
   d6760:	6844      	ldr	r4, [r0, #4]
   d6762:	4605      	mov	r5, r0
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d6764:	68ab      	ldr	r3, [r5, #8]
   d6766:	42a3      	cmp	r3, r4
   d6768:	d007      	beq.n	d677a <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1c>
        return compareTo(other) == 0; 
   d676a:	4620      	mov	r0, r4
   d676c:	f7ff ff24 	bl	d65b8 <_ZNK12LocalTimeYMD9compareToES_>
   d6770:	3404      	adds	r4, #4
        if (*it == ymd) {
   d6772:	2800      	cmp	r0, #0
   d6774:	d1f6      	bne.n	d6764 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x6>
            return true;
   d6776:	2001      	movs	r0, #1
}
   d6778:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d677a:	2000      	movs	r0, #0
   d677c:	e7fc      	b.n	d6778 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1a>

000d677e <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const {
   d677e:	b538      	push	{r3, r4, r5, lr}
   d6780:	6904      	ldr	r4, [r0, #16]
   d6782:	4605      	mov	r5, r0
    for(auto it = exceptDates.begin(); it != exceptDates.end(); ++it) {
   d6784:	696b      	ldr	r3, [r5, #20]
   d6786:	42a3      	cmp	r3, r4
   d6788:	d007      	beq.n	d679a <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1c>
   d678a:	4620      	mov	r0, r4
   d678c:	f7ff ff14 	bl	d65b8 <_ZNK12LocalTimeYMD9compareToES_>
   d6790:	3404      	adds	r4, #4
        if (*it == ymd) {
   d6792:	2800      	cmp	r0, #0
   d6794:	d1f6      	bne.n	d6784 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x6>
            return true;
   d6796:	2001      	movs	r0, #1
}
   d6798:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d679a:	2000      	movs	r0, #0
   d679c:	e7fc      	b.n	d6798 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1a>

000d679e <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const {
   d679e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d67a0:	4605      	mov	r5, r0
   d67a2:	460e      	mov	r6, r1
    if (inExceptDates(ymd)) {
   d67a4:	f7ff ffeb 	bl	d677e <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>
   d67a8:	b990      	cbnz	r0, d67d0 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x32>
        int dayOfWeek = ymd.getDayOfWeek();
   d67aa:	a801      	add	r0, sp, #4
   d67ac:	9101      	str	r1, [sp, #4]
   d67ae:	f7ff febe 	bl	d652e <_ZNK12LocalTimeYMD12getDayOfWeekEv>
        return (dayOfWeekMask & (1 << dayOfWeek)) != 0;
   d67b2:	782b      	ldrb	r3, [r5, #0]
        bool isValidDates = inOnlyOnDates(ymd);
   d67b4:	4631      	mov	r1, r6
   d67b6:	fa43 f400 	asr.w	r4, r3, r0
   d67ba:	4628      	mov	r0, r5
   d67bc:	f7ff ffcf 	bl	d675e <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>
   d67c0:	f004 0401 	and.w	r4, r4, #1
        result = isValidDays || isValidDates;
   d67c4:	2c00      	cmp	r4, #0
   d67c6:	bf08      	it	eq
   d67c8:	4604      	moveq	r4, r0
}
   d67ca:	4620      	mov	r0, r4
   d67cc:	b002      	add	sp, #8
   d67ce:	bd70      	pop	{r4, r5, r6, pc}
        result = false;
   d67d0:	2400      	movs	r4, #0
   d67d2:	e7fa      	b.n	d67ca <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x2c>

000d67d4 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>:
LocalTimeYMD LocalTimeRestrictedDate::getExpirationDate() const {
   d67d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d67d8:	2400      	movs	r4, #0
   d67da:	6845      	ldr	r5, [r0, #4]
   d67dc:	4680      	mov	r8, r0
   d67de:	4626      	mov	r6, r4
   d67e0:	4627      	mov	r7, r4
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d67e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d67e6:	429d      	cmp	r5, r3
   d67e8:	d01e      	beq.n	d6828 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x54>
        return ymd.year == 0 && ymd.month == 0 && ymd.day == 0;
   d67ea:	f367 0916 	bfi	r9, r7, #0, #23
   d67ee:	f366 59da 	bfi	r9, r6, #23, #4
   d67f2:	f364 69df 	bfi	r9, r4, #27, #5
        if (result.isEmpty() || *it > result) {
   d67f6:	f1b9 0f00 	cmp.w	r9, #0
   d67fa:	d109      	bne.n	d6810 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x3c>
            result = *it;
   d67fc:	682f      	ldr	r7, [r5, #0]
   d67fe:	886e      	ldrh	r6, [r5, #2]
   d6800:	78ec      	ldrb	r4, [r5, #3]
   d6802:	f3c7 0716 	ubfx	r7, r7, #0, #23
   d6806:	f3c6 16c3 	ubfx	r6, r6, #7, #4
   d680a:	08e4      	lsrs	r4, r4, #3
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   d680c:	3504      	adds	r5, #4
      {
	++_M_current;
	return *this;
   d680e:	e7e8      	b.n	d67e2 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0xe>
   d6810:	f367 0116 	bfi	r1, r7, #0, #23
   d6814:	f366 51da 	bfi	r1, r6, #23, #4
   d6818:	f364 61df 	bfi	r1, r4, #27, #5
        return compareTo(other) > 0; 
   d681c:	4628      	mov	r0, r5
   d681e:	f7ff fecb 	bl	d65b8 <_ZNK12LocalTimeYMD9compareToES_>
        if (result.isEmpty() || *it > result) {
   d6822:	2800      	cmp	r0, #0
   d6824:	dcea      	bgt.n	d67fc <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x28>
   d6826:	e7f1      	b.n	d680c <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x38>
    return result;
   d6828:	2000      	movs	r0, #0
   d682a:	f367 0016 	bfi	r0, r7, #0, #23
   d682e:	f366 50da 	bfi	r0, r6, #23, #4
   d6832:	f364 60df 	bfi	r0, r4, #27, #5
}
   d6836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d683c <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   d683c:	4a05      	ldr	r2, [pc, #20]	; (d6854 <_ZN15LocalTimeChangeC1Ev+0x18>)
   d683e:	b508      	push	{r3, lr}
   d6840:	6002      	str	r2, [r0, #0]
   d6842:	2200      	movs	r2, #0
   d6844:	4603      	mov	r3, r0
   d6846:	6042      	str	r2, [r0, #4]
   d6848:	3008      	adds	r0, #8
   d684a:	f7ff fed3 	bl	d65f4 <_ZN12LocalTimeHMSC1Ev>
}
   d684e:	4618      	mov	r0, r3
   d6850:	bd08      	pop	{r3, pc}
   d6852:	bf00      	nop
   d6854:	000e2578 	.word	0x000e2578

000d6858 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   d6858:	2300      	movs	r3, #0
   d685a:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   d685c:	8183      	strh	r3, [r0, #12]
   d685e:	7383      	strb	r3, [r0, #14]
}
   d6860:	4770      	bx	lr
	...

000d6864 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   d6864:	b530      	push	{r4, r5, lr}
   d6866:	4604      	mov	r4, r0
   d6868:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   d686a:	460d      	mov	r5, r1
   d686c:	b111      	cbz	r1, d6874 <_ZN15LocalTimeChange5parseEPKc+0x10>
   d686e:	780b      	ldrb	r3, [r1, #0]
   d6870:	2b4d      	cmp	r3, #77	; 0x4d
   d6872:	d003      	beq.n	d687c <_ZN15LocalTimeChange5parseEPKc+0x18>
        clear();
   d6874:	4620      	mov	r0, r4
   d6876:	f7ff ffef 	bl	d6858 <_ZN15LocalTimeChange5clearEv>
   d687a:	e01b      	b.n	d68b4 <_ZN15LocalTimeChange5parseEPKc+0x50>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   d687c:	ab05      	add	r3, sp, #20
   d687e:	9300      	str	r3, [sp, #0]
   d6880:	490f      	ldr	r1, [pc, #60]	; (d68c0 <_ZN15LocalTimeChange5parseEPKc+0x5c>)
   d6882:	ab04      	add	r3, sp, #16
   d6884:	aa03      	add	r2, sp, #12
   d6886:	4628      	mov	r0, r5
   d6888:	f005 fdbc 	bl	dc404 <sscanf>
   d688c:	2803      	cmp	r0, #3
   d688e:	d1f1      	bne.n	d6874 <_ZN15LocalTimeChange5parseEPKc+0x10>
        month = (int8_t) values[0];
   d6890:	9b03      	ldr	r3, [sp, #12]
   d6892:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   d6894:	9b04      	ldr	r3, [sp, #16]
   d6896:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   d6898:	9b05      	ldr	r3, [sp, #20]
   d689a:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   d689c:	212f      	movs	r1, #47	; 0x2f
   d689e:	4628      	mov	r0, r5
   d68a0:	f009 fbdd 	bl	e005e <strchr>
        if (cp) {
   d68a4:	b140      	cbz	r0, d68b8 <_ZN15LocalTimeChange5parseEPKc+0x54>
            hms.parse(cp);
   d68a6:	1c41      	adds	r1, r0, #1
   d68a8:	f104 0008 	add.w	r0, r4, #8
   d68ac:	f7ff feaa 	bl	d6604 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   d68b0:	2301      	movs	r3, #1
   d68b2:	71e3      	strb	r3, [r4, #7]
}
   d68b4:	b007      	add	sp, #28
   d68b6:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   d68b8:	81a0      	strh	r0, [r4, #12]
   d68ba:	73a0      	strb	r0, [r4, #14]
}
   d68bc:	e7f8      	b.n	d68b0 <_ZN15LocalTimeChange5parseEPKc+0x4c>
   d68be:	bf00      	nop
   d68c0:	000e2541 	.word	0x000e2541

000d68c4 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   d68c4:	4b10      	ldr	r3, [pc, #64]	; (d6908 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   d68c6:	4911      	ldr	r1, [pc, #68]	; (d690c <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d68c8:	b510      	push	{r4, lr}
   d68ca:	4604      	mov	r4, r0
   d68cc:	f840 3b04 	str.w	r3, [r0], #4
   d68d0:	f008 f815 	bl	de8fe <_ZN6StringC1EPKc>
   d68d4:	f104 0014 	add.w	r0, r4, #20
   d68d8:	f7ff fe8c 	bl	d65f4 <_ZN12LocalTimeHMSC1Ev>
   d68dc:	490b      	ldr	r1, [pc, #44]	; (d690c <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d68de:	f104 001c 	add.w	r0, r4, #28
   d68e2:	f008 f80c 	bl	de8fe <_ZN6StringC1EPKc>
   d68e6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d68ea:	f7ff fe83 	bl	d65f4 <_ZN12LocalTimeHMSC1Ev>
   d68ee:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d68f2:	f7ff ffa3 	bl	d683c <_ZN15LocalTimeChangeC1Ev>
   d68f6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d68fa:	f7ff ff9f 	bl	d683c <_ZN15LocalTimeChangeC1Ev>
   d68fe:	2300      	movs	r3, #0
   d6900:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   d6904:	4620      	mov	r0, r4
   d6906:	bd10      	pop	{r4, pc}
   d6908:	000e2588 	.word	0x000e2588
   d690c:	000e296f 	.word	0x000e296f

000d6910 <_ZN22LocalTimePosixTimezone5parseEPKc>:
bool LocalTimePosixTimezone::parse(const char *str) {
   d6910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6914:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   d6916:	4608      	mov	r0, r1
   d6918:	f009 fbca 	bl	e00b0 <strdup>
    size_t ii = 0;
   d691c:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   d691e:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   d6920:	9001      	str	r0, [sp, #4]
                dstStart.parse(token);
   d6922:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   d6926:	493f      	ldr	r1, [pc, #252]	; (d6a24 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   d6928:	9801      	ldr	r0, [sp, #4]
   d692a:	aa01      	add	r2, sp, #4
   d692c:	f00a fa7a 	bl	e0e24 <strtok_r>
   d6930:	4601      	mov	r1, r0
   d6932:	2800      	cmp	r0, #0
   d6934:	d062      	beq.n	d69fc <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   d6936:	2d01      	cmp	r5, #1
   d6938:	f105 0301 	add.w	r3, r5, #1
   d693c:	d053      	beq.n	d69e6 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   d693e:	2d02      	cmp	r5, #2
   d6940:	d056      	beq.n	d69f0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   d6942:	2d00      	cmp	r5, #0
   d6944:	d146      	bne.n	d69d4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   d6946:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   d6948:	f892 9000 	ldrb.w	r9, [r2]
   d694c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   d6950:	4615      	mov	r5, r2
   d6952:	4617      	mov	r7, r2
   d6954:	f102 0201 	add.w	r2, r2, #1
   d6958:	d8f6      	bhi.n	d6948 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   d695a:	2200      	movs	r2, #0
   d695c:	702a      	strb	r2, [r5, #0]
                standardName = start;
   d695e:	f104 001c 	add.w	r0, r4, #28
   d6962:	f008 f82a 	bl	de9ba <_ZN6StringaSEPKc>
                valid = true;
   d6966:	2201      	movs	r2, #1
                *cp = save2;
   d6968:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   d696c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   d6970:	782a      	ldrb	r2, [r5, #0]
   d6972:	b36a      	cbz	r2, d69d0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   d6974:	f897 a000 	ldrb.w	sl, [r7]
   d6978:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d697c:	2a3f      	cmp	r2, #63	; 0x3f
   d697e:	46b9      	mov	r9, r7
   d6980:	46bb      	mov	fp, r7
   d6982:	f107 0701 	add.w	r7, r7, #1
   d6986:	d9f5      	bls.n	d6974 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   d6988:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   d698a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   d698e:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   d6992:	4629      	mov	r1, r5
   d6994:	4638      	mov	r0, r7
   d6996:	f7ff fe35 	bl	d6604 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   d699a:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   d699e:	f1ba 0f00 	cmp.w	sl, #0
   d69a2:	d015      	beq.n	d69d0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   d69a4:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   d69a6:	f81b ab01 	ldrb.w	sl, [fp], #1
   d69aa:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   d69ae:	d8f9      	bhi.n	d69a4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   d69b0:	2200      	movs	r2, #0
   d69b2:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   d69b4:	4649      	mov	r1, r9
   d69b6:	1d20      	adds	r0, r4, #4
   d69b8:	f007 ffff 	bl	de9ba <_ZN6StringaSEPKc>
                        *cp = save2;
   d69bc:	f885 a000 	strb.w	sl, [r5]
                        if (*cp) {
   d69c0:	f104 0014 	add.w	r0, r4, #20
   d69c4:	f1ba 0f00 	cmp.w	sl, #0
   d69c8:	d006      	beq.n	d69d8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   d69ca:	4629      	mov	r1, r5
   d69cc:	f7ff fe1a 	bl	d6604 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   d69d0:	2501      	movs	r5, #1
   d69d2:	e7a8      	b.n	d6926 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   d69d4:	461d      	mov	r5, r3
   d69d6:	e7a6      	b.n	d6926 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   d69d8:	4639      	mov	r1, r7
   d69da:	f7ff fd27 	bl	d642c <_ZN12LocalTimeHMSaSERKS_>
                            dstHMS.hour--;
   d69de:	7e23      	ldrb	r3, [r4, #24]
   d69e0:	3b01      	subs	r3, #1
   d69e2:	7623      	strb	r3, [r4, #24]
   d69e4:	e7f4      	b.n	d69d0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   d69e6:	4640      	mov	r0, r8
   d69e8:	f7ff ff3c 	bl	d6864 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d69ec:	2502      	movs	r5, #2
   d69ee:	e79a      	b.n	d6926 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                standardStart.parse(token);
   d69f0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d69f4:	f7ff ff36 	bl	d6864 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d69f8:	2503      	movs	r5, #3
   d69fa:	e794      	b.n	d6926 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
    if (dstStart.valid && !standardStart.valid) {
   d69fc:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   d6a00:	b143      	cbz	r3, d6a14 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   d6a02:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   d6a06:	b92a      	cbnz	r2, d6a14 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        dstStart.clear();
   d6a08:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6a0c:	f7ff ff24 	bl	d6858 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   d6a10:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    free(mutableCopy);
   d6a14:	4630      	mov	r0, r6
   d6a16:	f005 fcdd 	bl	dc3d4 <free>
}
   d6a1a:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   d6a1e:	b003      	add	sp, #12
   d6a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a24:	000e254b 	.word	0x000e254b

000d6a28 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   d6a28:	b538      	push	{r3, r4, r5, lr}
   d6a2a:	4b13      	ldr	r3, [pc, #76]	; (d6a78 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   d6a2c:	4604      	mov	r4, r0
   d6a2e:	460d      	mov	r5, r1
   d6a30:	f840 3b04 	str.w	r3, [r0], #4
   d6a34:	4911      	ldr	r1, [pc, #68]	; (d6a7c <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d6a36:	f007 ff62 	bl	de8fe <_ZN6StringC1EPKc>
   d6a3a:	f104 0014 	add.w	r0, r4, #20
   d6a3e:	f7ff fdd9 	bl	d65f4 <_ZN12LocalTimeHMSC1Ev>
   d6a42:	490e      	ldr	r1, [pc, #56]	; (d6a7c <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d6a44:	f104 001c 	add.w	r0, r4, #28
   d6a48:	f007 ff59 	bl	de8fe <_ZN6StringC1EPKc>
   d6a4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6a50:	f7ff fdd0 	bl	d65f4 <_ZN12LocalTimeHMSC1Ev>
   d6a54:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6a58:	f7ff fef0 	bl	d683c <_ZN15LocalTimeChangeC1Ev>
   d6a5c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6a60:	f7ff feec 	bl	d683c <_ZN15LocalTimeChangeC1Ev>
   d6a64:	2300      	movs	r3, #0
   d6a66:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   d6a6a:	4629      	mov	r1, r5
   d6a6c:	4620      	mov	r0, r4
   d6a6e:	f7ff ff4f 	bl	d6910 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   d6a72:	4620      	mov	r0, r4
   d6a74:	bd38      	pop	{r3, r4, r5, pc}
   d6a76:	bf00      	nop
   d6a78:	000e2588 	.word	0x000e2588
   d6a7c:	000e296f 	.word	0x000e296f

000d6a80 <_ZNK14LocalTimeValue3hmsEv>:
LocalTimeHMS LocalTimeValue::hms() const {
   d6a80:	b508      	push	{r3, lr}
   d6a82:	4603      	mov	r3, r0
    LocalTimeHMS result;
   d6a84:	f7ff fdb6 	bl	d65f4 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   d6a88:	688a      	ldr	r2, [r1, #8]
   d6a8a:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   d6a8c:	684a      	ldr	r2, [r1, #4]
   d6a8e:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   d6a90:	680a      	ldr	r2, [r1, #0]
   d6a92:	719a      	strb	r2, [r3, #6]
}
   d6a94:	4618      	mov	r0, r3
   d6a96:	bd08      	pop	{r3, pc}

000d6a98 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   d6a98:	b513      	push	{r0, r1, r4, lr}
   d6a9a:	4b07      	ldr	r3, [pc, #28]	; (d6ab8 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   d6a9c:	6003      	str	r3, [r0, #0]
   d6a9e:	2300      	movs	r3, #0
   d6aa0:	4604      	mov	r4, r0
   d6aa2:	6043      	str	r3, [r0, #4]
    *this = value.hms();
   d6aa4:	4668      	mov	r0, sp
   d6aa6:	f7ff ffeb 	bl	d6a80 <_ZNK14LocalTimeValue3hmsEv>
   d6aaa:	4669      	mov	r1, sp
   d6aac:	4620      	mov	r0, r4
   d6aae:	f7ff fcbd 	bl	d642c <_ZN12LocalTimeHMSaSERKS_>
}
   d6ab2:	4620      	mov	r0, r4
   d6ab4:	b002      	add	sp, #8
   d6ab6:	bd10      	pop	{r4, pc}
   d6ab8:	000e2568 	.word	0x000e2568

000d6abc <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>:
    if (!hms.ignore) {
   d6abc:	f991 3007 	ldrsb.w	r3, [r1, #7]
   d6ac0:	b943      	cbnz	r3, d6ad4 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS+0x18>
        tm_hour = hms.hour;
   d6ac2:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d6ac6:	6083      	str	r3, [r0, #8]
        tm_min = hms.minute;
   d6ac8:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d6acc:	6043      	str	r3, [r0, #4]
        tm_sec = hms.second;
   d6ace:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d6ad2:	6003      	str	r3, [r0, #0]
}
   d6ad4:	4770      	bx	lr

000d6ad6 <_ZNK14LocalTimeValue3ymdEv>:
LocalTimeYMD LocalTimeValue::ymd() const {
   d6ad6:	b507      	push	{r0, r1, r2, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d6ad8:	2300      	movs	r3, #0
   d6ada:	4601      	mov	r1, r0
    result.fromTimeInfo(this);
   d6adc:	a801      	add	r0, sp, #4
   d6ade:	9301      	str	r3, [sp, #4]
   d6ae0:	f7ff fd13 	bl	d650a <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d6ae4:	9801      	ldr	r0, [sp, #4]
   d6ae6:	b003      	add	sp, #12
   d6ae8:	f85d fb04 	ldr.w	pc, [sp], #4

000d6aec <_ZN22LocalTimePosixTimezoneC1ERKS_>:
class LocalTimePosixTimezone {
   d6aec:	4b19      	ldr	r3, [pc, #100]	; (d6b54 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x68>)
   d6aee:	b570      	push	{r4, r5, r6, lr}
   d6af0:	4604      	mov	r4, r0
   d6af2:	460d      	mov	r5, r1
   d6af4:	f840 3b04 	str.w	r3, [r0], #4
   d6af8:	3104      	adds	r1, #4
   d6afa:	f007 ff4b 	bl	de994 <_ZN6StringC1ERKS_>
   d6afe:	f105 0114 	add.w	r1, r5, #20
   d6b02:	f104 0014 	add.w	r0, r4, #20
   d6b06:	f7ff fc89 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
   d6b0a:	f105 011c 	add.w	r1, r5, #28
   d6b0e:	f104 001c 	add.w	r0, r4, #28
   d6b12:	f007 ff3f 	bl	de994 <_ZN6StringC1ERKS_>
   d6b16:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d6b1a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6b1e:	f7ff fc7d 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeChange {
   d6b22:	4e0d      	ldr	r6, [pc, #52]	; (d6b58 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x6c>)
   d6b24:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6b26:	63a3      	str	r3, [r4, #56]	; 0x38
   d6b28:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d6b2c:	6366      	str	r6, [r4, #52]	; 0x34
   d6b2e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6b32:	f7ff fc73 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
   d6b36:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d6b38:	64a3      	str	r3, [r4, #72]	; 0x48
   d6b3a:	6466      	str	r6, [r4, #68]	; 0x44
   d6b3c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d6b40:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d6b44:	f7ff fc6a 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimePosixTimezone {
   d6b48:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d6b4c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d6b50:	4620      	mov	r0, r4
   d6b52:	bd70      	pop	{r4, r5, r6, pc}
   d6b54:	000e2588 	.word	0x000e2588
   d6b58:	000e2578 	.word	0x000e2578

000d6b5c <_ZN16LocalTimeConvertC1ERKS_>:
class LocalTimeConvert {
   d6b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b5e:	460c      	mov	r4, r1
   d6b60:	f851 3b04 	ldr.w	r3, [r1], #4
   d6b64:	4607      	mov	r7, r0
   d6b66:	f840 3b04 	str.w	r3, [r0], #4
   d6b6a:	f7ff ffbf 	bl	d6aec <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d6b6e:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d6b72:	f104 0668 	add.w	r6, r4, #104	; 0x68
   d6b76:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   d6b7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6b7c:	f107 0568 	add.w	r5, r7, #104	; 0x68
   d6b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6b82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6b86:	6833      	ldr	r3, [r6, #0]
   d6b88:	602b      	str	r3, [r5, #0]
   d6b8a:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d6b8e:	f104 0698 	add.w	r6, r4, #152	; 0x98
   d6b92:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
   d6b96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6b98:	f107 0598 	add.w	r5, r7, #152	; 0x98
   d6b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6b9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6ba2:	6833      	ldr	r3, [r6, #0]
   d6ba4:	602b      	str	r3, [r5, #0]
   d6ba6:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
   d6baa:	34c8      	adds	r4, #200	; 0xc8
   d6bac:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
   d6bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6bb2:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
   d6bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6bbc:	6823      	ldr	r3, [r4, #0]
   d6bbe:	602b      	str	r3, [r5, #0]
   d6bc0:	4638      	mov	r0, r7
   d6bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6bc4 <_ZN21LocalTimeScheduleItemD1Ev>:
class LocalTimeScheduleItem {
   d6bc4:	b510      	push	{r4, lr}
   d6bc6:	4604      	mov	r4, r0
   d6bc8:	3038      	adds	r0, #56	; 0x38
   d6bca:	f007 fe4d 	bl	de868 <_ZN6StringD1Ev>
	_M_deallocate(_M_impl._M_start,
   d6bce:	6920      	ldr	r0, [r4, #16]
   d6bd0:	f7ff fbec 	bl	d63ac <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d6bd4:	6860      	ldr	r0, [r4, #4]
   d6bd6:	f7ff fbe9 	bl	d63ac <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d6bda:	4620      	mov	r0, r4
   d6bdc:	bd10      	pop	{r4, pc}
	...

000d6be0 <_ZN9LocalTime8instanceEv>:
LocalTime &LocalTime::instance() {
   d6be0:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d6be2:	4d09      	ldr	r5, [pc, #36]	; (d6c08 <_ZN9LocalTime8instanceEv+0x28>)
   d6be4:	682b      	ldr	r3, [r5, #0]
   d6be6:	b963      	cbnz	r3, d6c02 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   d6be8:	2060      	movs	r0, #96	; 0x60
   d6bea:	f7fd fa54 	bl	d4096 <_Znwj>
   d6bee:	4604      	mov	r4, r0
   d6bf0:	b130      	cbz	r0, d6c00 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   d6bf2:	4b06      	ldr	r3, [pc, #24]	; (d6c0c <_ZN9LocalTime8instanceEv+0x2c>)
   d6bf4:	f840 3b04 	str.w	r3, [r0], #4
   d6bf8:	f7ff fe64 	bl	d68c4 <_ZN22LocalTimePosixTimezoneC1Ev>
   d6bfc:	2364      	movs	r3, #100	; 0x64
   d6bfe:	65e3      	str	r3, [r4, #92]	; 0x5c
   d6c00:	602c      	str	r4, [r5, #0]
}
   d6c02:	6828      	ldr	r0, [r5, #0]
   d6c04:	bd38      	pop	{r3, r4, r5, pc}
   d6c06:	bf00      	nop
   d6c08:	2003e494 	.word	0x2003e494
   d6c0c:	000e2558 	.word	0x000e2558

000d6c10 <_ZN9LocalTime8tmToTimeEP2tm>:
    return mktime(pTimeInfo);
   d6c10:	f005 bc48 	b.w	dc4a4 <mktime>

000d6c14 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   d6c14:	3901      	subs	r1, #1
   d6c16:	290b      	cmp	r1, #11
   d6c18:	d815      	bhi.n	d6c46 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   d6c1a:	e8df f001 	tbb	[pc, r1]
   d6c1e:	0816      	.short	0x0816
   d6c20:	06160616 	.word	0x06160616
   d6c24:	16061616 	.word	0x16061616
   d6c28:	1606      	.short	0x1606
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   d6c2a:	201e      	movs	r0, #30
   d6c2c:	4770      	bx	lr
            if ((year % 4) == 0) {
   d6c2e:	0783      	lsls	r3, r0, #30
   d6c30:	d10d      	bne.n	d6c4e <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   d6c32:	2264      	movs	r2, #100	; 0x64
   d6c34:	fb90 f3f2 	sdiv	r3, r0, r2
   d6c38:	fb02 0013 	mls	r0, r2, r3, r0
   d6c3c:	2800      	cmp	r0, #0
                    return 29;
   d6c3e:	bf0c      	ite	eq
   d6c40:	201c      	moveq	r0, #28
   d6c42:	201d      	movne	r0, #29
   d6c44:	4770      	bx	lr
    return 0;
   d6c46:	2000      	movs	r0, #0
   d6c48:	4770      	bx	lr
            return 31;
   d6c4a:	201f      	movs	r0, #31
   d6c4c:	4770      	bx	lr
                return 28;
   d6c4e:	201c      	movs	r0, #28
}
   d6c50:	4770      	bx	lr

000d6c52 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d6c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   d6c54:	2301      	movs	r3, #1
   d6c56:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   d6c58:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d6c5c:	3b01      	subs	r3, #1
   d6c5e:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d6c60:	2300      	movs	r3, #0
   d6c62:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d6c66:	4606      	mov	r6, r0
   d6c68:	460c      	mov	r4, r1
   d6c6a:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d6c6c:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   d6c6e:	4620      	mov	r0, r4
   d6c70:	f7ff ffce 	bl	d6c10 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   d6c74:	f996 3006 	ldrsb.w	r3, [r6, #6]
   d6c78:	69a2      	ldr	r2, [r4, #24]
   d6c7a:	429a      	cmp	r2, r3
   d6c7c:	d003      	beq.n	d6c86 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   d6c7e:	68e3      	ldr	r3, [r4, #12]
   d6c80:	3301      	adds	r3, #1
   d6c82:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   d6c84:	e7f3      	b.n	d6c6e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   d6c86:	f996 5005 	ldrsb.w	r5, [r6, #5]
   d6c8a:	2d01      	cmp	r5, #1
   d6c8c:	d013      	beq.n	d6cb6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   d6c8e:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d6c90:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   d6c92:	3d01      	subs	r5, #1
   d6c94:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   d6c98:	441d      	add	r5, r3
   d6c9a:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d6c9c:	f996 1004 	ldrsb.w	r1, [r6, #4]
   d6ca0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6ca4:	f7ff ffb6 	bl	d6c14 <_ZN9LocalTime14lastDayOfMonthEii>
   d6ca8:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   d6caa:	bfc4      	itt	gt
   d6cac:	3d07      	subgt	r5, #7
   d6cae:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   d6cb0:	4620      	mov	r0, r4
   d6cb2:	f7ff ffad 	bl	d6c10 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   d6cb6:	4621      	mov	r1, r4
   d6cb8:	f106 0008 	add.w	r0, r6, #8
   d6cbc:	f7ff fd26 	bl	d670c <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   d6cc0:	4638      	mov	r0, r7
   d6cc2:	f7ff fd30 	bl	d6726 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   d6cc6:	4620      	mov	r0, r4
}
   d6cc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   d6ccc:	f005 bbea 	b.w	dc4a4 <mktime>

000d6cd0 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   d6cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   d6cd2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   d6cd6:	b085      	sub	sp, #20
   d6cd8:	4604      	mov	r4, r0
    if (!config.isValid()) {
   d6cda:	b92b      	cbnz	r3, d6ce8 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   d6cdc:	f7ff ff80 	bl	d6be0 <_ZN9LocalTime8instanceEv>
   d6ce0:	1d01      	adds	r1, r0, #4
   d6ce2:	1d20      	adds	r0, r4, #4
   d6ce4:	f7ff fbc6 	bl	d6474 <_ZN22LocalTimePosixTimezoneaSERKS_>
    if (config.hasDST()) {
   d6ce8:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d6cec:	2b00      	cmp	r3, #0
   d6cee:	d069      	beq.n	d6dc4 <_ZN16LocalTimeConvert7convertEv+0xf4>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   d6cf0:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d6cf4:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   d6cf8:	4639      	mov	r1, r7
        standardStartTimeInfo = dstStartTimeInfo;
   d6cfa:	463e      	mov	r6, r7
    localtime_r(&time, pTimeInfo);
   d6cfc:	a802      	add	r0, sp, #8
   d6cfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d6d02:	f005 fbbf 	bl	dc484 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   d6d06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6d08:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d6d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6d0e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6d12:	6833      	ldr	r3, [r6, #0]
   d6d14:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   d6d16:	f104 0130 	add.w	r1, r4, #48	; 0x30
   d6d1a:	a802      	add	r0, sp, #8
   d6d1c:	f7ff fb7e 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
   d6d20:	aa02      	add	r2, sp, #8
   d6d22:	4639      	mov	r1, r7
   d6d24:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6d28:	f7ff ff93 	bl	d6c52 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   d6d2c:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d6d30:	f104 0118 	add.w	r1, r4, #24
   d6d34:	a802      	add	r0, sp, #8
   d6d36:	f7ff fb71 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
   d6d3a:	aa02      	add	r2, sp, #8
   d6d3c:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   d6d40:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d6d44:	f7ff ff85 	bl	d6c52 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   d6d48:	e9d4 6724 	ldrd	r6, r7, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d6d4c:	460b      	mov	r3, r1
        if (dstStart < standardStart) {
   d6d4e:	4286      	cmp	r6, r0
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d6d50:	4602      	mov	r2, r0
        if (dstStart < standardStart) {
   d6d52:	eb77 0103 	sbcs.w	r1, r7, r3
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d6d56:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   d6d5a:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   d6d5e:	da24      	bge.n	d6daa <_ZN16LocalTimeConvert7convertEv+0xda>
            if (time < dstStart) {
   d6d60:	42b0      	cmp	r0, r6
   d6d62:	eb71 0507 	sbcs.w	r5, r1, r7
   d6d66:	da19      	bge.n	d6d9c <_ZN16LocalTimeConvert7convertEv+0xcc>
                position = Position::BEFORE_DST;
   d6d68:	2300      	movs	r3, #0
        position = Position::NO_DST;
   d6d6a:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   d6d6c:	6820      	ldr	r0, [r4, #0]
   d6d6e:	f7ff fb13 	bl	d6398 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d6d72:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d6d76:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
   d6d7a:	9101      	str	r1, [sp, #4]
   d6d7c:	bb20      	cbnz	r0, d6dc8 <_ZN16LocalTimeConvert7convertEv+0xf8>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   d6d7e:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d6d82:	f7ff fca7 	bl	d66d4 <_ZNK12LocalTimeHMS9toSecondsEv>
   d6d86:	1a36      	subs	r6, r6, r0
   d6d88:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
    localtime_r(&time, pTimeInfo);
   d6d8c:	9901      	ldr	r1, [sp, #4]
   d6d8e:	a802      	add	r0, sp, #8
   d6d90:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6d94:	f005 fb76 	bl	dc484 <localtime_r>
}
   d6d98:	b005      	add	sp, #20
   d6d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   d6d9c:	4290      	cmp	r0, r2
   d6d9e:	eb71 0303 	sbcs.w	r3, r1, r3
                position = Position::IN_DST;
   d6da2:	bfb4      	ite	lt
   d6da4:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   d6da6:	2302      	movge	r3, #2
   d6da8:	e7df      	b.n	d6d6a <_ZN16LocalTimeConvert7convertEv+0x9a>
            if (time < standardStart) {
   d6daa:	4290      	cmp	r0, r2
   d6dac:	eb71 0303 	sbcs.w	r3, r1, r3
   d6db0:	da01      	bge.n	d6db6 <_ZN16LocalTimeConvert7convertEv+0xe6>
                position = Position::BEFORE_STANDARD;
   d6db2:	2303      	movs	r3, #3
   d6db4:	e7d9      	b.n	d6d6a <_ZN16LocalTimeConvert7convertEv+0x9a>
            else if (time < dstStart) {
   d6db6:	42b0      	cmp	r0, r6
   d6db8:	eb71 0307 	sbcs.w	r3, r1, r7
                position = Position::IN_STANDARD;
   d6dbc:	bfb4      	ite	lt
   d6dbe:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   d6dc0:	2305      	movge	r3, #5
   d6dc2:	e7d2      	b.n	d6d6a <_ZN16LocalTimeConvert7convertEv+0x9a>
        position = Position::NO_DST;
   d6dc4:	2306      	movs	r3, #6
   d6dc6:	e7d0      	b.n	d6d6a <_ZN16LocalTimeConvert7convertEv+0x9a>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d6dc8:	f104 0018 	add.w	r0, r4, #24
   d6dcc:	e7d9      	b.n	d6d82 <_ZN16LocalTimeConvert7convertEv+0xb2>

000d6dce <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>:
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d6dce:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct tm mutableTimeInfo = *this;
   d6dd2:	4604      	mov	r4, r0
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d6dd4:	460e      	mov	r6, r1
    struct tm mutableTimeInfo = *this;
   d6dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d6dd8:	b0dc      	sub	sp, #368	; 0x170
    struct tm mutableTimeInfo = *this;
   d6dda:	ad01      	add	r5, sp, #4
   d6ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6de2:	6823      	ldr	r3, [r4, #0]
   d6de4:	602b      	str	r3, [r5, #0]
    return mktime(pTimeInfo);
   d6de6:	a801      	add	r0, sp, #4
   d6de8:	f005 fb5c 	bl	dc4a4 <mktime>
   d6dec:	4604      	mov	r4, r0
    standardTime += config.standardHMS.toSeconds();
   d6dee:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    return mktime(pTimeInfo);
   d6df2:	460d      	mov	r5, r1
    standardTime += config.standardHMS.toSeconds();
   d6df4:	f7ff fc6e 	bl	d66d4 <_ZNK12LocalTimeHMS9toSecondsEv>
    if (config.hasDST()) {
   d6df8:	f996 303b 	ldrsb.w	r3, [r6, #59]	; 0x3b
    standardTime += config.standardHMS.toSeconds();
   d6dfc:	eb14 0800 	adds.w	r8, r4, r0
   d6e00:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
    if (config.hasDST()) {
   d6e04:	b31b      	cbz	r3, d6e4e <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x80>
class LocalTimeConvert {
   d6e06:	2306      	movs	r3, #6
   d6e08:	a821      	add	r0, sp, #132	; 0x84
   d6e0a:	9320      	str	r3, [sp, #128]	; 0x80
   d6e0c:	f7ff fd5a 	bl	d68c4 <_ZN22LocalTimePosixTimezoneC1Ev>
        convert.withConfig(config).withTime(standardTime).convert();
   d6e10:	4631      	mov	r1, r6
   d6e12:	a80a      	add	r0, sp, #40	; 0x28
   d6e14:	f7ff fe6a 	bl	d6aec <_ZN22LocalTimePosixTimezoneC1ERKS_>
    LocalTimeConvert &withConfig(LocalTimePosixTimezone config) { this->config = config; return *this; };
   d6e18:	a90a      	add	r1, sp, #40	; 0x28
   d6e1a:	a821      	add	r0, sp, #132	; 0x84
   d6e1c:	f7ff fb2a 	bl	d6474 <_ZN22LocalTimePosixTimezoneaSERKS_>
   d6e20:	a820      	add	r0, sp, #128	; 0x80
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   d6e22:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
   d6e26:	f7ff ff53 	bl	d6cd0 <_ZN16LocalTimeConvert7convertEv>
   d6e2a:	a80a      	add	r0, sp, #40	; 0x28
   d6e2c:	f7ff fa86 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
        if (convert.isDST()) {
   d6e30:	9820      	ldr	r0, [sp, #128]	; 0x80
   d6e32:	f7ff fab1 	bl	d6398 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d6e36:	b138      	cbz	r0, d6e48 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x7a>
            dstTime += config.dstHMS.toSeconds();
   d6e38:	f106 0014 	add.w	r0, r6, #20
   d6e3c:	f7ff fc4a 	bl	d66d4 <_ZNK12LocalTimeHMS9toSecondsEv>
   d6e40:	eb14 0800 	adds.w	r8, r4, r0
   d6e44:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
class LocalTimeConvert {
   d6e48:	a821      	add	r0, sp, #132	; 0x84
   d6e4a:	f7ff fa77 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d6e4e:	4640      	mov	r0, r8
   d6e50:	4649      	mov	r1, r9
   d6e52:	b05c      	add	sp, #368	; 0x170
   d6e54:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000d6e58 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>:
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d6e58:	b530      	push	{r4, r5, lr}
    if (!hms.ignore) {
   d6e5a:	f991 3007 	ldrsb.w	r3, [r1, #7]
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d6e5e:	b097      	sub	sp, #92	; 0x5c
   d6e60:	4604      	mov	r4, r0
    if (!hms.ignore) {
   d6e62:	b9c3      	cbnz	r3, d6e96 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS+0x3e>
        localTimeValue.setHMS(hms);
   d6e64:	f100 0568 	add.w	r5, r0, #104	; 0x68
   d6e68:	4668      	mov	r0, sp
   d6e6a:	f7ff fad7 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
   d6e6e:	4669      	mov	r1, sp
   d6e70:	4628      	mov	r0, r5
   d6e72:	f7ff fe23 	bl	d6abc <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>
        time = localTimeValue.toUTC(config);
   d6e76:	1d21      	adds	r1, r4, #4
   d6e78:	4668      	mov	r0, sp
   d6e7a:	f7ff fe37 	bl	d6aec <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d6e7e:	4669      	mov	r1, sp
   d6e80:	4628      	mov	r0, r5
   d6e82:	f7ff ffa4 	bl	d6dce <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>
   d6e86:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   d6e8a:	4668      	mov	r0, sp
   d6e8c:	f7ff fa56 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
        convert();
   d6e90:	4620      	mov	r0, r4
   d6e92:	f7ff ff1d 	bl	d6cd0 <_ZN16LocalTimeConvert7convertEv>
}
   d6e96:	b017      	add	sp, #92	; 0x5c
   d6e98:	bd30      	pop	{r4, r5, pc}
	...

000d6e9c <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>:
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d6e9c:	b530      	push	{r4, r5, lr}
    time += 86400;
   d6e9e:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
   d6ea2:	4d0b      	ldr	r5, [pc, #44]	; (d6ed0 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS+0x34>)
   d6ea4:	195b      	adds	r3, r3, r5
   d6ea6:	f04f 0500 	mov.w	r5, #0
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d6eaa:	b085      	sub	sp, #20
    time += 86400;
   d6eac:	eb45 0202 	adc.w	r2, r5, r2
   d6eb0:	e9c0 3218 	strd	r3, r2, [r0, #96]	; 0x60
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d6eb4:	4604      	mov	r4, r0
   d6eb6:	9101      	str	r1, [sp, #4]
    convert();
   d6eb8:	f7ff ff0a 	bl	d6cd0 <_ZN16LocalTimeConvert7convertEv>
    atLocalTime(hms);
   d6ebc:	9901      	ldr	r1, [sp, #4]
   d6ebe:	a802      	add	r0, sp, #8
   d6ec0:	f7ff faac 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
   d6ec4:	a902      	add	r1, sp, #8
   d6ec6:	4620      	mov	r0, r4
   d6ec8:	f7ff ffc6 	bl	d6e58 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
}
   d6ecc:	b005      	add	sp, #20
   d6ece:	bd30      	pop	{r4, r5, pc}
   d6ed0:	00015180 	.word	0x00015180

000d6ed4 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>:

// [static]
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d6ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ed8:	b08a      	sub	sp, #40	; 0x28
   d6eda:	4617      	mov	r7, r2
   d6edc:	4606      	mov	r6, r0
   d6ede:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d6ee0:	2224      	movs	r2, #36	; 0x24
   d6ee2:	2100      	movs	r1, #0
   d6ee4:	a801      	add	r0, sp, #4
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d6ee6:	461c      	mov	r4, r3
    struct tm timeInfo = {0};
   d6ee8:	f009 f874 	bl	dffd4 <memset>

    if (dayOfWeek < 0 || dayOfWeek >= 7) {
   d6eec:	2f06      	cmp	r7, #6
   d6eee:	d829      	bhi.n	d6f44 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        // Invalid values of dayOfWeek can cause infinite loop below
        return 0;
    }

    int lastDay = lastDayOfMonth(year, month);
   d6ef0:	4629      	mov	r1, r5
   d6ef2:	4630      	mov	r0, r6
   d6ef4:	f7ff fe8e 	bl	d6c14 <_ZN9LocalTime14lastDayOfMonthEii>

    if (ordinal > 0) {
   d6ef8:	2c00      	cmp	r4, #0
    int lastDay = lastDayOfMonth(year, month);
   d6efa:	4680      	mov	r8, r0
    if (ordinal > 0) {
   d6efc:	dd24      	ble.n	d6f48 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x74>
        timeInfo.tm_year = year - 1900;
   d6efe:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
        timeInfo.tm_mon = month - 1;
   d6f02:	3d01      	subs	r5, #1
        timeInfo.tm_year = year - 1900;
   d6f04:	9606      	str	r6, [sp, #24]
        timeInfo.tm_mon = month - 1;
   d6f06:	9505      	str	r5, [sp, #20]
        timeInfo.tm_mday = 1;
   d6f08:	2301      	movs	r3, #1
        tmToTime(&timeInfo);
   d6f0a:	a801      	add	r0, sp, #4
        timeInfo.tm_mday = 1;
   d6f0c:	9304      	str	r3, [sp, #16]
        tmToTime(&timeInfo);
   d6f0e:	f7ff fe7f 	bl	d6c10 <_ZN9LocalTime8tmToTimeEP2tm>

        while(timeInfo.tm_wday != dayOfWeek) {
   d6f12:	9a07      	ldr	r2, [sp, #28]
   d6f14:	9b04      	ldr	r3, [sp, #16]
   d6f16:	42ba      	cmp	r2, r7
   d6f18:	d001      	beq.n	d6f1e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4a>
            timeInfo.tm_mday++;
   d6f1a:	3301      	adds	r3, #1
   d6f1c:	e7f5      	b.n	d6f0a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x36>
   d6f1e:	2100      	movs	r1, #0
            tmToTime(&timeInfo);
        }

        for(int loops = 1; loops <= 5; loops++) {
   d6f20:	2201      	movs	r2, #1
            if (loops >= ordinal) {
   d6f22:	4294      	cmp	r4, r2
   d6f24:	d106      	bne.n	d6f34 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x60>
   d6f26:	b101      	cbz	r1, d6f2a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d6f28:	9304      	str	r3, [sp, #16]
            timeInfo.tm_mday--;
            tmToTime(&timeInfo);
        }
        for(int loops = 1; loops <= 5; loops++) {
            if (loops >= -ordinal) {
                return timeInfo.tm_mday;
   d6f2a:	9c04      	ldr	r4, [sp, #16]
        }
    }

    
    return 0;
}
   d6f2c:	4620      	mov	r0, r4
   d6f2e:	b00a      	add	sp, #40	; 0x28
   d6f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timeInfo.tm_mday += 7;
   d6f34:	3307      	adds	r3, #7
            if (timeInfo.tm_mday > lastDay) {
   d6f36:	4543      	cmp	r3, r8
   d6f38:	dc04      	bgt.n	d6f44 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d6f3a:	3201      	adds	r2, #1
   d6f3c:	2a06      	cmp	r2, #6
   d6f3e:	f04f 0101 	mov.w	r1, #1
   d6f42:	d1ee      	bne.n	d6f22 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4e>
                return 0;
   d6f44:	2400      	movs	r4, #0
   d6f46:	e7f1      	b.n	d6f2c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
    if (ordinal < 0) {
   d6f48:	d0f0      	beq.n	d6f2c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
        timeInfo.tm_mon = month - 1;
   d6f4a:	3d01      	subs	r5, #1
        timeInfo.tm_mday = lastDay;
   d6f4c:	e9cd 0504 	strd	r0, r5, [sp, #16]
        timeInfo.tm_year = year - 1900;
   d6f50:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   d6f54:	9606      	str	r6, [sp, #24]
        tmToTime(&timeInfo);
   d6f56:	a801      	add	r0, sp, #4
   d6f58:	f7ff fe5a 	bl	d6c10 <_ZN9LocalTime8tmToTimeEP2tm>
        while(timeInfo.tm_wday != dayOfWeek) {
   d6f5c:	9b07      	ldr	r3, [sp, #28]
   d6f5e:	9904      	ldr	r1, [sp, #16]
   d6f60:	42bb      	cmp	r3, r7
   d6f62:	d002      	beq.n	d6f6a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x96>
            timeInfo.tm_mday--;
   d6f64:	3901      	subs	r1, #1
   d6f66:	9104      	str	r1, [sp, #16]
            tmToTime(&timeInfo);
   d6f68:	e7f5      	b.n	d6f56 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x82>
   d6f6a:	2000      	movs	r0, #0
        for(int loops = 1; loops <= 5; loops++) {
   d6f6c:	2201      	movs	r2, #1
            if (loops >= -ordinal) {
   d6f6e:	4264      	negs	r4, r4
   d6f70:	4294      	cmp	r4, r2
   d6f72:	dc03      	bgt.n	d6f7c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0xa8>
   d6f74:	2800      	cmp	r0, #0
   d6f76:	d0d8      	beq.n	d6f2a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d6f78:	9104      	str	r1, [sp, #16]
   d6f7a:	e7d6      	b.n	d6f2a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
            timeInfo.tm_mday -= 7;
   d6f7c:	3907      	subs	r1, #7
            if (timeInfo.tm_mday < 1) {
   d6f7e:	2900      	cmp	r1, #0
   d6f80:	dde0      	ble.n	d6f44 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d6f82:	3201      	adds	r2, #1
   d6f84:	2a06      	cmp	r2, #6
   d6f86:	f04f 0001 	mov.w	r0, #1
   d6f8a:	d1f1      	bne.n	d6f70 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x9c>
   d6f8c:	e7da      	b.n	d6f44 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
	...

000d6f90 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d6f90:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   d6f94:	b0cd      	sub	sp, #308	; 0x134
   d6f96:	4604      	mov	r4, r0
    LocalTimeConvert tempConv(conv);
   d6f98:	a810      	add	r0, sp, #64	; 0x40
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d6f9a:	460d      	mov	r5, r1
    LocalTimeConvert tempConv(conv);
   d6f9c:	f7ff fdde 	bl	d6b5c <_ZN16LocalTimeConvertC1ERKS_>
        ymd.year = ymd.month = ymd.day = 0;
   d6fa0:	2300      	movs	r3, #0
        return LocalTimeRestrictedDate::getExpirationDate();
   d6fa2:	4620      	mov	r0, r4
        ymd.year = ymd.month = ymd.day = 0;
   d6fa4:	9302      	str	r3, [sp, #8]
        return LocalTimeRestrictedDate::getExpirationDate();
   d6fa6:	f7ff fc15 	bl	d67d4 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>
    if (expirationDate.isEmpty()) {
   d6faa:	bb58      	cbnz	r0, d7004 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x74>
    *this = value.ymd();
   d6fac:	a82a      	add	r0, sp, #168	; 0xa8
   d6fae:	f7ff fd92 	bl	d6ad6 <_ZNK14LocalTimeValue3ymdEv>
        endYMD = tempConv.getLocalTimeYMD();
   d6fb2:	9002      	str	r0, [sp, #8]
        endYMD.addDay(LocalTime::instance().getScheduleLookaheadDays());
   d6fb4:	f7ff fe14 	bl	d6be0 <_ZN9LocalTime8instanceEv>
   d6fb8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   d6fba:	a802      	add	r0, sp, #8
   d6fbc:	f7ff fad7 	bl	d656e <_ZN12LocalTimeYMD6addDayEi>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d6fc0:	f8df a20c 	ldr.w	sl, [pc, #524]	; d71d0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x240>
    *this = value.ymd();
   d6fc4:	a82a      	add	r0, sp, #168	; 0xa8
   d6fc6:	f7ff fd86 	bl	d6ad6 <_ZNK14LocalTimeValue3ymdEv>
        return compareTo(other) > 0; 
   d6fca:	9902      	ldr	r1, [sp, #8]
        LocalTimeYMD curYMD = tempConv.getLocalTimeYMD();
   d6fcc:	9003      	str	r0, [sp, #12]
    *this = value.ymd();
   d6fce:	4606      	mov	r6, r0
   d6fd0:	a803      	add	r0, sp, #12
   d6fd2:	f7ff faf1 	bl	d65b8 <_ZNK12LocalTimeYMD9compareToES_>
        if (curYMD > endYMD) {
   d6fd6:	2800      	cmp	r0, #0
   d6fd8:	f300 80f2 	bgt.w	d71c0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x230>
        return LocalTimeRestrictedDate::isValid(ymd);
   d6fdc:	4631      	mov	r1, r6
   d6fde:	4620      	mov	r0, r4
   d6fe0:	f7ff fbdd 	bl	d679e <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
        if (!timeRange.isValidDate(curYMD)) {
   d6fe4:	4607      	mov	r7, r0
   d6fe6:	2800      	cmp	r0, #0
   d6fe8:	f000 8094 	beq.w	d7114 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
        switch(scheduleItemType) {
   d6fec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d6fee:	3b01      	subs	r3, #1
   d6ff0:	2b04      	cmp	r3, #4
   d6ff2:	f200 808f 	bhi.w	d7114 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d6ff6:	e8df f013 	tbh	[pc, r3, lsl #1]
   d6ffa:	0007      	.short	0x0007
   d6ffc:	00960007 	.word	0x00960007
   d7000:	00d500b8 	.word	0x00d500b8
        endYMD = expirationDate;
   d7004:	9002      	str	r0, [sp, #8]
   d7006:	e7db      	b.n	d6fc0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x30>
                int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d7008:	a92a      	add	r1, sp, #168	; 0xa8
   d700a:	a807      	add	r0, sp, #28
   d700c:	f7ff fd38 	bl	d6a80 <_ZNK14LocalTimeValue3hmsEv>
   d7010:	a907      	add	r1, sp, #28
   d7012:	4620      	mov	r0, r4
   d7014:	f7ff fa17 	bl	d6446 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                if (cmp < 0) {
   d7018:	2800      	cmp	r0, #0
   d701a:	da0d      	bge.n	d7038 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xa8>
                    tempConv.atLocalTime(timeRange.hmsStart);
   d701c:	f104 011c 	add.w	r1, r4, #28
   d7020:	a807      	add	r0, sp, #28
   d7022:	f7ff f9fb 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
   d7026:	a907      	add	r1, sp, #28
   d7028:	a810      	add	r0, sp, #64	; 0x40
   d702a:	f7ff ff15 	bl	d6e58 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                        conv.time = tempConv.time;
   d702e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d7032:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
   d7036:	e094      	b.n	d7162 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1d2>
                if (cmp == 0) {
   d7038:	d16c      	bne.n	d7114 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    switch(scheduleItemType) {
   d703a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d703c:	2b01      	cmp	r3, #1
   d703e:	d025      	beq.n	d708c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xfc>
   d7040:	2b02      	cmp	r3, #2
   d7042:	d167      	bne.n	d7114 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d7044:	f104 011c 	add.w	r1, r4, #28
   d7048:	a804      	add	r0, sp, #16
   d704a:	f7ff f9e7 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
   d704e:	f104 0924 	add.w	r9, r4, #36	; 0x24
        return compareTo(other) <= 0;
   d7052:	4649      	mov	r1, r9
   d7054:	a804      	add	r0, sp, #16
   d7056:	f7ff f9c3 	bl	d63e0 <_ZNK12LocalTimeHMS9compareToERKS_>
   d705a:	2800      	cmp	r0, #0
   d705c:	dc5a      	bgt.n	d7114 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                            tempConv.atLocalTime(tempHMS);
   d705e:	a904      	add	r1, sp, #16
   d7060:	a807      	add	r0, sp, #28
   d7062:	f7ff f9db 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
   d7066:	a907      	add	r1, sp, #28
   d7068:	a810      	add	r0, sp, #64	; 0x40
   d706a:	f7ff fef5 	bl	d6e58 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                            if (tempConv.time > conv.time) {
   d706e:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	; 0x60
   d7072:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d7076:	4290      	cmp	r0, r2
   d7078:	eb71 0303 	sbcs.w	r3, r1, r3
   d707c:	db41      	blt.n	d7102 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x172>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d707e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7082:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d7084:	4413      	add	r3, r2
   d7086:	f88d 3014 	strb.w	r3, [sp, #20]
   d708a:	e7e2      	b.n	d7052 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xc2>
                        startingModulo = timeRange.hmsStart.minute % increment;
   d708c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d708e:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   d7092:	fb93 f6f2 	sdiv	r6, r3, r2
                        tempConv.time += increment * 60;
   d7096:	213c      	movs	r1, #60	; 0x3c
   d7098:	4351      	muls	r1, r2
                        startingModulo = timeRange.hmsStart.minute % increment;
   d709a:	fb02 3616 	mls	r6, r2, r6, r3
                        tempConv.time += increment * 60;
   d709e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d70a2:	1852      	adds	r2, r2, r1
   d70a4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
                        tempConv.convert();
   d70a8:	a810      	add	r0, sp, #64	; 0x40
                        tempConv.time += increment * 60;
   d70aa:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
                        tempConv.convert();
   d70ae:	f7ff fe0f 	bl	d6cd0 <_ZN16LocalTimeConvert7convertEv>
                        LocalTime::timeToTm(tempConv.time, &timeInfo);
   d70b2:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
    localtime_r(&time, pTimeInfo);
   d70b6:	a907      	add	r1, sp, #28
   d70b8:	a804      	add	r0, sp, #16
   d70ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d70be:	f005 f9e1 	bl	dc484 <localtime_r>
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d70c2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   d70c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d70c6:	1b9b      	subs	r3, r3, r6
   d70c8:	fb93 f2f1 	sdiv	r2, r3, r1
   d70cc:	fb01 3312 	mls	r3, r1, r2, r3
   d70d0:	9a08      	ldr	r2, [sp, #32]
    return mktime(pTimeInfo);
   d70d2:	a807      	add	r0, sp, #28
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d70d4:	1ad2      	subs	r2, r2, r3
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d70d6:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d70da:	9208      	str	r2, [sp, #32]
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d70dc:	9307      	str	r3, [sp, #28]
    return mktime(pTimeInfo);
   d70de:	f005 f9e1 	bl	dc4a4 <mktime>
                        tempConv.time = LocalTime::tmToTime(&timeInfo);
   d70e2:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
                        tempConv.convert();
   d70e6:	a810      	add	r0, sp, #64	; 0x40
   d70e8:	f7ff fdf2 	bl	d6cd0 <_ZN16LocalTimeConvert7convertEv>
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   d70ec:	a92a      	add	r1, sp, #168	; 0xa8
   d70ee:	a804      	add	r0, sp, #16
   d70f0:	f7ff fcd2 	bl	d6a98 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
        return compareTo(other) < 0;
   d70f4:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d70f8:	a804      	add	r0, sp, #16
   d70fa:	f7ff f971 	bl	d63e0 <_ZNK12LocalTimeHMS9compareToERKS_>
                        if (tempConv.getLocalTimeHMS() < timeRange.hmsEnd) {
   d70fe:	2800      	cmp	r0, #0
   d7100:	da08      	bge.n	d7114 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
    *this = value.ymd();
   d7102:	a82a      	add	r0, sp, #168	; 0xa8
   d7104:	f7ff fce7 	bl	d6ad6 <_ZNK14LocalTimeValue3ymdEv>
   d7108:	4601      	mov	r1, r0
        return LocalTimeRestrictedDate::isValid(ymd);
   d710a:	4620      	mov	r0, r4
   d710c:	f7ff fb47 	bl	d679e <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
                        if (!timeRange.isValidDate(tempConv.getLocalTimeYMD())) {
   d7110:	2800      	cmp	r0, #0
   d7112:	d18c      	bne.n	d702e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x9e>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d7114:	4651      	mov	r1, sl
   d7116:	a807      	add	r0, sp, #28
   d7118:	f7ff faaa 	bl	d6670 <_ZN12LocalTimeHMSC1EPKc>
   d711c:	a907      	add	r1, sp, #28
   d711e:	a810      	add	r0, sp, #64	; 0x40
   d7120:	f7ff febc 	bl	d6e9c <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>
    }
   d7124:	e74e      	b.n	d6fc4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x34>
                int day = LocalTime::dayOfWeekOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month(), dayOfWeek, increment);
   d7126:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d7128:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d712a:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
   d712e:	3101      	adds	r1, #1
   d7130:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7134:	f7ff fece 	bl	d6ed4 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>
                if (day == tempConv.localTimeValue.day()) {
   d7138:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   d713a:	4298      	cmp	r0, r3
   d713c:	d1ea      	bne.n	d7114 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        tempConv.atLocalTime(timeRange.hmsStart);
   d713e:	f104 011c 	add.w	r1, r4, #28
                tempConv.atLocalTime(timeRange.hmsStart);
   d7142:	a807      	add	r0, sp, #28
   d7144:	f7ff f96a 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
   d7148:	a907      	add	r1, sp, #28
   d714a:	a810      	add	r0, sp, #64	; 0x40
   d714c:	f7ff fe84 	bl	d6e58 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                if (tempConv.time > conv.time) {
   d7150:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   d7154:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d7158:	4282      	cmp	r2, r0
   d715a:	418b      	sbcs	r3, r1
   d715c:	dada      	bge.n	d7114 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    conv.time = tempConv.time;
   d715e:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
                        conv.convert();
   d7162:	4628      	mov	r0, r5
   d7164:	f7ff fdb4 	bl	d6cd0 <_ZN16LocalTimeConvert7convertEv>
                        return true;
   d7168:	e02b      	b.n	d71c2 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x232>
                int tempIncrement = increment;
   d716a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                if (tempIncrement < 0) {
   d716c:	2e00      	cmp	r6, #0
   d716e:	da08      	bge.n	d7182 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1f2>
                    tempIncrement = LocalTime::lastDayOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month()) + tempIncrement + 1;
   d7170:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d7172:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d7174:	3101      	adds	r1, #1
   d7176:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d717a:	f7ff fd4b 	bl	d6c14 <_ZN9LocalTime14lastDayOfMonthEii>
   d717e:	4430      	add	r0, r6
   d7180:	1c46      	adds	r6, r0, #1
                if (tempConv.localTimeValue.ymd().getDay() == tempIncrement) {
   d7182:	a82a      	add	r0, sp, #168	; 0xa8
   d7184:	f7ff fca7 	bl	d6ad6 <_ZNK14LocalTimeValue3ymdEv>
   d7188:	ebb6 6fd0 	cmp.w	r6, r0, lsr #27
   d718c:	d1c2      	bne.n	d7114 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d718e:	a92a      	add	r1, sp, #168	; 0xa8
   d7190:	a807      	add	r0, sp, #28
   d7192:	f7ff fc75 	bl	d6a80 <_ZNK14LocalTimeValue3hmsEv>
   d7196:	a907      	add	r1, sp, #28
   d7198:	4620      	mov	r0, r4
   d719a:	f7ff f954 	bl	d6446 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                    if (cmp <= 0) {
   d719e:	2800      	cmp	r0, #0
   d71a0:	dcb8      	bgt.n	d7114 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d71a2:	e7cc      	b.n	d713e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1ae>
            if (tempConv.localTimeValue.hms() <= timeRange.hmsStart) {
   d71a4:	a92a      	add	r1, sp, #168	; 0xa8
   d71a6:	a807      	add	r0, sp, #28
   d71a8:	f7ff fc6a 	bl	d6a80 <_ZNK14LocalTimeValue3hmsEv>
   d71ac:	f104 011c 	add.w	r1, r4, #28
        return compareTo(other) <= 0;
   d71b0:	a807      	add	r0, sp, #28
   d71b2:	9101      	str	r1, [sp, #4]
   d71b4:	f7ff f914 	bl	d63e0 <_ZNK12LocalTimeHMS9compareToERKS_>
   d71b8:	2800      	cmp	r0, #0
   d71ba:	9901      	ldr	r1, [sp, #4]
   d71bc:	dcaa      	bgt.n	d7114 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d71be:	e7c0      	b.n	d7142 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1b2>
    return false;
   d71c0:	2700      	movs	r7, #0
class LocalTimeConvert {
   d71c2:	a811      	add	r0, sp, #68	; 0x44
   d71c4:	f7ff f8ba 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d71c8:	4638      	mov	r0, r7
   d71ca:	b04d      	add	sp, #308	; 0x134
   d71cc:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
   d71d0:	000e2198 	.word	0x000e2198

000d71d4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d71d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d71d6:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d71d8:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d71da:	4668      	mov	r0, sp
   d71dc:	f7ff f8f7 	bl	d63ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d71e0:	466a      	mov	r2, sp
   d71e2:	4629      	mov	r1, r5
   d71e4:	4620      	mov	r0, r4
   d71e6:	f006 f895 	bl	dd314 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d71ea:	a801      	add	r0, sp, #4
   d71ec:	f7fe f828 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d71f0:	4620      	mov	r0, r4
   d71f2:	b003      	add	sp, #12
   d71f4:	bd30      	pop	{r4, r5, pc}

000d71f6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d71f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d71f8:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d71fa:	4604      	mov	r4, r0
   d71fc:	4668      	mov	r0, sp
   d71fe:	f7ff f8e6 	bl	d63ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d7202:	466a      	mov	r2, sp
   d7204:	4629      	mov	r1, r5
   d7206:	4620      	mov	r0, r4
   d7208:	f006 f860 	bl	dd2cc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d720c:	a801      	add	r0, sp, #4
   d720e:	f7fe f817 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7212:	4620      	mov	r0, r4
   d7214:	b003      	add	sp, #12
   d7216:	bd30      	pop	{r4, r5, pc}

000d7218 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7218:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d721a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d721c:	4604      	mov	r4, r0
   d721e:	4668      	mov	r0, sp
   d7220:	f7ff f8d5 	bl	d63ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d7224:	466a      	mov	r2, sp
   d7226:	4629      	mov	r1, r5
   d7228:	4620      	mov	r0, r4
   d722a:	f005 fe9e 	bl	dcf6a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d722e:	a801      	add	r0, sp, #4
   d7230:	f7fe f806 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7234:	4620      	mov	r0, r4
   d7236:	b003      	add	sp, #12
   d7238:	bd30      	pop	{r4, r5, pc}

000d723a <_ZN23LocalTimeRestrictedDateC1ERKS_>:
class LocalTimeRestrictedDate {
   d723a:	b538      	push	{r3, r4, r5, lr}
   d723c:	460d      	mov	r5, r1
   d723e:	f811 3b04 	ldrb.w	r3, [r1], #4
   d7242:	4604      	mov	r4, r0
   d7244:	f800 3b04 	strb.w	r3, [r0], #4
   d7248:	f7fd f8c5 	bl	d43d6 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d724c:	f105 0110 	add.w	r1, r5, #16
   d7250:	f104 0010 	add.w	r0, r4, #16
   d7254:	f7fd f8bf 	bl	d43d6 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d7258:	4620      	mov	r0, r4
   d725a:	bd38      	pop	{r3, r4, r5, pc}

000d725c <_ZN21LocalTimeScheduleItemC1ERKS_>:
class LocalTimeScheduleItem {
   d725c:	b538      	push	{r3, r4, r5, lr}
   d725e:	4604      	mov	r4, r0
   d7260:	460d      	mov	r5, r1
class LocalTimeRange : public LocalTimeRestrictedDate {
   d7262:	f7ff ffea 	bl	d723a <_ZN23LocalTimeRestrictedDateC1ERKS_>
   d7266:	f105 011c 	add.w	r1, r5, #28
   d726a:	f104 001c 	add.w	r0, r4, #28
   d726e:	f7ff f8d5 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
   d7272:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d7276:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d727a:	f7ff f8cf 	bl	d641c <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeScheduleItem {
   d727e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d7280:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7282:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d7284:	6323      	str	r3, [r4, #48]	; 0x30
   d7286:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d7288:	6363      	str	r3, [r4, #52]	; 0x34
   d728a:	f105 0138 	add.w	r1, r5, #56	; 0x38
   d728e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d7292:	f007 fb7f 	bl	de994 <_ZN6StringC1ERKS_>
   d7296:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d7298:	64a3      	str	r3, [r4, #72]	; 0x48
   d729a:	4620      	mov	r0, r4
   d729c:	bd38      	pop	{r3, r4, r5, pc}

000d729e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   d729e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d72a2:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d72a6:	b0d1      	sub	sp, #324	; 0x144
   d72a8:	4681      	mov	r9, r0
   d72aa:	460c      	mov	r4, r1
   d72ac:	4615      	mov	r5, r2
    time_t closestTime = 0;
   d72ae:	2600      	movs	r6, #0
   d72b0:	2700      	movs	r7, #0
    for(auto it = scheduleItems.begin(); it != scheduleItems.end(); ++it) {
   d72b2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   d72b6:	4543      	cmp	r3, r8
   d72b8:	d029      	beq.n	d730e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x70>
        LocalTimeScheduleItem item = *it;
   d72ba:	4641      	mov	r1, r8
   d72bc:	a801      	add	r0, sp, #4
   d72be:	f7ff ffcd 	bl	d725c <_ZN21LocalTimeScheduleItemC1ERKS_>
      if (_M_empty())
   d72c2:	68ab      	ldr	r3, [r5, #8]
   d72c4:	b90b      	cbnz	r3, d72ca <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x2c>
	__throw_bad_function_call();
   d72c6:	f008 f8d9 	bl	df47c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d72ca:	68eb      	ldr	r3, [r5, #12]
   d72cc:	a901      	add	r1, sp, #4
   d72ce:	4628      	mov	r0, r5
   d72d0:	4798      	blx	r3
        if (filter(item)) {
   d72d2:	b1b0      	cbz	r0, d7302 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x64>
            LocalTimeConvert tmpConvert(conv);
   d72d4:	4621      	mov	r1, r4
   d72d6:	a814      	add	r0, sp, #80	; 0x50
   d72d8:	f7ff fc40 	bl	d6b5c <_ZN16LocalTimeConvertC1ERKS_>
            bool bResult = item.getNextScheduledTime(tmpConvert);
   d72dc:	a914      	add	r1, sp, #80	; 0x50
   d72de:	a801      	add	r0, sp, #4
   d72e0:	f7ff fe56 	bl	d6f90 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>
            if (bResult && closestTime == 0 || tmpConvert.time < closestTime) {
   d72e4:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   d72e8:	b110      	cbz	r0, d72f0 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x52>
   d72ea:	ea56 0107 	orrs.w	r1, r6, r7
   d72ee:	d003      	beq.n	d72f8 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5a>
   d72f0:	42b2      	cmp	r2, r6
   d72f2:	eb73 0107 	sbcs.w	r1, r3, r7
   d72f6:	da01      	bge.n	d72fc <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5e>
                closestTime = tmpConvert.time;
   d72f8:	4616      	mov	r6, r2
   d72fa:	461f      	mov	r7, r3
class LocalTimeConvert {
   d72fc:	a815      	add	r0, sp, #84	; 0x54
   d72fe:	f7ff f81d 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
        LocalTimeScheduleItem item = *it;
   d7302:	a801      	add	r0, sp, #4
   d7304:	f7ff fc5e 	bl	d6bc4 <_ZN21LocalTimeScheduleItemD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   d7308:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return *this;
   d730c:	e7d1      	b.n	d72b2 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x14>
    if (closestTime != 0) {
   d730e:	ea56 0307 	orrs.w	r3, r6, r7
   d7312:	d008      	beq.n	d7326 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x88>
        conv.convert();
   d7314:	4620      	mov	r0, r4
        conv.time = closestTime;
   d7316:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
        conv.convert();
   d731a:	f7ff fcd9 	bl	d6cd0 <_ZN16LocalTimeConvert7convertEv>
        return true;
   d731e:	2001      	movs	r0, #1
}
   d7320:	b051      	add	sp, #324	; 0x144
   d7322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   d7326:	2000      	movs	r0, #0
   d7328:	e7fa      	b.n	d7320 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x82>
	...

000d732c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv) const {
   d732c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
   d732e:	4b08      	ldr	r3, [pc, #32]	; (d7350 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x24>)
   d7330:	9303      	str	r3, [sp, #12]
    return getNextScheduledTime(conv, [](LocalTimeScheduleItem &item) {
   d7332:	466a      	mov	r2, sp
	    _M_manager = &_My_handler::_M_manager;
   d7334:	4b07      	ldr	r3, [pc, #28]	; (d7354 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x28>)
   d7336:	9302      	str	r3, [sp, #8]
   d7338:	f7ff ffb1 	bl	d729e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>
      if (_M_manager)
   d733c:	9b02      	ldr	r3, [sp, #8]
   d733e:	4604      	mov	r4, r0
   d7340:	b11b      	cbz	r3, d734a <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x1e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7342:	4669      	mov	r1, sp
   d7344:	2203      	movs	r2, #3
   d7346:	4608      	mov	r0, r1
   d7348:	4798      	blx	r3
}
   d734a:	4620      	mov	r0, r4
   d734c:	b004      	add	sp, #16
   d734e:	bd10      	pop	{r4, pc}
   d7350:	000d6311 	.word	0x000d6311
   d7354:	000d6315 	.word	0x000d6315

000d7358 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert>:
time_t LocalTimeScheduleManager::getNextWake(const LocalTimeConvert &conv) const {
   d7358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d735c:	6806      	ldr	r6, [r0, #0]
   d735e:	b0bc      	sub	sp, #240	; 0xf0
   d7360:	4607      	mov	r7, r0
   d7362:	468a      	mov	sl, r1
    time_t nextTime = 0;
   d7364:	2400      	movs	r4, #0
   d7366:	2500      	movs	r5, #0
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d7368:	687b      	ldr	r3, [r7, #4]
   d736a:	429e      	cmp	r6, r3
   d736c:	d01c      	beq.n	d73a8 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x50>
        if ((it->flags & LocalTimeSchedule::FLAG_ANY_WAKE) != 0) {
   d736e:	7c33      	ldrb	r3, [r6, #16]
   d7370:	b1c3      	cbz	r3, d73a4 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x4c>
            LocalTimeConvert tempConv(conv);
   d7372:	4651      	mov	r1, sl
   d7374:	4668      	mov	r0, sp
   d7376:	f7ff fbf1 	bl	d6b5c <_ZN16LocalTimeConvertC1ERKS_>
            if (it->getNextScheduledTime(tempConv)) {
   d737a:	4669      	mov	r1, sp
   d737c:	4630      	mov	r0, r6
   d737e:	f7ff ffd5 	bl	d732c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d7382:	b140      	cbz	r0, d7396 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x3e>
                if (nextTime == 0 || tempConv.time < nextTime) {
   d7384:	ea54 0305 	orrs.w	r3, r4, r5
   d7388:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   d738c:	d005      	beq.n	d739a <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x42>
   d738e:	45a0      	cmp	r8, r4
   d7390:	eb79 0305 	sbcs.w	r3, r9, r5
   d7394:	db01      	blt.n	d739a <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x42>
   d7396:	46a0      	mov	r8, r4
   d7398:	46a9      	mov	r9, r5
   d739a:	a801      	add	r0, sp, #4
   d739c:	f7fe ffce 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
   d73a0:	4644      	mov	r4, r8
   d73a2:	464d      	mov	r5, r9
      operator++() _GLIBCXX_NOEXCEPT
   d73a4:	3630      	adds	r6, #48	; 0x30
	return *this;
   d73a6:	e7df      	b.n	d7368 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x10>
}
   d73a8:	4620      	mov	r0, r4
   d73aa:	4629      	mov	r1, r5
   d73ac:	b03c      	add	sp, #240	; 0xf0
   d73ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d73b2 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert>:
time_t LocalTimeScheduleManager::getNextFullWake(const LocalTimeConvert &conv) const {
   d73b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d73b6:	6806      	ldr	r6, [r0, #0]
   d73b8:	b0bc      	sub	sp, #240	; 0xf0
   d73ba:	4607      	mov	r7, r0
   d73bc:	468a      	mov	sl, r1
    time_t nextTime = 0;
   d73be:	2400      	movs	r4, #0
   d73c0:	2500      	movs	r5, #0
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d73c2:	687b      	ldr	r3, [r7, #4]
   d73c4:	429e      	cmp	r6, r3
   d73c6:	d01d      	beq.n	d7404 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x52>
        if ((it->flags & LocalTimeSchedule::FLAG_FULL_WAKE) != 0) {
   d73c8:	6933      	ldr	r3, [r6, #16]
   d73ca:	079b      	lsls	r3, r3, #30
   d73cc:	d518      	bpl.n	d7400 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x4e>
            LocalTimeConvert tempConv(conv);
   d73ce:	4651      	mov	r1, sl
   d73d0:	4668      	mov	r0, sp
   d73d2:	f7ff fbc3 	bl	d6b5c <_ZN16LocalTimeConvertC1ERKS_>
            if (it->getNextScheduledTime(tempConv)) {
   d73d6:	4669      	mov	r1, sp
   d73d8:	4630      	mov	r0, r6
   d73da:	f7ff ffa7 	bl	d732c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d73de:	b140      	cbz	r0, d73f2 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x40>
                if (nextTime == 0 || tempConv.time < nextTime) {
   d73e0:	ea54 0305 	orrs.w	r3, r4, r5
   d73e4:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   d73e8:	d005      	beq.n	d73f6 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x44>
   d73ea:	45a0      	cmp	r8, r4
   d73ec:	eb79 0305 	sbcs.w	r3, r9, r5
   d73f0:	db01      	blt.n	d73f6 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x44>
   d73f2:	46a0      	mov	r8, r4
   d73f4:	46a9      	mov	r9, r5
   d73f6:	a801      	add	r0, sp, #4
   d73f8:	f7fe ffa0 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
   d73fc:	4644      	mov	r4, r8
   d73fe:	464d      	mov	r5, r9
      operator++() _GLIBCXX_NOEXCEPT
   d7400:	3630      	adds	r6, #48	; 0x30
	return *this;
   d7402:	e7de      	b.n	d73c2 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x10>
}
   d7404:	4620      	mov	r0, r4
   d7406:	4629      	mov	r1, r5
   d7408:	b03c      	add	sp, #240	; 0xf0
   d740a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000d7410 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert>:
time_t LocalTimeScheduleManager::getNextDataCapture(const LocalTimeConvert &conv) const {
   d7410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (it->name.equals("data")) {
   d7414:	f8df b05c 	ldr.w	fp, [pc, #92]	; d7474 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x64>
   d7418:	6806      	ldr	r6, [r0, #0]
time_t LocalTimeScheduleManager::getNextDataCapture(const LocalTimeConvert &conv) const {
   d741a:	b0bd      	sub	sp, #244	; 0xf4
   d741c:	4607      	mov	r7, r0
   d741e:	468a      	mov	sl, r1
    time_t nextTime = 0;
   d7420:	2400      	movs	r4, #0
   d7422:	2500      	movs	r5, #0
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d7424:	687b      	ldr	r3, [r7, #4]
   d7426:	429e      	cmp	r6, r3
   d7428:	d01f      	beq.n	d746a <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x5a>
        if (it->name.equals("data")) {
   d742a:	4659      	mov	r1, fp
   d742c:	4630      	mov	r0, r6
   d742e:	f007 fb41 	bl	deab4 <_ZNK6String6equalsEPKc>
   d7432:	b1c0      	cbz	r0, d7466 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x56>
            LocalTimeConvert tempConv(conv);
   d7434:	4651      	mov	r1, sl
   d7436:	4668      	mov	r0, sp
   d7438:	f7ff fb90 	bl	d6b5c <_ZN16LocalTimeConvertC1ERKS_>
            if (it->getNextScheduledTime(tempConv)) {
   d743c:	4669      	mov	r1, sp
   d743e:	4630      	mov	r0, r6
   d7440:	f7ff ff74 	bl	d732c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d7444:	b140      	cbz	r0, d7458 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x48>
                if (nextTime == 0 || tempConv.time < nextTime) {
   d7446:	ea54 0305 	orrs.w	r3, r4, r5
   d744a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   d744e:	d005      	beq.n	d745c <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x4c>
   d7450:	45a0      	cmp	r8, r4
   d7452:	eb79 0305 	sbcs.w	r3, r9, r5
   d7456:	db01      	blt.n	d745c <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x4c>
   d7458:	46a0      	mov	r8, r4
   d745a:	46a9      	mov	r9, r5
   d745c:	a801      	add	r0, sp, #4
   d745e:	f7fe ff6d 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
   d7462:	4644      	mov	r4, r8
   d7464:	464d      	mov	r5, r9
      operator++() _GLIBCXX_NOEXCEPT
   d7466:	3630      	adds	r6, #48	; 0x30
	return *this;
   d7468:	e7dc      	b.n	d7424 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x14>
}
   d746a:	4620      	mov	r0, r4
   d746c:	4629      	mov	r1, r5
   d746e:	b03d      	add	sp, #244	; 0xf4
   d7470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7474:	000e25ef 	.word	0x000e25ef

000d7478 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>:
      if (&__x != this)
   d7478:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   d747a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d747e:	4604      	mov	r4, r0
   d7480:	460e      	mov	r6, r1
      if (&__x != this)
   d7482:	d022      	beq.n	d74ca <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7484:	e9d1 5800 	ldrd	r5, r8, [r1]
			 - this->_M_impl._M_start); }
   d7488:	6800      	ldr	r0, [r0, #0]
   d748a:	68a3      	ldr	r3, [r4, #8]
   d748c:	1a1b      	subs	r3, r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d748e:	eba8 0705 	sub.w	r7, r8, r5
			 - this->_M_impl._M_start); }
   d7492:	109b      	asrs	r3, r3, #2
	  if (__xlen > capacity())
   d7494:	ebb3 0fa7 	cmp.w	r3, r7, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7498:	ea4f 01a7 	mov.w	r1, r7, asr #2
   d749c:	d218      	bcs.n	d74d0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x58>
	  pointer __result = this->_M_allocate(__n);
   d749e:	4608      	mov	r0, r1
   d74a0:	f7fe ff88 	bl	d63b4 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d74a4:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   d74a6:	4603      	mov	r3, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d74a8:	45a8      	cmp	r8, r5
   d74aa:	d005      	beq.n	d74b8 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x40>
   d74ac:	b10b      	cbz	r3, d74b2 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x3a>
   d74ae:	682a      	ldr	r2, [r5, #0]
   d74b0:	601a      	str	r2, [r3, #0]
   d74b2:	3304      	adds	r3, #4
   d74b4:	3504      	adds	r5, #4
   d74b6:	e7f7      	b.n	d74a8 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x30>
	      _M_deallocate(this->_M_impl._M_start,
   d74b8:	6820      	ldr	r0, [r4, #0]
   d74ba:	f7fe ff77 	bl	d63ac <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
	      this->_M_impl._M_start = __tmp;
   d74be:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   d74c0:	443e      	add	r6, r7
   d74c2:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   d74c4:	6823      	ldr	r3, [r4, #0]
   d74c6:	441f      	add	r7, r3
   d74c8:	6067      	str	r7, [r4, #4]
    }
   d74ca:	4620      	mov	r0, r4
   d74cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d74d0:	6862      	ldr	r2, [r4, #4]
   d74d2:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   d74d4:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   d74d8:	d806      	bhi.n	d74e8 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x70>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d74da:	45a8      	cmp	r8, r5
   d74dc:	d0f2      	beq.n	d74c4 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d74de:	463a      	mov	r2, r7
   d74e0:	4629      	mov	r1, r5
   d74e2:	f008 fd5d 	bl	dffa0 <memmove>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d74e6:	e7ed      	b.n	d74c4 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	  if (_Num)
   d74e8:	b112      	cbz	r2, d74f0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d74ea:	4629      	mov	r1, r5
   d74ec:	f008 fd58 	bl	dffa0 <memmove>
   d74f0:	e9d4 3200 	ldrd	r3, r2, [r4]
   d74f4:	1ad1      	subs	r1, r2, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   d74f6:	6833      	ldr	r3, [r6, #0]
   d74f8:	440b      	add	r3, r1
					  __x._M_impl._M_finish,
   d74fa:	6871      	ldr	r1, [r6, #4]
   d74fc:	4299      	cmp	r1, r3
   d74fe:	d0e1      	beq.n	d74c4 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
   d7500:	b10a      	cbz	r2, d7506 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x8e>
   d7502:	6818      	ldr	r0, [r3, #0]
   d7504:	6010      	str	r0, [r2, #0]
   d7506:	3304      	adds	r3, #4
   d7508:	3204      	adds	r2, #4
   d750a:	e7f7      	b.n	d74fc <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x84>

000d750c <_ZN14LocalTimeRangeaSERKS_>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d750c:	b538      	push	{r3, r4, r5, lr}
   d750e:	460d      	mov	r5, r1
class LocalTimeRestrictedDate {
   d7510:	f811 3b04 	ldrb.w	r3, [r1], #4
class LocalTimeRange : public LocalTimeRestrictedDate {
   d7514:	4604      	mov	r4, r0
class LocalTimeRestrictedDate {
   d7516:	f800 3b04 	strb.w	r3, [r0], #4
   d751a:	f7ff ffad 	bl	d7478 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
   d751e:	f105 0110 	add.w	r1, r5, #16
   d7522:	f104 0010 	add.w	r0, r4, #16
   d7526:	f7ff ffa7 	bl	d7478 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
class LocalTimeRange : public LocalTimeRestrictedDate {
   d752a:	f105 011c 	add.w	r1, r5, #28
   d752e:	f104 001c 	add.w	r0, r4, #28
   d7532:	f7fe ff7b 	bl	d642c <_ZN12LocalTimeHMSaSERKS_>
   d7536:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d753a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d753e:	f7fe ff75 	bl	d642c <_ZN12LocalTimeHMSaSERKS_>
   d7542:	4620      	mov	r0, r4
   d7544:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7548 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d7548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d754c:	e9d0 6900 	ldrd	r6, r9, [r0]
   d7550:	4d3b      	ldr	r5, [pc, #236]	; (d7640 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)
	if (max_size() - size() < __n)
   d7552:	4b3c      	ldr	r3, [pc, #240]	; (d7644 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7554:	eba9 0406 	sub.w	r4, r9, r6
   d7558:	10a4      	asrs	r4, r4, #2
   d755a:	436c      	muls	r4, r5
	if (max_size() - size() < __n)
   d755c:	429c      	cmp	r4, r3
   d755e:	468a      	mov	sl, r1
   d7560:	4607      	mov	r7, r0
   d7562:	4611      	mov	r1, r2
   d7564:	46a8      	mov	r8, r5
   d7566:	d102      	bne.n	d756e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d7568:	4837      	ldr	r0, [pc, #220]	; (d7648 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>)
   d756a:	f007 ff84 	bl	df476 <_ZSt20__throw_length_errorPKc>
   d756e:	2c01      	cmp	r4, #1
   d7570:	4622      	mov	r2, r4
   d7572:	bf38      	it	cc
   d7574:	2201      	movcc	r2, #1
   d7576:	18a4      	adds	r4, r4, r2
   d7578:	ebaa 0506 	sub.w	r5, sl, r6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d757c:	d25d      	bcs.n	d763a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d757e:	b154      	cbz	r4, d7596 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
   d7580:	429c      	cmp	r4, r3
   d7582:	bf28      	it	cs
   d7584:	461c      	movcs	r4, r3
   d7586:	204c      	movs	r0, #76	; 0x4c
   d7588:	4360      	muls	r0, r4
   d758a:	9100      	str	r1, [sp, #0]
   d758c:	f7fc fd83 	bl	d4096 <_Znwj>
   d7590:	9900      	ldr	r1, [sp, #0]
   d7592:	4683      	mov	fp, r0
   d7594:	e000      	b.n	d7598 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x50>
   d7596:	46a3      	mov	fp, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7598:	eb1b 0005 	adds.w	r0, fp, r5
   d759c:	d001      	beq.n	d75a2 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
   d759e:	f7ff fe5d 	bl	d725c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d75a2:	465b      	mov	r3, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d75a4:	4631      	mov	r1, r6
   d75a6:	458a      	cmp	sl, r1
   d75a8:	d00a      	beq.n	d75c0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
   d75aa:	b133      	cbz	r3, d75ba <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   d75ac:	4618      	mov	r0, r3
   d75ae:	9101      	str	r1, [sp, #4]
   d75b0:	9300      	str	r3, [sp, #0]
   d75b2:	f7ff fe53 	bl	d725c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d75b6:	e9dd 3100 	ldrd	r3, r1, [sp]
   d75ba:	314c      	adds	r1, #76	; 0x4c
   d75bc:	334c      	adds	r3, #76	; 0x4c
   d75be:	e7f2      	b.n	d75a6 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
   d75c0:	08ad      	lsrs	r5, r5, #2
   d75c2:	fb08 fa05 	mul.w	sl, r8, r5
   d75c6:	f02a 4540 	bic.w	r5, sl, #3221225472	; 0xc0000000
   d75ca:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
   d75ce:	fb0a fa05 	mul.w	sl, sl, r5
   d75d2:	eb06 050a 	add.w	r5, r6, sl
	      ++__new_finish;
   d75d6:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d75da:	44da      	add	sl, fp
	  _ForwardIterator __cur = __result;
   d75dc:	4653      	mov	r3, sl
   d75de:	4629      	mov	r1, r5
	      for (; __first != __last; ++__first, (void)++__cur)
   d75e0:	4549      	cmp	r1, r9
   d75e2:	d113      	bne.n	d760c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d75e4:	eba9 0505 	sub.w	r5, r9, r5
   d75e8:	08ad      	lsrs	r5, r5, #2
   d75ea:	fb08 f505 	mul.w	r5, r8, r5
   d75ee:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d75f2:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d75f6:	fb08 a505 	mla	r5, r8, r5, sl
   d75fa:	46b0      	mov	r8, r6
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d75fc:	45c8      	cmp	r8, r9
   d75fe:	d00f      	beq.n	d7620 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
    { __pointer->~_Tp(); }
   d7600:	4640      	mov	r0, r8
   d7602:	f7ff fadf 	bl	d6bc4 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d7606:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d760a:	e7f7      	b.n	d75fc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d760c:	4618      	mov	r0, r3
   d760e:	9101      	str	r1, [sp, #4]
   d7610:	9300      	str	r3, [sp, #0]
   d7612:	f7ff fe23 	bl	d725c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d7616:	9901      	ldr	r1, [sp, #4]
   d7618:	9b00      	ldr	r3, [sp, #0]
   d761a:	314c      	adds	r1, #76	; 0x4c
   d761c:	334c      	adds	r3, #76	; 0x4c
   d761e:	e7df      	b.n	d75e0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	if (__p)
   d7620:	b116      	cbz	r6, d7628 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>
	::operator delete(__p);
   d7622:	4630      	mov	r0, r6
   d7624:	f7fc fd3b 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d7628:	204c      	movs	r0, #76	; 0x4c
   d762a:	fb00 b404 	mla	r4, r0, r4, fp
      this->_M_impl._M_finish = __new_finish;
   d762e:	e9c7 b500 	strd	fp, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d7632:	60bc      	str	r4, [r7, #8]
    }
   d7634:	b003      	add	sp, #12
   d7636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d763a:	461c      	mov	r4, r3
   d763c:	e7a3      	b.n	d7586 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
   d763e:	bf00      	nop
   d7640:	286bca1b 	.word	0x286bca1b
   d7644:	01af286b 	.word	0x01af286b
   d7648:	000e21b8 	.word	0x000e21b8

000d764c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   d764c:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d764e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d7652:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d7654:	4604      	mov	r4, r0
   d7656:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d7658:	d007      	beq.n	d766a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d765a:	b113      	cbz	r3, d7662 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x16>
   d765c:	4618      	mov	r0, r3
   d765e:	f7ff fdfd 	bl	d725c <_ZN21LocalTimeScheduleItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   d7662:	6863      	ldr	r3, [r4, #4]
   d7664:	334c      	adds	r3, #76	; 0x4c
   d7666:	6063      	str	r3, [r4, #4]
      }
   d7668:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d766a:	4619      	mov	r1, r3
   d766c:	f7ff ff6c 	bl	d7548 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   d7670:	e7fa      	b.n	d7668 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1c>

000d7672 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d7672:	b530      	push	{r4, r5, lr}
   d7674:	b097      	sub	sp, #92	; 0x5c
   d7676:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d7678:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d767a:	9201      	str	r2, [sp, #4]
   d767c:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d767e:	f7ff f803 	bl	d6688 <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d7682:	2301      	movs	r3, #1
    item.timeRange = timeRange;
   d7684:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d7686:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d7688:	a803      	add	r0, sp, #12
    item.increment = increment;
   d768a:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d768c:	f7ff ff3e 	bl	d750c <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d7690:	a903      	add	r1, sp, #12
   d7692:	f104 0020 	add.w	r0, r4, #32
   d7696:	f7ff ffd9 	bl	d764c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d769a:	a803      	add	r0, sp, #12
   d769c:	f7ff fa92 	bl	d6bc4 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d76a0:	4620      	mov	r0, r4
   d76a2:	b017      	add	sp, #92	; 0x5c
   d76a4:	bd30      	pop	{r4, r5, pc}

000d76a6 <_ZN17LocalTimeSchedule13withHourOfDayEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withHourOfDay(int hourMultiple, LocalTimeRange timeRange) {
   d76a6:	b530      	push	{r4, r5, lr}
   d76a8:	b097      	sub	sp, #92	; 0x5c
   d76aa:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d76ac:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withHourOfDay(int hourMultiple, LocalTimeRange timeRange) {
   d76ae:	9201      	str	r2, [sp, #4]
   d76b0:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d76b2:	f7fe ffe9 	bl	d6688 <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::HOUR_OF_DAY;
   d76b6:	2302      	movs	r3, #2
    item.timeRange = timeRange;
   d76b8:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::HOUR_OF_DAY;
   d76ba:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d76bc:	a803      	add	r0, sp, #12
    item.increment = hourMultiple;
   d76be:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d76c0:	f7ff ff24 	bl	d750c <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d76c4:	a903      	add	r1, sp, #12
   d76c6:	f104 0020 	add.w	r0, r4, #32
   d76ca:	f7ff ffbf 	bl	d764c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d76ce:	a803      	add	r0, sp, #12
   d76d0:	f7ff fa78 	bl	d6bc4 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d76d4:	4620      	mov	r0, r4
   d76d6:	b017      	add	sp, #92	; 0x5c
   d76d8:	bd30      	pop	{r4, r5, pc}
	...

000d76dc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   d76dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d76e0:	e9d1 3700 	ldrd	r3, r7, [r1]
   d76e4:	4d1b      	ldr	r5, [pc, #108]	; (d7754 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x78>)
   d76e6:	1aff      	subs	r7, r7, r3
   d76e8:	10bc      	asrs	r4, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   d76ea:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d76ec:	436c      	muls	r4, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
   d76ee:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d76f2:	4606      	mov	r6, r0
   d76f4:	4688      	mov	r8, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
   d76f6:	6083      	str	r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d76f8:	d008      	beq.n	d770c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x30>
	if (__n > this->max_size())
   d76fa:	4b17      	ldr	r3, [pc, #92]	; (d7758 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x7c>)
   d76fc:	429c      	cmp	r4, r3
   d76fe:	d901      	bls.n	d7704 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x28>
	  std::__throw_bad_alloc();
   d7700:	f007 feb6 	bl	df470 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7704:	4638      	mov	r0, r7
   d7706:	f7fc fcc6 	bl	d4096 <_Znwj>
   d770a:	4604      	mov	r4, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d770c:	4427      	add	r7, r4
   d770e:	60b7      	str	r7, [r6, #8]
   d7710:	e9d8 a700 	ldrd	sl, r7, [r8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d7714:	e9c6 4400 	strd	r4, r4, [r6]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d7718:	46d0      	mov	r8, sl
	  _ForwardIterator __cur = __result;
   d771a:	46a1      	mov	r9, r4
	      for (; __first != __last; ++__first, (void)++__cur)
   d771c:	4547      	cmp	r7, r8
   d771e:	d00b      	beq.n	d7738 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x5c>
   d7720:	f1b9 0f00 	cmp.w	r9, #0
   d7724:	d003      	beq.n	d772e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x52>
   d7726:	4641      	mov	r1, r8
   d7728:	4648      	mov	r0, r9
   d772a:	f7ff fd97 	bl	d725c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d772e:	f109 094c 	add.w	r9, r9, #76	; 0x4c
   d7732:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d7736:	e7f1      	b.n	d771c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x40>
	this->_M_impl._M_finish =
   d7738:	eba7 070a 	sub.w	r7, r7, sl
   d773c:	08bf      	lsrs	r7, r7, #2
   d773e:	437d      	muls	r5, r7
   d7740:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d7744:	204c      	movs	r0, #76	; 0x4c
   d7746:	fb00 4405 	mla	r4, r0, r5, r4
   d774a:	6074      	str	r4, [r6, #4]
      }
   d774c:	4630      	mov	r0, r6
   d774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7752:	bf00      	nop
   d7754:	286bca1b 	.word	0x286bca1b
   d7758:	01af286b 	.word	0x01af286b

000d775c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   d775c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7760:	4607      	mov	r7, r0
   d7762:	4688      	mov	r8, r1
   d7764:	4616      	mov	r6, r2
	  _ForwardIterator __cur = __result;
   d7766:	4615      	mov	r5, r2
   d7768:	4604      	mov	r4, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d776a:	4544      	cmp	r4, r8
   d776c:	d013      	beq.n	d7796 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0x3a>
   d776e:	b17d      	cbz	r5, d7790 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0x34>
class LocalTimeSchedule {
   d7770:	4621      	mov	r1, r4
   d7772:	4628      	mov	r0, r5
   d7774:	f007 f90e 	bl	de994 <_ZN6StringC1ERKS_>
   d7778:	6923      	ldr	r3, [r4, #16]
   d777a:	612b      	str	r3, [r5, #16]
   d777c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d7780:	f104 0120 	add.w	r1, r4, #32
   d7784:	e9c5 2306 	strd	r2, r3, [r5, #24]
   d7788:	f105 0020 	add.w	r0, r5, #32
   d778c:	f7ff ffa6 	bl	d76dc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>
   d7790:	3430      	adds	r4, #48	; 0x30
   d7792:	3530      	adds	r5, #48	; 0x30
   d7794:	e7e9      	b.n	d776a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0xe>
	      return __cur;
   d7796:	1be0      	subs	r0, r4, r7
   d7798:	0904      	lsrs	r4, r0, #4
   d779a:	4804      	ldr	r0, [pc, #16]	; (d77ac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0x50>)
   d779c:	4344      	muls	r4, r0
   d779e:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
	}
   d77a2:	2030      	movs	r0, #48	; 0x30
   d77a4:	fb00 6004 	mla	r0, r0, r4, r6
   d77a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d77ac:	0aaaaaab 	.word	0x0aaaaaab

000d77b0 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d77b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d77b4:	e9d0 6800 	ldrd	r6, r8, [r0]
   d77b8:	eba8 0406 	sub.w	r4, r8, r6
   d77bc:	1123      	asrs	r3, r4, #4
   d77be:	4c33      	ldr	r4, [pc, #204]	; (d788c <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xdc>)
   d77c0:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   d77c2:	4b33      	ldr	r3, [pc, #204]	; (d7890 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>)
   d77c4:	429c      	cmp	r4, r3
   d77c6:	4605      	mov	r5, r0
   d77c8:	460f      	mov	r7, r1
   d77ca:	4693      	mov	fp, r2
   d77cc:	d102      	bne.n	d77d4 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   d77ce:	4831      	ldr	r0, [pc, #196]	; (d7894 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe4>)
   d77d0:	f007 fe51 	bl	df476 <_ZSt20__throw_length_errorPKc>
   d77d4:	2c01      	cmp	r4, #1
   d77d6:	4622      	mov	r2, r4
   d77d8:	bf38      	it	cc
   d77da:	2201      	movcc	r2, #1
   d77dc:	18a4      	adds	r4, r4, r2
   d77de:	eba1 0a06 	sub.w	sl, r1, r6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d77e2:	d250      	bcs.n	d7886 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d77e4:	b144      	cbz	r4, d77f8 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
   d77e6:	429c      	cmp	r4, r3
   d77e8:	bf28      	it	cs
   d77ea:	461c      	movcs	r4, r3
   d77ec:	2030      	movs	r0, #48	; 0x30
   d77ee:	4360      	muls	r0, r4
   d77f0:	f7fc fc51 	bl	d4096 <_Znwj>
   d77f4:	4681      	mov	r9, r0
   d77f6:	e000      	b.n	d77fa <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   d77f8:	46a1      	mov	r9, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d77fa:	eb19 0a0a 	adds.w	sl, r9, sl
   d77fe:	d011      	beq.n	d7824 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
   d7800:	4659      	mov	r1, fp
   d7802:	4650      	mov	r0, sl
   d7804:	f007 f8c6 	bl	de994 <_ZN6StringC1ERKS_>
   d7808:	f8db 3010 	ldr.w	r3, [fp, #16]
   d780c:	f8ca 3010 	str.w	r3, [sl, #16]
   d7810:	e9db 2306 	ldrd	r2, r3, [fp, #24]
   d7814:	f10b 0120 	add.w	r1, fp, #32
   d7818:	e9ca 2306 	strd	r2, r3, [sl, #24]
   d781c:	f10a 0020 	add.w	r0, sl, #32
   d7820:	f7ff ff5c 	bl	d76dc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>
	__uninit_copy(__first, __last, __result);
   d7824:	4639      	mov	r1, r7
   d7826:	464a      	mov	r2, r9
   d7828:	4630      	mov	r0, r6
   d782a:	f7ff ff97 	bl	d775c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_>
   d782e:	4641      	mov	r1, r8
   d7830:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d7834:	4638      	mov	r0, r7
   d7836:	f7ff ff91 	bl	d775c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d783a:	4637      	mov	r7, r6
   d783c:	4683      	mov	fp, r0
	  for (; __first != __last; ++__first)
   d783e:	4547      	cmp	r7, r8
   d7840:	d014      	beq.n	d786c <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d7842:	e9d7 a308 	ldrd	sl, r3, [r7, #32]
   d7846:	4553      	cmp	r3, sl
   d7848:	9301      	str	r3, [sp, #4]
   d784a:	d006      	beq.n	d785a <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
    { __pointer->~_Tp(); }
   d784c:	4650      	mov	r0, sl
   d784e:	f7ff f9b9 	bl	d6bc4 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d7852:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d7856:	9b01      	ldr	r3, [sp, #4]
   d7858:	e7f5      	b.n	d7846 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
	_M_deallocate(_M_impl._M_start,
   d785a:	6a38      	ldr	r0, [r7, #32]
	if (__p)
   d785c:	b108      	cbz	r0, d7862 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb2>
	::operator delete(__p);
   d785e:	f7fc fc1e 	bl	d409e <_ZdlPv>
   d7862:	4638      	mov	r0, r7
   d7864:	f007 f800 	bl	de868 <_ZN6StringD1Ev>
   d7868:	3730      	adds	r7, #48	; 0x30
   d786a:	e7e8      	b.n	d783e <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8e>
   d786c:	b116      	cbz	r6, d7874 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d786e:	4630      	mov	r0, r6
   d7870:	f7fc fc15 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d7874:	2030      	movs	r0, #48	; 0x30
   d7876:	fb00 9404 	mla	r4, r0, r4, r9
      this->_M_impl._M_finish = __new_finish;
   d787a:	e9c5 9b00 	strd	r9, fp, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d787e:	60ac      	str	r4, [r5, #8]
    }
   d7880:	b003      	add	sp, #12
   d7882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d7886:	461c      	mov	r4, r3
   d7888:	e7b0      	b.n	d77ec <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
   d788a:	bf00      	nop
   d788c:	aaaaaaab 	.word	0xaaaaaaab
   d7890:	02aaaaaa 	.word	0x02aaaaaa
   d7894:	000e21b8 	.word	0x000e21b8

000d7898 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>:
LocalTimeSchedule &LocalTimeScheduleManager::getScheduleByName(const char *name) {
   d7898:	b5f0      	push	{r4, r5, r6, r7, lr}
   d789a:	6805      	ldr	r5, [r0, #0]
   d789c:	b08d      	sub	sp, #52	; 0x34
   d789e:	4604      	mov	r4, r0
   d78a0:	460e      	mov	r6, r1
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d78a2:	6863      	ldr	r3, [r4, #4]
   d78a4:	429d      	cmp	r5, r3
   d78a6:	462f      	mov	r7, r5
   d78a8:	d009      	beq.n	d78be <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x26>
        if (it->name.equals(name)) {
   d78aa:	4628      	mov	r0, r5
   d78ac:	4631      	mov	r1, r6
   d78ae:	f007 f901 	bl	deab4 <_ZNK6String6equalsEPKc>
   d78b2:	3530      	adds	r5, #48	; 0x30
   d78b4:	2800      	cmp	r0, #0
   d78b6:	d0f4      	beq.n	d78a2 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0xa>
}
   d78b8:	4638      	mov	r0, r7
   d78ba:	b00d      	add	sp, #52	; 0x34
   d78bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LocalTimeSchedule() {
   d78be:	4922      	ldr	r1, [pc, #136]	; (d7948 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0xb0>)
   d78c0:	4668      	mov	r0, sp
   d78c2:	f007 f81c 	bl	de8fe <_ZN6StringC1EPKc>
   d78c6:	2000      	movs	r0, #0
   d78c8:	2100      	movs	r1, #0
   d78ca:	2300      	movs	r3, #0
   d78cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    sch.name = name;
   d78d0:	4631      	mov	r1, r6
   d78d2:	4668      	mov	r0, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
   d78d4:	e9cd 3308 	strd	r3, r3, [sp, #32]
   d78d8:	9304      	str	r3, [sp, #16]
   d78da:	930a      	str	r3, [sp, #40]	; 0x28
   d78dc:	f007 f86d 	bl	de9ba <_ZN6StringaSEPKc>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d78e0:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
   d78e4:	429d      	cmp	r5, r3
   d78e6:	d020      	beq.n	d792a <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x92>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d78e8:	b175      	cbz	r5, d7908 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x70>
class LocalTimeSchedule {
   d78ea:	4669      	mov	r1, sp
   d78ec:	4628      	mov	r0, r5
   d78ee:	f007 f851 	bl	de994 <_ZN6StringC1ERKS_>
   d78f2:	9b04      	ldr	r3, [sp, #16]
   d78f4:	612b      	str	r3, [r5, #16]
   d78f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d78fa:	a908      	add	r1, sp, #32
   d78fc:	e9c5 2306 	strd	r2, r3, [r5, #24]
   d7900:	f105 0020 	add.w	r0, r5, #32
   d7904:	f7ff feea 	bl	d76dc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>
	    ++this->_M_impl._M_finish;
   d7908:	6863      	ldr	r3, [r4, #4]
   d790a:	3330      	adds	r3, #48	; 0x30
   d790c:	6063      	str	r3, [r4, #4]
    return getScheduleByName(name);
   d790e:	4620      	mov	r0, r4
   d7910:	4631      	mov	r1, r6
   d7912:	f7ff ffc1 	bl	d7898 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d7916:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   d791a:	4607      	mov	r7, r0
   d791c:	42a5      	cmp	r5, r4
   d791e:	d00a      	beq.n	d7936 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x9e>
    { __pointer->~_Tp(); }
   d7920:	4620      	mov	r0, r4
   d7922:	f7ff f94f 	bl	d6bc4 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d7926:	344c      	adds	r4, #76	; 0x4c
   d7928:	e7f8      	b.n	d791c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x84>
	  _M_realloc_insert(end(), __x);
   d792a:	466a      	mov	r2, sp
   d792c:	4629      	mov	r1, r5
   d792e:	4620      	mov	r0, r4
   d7930:	f7ff ff3e 	bl	d77b0 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   d7934:	e7eb      	b.n	d790e <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x76>
	_M_deallocate(_M_impl._M_start,
   d7936:	9808      	ldr	r0, [sp, #32]
	if (__p)
   d7938:	b108      	cbz	r0, d793e <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0xa6>
	::operator delete(__p);
   d793a:	f7fc fbb0 	bl	d409e <_ZdlPv>
   d793e:	4668      	mov	r0, sp
   d7940:	f006 ff92 	bl	de868 <_ZN6StringD1Ev>
   d7944:	e7b8      	b.n	d78b8 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x20>
   d7946:	bf00      	nop
   d7948:	000e296f 	.word	0x000e296f

000d794c <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
	(*_Base::_M_get_pointer(__functor))(
   d794c:	6803      	ldr	r3, [r0, #0]
   d794e:	780a      	ldrb	r2, [r1, #0]
    return result;
}

void PublishQueuePosix::publishCompleteCallback(bool succeeded, const char *eventName, const char *eventData) {
    publishComplete = true;
    publishSuccess = succeeded;
   d7950:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   d7954:	2101      	movs	r1, #1
   d7956:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   d795a:	4770      	bx	lr

000d795c <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d795c:	2a02      	cmp	r2, #2
   d795e:	d006      	beq.n	d796e <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d7960:	2a03      	cmp	r2, #3
   d7962:	d002      	beq.n	d796a <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d7964:	2a01      	cmp	r2, #1
   d7966:	d100      	bne.n	d796a <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7968:	6001      	str	r1, [r0, #0]
	}
   d796a:	2000      	movs	r0, #0
   d796c:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d796e:	680b      	ldr	r3, [r1, #0]
   d7970:	6003      	str	r3, [r0, #0]
	}
   d7972:	e7fa      	b.n	d796a <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d7974 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7974:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7976:	4603      	mov	r3, r0
	switch (__op)
   d7978:	d102      	bne.n	d7980 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d797a:	6001      	str	r1, [r0, #0]
      }
   d797c:	2000      	movs	r0, #0
   d797e:	4770      	bx	lr
	  switch (__op)
   d7980:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7982:	bf04      	itt	eq
   d7984:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7988:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d798c:	e7f6      	b.n	d797c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d798e <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d798e:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d7990:	6842      	ldr	r2, [r0, #4]
   d7992:	4603      	mov	r3, r0
   d7994:	1054      	asrs	r4, r2, #1
   d7996:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d799a:	07d2      	lsls	r2, r2, #31
   d799c:	bf48      	it	mi
   d799e:	590a      	ldrmi	r2, [r1, r4]
   d79a0:	681b      	ldr	r3, [r3, #0]
      }
   d79a2:	f85d 4b04 	ldr.w	r4, [sp], #4
   d79a6:	bf48      	it	mi
   d79a8:	58d3      	ldrmi	r3, [r2, r3]
   d79aa:	4718      	bx	r3

000d79ac <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   d79ac:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   d79b0:	4601      	mov	r1, r0
    if (stateHandler) {
   d79b2:	b11b      	cbz	r3, d79bc <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d79b4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   d79b8:	30c0      	adds	r0, #192	; 0xc0
   d79ba:	4718      	bx	r3
}
   d79bc:	4770      	bx	lr
	...

000d79c0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d79c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   d79c2:	4d12      	ldr	r5, [pc, #72]	; (d7a0c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d79c4:	4608      	mov	r0, r1
        eventData = "";
   d79c6:	2a00      	cmp	r2, #0
   d79c8:	bf18      	it	ne
   d79ca:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d79cc:	460f      	mov	r7, r1
   d79ce:	461e      	mov	r6, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d79d0:	f008 fb8b 	bl	e00ea <strlen>
   d79d4:	2840      	cmp	r0, #64	; 0x40
   d79d6:	d817      	bhi.n	d7a08 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   d79d8:	4628      	mov	r0, r5
   d79da:	f008 fb86 	bl	e00ea <strlen>
   d79de:	f240 236e 	movw	r3, #622	; 0x26e
   d79e2:	4298      	cmp	r0, r3
   d79e4:	d810      	bhi.n	d7a08 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   d79e6:	3043      	adds	r0, #67	; 0x43
   d79e8:	f7fc fb57 	bl	d409a <_Znaj>
    if (event) {
   d79ec:	4604      	mov	r4, r0
   d79ee:	b148      	cbz	r0, d7a04 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
        strcpy(event->eventName, eventName);
   d79f0:	4639      	mov	r1, r7
        event->flags = flags;
   d79f2:	f800 6b01 	strb.w	r6, [r0], #1
        strcpy(event->eventName, eventName);
   d79f6:	f008 fb53 	bl	e00a0 <strcpy>
        strcpy(event->eventData, eventData);
   d79fa:	4629      	mov	r1, r5
   d79fc:	f104 0042 	add.w	r0, r4, #66	; 0x42
   d7a00:	f008 fb4e 	bl	e00a0 <strcpy>
}
   d7a04:	4620      	mov	r0, r4
   d7a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   d7a08:	2400      	movs	r4, #0
   d7a0a:	e7fb      	b.n	d7a04 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
   d7a0c:	000e296f 	.word	0x000e296f

000d7a10 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d7a10:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7a12:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d7a14:	460a      	mov	r2, r1
   d7a16:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d7a18:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d7a1a:	1d01      	adds	r1, r0, #4
   d7a1c:	a808      	add	r0, sp, #32
   d7a1e:	f000 fdf9 	bl	d8614 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d7a22:	9808      	ldr	r0, [sp, #32]
   d7a24:	2100      	movs	r1, #0
   d7a26:	f009 fa9f 	bl	e0f68 <open>
   d7a2a:	4605      	mov	r5, r0
   d7a2c:	a808      	add	r0, sp, #32
   d7a2e:	f006 ff1b 	bl	de868 <_ZN6StringD1Ev>
    if (fd) {
   d7a32:	2d00      	cmp	r5, #0
   d7a34:	d060      	beq.n	d7af8 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   d7a36:	a908      	add	r1, sp, #32
   d7a38:	4628      	mov	r0, r5
   d7a3a:	f009 fa83 	bl	e0f44 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   d7a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7a40:	492e      	ldr	r1, [pc, #184]	; (d7afc <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   d7a42:	482f      	ldr	r0, [pc, #188]	; (d7b00 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d7a44:	4632      	mov	r2, r6
   d7a46:	f7fd fd31 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   d7a4a:	2200      	movs	r2, #0
   d7a4c:	4611      	mov	r1, r2
   d7a4e:	4628      	mov	r0, r5
   d7a50:	f009 fa80 	bl	e0f54 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   d7a54:	2208      	movs	r2, #8
   d7a56:	a906      	add	r1, sp, #24
   d7a58:	4628      	mov	r0, r5
   d7a5a:	f009 fa99 	bl	e0f90 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   d7a5e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d7a60:	2f4a      	cmp	r7, #74	; 0x4a
   d7a62:	dd39      	ble.n	d7ad8 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   d7a64:	4b27      	ldr	r3, [pc, #156]	; (d7b04 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   d7a66:	9a06      	ldr	r2, [sp, #24]
   d7a68:	429a      	cmp	r2, r3
   d7a6a:	d135      	bne.n	d7ad8 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   d7a6c:	4b26      	ldr	r3, [pc, #152]	; (d7b08 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   d7a6e:	9a07      	ldr	r2, [sp, #28]
   d7a70:	429a      	cmp	r2, r3
   d7a72:	d131      	bne.n	d7ad8 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   d7a74:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   d7a78:	4610      	mov	r0, r2
   d7a7a:	9205      	str	r2, [sp, #20]
   d7a7c:	f7fc fb0d 	bl	d409a <_Znaj>
            if (result) {
   d7a80:	4604      	mov	r4, r0
   d7a82:	b1c0      	cbz	r0, d7ab6 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d7a84:	4427      	add	r7, r4
                read(fd, result, eventSize);
   d7a86:	4601      	mov	r1, r0
   d7a88:	9a05      	ldr	r2, [sp, #20]
   d7a8a:	4628      	mov	r0, r5
   d7a8c:	f009 fa80 	bl	e0f90 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d7a90:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   d7a94:	b9ab      	cbnz	r3, d7ac2 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   d7a96:	1c63      	adds	r3, r4, #1
   d7a98:	4618      	mov	r0, r3
   d7a9a:	9305      	str	r3, [sp, #20]
   d7a9c:	f008 fb25 	bl	e00ea <strlen>
   d7aa0:	283f      	cmp	r0, #63	; 0x3f
   d7aa2:	9b05      	ldr	r3, [sp, #20]
   d7aa4:	d80d      	bhi.n	d7ac2 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   d7aa6:	f104 0242 	add.w	r2, r4, #66	; 0x42
   d7aaa:	9200      	str	r2, [sp, #0]
   d7aac:	4917      	ldr	r1, [pc, #92]	; (d7b0c <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   d7aae:	4814      	ldr	r0, [pc, #80]	; (d7b00 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d7ab0:	4632      	mov	r2, r6
   d7ab2:	f7fd fcfb 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   d7ab6:	4628      	mov	r0, r5
   d7ab8:	f009 fa3c 	bl	e0f34 <close>
}
   d7abc:	4620      	mov	r0, r4
   d7abe:	b01f      	add	sp, #124	; 0x7c
   d7ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   d7ac2:	4913      	ldr	r1, [pc, #76]	; (d7b10 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   d7ac4:	480e      	ldr	r0, [pc, #56]	; (d7b00 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d7ac6:	4632      	mov	r2, r6
   d7ac8:	f7fd fcf0 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   d7acc:	2143      	movs	r1, #67	; 0x43
   d7ace:	4620      	mov	r0, r4
   d7ad0:	f007 fcc8 	bl	df464 <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   d7ad4:	2400      	movs	r4, #0
   d7ad6:	e7ee      	b.n	d7ab6 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   d7ad8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d7adc:	9302      	str	r3, [sp, #8]
   d7ade:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d7ae2:	9301      	str	r3, [sp, #4]
   d7ae4:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d7ae8:	9300      	str	r3, [sp, #0]
   d7aea:	490a      	ldr	r1, [pc, #40]	; (d7b14 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   d7aec:	9b06      	ldr	r3, [sp, #24]
   d7aee:	4804      	ldr	r0, [pc, #16]	; (d7b00 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d7af0:	4632      	mov	r2, r6
   d7af2:	f7fd fcdb 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
   d7af6:	e7ed      	b.n	d7ad4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   d7af8:	462c      	mov	r4, r5
    return result;
   d7afa:	e7df      	b.n	d7abc <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   d7afc:	000e2590 	.word	0x000e2590
   d7b00:	2003e498 	.word	0x2003e498
   d7b04:	31b67663 	.word	0x31b67663
   d7b08:	00410801 	.word	0x00410801
   d7b0c:	000e25a4 	.word	0x000e25a4
   d7b10:	000e25c6 	.word	0x000e25c6
   d7b14:	000e25f4 	.word	0x000e25f4

000d7b18 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   d7b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7b1c:	4680      	mov	r8, r0
   d7b1e:	4b28      	ldr	r3, [pc, #160]	; (d7bc0 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   d7b20:	f848 3b04 	str.w	r3, [r8], #4
   d7b24:	4604      	mov	r4, r0
   d7b26:	4640      	mov	r0, r8
   d7b28:	f000 fc8c 	bl	d8444 <_ZN14SequentialFileC1Ev>
   d7b2c:	2202      	movs	r2, #2
   d7b2e:	2364      	movs	r3, #100	; 0x64
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d7b30:	2500      	movs	r5, #0
   d7b32:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d7b36:	2308      	movs	r3, #8
   d7b38:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d7b3a:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   d7b3e:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   d7b42:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   d7b46:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	  _M_start(), _M_finish()
   d7b4a:	67a5      	str	r5, [r4, #120]	; 0x78
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7b4c:	2020      	movs	r0, #32
   d7b4e:	f7fc faa2 	bl	d4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d7b52:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d7b54:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d7b56:	3e01      	subs	r6, #1
   d7b58:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d7b5a:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d7b5e:	4607      	mov	r7, r0
   d7b60:	f44f 7000 	mov.w	r0, #512	; 0x200
   d7b64:	f7fc fa97 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7b68:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d7b6c:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   d7b70:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d7b74:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7b7c:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   d7b80:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   d7b84:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   d7b88:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d7b8c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d7b90:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   d7b94:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   d7b98:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   d7b9c:	4909      	ldr	r1, [pc, #36]	; (d7bc4 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   d7b9e:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   d7ba2:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   d7ba6:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   d7baa:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   d7bae:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   d7bb2:	4640      	mov	r0, r8
   d7bb4:	f000 fc8c 	bl	d84d0 <_ZN14SequentialFile11withDirPathEPKc>
}
   d7bb8:	4620      	mov	r0, r4
   d7bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d7bbe:	bf00      	nop
   d7bc0:	000e2804 	.word	0x000e2804
   d7bc4:	000e2639 	.word	0x000e2639

000d7bc8 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   d7bc8:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d7bca:	4c06      	ldr	r4, [pc, #24]	; (d7be4 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   d7bcc:	6823      	ldr	r3, [r4, #0]
   d7bce:	b93b      	cbnz	r3, d7be0 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   d7bd0:	20d0      	movs	r0, #208	; 0xd0
   d7bd2:	f7fc fa60 	bl	d4096 <_Znwj>
   d7bd6:	4605      	mov	r5, r0
   d7bd8:	b108      	cbz	r0, d7bde <_ZN17PublishQueuePosix8instanceEv+0x16>
   d7bda:	f7ff ff9d 	bl	d7b18 <_ZN17PublishQueuePosixC1Ev>
   d7bde:	6025      	str	r5, [r4, #0]
}
   d7be0:	6820      	ldr	r0, [r4, #0]
   d7be2:	bd38      	pop	{r3, r4, r5, pc}
   d7be4:	2003e49c 	.word	0x2003e49c

000d7be8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7be8:	b510      	push	{r4, lr}
   d7bea:	e9d1 2300 	ldrd	r2, r3, [r1]
   d7bee:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d7bf0:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d7bf2:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7bf4:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7bf6:	b90a      	cbnz	r2, d7bfc <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7bf8:	07d9      	lsls	r1, r3, #31
   d7bfa:	d505      	bpl.n	d7c08 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7c00:	4b0f      	ldr	r3, [pc, #60]	; (d7c40 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d7c02:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7c04:	4b0f      	ldr	r3, [pc, #60]	; (d7c44 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7c06:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7c08:	ab02      	add	r3, sp, #8
   d7c0a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7c0e:	466a      	mov	r2, sp
   d7c10:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7c14:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7c18:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7c1c:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7c20:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7c22:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7c26:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7c28:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7c2a:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7c2c:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d7c2e:	4618      	mov	r0, r3
   d7c30:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7c32:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7c34:	9105      	str	r1, [sp, #20]
   d7c36:	f7fc fb57 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	}
   d7c3a:	4620      	mov	r0, r4
   d7c3c:	b006      	add	sp, #24
   d7c3e:	bd10      	pop	{r4, pc}
   d7c40:	000d798f 	.word	0x000d798f
   d7c44:	000d7975 	.word	0x000d7975

000d7c48 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7c48:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d7c4a:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d7c4c:	4604      	mov	r4, r0
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   d7c4e:	6f58      	ldr	r0, [r3, #116]	; 0x74
   d7c50:	f004 f848 	bl	dbce4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d7c54:	4620      	mov	r0, r4
   d7c56:	bd10      	pop	{r4, pc}

000d7c58 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d7c58:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   d7c5a:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   d7c5c:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   d7c5e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d7c60:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   d7c62:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   d7c64:	d002      	beq.n	d7c6c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d7c66:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d7c68:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   d7c6a:	bd10      	pop	{r4, pc}
	::operator delete(__p);
   d7c6c:	68c0      	ldr	r0, [r0, #12]
   d7c6e:	f7fc fa16 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d7c72:	6963      	ldr	r3, [r4, #20]
   d7c74:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d7c76:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d7c78:	685b      	ldr	r3, [r3, #4]
   d7c7a:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7c7c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d7c80:	6122      	str	r2, [r4, #16]
   d7c82:	e7f1      	b.n	d7c68 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>

000d7c84 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   d7c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c88:	b087      	sub	sp, #28
   d7c8a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7c8c:	9001      	str	r0, [sp, #4]
    void lock() { os_mutex_recursive_lock(mutex); };
   d7c8e:	6f40      	ldr	r0, [r0, #116]	; 0x74
                hdr.magic = FILE_MAGIC;
   d7c90:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d7d3c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                hdr.version = FILE_VERSION;
   d7c94:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d7d40 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
   d7c98:	f004 f81c 	bl	dbcd4 <os_mutex_recursive_lock>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d7c9c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; d7d44 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xc0>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d7ca0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   d7ca4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d7ca8:	4293      	cmp	r3, r2
   d7caa:	d105      	bne.n	d7cb8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x34>
    WITH_LOCK(*this) {
   d7cac:	a801      	add	r0, sp, #4
   d7cae:	f7ff ffcb 	bl	d7c48 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d7cb2:	b007      	add	sp, #28
   d7cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ramQueue.pop_front();
   d7cb8:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   d7cbc:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   d7cc0:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   d7cc2:	f7ff ffc9 	bl	d7c58 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   d7cc6:	4640      	mov	r0, r8
   d7cc8:	f000 fe98 	bl	d89fc <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d7ccc:	2300      	movs	r3, #0
   d7cce:	4602      	mov	r2, r0
   d7cd0:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   d7cd2:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d7cd4:	a802      	add	r0, sp, #8
   d7cd6:	f000 fc9d 	bl	d8614 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d7cda:	9802      	ldr	r0, [sp, #8]
   d7cdc:	f240 2102 	movw	r1, #514	; 0x202
   d7ce0:	f009 f942 	bl	e0f68 <open>
   d7ce4:	4605      	mov	r5, r0
   d7ce6:	a802      	add	r0, sp, #8
   d7ce8:	f006 fdbe 	bl	de868 <_ZN6StringD1Ev>
            if (fd) {
   d7cec:	b1cd      	cbz	r5, d7d22 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x9e>
                write(fd, &hdr, sizeof(hdr));
   d7cee:	2208      	movs	r2, #8
   d7cf0:	eb0d 0102 	add.w	r1, sp, r2
   d7cf4:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   d7cf6:	e9cd 9a02 	strd	r9, sl, [sp, #8]
                write(fd, &hdr, sizeof(hdr));
   d7cfa:	f009 f95b 	bl	e0fb4 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   d7cfe:	f107 0042 	add.w	r0, r7, #66	; 0x42
   d7d02:	f008 f9f2 	bl	e00ea <strlen>
   d7d06:	4639      	mov	r1, r7
   d7d08:	f100 0243 	add.w	r2, r0, #67	; 0x43
   d7d0c:	4628      	mov	r0, r5
   d7d0e:	f009 f951 	bl	e0fb4 <write>
                close(fd);
   d7d12:	4628      	mov	r0, r5
   d7d14:	f009 f90e 	bl	e0f34 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d7d18:	4807      	ldr	r0, [pc, #28]	; (d7d38 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>)
   d7d1a:	4632      	mov	r2, r6
   d7d1c:	4659      	mov	r1, fp
   d7d1e:	f7fd fbc5 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   d7d22:	4631      	mov	r1, r6
   d7d24:	4640      	mov	r0, r8
   d7d26:	f000 fea9 	bl	d8a7c <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   d7d2a:	2f00      	cmp	r7, #0
   d7d2c:	d0b8      	beq.n	d7ca0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x1c>
   d7d2e:	2143      	movs	r1, #67	; 0x43
   d7d30:	4638      	mov	r0, r7
   d7d32:	f007 fb97 	bl	df464 <_ZdlPvj>
   d7d36:	e7b1      	b.n	d7c9c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   d7d38:	2003e498 	.word	0x2003e498
   d7d3c:	31b67663 	.word	0x31b67663
   d7d40:	00410801 	.word	0x00410801
   d7d44:	000e2647 	.word	0x000e2647

000d7d48 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:
PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d7d48:	2900      	cmp	r1, #0
   d7d4a:	bf08      	it	eq
   d7d4c:	f5b0 6f00 	cmpeq.w	r0, #2048	; 0x800
void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   d7d50:	b538      	push	{r3, r4, r5, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d7d52:	d005      	beq.n	d7d60 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x18>
   d7d54:	2900      	cmp	r1, #0
   d7d56:	bf08      	it	eq
   d7d58:	2840      	cmpeq	r0, #64	; 0x40
   d7d5a:	d10b      	bne.n	d7d74 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
   d7d5c:	2a09      	cmp	r2, #9
   d7d5e:	d109      	bne.n	d7d74 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
        _log.trace("reset or disconnect event, save files to queue");
   d7d60:	4905      	ldr	r1, [pc, #20]	; (d7d78 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   d7d62:	4806      	ldr	r0, [pc, #24]	; (d7d7c <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x34>)
   d7d64:	f7fd fba2 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   d7d68:	f7ff ff2e 	bl	d7bc8 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   d7d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   d7d70:	f7ff bf88 	b.w	d7c84 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   d7d74:	bd38      	pop	{r3, r4, r5, pc}
   d7d76:	bf00      	nop
   d7d78:	000e2664 	.word	0x000e2664
   d7d7c:	2003e498 	.word	0x2003e498

000d7d80 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   d7d80:	b570      	push	{r4, r5, r6, lr}
   d7d82:	b086      	sub	sp, #24
   d7d84:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7d86:	f004 fa8d 	bl	dc2a4 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   d7d8a:	b948      	cbnz	r0, d7da0 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   d7d8c:	4b43      	ldr	r3, [pc, #268]	; (d7e9c <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   d7d8e:	a902      	add	r1, sp, #8
   d7d90:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d7d94:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d7d98:	f7ff ff26 	bl	d7be8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7d9c:	b006      	add	sp, #24
   d7d9e:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   d7da0:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   d7da4:	b11d      	cbz	r5, d7dae <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   d7da6:	2301      	movs	r3, #1
   d7da8:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   d7dac:	e7f6      	b.n	d7d9c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d7dae:	f003 ffd1 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   d7db2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   d7db6:	1ac0      	subs	r0, r0, r3
   d7db8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   d7dbc:	4298      	cmp	r0, r3
   d7dbe:	d3ed      	bcc.n	d7d9c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   d7dc0:	1d26      	adds	r6, r4, #4
   d7dc2:	4629      	mov	r1, r5
   d7dc4:	4630      	mov	r0, r6
   d7dc6:	f000 fe25 	bl	d8a14 <_ZN14SequentialFile16getFileFromQueueEb>
   d7dca:	4601      	mov	r1, r0
   d7dcc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   d7dd0:	2800      	cmp	r0, #0
   d7dd2:	d052      	beq.n	d7e7a <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   d7dd4:	4620      	mov	r0, r4
   d7dd6:	f7ff fe1b 	bl	d7a10 <_ZN17PublishQueuePosix13readQueueFileEi>
   d7dda:	4605      	mov	r5, r0
   d7ddc:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   d7de0:	2800      	cmp	r0, #0
   d7de2:	d035      	beq.n	d7e50 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   d7de4:	f003 ffb6 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   d7de8:	ae02      	add	r6, sp, #8
   d7dea:	2500      	movs	r5, #0
   d7dec:	4b2c      	ldr	r3, [pc, #176]	; (d7ea0 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   d7dee:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   d7df2:	4631      	mov	r1, r6
   d7df4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d7df8:	9302      	str	r3, [sp, #8]
   d7dfa:	9503      	str	r5, [sp, #12]
   d7dfc:	f7ff fef4 	bl	d7be8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d7e00:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   d7e04:	f103 0242 	add.w	r2, r3, #66	; 0x42
   d7e08:	9200      	str	r2, [sp, #0]
   d7e0a:	4926      	ldr	r1, [pc, #152]	; (d7ea4 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d7e0c:	4a26      	ldr	r2, [pc, #152]	; (d7ea8 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   d7e0e:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d7e12:	42a8      	cmp	r0, r5
   d7e14:	bf08      	it	eq
   d7e16:	460a      	moveq	r2, r1
   d7e18:	3301      	adds	r3, #1
   d7e1a:	4924      	ldr	r1, [pc, #144]	; (d7eac <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   d7e1c:	4824      	ldr	r0, [pc, #144]	; (d7eb0 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   d7e1e:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d7e22:	f7fd fb43 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   d7e26:	f7fe f897 	bl	d5f58 <_ZN19BackgroundPublishRK8instanceEv>
   d7e2a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   d7e2e:	4b21      	ldr	r3, [pc, #132]	; (d7eb4 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   d7e30:	9305      	str	r3, [sp, #20]
   d7e32:	e9cd 6500 	strd	r6, r5, [sp]
   d7e36:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   d7e38:	4b1f      	ldr	r3, [pc, #124]	; (d7eb8 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7e3a:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d7e3c:	9304      	str	r3, [sp, #16]
   d7e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7e42:	3242      	adds	r2, #66	; 0x42
   d7e44:	f7fe f9c0 	bl	d61c8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   d7e48:	4630      	mov	r0, r6
   d7e4a:	f7fc fa4d 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d7e4e:	e7a5      	b.n	d7d9c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   d7e50:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   d7e54:	4919      	ldr	r1, [pc, #100]	; (d7ebc <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   d7e56:	4816      	ldr	r0, [pc, #88]	; (d7eb0 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   d7e58:	f7fc fa4f 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   d7e5c:	2101      	movs	r1, #1
   d7e5e:	4630      	mov	r0, r6
   d7e60:	f000 fdd8 	bl	d8a14 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   d7e64:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   d7e68:	462a      	mov	r2, r5
   d7e6a:	4630      	mov	r0, r6
   d7e6c:	f000 fc0e 	bl	d868c <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   d7e70:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d7e74:	2b00      	cmp	r3, #0
   d7e76:	d1b5      	bne.n	d7de4 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   d7e78:	e790      	b.n	d7d9c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d7e7a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   d7e7e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d7e82:	429a      	cmp	r2, r3
   d7e84:	d007      	beq.n	d7e96 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   d7e86:	681b      	ldr	r3, [r3, #0]
   d7e88:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   d7e8c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d7e90:	f7ff fee2 	bl	d7c58 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   d7e94:	e7ec      	b.n	d7e70 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   d7e96:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   d7e9a:	e77f      	b.n	d7d9c <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d7e9c:	000d7f21 	.word	0x000d7f21
   d7ea0:	000d8279 	.word	0x000d8279
   d7ea4:	000e2693 	.word	0x000e2693
   d7ea8:	000e21e2 	.word	0x000e21e2
   d7eac:	000e26b4 	.word	0x000e26b4
   d7eb0:	2003e498 	.word	0x2003e498
   d7eb4:	000d794d 	.word	0x000d794d
   d7eb8:	000d795d 	.word	0x000d795d
   d7ebc:	000e2697 	.word	0x000e2697

000d7ec0 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d7ec0:	68c3      	ldr	r3, [r0, #12]
   d7ec2:	68ca      	ldr	r2, [r1, #12]
   d7ec4:	1a9b      	subs	r3, r3, r2
   d7ec6:	109b      	asrs	r3, r3, #2
   d7ec8:	1e5a      	subs	r2, r3, #1
   d7eca:	e9d0 3000 	ldrd	r3, r0, [r0]
   d7ece:	1a1b      	subs	r3, r3, r0
   d7ed0:	109b      	asrs	r3, r3, #2
   d7ed2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d7ed6:	6888      	ldr	r0, [r1, #8]
   d7ed8:	680a      	ldr	r2, [r1, #0]
   d7eda:	1a80      	subs	r0, r0, r2
    }
   d7edc:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d7ee0:	4770      	bx	lr

000d7ee2 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   d7ee2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7ee4:	4605      	mov	r5, r0
   d7ee6:	9001      	str	r0, [sp, #4]
   d7ee8:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d7eea:	f003 fef3 	bl	dbcd4 <os_mutex_recursive_lock>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d7eee:	f105 0180 	add.w	r1, r5, #128	; 0x80
   d7ef2:	f105 0090 	add.w	r0, r5, #144	; 0x90
   d7ef6:	f7ff ffe3 	bl	d7ec0 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (result == 0) {
   d7efa:	4604      	mov	r4, r0
   d7efc:	b950      	cbnz	r0, d7f14 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
            result = fileQueue.getQueueLen();
   d7efe:	1d28      	adds	r0, r5, #4
   d7f00:	f000 fdd6 	bl	d8ab0 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   d7f04:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   d7f08:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   d7f0a:	b11b      	cbz	r3, d7f14 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
   d7f0c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d7f10:	b903      	cbnz	r3, d7f14 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
                result++;
   d7f12:	3401      	adds	r4, #1
    WITH_LOCK(*this) {
   d7f14:	a801      	add	r0, sp, #4
   d7f16:	f7ff fe97 	bl	d7c48 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d7f1a:	4620      	mov	r0, r4
   d7f1c:	b003      	add	sp, #12
   d7f1e:	bd30      	pop	{r4, r5, pc}

000d7f20 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   d7f20:	b513      	push	{r0, r1, r4, lr}
   d7f22:	4604      	mov	r4, r0
   d7f24:	f004 f9be 	bl	dc2a4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d7f28:	b190      	cbz	r0, d7f50 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   d7f2a:	f003 ff13 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   d7f2e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   d7f32:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   d7f36:	4b0d      	ldr	r3, [pc, #52]	; (d7f6c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   d7f38:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   d7f3c:	9300      	str	r3, [sp, #0]
   d7f3e:	4669      	mov	r1, sp
   d7f40:	2300      	movs	r3, #0
   d7f42:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d7f46:	9301      	str	r3, [sp, #4]
   d7f48:	f7ff fe4e 	bl	d7be8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7f4c:	b002      	add	sp, #8
   d7f4e:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   d7f50:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   d7f54:	b11b      	cbz	r3, d7f5e <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   d7f56:	2301      	movs	r3, #1
   d7f58:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   d7f5c:	e7f6      	b.n	d7f4c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   d7f5e:	4620      	mov	r0, r4
   d7f60:	f7ff ffbf 	bl	d7ee2 <_ZN17PublishQueuePosix12getNumEventsEv>
   d7f64:	2800      	cmp	r0, #0
   d7f66:	d0f6      	beq.n	d7f56 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   d7f68:	e7f0      	b.n	d7f4c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   d7f6a:	bf00      	nop
   d7f6c:	000d7d81 	.word	0x000d7d81

000d7f70 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   d7f70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7f74:	4604      	mov	r4, r0
   d7f76:	9001      	str	r0, [sp, #4]
   d7f78:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d7f7a:	f003 feab 	bl	dbcd4 <os_mutex_recursive_lock>
   d7f7e:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d7f82:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d7f86:	f7ff ff9b 	bl	d7ec0 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (ramQueue.size() > ramQueueSize) {
   d7f8a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d7f8c:	4283      	cmp	r3, r0
   d7f8e:	d202      	bcs.n	d7f96 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
            writeQueueToFiles();
   d7f90:	4620      	mov	r0, r4
   d7f92:	f7ff fe77 	bl	d7c84 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   d7f96:	f8df 8048 	ldr.w	r8, [pc, #72]	; d7fe0 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x70>
   d7f9a:	4f10      	ldr	r7, [pc, #64]	; (d7fdc <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x6c>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   d7f9c:	1d26      	adds	r6, r4, #4
   d7f9e:	4630      	mov	r0, r6
   d7fa0:	f000 fd86 	bl	d8ab0 <_ZNK14SequentialFile11getQueueLenEv>
   d7fa4:	6f23      	ldr	r3, [r4, #112]	; 0x70
   d7fa6:	4298      	cmp	r0, r3
   d7fa8:	dc05      	bgt.n	d7fb6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x46>
    WITH_LOCK(*this) {
   d7faa:	a801      	add	r0, sp, #4
   d7fac:	f7ff fe4c 	bl	d7c48 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d7fb0:	b002      	add	sp, #8
   d7fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int fileNum = fileQueue.getFileFromQueue(true);
   d7fb6:	2101      	movs	r1, #1
   d7fb8:	4630      	mov	r0, r6
   d7fba:	f000 fd2b 	bl	d8a14 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   d7fbe:	4605      	mov	r5, r0
   d7fc0:	2800      	cmp	r0, #0
   d7fc2:	d0ec      	beq.n	d7f9e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
                fileQueue.removeFileNum(fileNum, false);
   d7fc4:	4601      	mov	r1, r0
   d7fc6:	2200      	movs	r2, #0
   d7fc8:	4630      	mov	r0, r6
   d7fca:	f000 fb5f 	bl	d868c <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   d7fce:	462a      	mov	r2, r5
   d7fd0:	4641      	mov	r1, r8
   d7fd2:	4638      	mov	r0, r7
   d7fd4:	f7fc f991 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
   d7fd8:	e7e1      	b.n	d7f9e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
   d7fda:	bf00      	nop
   d7fdc:	2003e498 	.word	0x2003e498
   d7fe0:	000e26d3 	.word	0x000e26d3

000d7fe4 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   d7fe4:	b513      	push	{r0, r1, r4, lr}
   d7fe6:	4604      	mov	r4, r0
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   d7fe8:	2000      	movs	r0, #0
   d7fea:	f004 f90d 	bl	dc208 <system_thread_get_state>
   d7fee:	2801      	cmp	r0, #1
   d7ff0:	d005      	beq.n	d7ffe <_ZN17PublishQueuePosix5setupEv+0x1a>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   d7ff2:	4912      	ldr	r1, [pc, #72]	; (d803c <_ZN17PublishQueuePosix5setupEv+0x58>)
   d7ff4:	4812      	ldr	r0, [pc, #72]	; (d8040 <_ZN17PublishQueuePosix5setupEv+0x5c>)
   d7ff6:	f7fd fa70 	bl	d54da <_ZNK5spark6Logger5errorEPKcz>
}
   d7ffa:	b002      	add	sp, #8
   d7ffc:	bd10      	pop	{r4, pc}
    os_mutex_recursive_create(&mutex);
   d7ffe:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d8002:	f003 fe57 	bl	dbcb4 <os_mutex_recursive_create>
   d8006:	4a0f      	ldr	r2, [pc, #60]	; (d8044 <_ZN17PublishQueuePosix5setupEv+0x60>)
   d8008:	2300      	movs	r3, #0
   d800a:	2100      	movs	r1, #0
   d800c:	f44f 6004 	mov.w	r0, #2112	; 0x840
   d8010:	f004 f8da 	bl	dc1c8 <system_subscribe_event>
    BackgroundPublishRK::instance().start();
   d8014:	f7fd ffa0 	bl	d5f58 <_ZN19BackgroundPublishRK8instanceEv>
   d8018:	f7fe f8b0 	bl	d617c <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   d801c:	1d20      	adds	r0, r4, #4
   d801e:	f000 fc75 	bl	d890c <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   d8022:	4620      	mov	r0, r4
   d8024:	f7ff ffa4 	bl	d7f70 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   d8028:	4b07      	ldr	r3, [pc, #28]	; (d8048 <_ZN17PublishQueuePosix5setupEv+0x64>)
   d802a:	9300      	str	r3, [sp, #0]
   d802c:	4669      	mov	r1, sp
   d802e:	2300      	movs	r3, #0
   d8030:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8034:	9301      	str	r3, [sp, #4]
   d8036:	f7ff fdd7 	bl	d7be8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d803a:	e7de      	b.n	d7ffa <_ZN17PublishQueuePosix5setupEv+0x16>
   d803c:	000e26e6 	.word	0x000e26e6
   d8040:	2003e498 	.word	0x2003e498
   d8044:	000d7d49 	.word	0x000d7d49
   d8048:	000d7f21 	.word	0x000d7f21

000d804c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d804c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d804e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d8050:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d8052:	b163      	cbz	r3, d806e <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d8054:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8056:	6945      	ldr	r5, [r0, #20]
   d8058:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d805a:	42ae      	cmp	r6, r5
   d805c:	d904      	bls.n	d8068 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x1c>
   d805e:	f855 0b04 	ldr.w	r0, [r5], #4
   d8062:	f7fc f81c 	bl	d409e <_ZdlPv>
   d8066:	e7f8      	b.n	d805a <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   d8068:	6820      	ldr	r0, [r4, #0]
   d806a:	f7fc f818 	bl	d409e <_ZdlPv>
    }
   d806e:	4620      	mov	r0, r4
   d8070:	bd70      	pop	{r4, r5, r6, pc}

000d8072 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   d8072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8076:	4606      	mov	r6, r0
   d8078:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d807a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d807c:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d807e:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d8080:	1a47      	subs	r7, r0, r1
   d8082:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d8086:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8088:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   d808c:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d808e:	d927      	bls.n	d80e0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   d8090:	1b5d      	subs	r5, r3, r5
   d8092:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d8094:	6832      	ldr	r2, [r6, #0]
   d8096:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8098:	b10c      	cbz	r4, d809e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   d809a:	ea4f 0489 	mov.w	r4, r9, lsl #2
   d809e:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d80a0:	4414      	add	r4, r2
   d80a2:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d80a4:	42a1      	cmp	r1, r4
   d80a6:	eba3 0201 	sub.w	r2, r3, r1
   d80aa:	d913      	bls.n	d80d4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   d80ac:	4299      	cmp	r1, r3
   d80ae:	d002      	beq.n	d80b6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d80b0:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d80b2:	f007 ff75 	bl	dffa0 <memmove>
	_M_node = __new_node;
   d80b6:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   d80b8:	6823      	ldr	r3, [r4, #0]
   d80ba:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d80bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d80c0:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d80c2:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   d80c4:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   d80c6:	59e3      	ldr	r3, [r4, r7]
   d80c8:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d80ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d80ce:	6233      	str	r3, [r6, #32]
    }
   d80d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d80d4:	4299      	cmp	r1, r3
   d80d6:	d0ee      	beq.n	d80b6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d80d8:	1d38      	adds	r0, r7, #4
   d80da:	1a80      	subs	r0, r0, r2
   d80dc:	4420      	add	r0, r4
   d80de:	e7e8      	b.n	d80b2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d80e0:	f103 0802 	add.w	r8, r3, #2
   d80e4:	454b      	cmp	r3, r9
   d80e6:	bf2c      	ite	cs
   d80e8:	4498      	addcs	r8, r3
   d80ea:	44c8      	addcc	r8, r9
	if (__n > this->max_size())
   d80ec:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   d80f0:	d301      	bcc.n	d80f6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   d80f2:	f007 f9bd 	bl	df470 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d80f6:	ea4f 0088 	mov.w	r0, r8, lsl #2
   d80fa:	f7fb ffcc 	bl	d4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d80fe:	eba8 0505 	sub.w	r5, r8, r5
   d8102:	086d      	lsrs	r5, r5, #1
   d8104:	4682      	mov	sl, r0
   d8106:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8108:	b10c      	cbz	r4, d810e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   d810a:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   d810e:	6a72      	ldr	r2, [r6, #36]	; 0x24
   d8110:	6971      	ldr	r1, [r6, #20]
   d8112:	3204      	adds	r2, #4
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8114:	442c      	add	r4, r5
	  if (_Num)
   d8116:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8118:	4454      	add	r4, sl
   d811a:	d003      	beq.n	d8124 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d811c:	1a52      	subs	r2, r2, r1
   d811e:	4620      	mov	r0, r4
   d8120:	f007 ff3e 	bl	dffa0 <memmove>
	::operator delete(__p);
   d8124:	6830      	ldr	r0, [r6, #0]
   d8126:	f7fb ffba 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d812a:	e9c6 a800 	strd	sl, r8, [r6]
   d812e:	e7c2      	b.n	d80b6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>

000d8130 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d8130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8134:	b086      	sub	sp, #24
   d8136:	4604      	mov	r4, r0
   d8138:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d813c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d8140:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d8142:	460f      	mov	r7, r1
   d8144:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d8146:	f7ff fc3b 	bl	d79c0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   d814a:	4605      	mov	r5, r0
   d814c:	2800      	cmp	r0, #0
   d814e:	d042      	beq.n	d81d6 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xa6>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   d8150:	4b43      	ldr	r3, [pc, #268]	; (d8260 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   d8152:	4944      	ldr	r1, [pc, #272]	; (d8264 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x134>)
   d8154:	4844      	ldr	r0, [pc, #272]	; (d8268 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d8156:	2e00      	cmp	r6, #0
   d8158:	bf18      	it	ne
   d815a:	4633      	movne	r3, r6
   d815c:	463a      	mov	r2, r7
   d815e:	f7fd f9a5 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
   d8162:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d8164:	9405      	str	r4, [sp, #20]
   d8166:	f003 fdb5 	bl	dbcd4 <os_mutex_recursive_lock>
	    != this->_M_impl._M_finish._M_last - 1)
   d816a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   d816e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   d8172:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   d8174:	4293      	cmp	r3, r2
   d8176:	f104 0878 	add.w	r8, r4, #120	; 0x78
   d817a:	f104 0690 	add.w	r6, r4, #144	; 0x90
   d817e:	f104 0780 	add.w	r7, r4, #128	; 0x80
   d8182:	d02b      	beq.n	d81dc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8184:	b103      	cbz	r3, d8188 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x58>
   d8186:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d8188:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   d818c:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   d818e:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d8190:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   d8194:	4628      	mov	r0, r5
   d8196:	f000 fc8b 	bl	d8ab0 <_ZNK14SequentialFile11getQueueLenEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d819a:	4639      	mov	r1, r7
   d819c:	9003      	str	r0, [sp, #12]
   d819e:	4630      	mov	r0, r6
   d81a0:	f7ff fe8e 	bl	d7ec0 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
   d81a4:	9002      	str	r0, [sp, #8]
   d81a6:	f004 f87d 	bl	dc2a4 <spark_cloud_flag_connected>
   d81aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d81ae:	9000      	str	r0, [sp, #0]
   d81b0:	492e      	ldr	r1, [pc, #184]	; (d826c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x13c>)
   d81b2:	482d      	ldr	r0, [pc, #180]	; (d8268 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d81b4:	f7fd f97a 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d81b8:	4628      	mov	r0, r5
   d81ba:	f000 fc79 	bl	d8ab0 <_ZNK14SequentialFile11getQueueLenEv>
   d81be:	2800      	cmp	r0, #0
   d81c0:	d03e      	beq.n	d8240 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>
            writeQueueToFiles();
   d81c2:	4620      	mov	r0, r4
   d81c4:	f7ff fd5e 	bl	d7c84 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   d81c8:	4620      	mov	r0, r4
   d81ca:	f7ff fed1 	bl	d7f70 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    WITH_LOCK(*this) {
   d81ce:	a805      	add	r0, sp, #20
   d81d0:	f7ff fd3a 	bl	d7c48 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
    return true;
   d81d4:	2001      	movs	r0, #1
}
   d81d6:	b006      	add	sp, #24
   d81d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d81dc:	4639      	mov	r1, r7
   d81de:	4630      	mov	r0, r6
   d81e0:	f7ff fe6e 	bl	d7ec0 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d81e4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d81e8:	4298      	cmp	r0, r3
   d81ea:	d102      	bne.n	d81f2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xc2>
	  __throw_length_error(
   d81ec:	4820      	ldr	r0, [pc, #128]	; (d8270 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x140>)
   d81ee:	f007 f942 	bl	df476 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d81f2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d81f6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d81f8:	1a9a      	subs	r2, r3, r2
   d81fa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   d81fc:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d8200:	2b01      	cmp	r3, #1
   d8202:	d804      	bhi.n	d820e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>
	  _M_reallocate_map(__nodes_to_add, false);
   d8204:	2200      	movs	r2, #0
   d8206:	2101      	movs	r1, #1
   d8208:	4640      	mov	r0, r8
   d820a:	f7ff ff32 	bl	d8072 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d820e:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d8212:	f8d4 809c 	ldr.w	r8, [r4, #156]	; 0x9c
   d8216:	f7fb ff3e 	bl	d4096 <_Znwj>
   d821a:	f8c8 0004 	str.w	r0, [r8, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d821e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8222:	b103      	cbz	r3, d8226 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf6>
   d8224:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d8226:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d822a:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d822c:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   d8230:	685b      	ldr	r3, [r3, #4]
   d8232:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8236:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d823a:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   d823e:	e7a6      	b.n	d818e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x5e>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8240:	4639      	mov	r1, r7
   d8242:	4630      	mov	r0, r6
   d8244:	f7ff fe3c 	bl	d7ec0 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d8248:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d824a:	4283      	cmp	r3, r0
   d824c:	d3b9      	bcc.n	d81c2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
   d824e:	f004 f829 	bl	dc2a4 <spark_cloud_flag_connected>
   d8252:	2800      	cmp	r0, #0
   d8254:	d0b5      	beq.n	d81c2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
            _log.trace("queued to ramQueue");
   d8256:	4907      	ldr	r1, [pc, #28]	; (d8274 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x144>)
   d8258:	4803      	ldr	r0, [pc, #12]	; (d8268 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d825a:	f7fd f927 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
   d825e:	e7b3      	b.n	d81c8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
   d8260:	000e296f 	.word	0x000e296f
   d8264:	000e2709 	.word	0x000e2709
   d8268:	2003e498 	.word	0x2003e498
   d826c:	000e2761 	.word	0x000e2761
   d8270:	000e2731 	.word	0x000e2731
   d8274:	000e278d 	.word	0x000e278d

000d8278 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   d8278:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   d827a:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   d827e:	4604      	mov	r4, r0
    if (!publishComplete) {
   d8280:	2b00      	cmp	r3, #0
   d8282:	d041      	beq.n	d8308 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   d8284:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
   d8288:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d828c:	2b00      	cmp	r3, #0
   d828e:	d03d      	beq.n	d830c <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   d8290:	4952      	ldr	r1, [pc, #328]	; (d83dc <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   d8292:	4853      	ldr	r0, [pc, #332]	; (d83e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d8294:	f7fd f90a 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   d8298:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d829c:	b1d3      	cbz	r3, d82d4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   d829e:	1d26      	adds	r6, r4, #4
   d82a0:	2100      	movs	r1, #0
   d82a2:	4630      	mov	r0, r6
   d82a4:	f000 fbb6 	bl	d8a14 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   d82a8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d82ac:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   d82ae:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   d82b0:	d10d      	bne.n	d82ce <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   d82b2:	2101      	movs	r1, #1
   d82b4:	4630      	mov	r0, r6
   d82b6:	f000 fbad 	bl	d8a14 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   d82ba:	2200      	movs	r2, #0
   d82bc:	4629      	mov	r1, r5
   d82be:	4630      	mov	r0, r6
   d82c0:	f000 f9e4 	bl	d868c <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   d82c4:	4947      	ldr	r1, [pc, #284]	; (d83e4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   d82c6:	4846      	ldr	r0, [pc, #280]	; (d83e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d82c8:	462a      	mov	r2, r5
   d82ca:	f7fd f8ef 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   d82ce:	2300      	movs	r3, #0
   d82d0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   d82d4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d82d8:	b110      	cbz	r0, d82e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   d82da:	2143      	movs	r1, #67	; 0x43
   d82dc:	f007 f8c2 	bl	df464 <_ZdlPvj>
        curEvent = NULL;
   d82e0:	2300      	movs	r3, #0
   d82e2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   d82e6:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d82ea:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   d82ee:	4b3e      	ldr	r3, [pc, #248]	; (d83e8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   d82f0:	9300      	str	r3, [sp, #0]
   d82f2:	4669      	mov	r1, sp
   d82f4:	2300      	movs	r3, #0
   d82f6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d82fa:	9301      	str	r3, [sp, #4]
   d82fc:	f7ff fc74 	bl	d7be8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d8300:	f003 fd28 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d8304:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   d8308:	b002      	add	sp, #8
   d830a:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   d830c:	4937      	ldr	r1, [pc, #220]	; (d83ec <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   d830e:	4834      	ldr	r0, [pc, #208]	; (d83e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d8310:	f7fd f8cc 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   d8314:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   d8318:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   d831c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d8320:	b14b      	cbz	r3, d8336 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   d8322:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d8326:	b110      	cbz	r0, d832e <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   d8328:	2143      	movs	r1, #67	; 0x43
   d832a:	f007 f89b 	bl	df464 <_ZdlPvj>
            curEvent = NULL;
   d832e:	2300      	movs	r3, #0
   d8330:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   d8334:	e7db      	b.n	d82ee <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   d8336:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d8338:	9400      	str	r4, [sp, #0]
   d833a:	f003 fccb 	bl	dbcd4 <os_mutex_recursive_lock>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   d833e:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   d8342:	4293      	cmp	r3, r2
   d8344:	d013      	beq.n	d836e <_ZN17PublishQueuePosix16statePublishWaitEv+0xf6>
	    _Alloc_traits::construct(this->_M_impl,
   d8346:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d834a:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   d834e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d8352:	3b04      	subs	r3, #4
   d8354:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            WITH_LOCK(*this) {
   d8358:	4668      	mov	r0, sp
   d835a:	f7ff fc75 	bl	d7c48 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
            _log.trace("writing to files after publish failure");
   d835e:	4924      	ldr	r1, [pc, #144]	; (d83f0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x178>)
   d8360:	481f      	ldr	r0, [pc, #124]	; (d83e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d8362:	f7fd f8a3 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   d8366:	4620      	mov	r0, r4
   d8368:	f7ff fc8c 	bl	d7c84 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d836c:	e7bf      	b.n	d82ee <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d836e:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d8372:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d8376:	f7ff fda3 	bl	d7ec0 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d837a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d837e:	4298      	cmp	r0, r3
   d8380:	f104 0578 	add.w	r5, r4, #120	; 0x78
   d8384:	d102      	bne.n	d838c <_ZN17PublishQueuePosix16statePublishWaitEv+0x114>
	  __throw_length_error(
   d8386:	481b      	ldr	r0, [pc, #108]	; (d83f4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x17c>)
   d8388:	f007 f875 	bl	df476 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   d838c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   d8390:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   d8392:	429a      	cmp	r2, r3
   d8394:	d104      	bne.n	d83a0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x128>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   d8396:	2201      	movs	r2, #1
   d8398:	4611      	mov	r1, r2
   d839a:	4628      	mov	r0, r5
   d839c:	f7ff fe69 	bl	d8072 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d83a0:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   d83a4:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   d83a8:	f7fb fe75 	bl	d4096 <_Znwj>
   d83ac:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   d83b0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d83b4:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   d83b6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   d83ba:	f853 3c04 	ldr.w	r3, [r3, #-4]
   d83be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   d83c2:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d83c6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   d83ca:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   d83ce:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	    _Alloc_traits::construct(this->_M_impl,
   d83d2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d83d6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   d83da:	e7bd      	b.n	d8358 <_ZN17PublishQueuePosix16statePublishWaitEv+0xe0>
   d83dc:	000e27a0 	.word	0x000e27a0
   d83e0:	2003e498 	.word	0x2003e498
   d83e4:	000e27b3 	.word	0x000e27b3
   d83e8:	000d7d81 	.word	0x000d7d81
   d83ec:	000e27c3 	.word	0x000e27c3
   d83f0:	000e27d5 	.word	0x000e27d5
   d83f4:	000e2731 	.word	0x000e2731

000d83f8 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   d83f8:	4b01      	ldr	r3, [pc, #4]	; (d8400 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   d83fa:	4a02      	ldr	r2, [pc, #8]	; (d8404 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   d83fc:	601a      	str	r2, [r3, #0]
}
   d83fe:	4770      	bx	lr
   d8400:	2003e498 	.word	0x2003e498
   d8404:	000e21d2 	.word	0x000e21d2

000d8408 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d8408:	b510      	push	{r4, lr}
   d840a:	4b07      	ldr	r3, [pc, #28]	; (d8428 <_ZN17PublishQueuePosixD1Ev+0x20>)
   d840c:	4604      	mov	r4, r0
   d840e:	f840 3bc0 	str.w	r3, [r0], #192
   d8412:	f7fb ff69 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d8416:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d841a:	f7ff fe17 	bl	d804c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   d841e:	1d20      	adds	r0, r4, #4
   d8420:	f000 f9b2 	bl	d8788 <_ZN14SequentialFileD1Ev>
}
   d8424:	4620      	mov	r0, r4
   d8426:	bd10      	pop	{r4, pc}
   d8428:	000e2804 	.word	0x000e2804

000d842c <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d842c:	b510      	push	{r4, lr}
   d842e:	4604      	mov	r4, r0
}
   d8430:	f7ff ffea 	bl	d8408 <_ZN17PublishQueuePosixD1Ev>
   d8434:	4620      	mov	r0, r4
   d8436:	21d0      	movs	r1, #208	; 0xd0
   d8438:	f007 f814 	bl	df464 <_ZdlPvj>
   d843c:	4620      	mov	r0, r4
   d843e:	bd10      	pop	{r4, pc}

000d8440 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   d8440:	2001      	movs	r0, #1
   d8442:	4770      	bx	lr

000d8444 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   d8444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8446:	4d1f      	ldr	r5, [pc, #124]	; (d84c4 <_ZN14SequentialFileC1Ev+0x80>)
   d8448:	4b1f      	ldr	r3, [pc, #124]	; (d84c8 <_ZN14SequentialFileC1Ev+0x84>)
   d844a:	4604      	mov	r4, r0
   d844c:	4629      	mov	r1, r5
   d844e:	f840 3b04 	str.w	r3, [r0], #4
   d8452:	f006 fa54 	bl	de8fe <_ZN6StringC1EPKc>
   d8456:	491d      	ldr	r1, [pc, #116]	; (d84cc <_ZN14SequentialFileC1Ev+0x88>)
   d8458:	f104 0014 	add.w	r0, r4, #20
   d845c:	f006 fa4f 	bl	de8fe <_ZN6StringC1EPKc>
   d8460:	4629      	mov	r1, r5
   d8462:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d8466:	f006 fa4a 	bl	de8fe <_ZN6StringC1EPKc>
   d846a:	2300      	movs	r3, #0
   d846c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d8470:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   d8474:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   d8478:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   d847c:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   d8480:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	  _M_start(), _M_finish()
   d8484:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d8486:	2308      	movs	r3, #8
   d8488:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d848a:	2020      	movs	r0, #32
   d848c:	f7fb fe03 	bl	d4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d8490:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d8492:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d8494:	3d01      	subs	r5, #1
   d8496:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d8498:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   d849c:	4606      	mov	r6, r0
   d849e:	f44f 7000 	mov.w	r0, #512	; 0x200
   d84a2:	f7fb fdf8 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d84a6:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d84aa:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   d84ae:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   d84b2:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d84b4:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d84b6:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   d84b8:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   d84ba:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   d84bc:	6667      	str	r7, [r4, #100]	; 0x64

}
   d84be:	4620      	mov	r0, r4
   d84c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d84c2:	bf00      	nop
   d84c4:	000e296f 	.word	0x000e296f
   d84c8:	000e2904 	.word	0x000e2904
   d84cc:	000e2810 	.word	0x000e2810

000d84d0 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d84d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   d84d2:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d84d4:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   d84d6:	4628      	mov	r0, r5
   d84d8:	f006 fa6f 	bl	de9ba <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   d84dc:	490e      	ldr	r1, [pc, #56]	; (d8518 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   d84de:	4668      	mov	r0, sp
   d84e0:	f006 fa0d 	bl	de8fe <_ZN6StringC1EPKc>
   d84e4:	4669      	mov	r1, sp
   d84e6:	4628      	mov	r0, r5
   d84e8:	f006 faf6 	bl	dead8 <_ZNK6String8endsWithERKS_>
   d84ec:	4606      	mov	r6, r0
   d84ee:	4668      	mov	r0, sp
   d84f0:	f006 f9ba 	bl	de868 <_ZN6StringD1Ev>
   d84f4:	b16e      	cbz	r6, d8512 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   d84f6:	68e3      	ldr	r3, [r4, #12]
   d84f8:	2200      	movs	r2, #0
   d84fa:	3b01      	subs	r3, #1
   d84fc:	4629      	mov	r1, r5
   d84fe:	4668      	mov	r0, sp
   d8500:	f006 fb00 	bl	deb04 <_ZNK6String9substringEjj>
   d8504:	4669      	mov	r1, sp
   d8506:	4628      	mov	r0, r5
   d8508:	f006 fa4f 	bl	de9aa <_ZN6StringaSEOS_>
   d850c:	4668      	mov	r0, sp
   d850e:	f006 f9ab 	bl	de868 <_ZN6StringD1Ev>
    }
    return *this; 
};
   d8512:	4620      	mov	r0, r4
   d8514:	b004      	add	sp, #16
   d8516:	bd70      	pop	{r4, r5, r6, pc}
   d8518:	000e2815 	.word	0x000e2815

000d851c <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   d851c:	b510      	push	{r4, lr}
    if (!queueMutex) {
   d851e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   d8520:	4604      	mov	r4, r0
    if (!queueMutex) {
   d8522:	b913      	cbnz	r3, d852a <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   d8524:	303c      	adds	r0, #60	; 0x3c
   d8526:	f003 fbad 	bl	dbc84 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   d852a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   d852c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   d8530:	f003 bbb0 	b.w	dbc94 <os_mutex_lock>

000d8534 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   d8534:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d8536:	f003 bbb5 	b.w	dbca4 <os_mutex_unlock>
	...

000d853c <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   d853c:	b510      	push	{r4, lr}
   d853e:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   d8540:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   d8542:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   d8544:	f003 fd16 	bl	dbf74 <stat>
    if (result == 0) {
   d8548:	b9d0      	cbnz	r0, d8580 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d854a:	9b01      	ldr	r3, [sp, #4]
   d854c:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   d854e:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d8550:	d506      	bpl.n	d8560 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   d8552:	4915      	ldr	r1, [pc, #84]	; (d85a8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   d8554:	4815      	ldr	r0, [pc, #84]	; (d85ac <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d8556:	f7fb fed0 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
        return true;
   d855a:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   d855c:	b016      	add	sp, #88	; 0x58
   d855e:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   d8560:	4812      	ldr	r0, [pc, #72]	; (d85ac <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d8562:	4913      	ldr	r1, [pc, #76]	; (d85b0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   d8564:	f7fc ffb9 	bl	d54da <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   d8568:	4620      	mov	r0, r4
   d856a:	f008 fd1b 	bl	e0fa4 <unlink>
    result = mkdir(path, 0777);
   d856e:	f240 11ff 	movw	r1, #511	; 0x1ff
   d8572:	4620      	mov	r0, r4
   d8574:	f003 fd06 	bl	dbf84 <mkdir>
    if (result == 0) {
   d8578:	b980      	cbnz	r0, d859c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   d857a:	490e      	ldr	r1, [pc, #56]	; (d85b4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   d857c:	4622      	mov	r2, r4
   d857e:	e7e9      	b.n	d8554 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   d8580:	f003 ff68 	bl	dc454 <__errno>
   d8584:	6803      	ldr	r3, [r0, #0]
   d8586:	2b02      	cmp	r3, #2
   d8588:	d0f1      	beq.n	d856e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   d858a:	f003 ff63 	bl	dc454 <__errno>
   d858e:	490a      	ldr	r1, [pc, #40]	; (d85b8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   d8590:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   d8592:	4806      	ldr	r0, [pc, #24]	; (d85ac <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d8594:	f7fc ffa1 	bl	d54da <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d8598:	2000      	movs	r0, #0
   d859a:	e7df      	b.n	d855c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   d859c:	f003 ff5a 	bl	dc454 <__errno>
   d85a0:	4906      	ldr	r1, [pc, #24]	; (d85bc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   d85a2:	6802      	ldr	r2, [r0, #0]
   d85a4:	e7f5      	b.n	d8592 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   d85a6:	bf00      	nop
   d85a8:	000e2822 	.word	0x000e2822
   d85ac:	2003e4a0 	.word	0x2003e4a0
   d85b0:	000e283f 	.word	0x000e283f
   d85b4:	000e2870 	.word	0x000e2870
   d85b8:	000e285c 	.word	0x000e285c
   d85bc:	000e287f 	.word	0x000e287f

000d85c0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   d85c0:	b538      	push	{r3, r4, r5, lr}
   d85c2:	4615      	mov	r5, r2
   d85c4:	4604      	mov	r4, r0
    String result = name;
   d85c6:	f006 f99a 	bl	de8fe <_ZN6StringC1EPKc>

    if (ext && *ext) {
   d85ca:	b14d      	cbz	r5, d85e0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   d85cc:	782b      	ldrb	r3, [r5, #0]
   d85ce:	b13b      	cbz	r3, d85e0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d85d0:	4904      	ldr	r1, [pc, #16]	; (d85e4 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   d85d2:	4620      	mov	r0, r4
   d85d4:	f006 fa1a 	bl	dea0c <_ZN6String6concatEPKc>
   d85d8:	4629      	mov	r1, r5
   d85da:	4620      	mov	r0, r4
   d85dc:	f006 fa16 	bl	dea0c <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   d85e0:	4620      	mov	r0, r4
   d85e2:	bd38      	pop	{r3, r4, r5, pc}
   d85e4:	000e2e94 	.word	0x000e2e94

000d85e8 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   d85e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d85ea:	4605      	mov	r5, r0
   d85ec:	460e      	mov	r6, r1
   d85ee:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   d85f0:	6949      	ldr	r1, [r1, #20]
   d85f2:	4668      	mov	r0, sp
   d85f4:	f006 faa6 	bl	deb44 <_ZN6String6formatEPKcz>
        operator const char*() const { return c_str(); }
   d85f8:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   d85fa:	b904      	cbnz	r4, d85fe <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   d85fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d85fe:	4622      	mov	r2, r4
   d8600:	4628      	mov	r0, r5
   d8602:	f7ff ffdd 	bl	d85c0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   d8606:	4668      	mov	r0, sp
   d8608:	f006 f92e 	bl	de868 <_ZN6StringD1Ev>
}
   d860c:	4628      	mov	r0, r5
   d860e:	b004      	add	sp, #16
   d8610:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8614 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d8614:	b570      	push	{r4, r5, r6, lr}
   d8616:	460c      	mov	r4, r1
   d8618:	b08e      	sub	sp, #56	; 0x38
    String result;
   d861a:	491a      	ldr	r1, [pc, #104]	; (d8684 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d861c:	e9cd 3200 	strd	r3, r2, [sp]
   d8620:	4605      	mov	r5, r0
    String result;
   d8622:	f006 f96c 	bl	de8fe <_ZN6StringC1EPKc>
    result.reserve(dirPath.length() + pattern.length() + 4);
   d8626:	69e0      	ldr	r0, [r4, #28]
   d8628:	68e1      	ldr	r1, [r4, #12]
   d862a:	4401      	add	r1, r0
   d862c:	3104      	adds	r1, #4
   d862e:	4628      	mov	r0, r5
   d8630:	f006 f938 	bl	de8a4 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8634:	1d21      	adds	r1, r4, #4
   d8636:	a806      	add	r0, sp, #24
   d8638:	f006 f9ac 	bl	de994 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   d863c:	4912      	ldr	r1, [pc, #72]	; (d8688 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   d863e:	a802      	add	r0, sp, #8
   d8640:	f006 f95d 	bl	de8fe <_ZN6StringC1EPKc>
   d8644:	a902      	add	r1, sp, #8
   d8646:	a806      	add	r0, sp, #24
   d8648:	f006 f9f1 	bl	dea2e <_ZplRK15StringSumHelperRK6String>
   d864c:	e9dd 3200 	ldrd	r3, r2, [sp]
   d8650:	4606      	mov	r6, r0
   d8652:	4621      	mov	r1, r4
   d8654:	a80a      	add	r0, sp, #40	; 0x28
   d8656:	f7ff ffc7 	bl	d85e8 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   d865a:	a90a      	add	r1, sp, #40	; 0x28
   d865c:	4630      	mov	r0, r6
   d865e:	f006 f9e6 	bl	dea2e <_ZplRK15StringSumHelperRK6String>
   d8662:	4601      	mov	r1, r0
   d8664:	4628      	mov	r0, r5
   d8666:	f006 f986 	bl	de976 <_ZN6StringaSERKS_>
   d866a:	a80a      	add	r0, sp, #40	; 0x28
   d866c:	f006 f8fc 	bl	de868 <_ZN6StringD1Ev>
   d8670:	a802      	add	r0, sp, #8
   d8672:	f006 f8f9 	bl	de868 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d8676:	a806      	add	r0, sp, #24
   d8678:	f006 f8f6 	bl	de868 <_ZN6StringD1Ev>
}
   d867c:	4628      	mov	r0, r5
   d867e:	b00e      	add	sp, #56	; 0x38
   d8680:	bd70      	pop	{r4, r5, r6, pc}
   d8682:	bf00      	nop
   d8684:	000e296f 	.word	0x000e296f
   d8688:	000e2815 	.word	0x000e2815

000d868c <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d868c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   d8690:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d8692:	b08e      	sub	sp, #56	; 0x38
   d8694:	4605      	mov	r5, r0
   d8696:	460f      	mov	r7, r1
    if (allExtensions) {
   d8698:	2a00      	cmp	r2, #0
   d869a:	d04a      	beq.n	d8732 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   d869c:	6840      	ldr	r0, [r0, #4]
   d869e:	f003 fc89 	bl	dbfb4 <opendir>
        if (dir) {
   d86a2:	4606      	mov	r6, r0
   d86a4:	2800      	cmp	r0, #0
   d86a6:	d041      	beq.n	d872c <_ZN14SequentialFile13removeFileNumEib+0xa0>
                        String path = dirPath + String("/") + ent->d_name;
   d86a8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d875c <_ZN14SequentialFile13removeFileNumEib+0xd0>
                        _log.trace("removed %s", path.c_str());
   d86ac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d8754 <_ZN14SequentialFile13removeFileNumEib+0xc8>
   d86b0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d8758 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   d86b4:	4630      	mov	r0, r6
   d86b6:	f003 fc85 	bl	dbfc4 <readdir>
                if (!ent) {
   d86ba:	2800      	cmp	r0, #0
   d86bc:	d033      	beq.n	d8726 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   d86be:	7a82      	ldrb	r2, [r0, #10]
   d86c0:	2a08      	cmp	r2, #8
   d86c2:	d1f7      	bne.n	d86b4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   d86c4:	f100 040b 	add.w	r4, r0, #11
   d86c8:	6969      	ldr	r1, [r5, #20]
   d86ca:	aa01      	add	r2, sp, #4
   d86cc:	4620      	mov	r0, r4
   d86ce:	f003 fe99 	bl	dc404 <sscanf>
   d86d2:	2801      	cmp	r0, #1
   d86d4:	d1ee      	bne.n	d86b4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   d86d6:	9b01      	ldr	r3, [sp, #4]
   d86d8:	429f      	cmp	r7, r3
   d86da:	d1eb      	bne.n	d86b4 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   d86dc:	1d29      	adds	r1, r5, #4
   d86de:	a806      	add	r0, sp, #24
   d86e0:	f006 f958 	bl	de994 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   d86e4:	4651      	mov	r1, sl
   d86e6:	a80a      	add	r0, sp, #40	; 0x28
   d86e8:	f006 f909 	bl	de8fe <_ZN6StringC1EPKc>
   d86ec:	a90a      	add	r1, sp, #40	; 0x28
   d86ee:	a806      	add	r0, sp, #24
   d86f0:	f006 f99d 	bl	dea2e <_ZplRK15StringSumHelperRK6String>
   d86f4:	4621      	mov	r1, r4
   d86f6:	f006 f9a6 	bl	dea46 <_ZplRK15StringSumHelperPKc>
   d86fa:	4601      	mov	r1, r0
   d86fc:	a802      	add	r0, sp, #8
   d86fe:	f006 f949 	bl	de994 <_ZN6StringC1ERKS_>
   d8702:	a80a      	add	r0, sp, #40	; 0x28
   d8704:	f006 f8b0 	bl	de868 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d8708:	a806      	add	r0, sp, #24
   d870a:	f006 f8ad 	bl	de868 <_ZN6StringD1Ev>
                        unlink(path);
   d870e:	9802      	ldr	r0, [sp, #8]
   d8710:	f008 fc48 	bl	e0fa4 <unlink>
                        _log.trace("removed %s", path.c_str());
   d8714:	4640      	mov	r0, r8
   d8716:	9a02      	ldr	r2, [sp, #8]
   d8718:	4649      	mov	r1, r9
   d871a:	f7fc fec7 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   d871e:	a802      	add	r0, sp, #8
   d8720:	f006 f8a2 	bl	de868 <_ZN6StringD1Ev>
                    continue;
   d8724:	e7c6      	b.n	d86b4 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   d8726:	4630      	mov	r0, r6
   d8728:	f003 fc54 	bl	dbfd4 <closedir>
}
   d872c:	b00e      	add	sp, #56	; 0x38
   d872e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        String path = getPathForFileNum(fileNum); 
   d8732:	460a      	mov	r2, r1
   d8734:	4601      	mov	r1, r0
   d8736:	a80a      	add	r0, sp, #40	; 0x28
   d8738:	f7ff ff6c 	bl	d8614 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   d873c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d873e:	f008 fc31 	bl	e0fa4 <unlink>
        _log.trace("removed %s", path.c_str());
   d8742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d8744:	4903      	ldr	r1, [pc, #12]	; (d8754 <_ZN14SequentialFile13removeFileNumEib+0xc8>)
   d8746:	4804      	ldr	r0, [pc, #16]	; (d8758 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   d8748:	f7fc feb0 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   d874c:	a80a      	add	r0, sp, #40	; 0x28
   d874e:	f006 f88b 	bl	de868 <_ZN6StringD1Ev>
}
   d8752:	e7eb      	b.n	d872c <_ZN14SequentialFile13removeFileNumEib+0xa0>
   d8754:	000e2817 	.word	0x000e2817
   d8758:	2003e4a0 	.word	0x2003e4a0
   d875c:	000e2815 	.word	0x000e2815

000d8760 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d8760:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d8762:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d8764:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d8766:	b163      	cbz	r3, d8782 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d8768:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d876a:	6945      	ldr	r5, [r0, #20]
   d876c:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d876e:	42ae      	cmp	r6, r5
   d8770:	d904      	bls.n	d877c <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x1c>
	::operator delete(__p);
   d8772:	f855 0b04 	ldr.w	r0, [r5], #4
   d8776:	f7fb fc92 	bl	d409e <_ZdlPv>
   d877a:	e7f8      	b.n	d876e <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   d877c:	6820      	ldr	r0, [r4, #0]
   d877e:	f7fb fc8e 	bl	d409e <_ZdlPv>
    }
   d8782:	4620      	mov	r0, r4
   d8784:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8788 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   d8788:	b510      	push	{r4, lr}
   d878a:	4b09      	ldr	r3, [pc, #36]	; (d87b0 <_ZN14SequentialFileD1Ev+0x28>)
   d878c:	4604      	mov	r4, r0
   d878e:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d8792:	f7ff ffe5 	bl	d8760 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   d8796:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d879a:	f006 f865 	bl	de868 <_ZN6StringD1Ev>
   d879e:	f104 0014 	add.w	r0, r4, #20
   d87a2:	f006 f861 	bl	de868 <_ZN6StringD1Ev>
   d87a6:	1d20      	adds	r0, r4, #4
   d87a8:	f006 f85e 	bl	de868 <_ZN6StringD1Ev>
}
   d87ac:	4620      	mov	r0, r4
   d87ae:	bd10      	pop	{r4, pc}
   d87b0:	000e2904 	.word	0x000e2904

000d87b4 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   d87b4:	b510      	push	{r4, lr}
   d87b6:	4604      	mov	r4, r0
}
   d87b8:	f7ff ffe6 	bl	d8788 <_ZN14SequentialFileD1Ev>
   d87bc:	4620      	mov	r0, r4
   d87be:	2168      	movs	r1, #104	; 0x68
   d87c0:	f006 fe50 	bl	df464 <_ZdlPvj>
   d87c4:	4620      	mov	r0, r4
   d87c6:	bd10      	pop	{r4, pc}

000d87c8 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d87c8:	68c3      	ldr	r3, [r0, #12]
   d87ca:	68ca      	ldr	r2, [r1, #12]
   d87cc:	1a9b      	subs	r3, r3, r2
   d87ce:	109b      	asrs	r3, r3, #2
   d87d0:	1e5a      	subs	r2, r3, #1
   d87d2:	e9d0 3000 	ldrd	r3, r0, [r0]
   d87d6:	1a1b      	subs	r3, r3, r0
   d87d8:	109b      	asrs	r3, r3, #2
   d87da:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d87de:	6888      	ldr	r0, [r1, #8]
   d87e0:	680a      	ldr	r2, [r1, #0]
   d87e2:	1a80      	subs	r0, r0, r2
    }
   d87e4:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d87e8:	4770      	bx	lr
	...

000d87ec <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
   d87ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d87f0:	4604      	mov	r4, r0
   d87f2:	4688      	mov	r8, r1
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d87f4:	f100 0108 	add.w	r1, r0, #8
   d87f8:	3018      	adds	r0, #24
   d87fa:	f7ff ffe5 	bl	d87c8 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
	if (size() == max_size())
   d87fe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d8802:	4298      	cmp	r0, r3
   d8804:	d102      	bne.n	d880c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x20>
	  __throw_length_error(
   d8806:	4837      	ldr	r0, [pc, #220]	; (d88e4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xf8>)
   d8808:	f006 fe35 	bl	df476 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d880c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d880e:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d8810:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d8812:	1a11      	subs	r1, r2, r0
   d8814:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d8818:	2901      	cmp	r1, #1
   d881a:	d821      	bhi.n	d8860 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x74>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d881c:	6961      	ldr	r1, [r4, #20]
   d881e:	1a57      	subs	r7, r2, r1
   d8820:	10be      	asrs	r6, r7, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d8822:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8824:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   d8828:	d936      	bls.n	d8898 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xac>
					 - __new_num_nodes) / 2
   d882a:	1b5d      	subs	r5, r3, r5
   d882c:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d882e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d8832:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d8834:	42a9      	cmp	r1, r5
   d8836:	eba3 0201 	sub.w	r2, r3, r1
   d883a:	d927      	bls.n	d888c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xa0>
	  if (_Num)
   d883c:	4299      	cmp	r1, r3
   d883e:	d002      	beq.n	d8846 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8840:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d8842:	f007 fbad 	bl	dffa0 <memmove>
	_M_node = __new_node;
   d8846:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   d8848:	682b      	ldr	r3, [r5, #0]
   d884a:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d884c:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d8850:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d8852:	19eb      	adds	r3, r5, r7
	_M_node = __new_node;
   d8854:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d8856:	59eb      	ldr	r3, [r5, r7]
   d8858:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d885a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d885e:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8860:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d8864:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d8866:	f7fb fc16 	bl	d4096 <_Znwj>
   d886a:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d886c:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d886e:	b113      	cbz	r3, d8876 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x8a>
   d8870:	f8d8 2000 	ldr.w	r2, [r8]
   d8874:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d8876:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8878:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d887a:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d887c:	685b      	ldr	r3, [r3, #4]
   d887e:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8880:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8884:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d8886:	61a3      	str	r3, [r4, #24]
      }
   d8888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d888c:	4299      	cmp	r1, r3
   d888e:	d0da      	beq.n	d8846 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d8890:	1d38      	adds	r0, r7, #4
   d8892:	1a80      	subs	r0, r0, r2
   d8894:	4428      	add	r0, r5
   d8896:	e7d4      	b.n	d8842 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x56>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d8898:	f103 0902 	add.w	r9, r3, #2
   d889c:	2b01      	cmp	r3, #1
   d889e:	bf2c      	ite	cs
   d88a0:	4499      	addcs	r9, r3
   d88a2:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->max_size())
   d88a6:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   d88aa:	d301      	bcc.n	d88b0 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xc4>
	  std::__throw_bad_alloc();
   d88ac:	f006 fde0 	bl	df470 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d88b0:	ea4f 0089 	mov.w	r0, r9, lsl #2
   d88b4:	f7fb fbef 	bl	d4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   d88b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d88ba:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d88bc:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   d88c0:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d88c2:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   d88c4:	4291      	cmp	r1, r2
   d88c6:	4682      	mov	sl, r0
   d88c8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d88cc:	d003      	beq.n	d88d6 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d88ce:	1a52      	subs	r2, r2, r1
   d88d0:	4628      	mov	r0, r5
   d88d2:	f007 fb65 	bl	dffa0 <memmove>
	::operator delete(__p);
   d88d6:	6820      	ldr	r0, [r4, #0]
   d88d8:	f7fb fbe1 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d88dc:	e9c4 a900 	strd	sl, r9, [r4]
   d88e0:	e7b1      	b.n	d8846 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
   d88e2:	bf00      	nop
   d88e4:	000e2731 	.word	0x000e2731

000d88e8 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   d88e8:	b538      	push	{r3, r4, r5, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   d88ea:	6a05      	ldr	r5, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   d88ec:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   d88ee:	3d04      	subs	r5, #4
	if (this->_M_impl._M_finish._M_cur
   d88f0:	42aa      	cmp	r2, r5
      push_back(const value_type& __x)
   d88f2:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish._M_cur
   d88f4:	d006      	beq.n	d8904 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d88f6:	b10a      	cbz	r2, d88fc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
	    _Alloc_traits::construct(this->_M_impl,
   d88f8:	6809      	ldr	r1, [r1, #0]
   d88fa:	6011      	str	r1, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d88fc:	699a      	ldr	r2, [r3, #24]
   d88fe:	3204      	adds	r2, #4
   d8900:	619a      	str	r2, [r3, #24]
      }
   d8902:	bd38      	pop	{r3, r4, r5, pc}
	  _M_push_back_aux(__x);
   d8904:	f7ff ff72 	bl	d87ec <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>
      }
   d8908:	e7fb      	b.n	d8902 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1a>
	...

000d890c <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   d890c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   d8910:	68c3      	ldr	r3, [r0, #12]
   d8912:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   d8914:	b086      	sub	sp, #24
   d8916:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   d8918:	d808      	bhi.n	d892c <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   d891a:	4934      	ldr	r1, [pc, #208]	; (d89ec <_ZN14SequentialFile7scanDirEv+0xe0>)
   d891c:	4834      	ldr	r0, [pc, #208]	; (d89f0 <_ZN14SequentialFile7scanDirEv+0xe4>)
   d891e:	f7fc fddc 	bl	d54da <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d8922:	2600      	movs	r6, #0
}
   d8924:	4630      	mov	r0, r6
   d8926:	b006      	add	sp, #24
   d8928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   d892c:	6840      	ldr	r0, [r0, #4]
   d892e:	f7ff fe05 	bl	d853c <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   d8932:	4606      	mov	r6, r0
   d8934:	2800      	cmp	r0, #0
   d8936:	d0f4      	beq.n	d8922 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   d8938:	6963      	ldr	r3, [r4, #20]
   d893a:	6862      	ldr	r2, [r4, #4]
   d893c:	492d      	ldr	r1, [pc, #180]	; (d89f4 <_ZN14SequentialFile7scanDirEv+0xe8>)
   d893e:	482c      	ldr	r0, [pc, #176]	; (d89f0 <_ZN14SequentialFile7scanDirEv+0xe4>)
   d8940:	f7fc fdb4 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   d8944:	6860      	ldr	r0, [r4, #4]
   d8946:	f003 fb35 	bl	dbfb4 <opendir>
    if (!dir) {
   d894a:	4607      	mov	r7, r0
   d894c:	2800      	cmp	r0, #0
   d894e:	d0e8      	beq.n	d8922 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   d8950:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d8952:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d89f8 <_ZN14SequentialFile7scanDirEv+0xec>
   d8956:	f8df 8098 	ldr.w	r8, [pc, #152]	; d89f0 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   d895a:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   d895c:	4638      	mov	r0, r7
   d895e:	f003 fb31 	bl	dbfc4 <readdir>
        if (!ent) {
   d8962:	4605      	mov	r5, r0
   d8964:	2800      	cmp	r0, #0
   d8966:	d039      	beq.n	d89dc <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   d8968:	7a83      	ldrb	r3, [r0, #10]
   d896a:	2b08      	cmp	r3, #8
   d896c:	d1f6      	bne.n	d895c <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   d896e:	350b      	adds	r5, #11
   d8970:	6961      	ldr	r1, [r4, #20]
   d8972:	aa01      	add	r2, sp, #4
   d8974:	4628      	mov	r0, r5
   d8976:	f003 fd45 	bl	dc404 <sscanf>
   d897a:	2801      	cmp	r0, #1
   d897c:	d1ee      	bne.n	d895c <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   d897e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d8980:	b17b      	cbz	r3, d89a2 <_ZN14SequentialFile7scanDirEv+0x96>
   d8982:	4629      	mov	r1, r5
   d8984:	a802      	add	r0, sp, #8
   d8986:	f005 ffba 	bl	de8fe <_ZN6StringC1EPKc>
   d898a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d898e:	a802      	add	r0, sp, #8
   d8990:	f006 f8a2 	bl	dead8 <_ZNK6String8endsWithERKS_>
   d8994:	4682      	mov	sl, r0
   d8996:	a802      	add	r0, sp, #8
   d8998:	f005 ff66 	bl	de868 <_ZN6StringD1Ev>
   d899c:	f1ba 0f00 	cmp.w	sl, #0
   d89a0:	d0dc      	beq.n	d895c <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   d89a2:	6823      	ldr	r3, [r4, #0]
   d89a4:	4629      	mov	r1, r5
   d89a6:	689b      	ldr	r3, [r3, #8]
   d89a8:	4620      	mov	r0, r4
   d89aa:	4798      	blx	r3
   d89ac:	2800      	cmp	r0, #0
   d89ae:	d0d5      	beq.n	d895c <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   d89b0:	9a01      	ldr	r2, [sp, #4]
   d89b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d89b4:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   d89b6:	bfb8      	it	lt
   d89b8:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d89ba:	462b      	mov	r3, r5
   d89bc:	4649      	mov	r1, r9
   d89be:	4640      	mov	r0, r8
   d89c0:	f7fc fd74 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   d89c4:	4620      	mov	r0, r4
   d89c6:	f7ff fda9 	bl	d851c <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   d89ca:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d89ce:	a901      	add	r1, sp, #4
   d89d0:	f7ff ff8a 	bl	d88e8 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   d89d4:	4620      	mov	r0, r4
   d89d6:	f7ff fdad 	bl	d8534 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   d89da:	e7bf      	b.n	d895c <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   d89dc:	4638      	mov	r0, r7
   d89de:	f003 faf9 	bl	dbfd4 <closedir>
    scanDirCompleted = true;
   d89e2:	2301      	movs	r3, #1
   d89e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   d89e8:	e79c      	b.n	d8924 <_ZN14SequentialFile7scanDirEv+0x18>
   d89ea:	bf00      	nop
   d89ec:	000e2895 	.word	0x000e2895
   d89f0:	2003e4a0 	.word	0x2003e4a0
   d89f4:	000e28aa 	.word	0x000e28aa
   d89f8:	000e28c6 	.word	0x000e28c6

000d89fc <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   d89fc:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   d89fe:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   d8a02:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d8a04:	b90b      	cbnz	r3, d8a0a <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   d8a06:	f7ff ff81 	bl	d890c <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   d8a0a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d8a0c:	3001      	adds	r0, #1
   d8a0e:	63a0      	str	r0, [r4, #56]	; 0x38
}
   d8a10:	bd10      	pop	{r4, pc}
	...

000d8a14 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   d8a14:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   d8a16:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   d8a1a:	4604      	mov	r4, r0
   d8a1c:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   d8a1e:	b90b      	cbnz	r3, d8a24 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   d8a20:	f7ff ff74 	bl	d890c <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   d8a24:	4620      	mov	r0, r4
   d8a26:	f7ff fd79 	bl	d851c <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d8a2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   d8a2c:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d8a2e:	4293      	cmp	r3, r2
   d8a30:	d01e      	beq.n	d8a70 <_ZN14SequentialFile16getFileFromQueueEb+0x5c>
        fileNum = queue.front();
   d8a32:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   d8a34:	b12e      	cbz	r6, d8a42 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
	    != this->_M_impl._M_start._M_last - 1)
   d8a36:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d8a38:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d8a3a:	4293      	cmp	r3, r2
   d8a3c:	d00c      	beq.n	d8a58 <_ZN14SequentialFile16getFileFromQueueEb+0x44>
	    ++this->_M_impl._M_start._M_cur;
   d8a3e:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d8a40:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   d8a42:	4620      	mov	r0, r4
   d8a44:	f7ff fd76 	bl	d8534 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   d8a48:	b125      	cbz	r5, d8a54 <_ZN14SequentialFile16getFileFromQueueEb+0x40>
        _log.trace("getFileFromQueue returned %d", fileNum);
   d8a4a:	490a      	ldr	r1, [pc, #40]	; (d8a74 <_ZN14SequentialFile16getFileFromQueueEb+0x60>)
   d8a4c:	480a      	ldr	r0, [pc, #40]	; (d8a78 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   d8a4e:	462a      	mov	r2, r5
   d8a50:	f7fc fd2c 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
}
   d8a54:	4628      	mov	r0, r5
   d8a56:	bd70      	pop	{r4, r5, r6, pc}
	::operator delete(__p);
   d8a58:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d8a5a:	f7fb fb20 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d8a5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d8a60:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d8a62:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   d8a64:	685b      	ldr	r3, [r3, #4]
   d8a66:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8a68:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8a6c:	6522      	str	r2, [r4, #80]	; 0x50
   d8a6e:	e7e7      	b.n	d8a40 <_ZN14SequentialFile16getFileFromQueueEb+0x2c>
    int fileNum = 0;
   d8a70:	2500      	movs	r5, #0
   d8a72:	e7e6      	b.n	d8a42 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
   d8a74:	000e28dc 	.word	0x000e28dc
   d8a78:	2003e4a0 	.word	0x2003e4a0

000d8a7c <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   d8a7c:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   d8a7e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   d8a82:	9101      	str	r1, [sp, #4]
   d8a84:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d8a86:	b90b      	cbnz	r3, d8a8c <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   d8a88:	f7ff ff40 	bl	d890c <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   d8a8c:	9b01      	ldr	r3, [sp, #4]
   d8a8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d8a90:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   d8a92:	bfb8      	it	lt
   d8a94:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   d8a96:	4620      	mov	r0, r4
   d8a98:	f7ff fd40 	bl	d851c <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   d8a9c:	a901      	add	r1, sp, #4
   d8a9e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d8aa2:	f7ff ff21 	bl	d88e8 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   d8aa6:	4620      	mov	r0, r4
   d8aa8:	f7ff fd44 	bl	d8534 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d8aac:	b002      	add	sp, #8
   d8aae:	bd10      	pop	{r4, pc}

000d8ab0 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   d8ab0:	b538      	push	{r3, r4, r5, lr}
   d8ab2:	4604      	mov	r4, r0
    queueMutexLock();
   d8ab4:	f7ff fd32 	bl	d851c <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8ab8:	f104 0148 	add.w	r1, r4, #72	; 0x48
   d8abc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d8ac0:	f7ff fe82 	bl	d87c8 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
   d8ac4:	4605      	mov	r5, r0
    queueMutexUnlock();
   d8ac6:	4620      	mov	r0, r4
   d8ac8:	f7ff fd34 	bl	d8534 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d8acc:	4628      	mov	r0, r5
   d8ace:	bd38      	pop	{r3, r4, r5, pc}

000d8ad0 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   d8ad0:	4b01      	ldr	r3, [pc, #4]	; (d8ad8 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   d8ad2:	4a02      	ldr	r2, [pc, #8]	; (d8adc <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   d8ad4:	601a      	str	r2, [r3, #0]
}
   d8ad6:	4770      	bx	lr
   d8ad8:	2003e4a0 	.word	0x2003e4a0
   d8adc:	000e21db 	.word	0x000e21db

000d8ae0 <_ZN11SleepHelper18PersistentDataBase4saveEv>:
        virtual void save() {};
   d8ae0:	4770      	bx	lr

000d8ae2 <_ZN11SleepHelper18PersistentDataBase11saveOrDeferEv>:
        virtual void saveOrDefer() {}
   d8ae2:	4770      	bx	lr

000d8ae4 <_ZN11SleepHelper18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void SleepHelper::PersistentDataBase::setup() {
    // Load data at boot
    load();
   d8ae4:	6803      	ldr	r3, [r0, #0]
   d8ae6:	685b      	ldr	r3, [r3, #4]
   d8ae8:	4718      	bx	r3

000d8aea <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRNS1_16AppCallbackStateEmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d8aea:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8aec:	bf08      	it	eq
   d8aee:	6001      	streq	r1, [r0, #0]
	}
   d8af0:	2000      	movs	r0, #0
   d8af2:	4770      	bx	lr

000d8af4 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d8af4:	2a02      	cmp	r2, #2
   d8af6:	d006      	beq.n	d8b06 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d8af8:	2a03      	cmp	r2, #3
   d8afa:	d002      	beq.n	d8b02 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d8afc:	2a01      	cmp	r2, #1
   d8afe:	d100      	bne.n	d8b02 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b00:	6001      	str	r1, [r0, #0]
	}
   d8b02:	2000      	movs	r0, #0
   d8b04:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d8b06:	680b      	ldr	r3, [r1, #0]
   d8b08:	6003      	str	r3, [r0, #0]
	}
   d8b0a:	e7fa      	b.n	d8b02 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d8b0c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d8b0c:	2a02      	cmp	r2, #2
   d8b0e:	d006      	beq.n	d8b1e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   d8b10:	2a03      	cmp	r2, #3
   d8b12:	d002      	beq.n	d8b1a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d8b14:	2a01      	cmp	r2, #1
   d8b16:	d100      	bne.n	d8b1a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b18:	6001      	str	r1, [r0, #0]
	}
   d8b1a:	2000      	movs	r0, #0
   d8b1c:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d8b1e:	680b      	ldr	r3, [r1, #0]
   d8b20:	6003      	str	r3, [r0, #0]
	}
   d8b22:	e7fa      	b.n	d8b1a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

000d8b24 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d8b24:	2a02      	cmp	r2, #2
   d8b26:	d006      	beq.n	d8b36 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d8b28:	2a03      	cmp	r2, #3
   d8b2a:	d002      	beq.n	d8b32 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d8b2c:	2a01      	cmp	r2, #1
   d8b2e:	d100      	bne.n	d8b32 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b30:	6001      	str	r1, [r0, #0]
	}
   d8b32:	2000      	movs	r0, #0
   d8b34:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d8b36:	680b      	ldr	r3, [r1, #0]
   d8b38:	6003      	str	r3, [r0, #0]
	}
   d8b3a:	e7fa      	b.n	d8b32 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d8b3c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d8b3c:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b3e:	bf08      	it	eq
   d8b40:	6001      	streq	r1, [r0, #0]
	}
   d8b42:	2000      	movs	r0, #0
   d8b44:	4770      	bx	lr

000d8b46 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d8b46:	2a02      	cmp	r2, #2
   d8b48:	d006      	beq.n	d8b58 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d8b4a:	2a03      	cmp	r2, #3
   d8b4c:	d002      	beq.n	d8b54 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d8b4e:	2a01      	cmp	r2, #1
   d8b50:	d100      	bne.n	d8b54 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b52:	6001      	str	r1, [r0, #0]
	}
   d8b54:	2000      	movs	r0, #0
   d8b56:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d8b58:	680b      	ldr	r3, [r1, #0]
   d8b5a:	6003      	str	r3, [r0, #0]
	}
   d8b5c:	e7fa      	b.n	d8b54 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d8b5e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d8b5e:	2a02      	cmp	r2, #2
   d8b60:	d006      	beq.n	d8b70 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d8b62:	2a03      	cmp	r2, #3
   d8b64:	d002      	beq.n	d8b6c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d8b66:	2a01      	cmp	r2, #1
   d8b68:	d100      	bne.n	d8b6c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b6a:	6001      	str	r1, [r0, #0]
	}
   d8b6c:	2000      	movs	r0, #0
   d8b6e:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d8b70:	680b      	ldr	r3, [r1, #0]
   d8b72:	6003      	str	r3, [r0, #0]
	}
   d8b74:	e7fa      	b.n	d8b6c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d8b76 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d8b76:	2a02      	cmp	r2, #2
   d8b78:	d006      	beq.n	d8b88 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   d8b7a:	2a03      	cmp	r2, #3
   d8b7c:	d002      	beq.n	d8b84 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d8b7e:	2a01      	cmp	r2, #1
   d8b80:	d100      	bne.n	d8b84 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b82:	6001      	str	r1, [r0, #0]
	}
   d8b84:	2000      	movs	r0, #0
   d8b86:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d8b88:	680b      	ldr	r3, [r1, #0]
   d8b8a:	6003      	str	r3, [r0, #0]
	}
   d8b8c:	e7fa      	b.n	d8b84 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

000d8b8e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d8b8e:	2a02      	cmp	r2, #2
   d8b90:	d006      	beq.n	d8ba0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   d8b92:	2a03      	cmp	r2, #3
   d8b94:	d002      	beq.n	d8b9c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d8b96:	2a01      	cmp	r2, #1
   d8b98:	d100      	bne.n	d8b9c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b9a:	6001      	str	r1, [r0, #0]
	}
   d8b9c:	2000      	movs	r0, #0
   d8b9e:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d8ba0:	680b      	ldr	r3, [r1, #0]
   d8ba2:	6003      	str	r3, [r0, #0]
	}
   d8ba4:	e7fa      	b.n	d8b9c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

000d8ba6 <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d8ba6:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d8ba8:	4603      	mov	r3, r0
	switch (__op)
   d8baa:	d102      	bne.n	d8bb2 <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d8bac:	6001      	str	r1, [r0, #0]
      }
   d8bae:	2000      	movs	r0, #0
   d8bb0:	4770      	bx	lr
	  switch (__op)
   d8bb2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d8bb4:	bf04      	itt	eq
   d8bb6:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d8bba:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d8bbe:	e7f6      	b.n	d8bae <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d8bc0 <_ZN16JsonParserStaticILj622ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   d8bc0:	b510      	push	{r4, lr}
   d8bc2:	4b03      	ldr	r3, [pc, #12]	; (d8bd0 <_ZN16JsonParserStaticILj622ELj50EED1Ev+0x10>)
   d8bc4:	6003      	str	r3, [r0, #0]
   d8bc6:	4604      	mov	r4, r0
   d8bc8:	f7fd fb74 	bl	d62b4 <_ZN10JsonParserD1Ev>
   d8bcc:	4620      	mov	r0, r4
   d8bce:	bd10      	pop	{r4, pc}
   d8bd0:	000e2b88 	.word	0x000e2b88

000d8bd4 <_ZN16JsonParserStaticILj622ELj50EED0Ev>:
   d8bd4:	b510      	push	{r4, lr}
   d8bd6:	4604      	mov	r4, r0
   d8bd8:	f7ff fff2 	bl	d8bc0 <_ZN16JsonParserStaticILj622ELj50EED1Ev>
   d8bdc:	4620      	mov	r0, r4
   d8bde:	f240 51bc 	movw	r1, #1468	; 0x5bc
   d8be2:	f006 fc3f 	bl	df464 <_ZdlPvj>
   d8be6:	4620      	mov	r0, r4
   d8be8:	bd10      	pop	{r4, pc}

000d8bea <_ZN11SleepHelper18PersistentDataFile11saveOrDeferEv>:
        virtual void saveOrDefer() {
   d8bea:	b510      	push	{r4, lr}
            if (saveDelayMs) {
   d8bec:	69c3      	ldr	r3, [r0, #28]
        virtual void saveOrDefer() {
   d8bee:	4604      	mov	r4, r0
            if (saveDelayMs) {
   d8bf0:	b11b      	cbz	r3, d8bfa <_ZN11SleepHelper18PersistentDataFile11saveOrDeferEv+0x10>
   d8bf2:	f003 f8af 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
                lastUpdate = millis();
   d8bf6:	61a0      	str	r0, [r4, #24]
        }
   d8bf8:	bd10      	pop	{r4, pc}
                save();
   d8bfa:	6803      	ldr	r3, [r0, #0]
        }
   d8bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                save();
   d8c00:	689b      	ldr	r3, [r3, #8]
   d8c02:	4718      	bx	r3

000d8c04 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiESt8functionIFbS2_S3_EEE9_M_invokeERKSt9_Any_dataS2_S3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8c04:	b510      	push	{r4, lr}
	    return __source._M_access<_Functor*>();
   d8c06:	6800      	ldr	r0, [r0, #0]
      if (_M_empty())
   d8c08:	6883      	ldr	r3, [r0, #8]
   d8c0a:	b90b      	cbnz	r3, d8c10 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiESt8functionIFbS2_S3_EEE9_M_invokeERKSt9_Any_dataS2_S3_+0xc>
	__throw_bad_function_call();
   d8c0c:	f006 fc36 	bl	df47c <_ZSt25__throw_bad_function_callv>
      }
   d8c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8c14:	68c3      	ldr	r3, [r0, #12]
   d8c16:	4718      	bx	r3

000d8c18 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper5setupEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8c18:	460b      	mov	r3, r1
        writer.value(resetReason);
   d8c1a:	6801      	ldr	r1, [r0, #0]
   d8c1c:	4618      	mov	r0, r3
   d8c1e:	f004 bc1b 	b.w	dd458 <_ZN5spark10JSONWriter5valueEi>

000d8c22 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E_E9_M_invokeERKSt9_Any_dataS2_S3_>:
   d8c22:	460b      	mov	r3, r1
        writer.value((int)elapsedMs);
   d8c24:	6801      	ldr	r1, [r0, #0]
   d8c26:	4618      	mov	r0, r3
   d8c28:	f004 bc16 	b.w	dd458 <_ZN5spark10JSONWriter5valueEi>

000d8c2c <_ZN11SleepHelper18PersistentDataBase10initializeEv>:
        isValid = true;
    }   
    return isValid;
}

void SleepHelper::PersistentDataBase::initialize() {
   d8c2c:	b510      	push	{r4, lr}
   d8c2e:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   d8c30:	68c2      	ldr	r2, [r0, #12]
   d8c32:	6880      	ldr	r0, [r0, #8]
   d8c34:	2100      	movs	r1, #0
   d8c36:	f007 f9cd 	bl	dffd4 <memset>
    savedDataHeader->magic = savedDataMagic;
   d8c3a:	68a3      	ldr	r3, [r4, #8]
   d8c3c:	6922      	ldr	r2, [r4, #16]
   d8c3e:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   d8c40:	68a3      	ldr	r3, [r4, #8]
   d8c42:	8aa2      	ldrh	r2, [r4, #20]
   d8c44:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   d8c46:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   d8c4a:	80da      	strh	r2, [r3, #6]
}
   d8c4c:	bd10      	pop	{r4, pc}

000d8c4e <_ZN11SleepHelper18PersistentDataBase8validateEj>:
    if (dataSize >= 12 && 
   d8c4e:	290b      	cmp	r1, #11
bool SleepHelper::PersistentDataBase::validate(size_t dataSize) {
   d8c50:	b510      	push	{r4, lr}
    if (dataSize >= 12 && 
   d8c52:	d91a      	bls.n	d8c8a <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        savedDataHeader->magic == savedDataMagic && 
   d8c54:	6883      	ldr	r3, [r0, #8]
    if (dataSize >= 12 && 
   d8c56:	6902      	ldr	r2, [r0, #16]
   d8c58:	681c      	ldr	r4, [r3, #0]
   d8c5a:	4294      	cmp	r4, r2
   d8c5c:	d115      	bne.n	d8c8a <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        savedDataHeader->magic == savedDataMagic && 
   d8c5e:	889c      	ldrh	r4, [r3, #4]
   d8c60:	8a82      	ldrh	r2, [r0, #20]
   d8c62:	4294      	cmp	r4, r2
   d8c64:	d111      	bne.n	d8c8a <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        savedDataHeader->version == savedDataVersion &&
   d8c66:	88dc      	ldrh	r4, [r3, #6]
   d8c68:	b28a      	uxth	r2, r1
   d8c6a:	4294      	cmp	r4, r2
   d8c6c:	d80d      	bhi.n	d8c8a <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        if ((size_t)dataSize < savedDataSize) {
   d8c6e:	68c2      	ldr	r2, [r0, #12]
   d8c70:	4291      	cmp	r1, r2
   d8c72:	d205      	bcs.n	d8c80 <_ZN11SleepHelper18PersistentDataBase8validateEj+0x32>
                p[ii] = 0;
   d8c74:	2400      	movs	r4, #0
   d8c76:	545c      	strb	r4, [r3, r1]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   d8c78:	68c2      	ldr	r2, [r0, #12]
   d8c7a:	3101      	adds	r1, #1
   d8c7c:	428a      	cmp	r2, r1
   d8c7e:	d8fa      	bhi.n	d8c76 <_ZN11SleepHelper18PersistentDataBase8validateEj+0x28>
        savedDataHeader->size = (uint16_t) savedDataSize;
   d8c80:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
        isValid = true;
   d8c84:	2001      	movs	r0, #1
        savedDataHeader->size = (uint16_t) savedDataSize;
   d8c86:	80da      	strh	r2, [r3, #6]
}
   d8c88:	bd10      	pop	{r4, pc}
    bool isValid = false;
   d8c8a:	2000      	movs	r0, #0
   d8c8c:	e7fc      	b.n	d8c88 <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3a>

000d8c8e <_ZNSt17_Function_handlerIFbvEZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8c8e:	b508      	push	{r3, lr}
	return (*_Base::_M_get_pointer(__functor))(
   d8c90:	6800      	ldr	r0, [r0, #0]
    // Call parent class
    SleepHelper::PersistentDataBase::setup();

    SleepHelper::instance().withLoopFunction([this]() {
        // Handle deferred save
        flush(false);
   d8c92:	6803      	ldr	r3, [r0, #0]
   d8c94:	2100      	movs	r1, #0
   d8c96:	699b      	ldr	r3, [r3, #24]
   d8c98:	4798      	blx	r3
      }
   d8c9a:	2001      	movs	r0, #1
   d8c9c:	bd08      	pop	{r3, pc}

000d8c9e <_ZNSt17_Function_handlerIFbbEZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8c9e:	b508      	push	{r3, lr}
	return (*_Base::_M_get_pointer(__functor))(
   d8ca0:	6800      	ldr	r0, [r0, #0]
        return true;
    });
    SleepHelper::instance().withSleepOrResetFunction([this](bool) {
        // Make sure data is saved before sleep or reset
        flush(true);
   d8ca2:	6803      	ldr	r3, [r0, #0]
   d8ca4:	2101      	movs	r1, #1
   d8ca6:	699b      	ldr	r3, [r3, #24]
   d8ca8:	4798      	blx	r3
      }
   d8caa:	2001      	movs	r0, #1
   d8cac:	bd08      	pop	{r3, pc}

000d8cae <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_5setupEvEUlS2_mE_E9_M_invokeERKSt9_Any_dataS2_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8cae:	b508      	push	{r3, lr}
        return !Time.isValid();
   d8cb0:	f006 f922 	bl	deef8 <_ZN9TimeClass7isValidEv>
   d8cb4:	f080 0001 	eor.w	r0, r0, #1
      }
   d8cb8:	b2c0      	uxtb	r0, r0
   d8cba:	bd08      	pop	{r3, pc}

000d8cbc <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper21stateHandlerSleepDoneEvEUlS2_S3_E_E9_M_invokeERKSt9_Any_dataS2_S3_>:
        writer.value(wakeReasonInt);
   d8cbc:	6802      	ldr	r2, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8cbe:	460b      	mov	r3, r1
   d8cc0:	4618      	mov	r0, r3
   d8cc2:	f8d2 177c 	ldr.w	r1, [r2, #1916]	; 0x77c
   d8cc6:	f004 bbc7 	b.w	dd458 <_ZN5spark10JSONWriter5valueEi>

000d8cca <_ZN11SleepHelper18PersistentDataFile5flushEb>:
            close(fd);
        }
    }
}

void SleepHelper::PersistentDataFile::flush(bool force) {
   d8cca:	b510      	push	{r4, lr}
    if (lastUpdate) {
   d8ccc:	6983      	ldr	r3, [r0, #24]
void SleepHelper::PersistentDataFile::flush(bool force) {
   d8cce:	4604      	mov	r4, r0
    if (lastUpdate) {
   d8cd0:	b133      	cbz	r3, d8ce0 <_ZN11SleepHelper18PersistentDataFile5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   d8cd2:	b131      	cbz	r1, d8ce2 <_ZN11SleepHelper18PersistentDataFile5flushEb+0x18>
            save();
   d8cd4:	6823      	ldr	r3, [r4, #0]
   d8cd6:	4620      	mov	r0, r4
   d8cd8:	689b      	ldr	r3, [r3, #8]
   d8cda:	4798      	blx	r3
            lastUpdate = 0;
   d8cdc:	2300      	movs	r3, #0
   d8cde:	61a3      	str	r3, [r4, #24]
        }
    }
}
   d8ce0:	bd10      	pop	{r4, pc}
   d8ce2:	f003 f837 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   d8ce6:	69a3      	ldr	r3, [r4, #24]
   d8ce8:	1ac0      	subs	r0, r0, r3
   d8cea:	69e3      	ldr	r3, [r4, #28]
   d8cec:	4298      	cmp	r0, r3
   d8cee:	d2f1      	bcs.n	d8cd4 <_ZN11SleepHelper18PersistentDataFile5flushEb+0xa>
   d8cf0:	e7f6      	b.n	d8ce0 <_ZN11SleepHelper18PersistentDataFile5flushEb+0x16>
	...

000d8cf4 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_>:
   d8cf4:	b530      	push	{r4, r5, lr}
   d8cf6:	b087      	sub	sp, #28
   d8cf8:	460d      	mov	r5, r1
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   d8cfa:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d8cfc:	a902      	add	r1, sp, #8
   d8cfe:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   d8d00:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   d8d02:	f003 fa3f 	bl	dc184 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d8d06:	bb68      	cbnz	r0, d8d64 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x70>
        return ret;
    }
    return get(src, val);
   d8d08:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   d8d0a:	b10c      	cbz	r4, d8d10 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x1c>
   d8d0c:	6923      	ldr	r3, [r4, #16]
   d8d0e:	b923      	cbnz	r3, d8d1a <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x26>
   d8d10:	4a15      	ldr	r2, [pc, #84]	; (d8d68 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x74>)
   d8d12:	2100      	movs	r1, #0
   d8d14:	200a      	movs	r0, #10
   d8d16:	f003 f9f5 	bl	dc104 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d8d1a:	2300      	movs	r3, #0
   d8d1c:	f8ad 300e 	strh.w	r3, [sp, #14]
   d8d20:	230c      	movs	r3, #12
   d8d22:	f8ad 300c 	strh.w	r3, [sp, #12]
   d8d26:	ab01      	add	r3, sp, #4
   d8d28:	9304      	str	r3, [sp, #16]
   d8d2a:	2304      	movs	r3, #4
   d8d2c:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d8d2e:	aa03      	add	r2, sp, #12
   d8d30:	6923      	ldr	r3, [r4, #16]
   d8d32:	2101      	movs	r1, #1
   d8d34:	4620      	mov	r0, r4
   d8d36:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d8d38:	b9a0      	cbnz	r0, d8d64 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x70>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d8d3a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d8d3e:	ee07 3a90 	vmov	s15, r3
   d8d42:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
        if (soc > 0) {
   d8d46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d8d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8d4e:	dd09      	ble.n	d8d64 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x70>
            writer.value(soc, 1);
   d8d50:	ee17 0a90 	vmov	r0, s15
   d8d54:	f006 fd80 	bl	df858 <__aeabi_f2d>
   d8d58:	ec41 0b10 	vmov	d0, r0, r1
   d8d5c:	2101      	movs	r1, #1
   d8d5e:	4628      	mov	r0, r5
   d8d60:	f004 fb9e 	bl	dd4a0 <_ZN5spark10JSONWriter5valueEdi>
      }
   d8d64:	b007      	add	sp, #28
   d8d66:	bd30      	pop	{r4, r5, pc}
   d8d68:	000dbd45 	.word	0x000dbd45

000d8d6c <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8d6c:	b410      	push	{r4}
   d8d6e:	6842      	ldr	r2, [r0, #4]
   d8d70:	4603      	mov	r3, r0
   d8d72:	1054      	asrs	r4, r2, #1
   d8d74:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d8d78:	07d2      	lsls	r2, r2, #31
   d8d7a:	bf48      	it	mi
   d8d7c:	590a      	ldrmi	r2, [r1, r4]
   d8d7e:	681b      	ldr	r3, [r3, #0]
      }
   d8d80:	f85d 4b04 	ldr.w	r4, [sp], #4
   d8d84:	bf48      	it	mi
   d8d86:	58d3      	ldrmi	r3, [r2, r3]
   d8d88:	4718      	bx	r3

000d8d8a <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>:
	if (__n > this->max_size())
   d8d8a:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   d8d8e:	b508      	push	{r3, lr}
	if (__n > this->max_size())
   d8d90:	d301      	bcc.n	d8d96 <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0+0xc>
	  std::__throw_bad_alloc();
   d8d92:	f006 fb6d 	bl	df470 <_ZSt17__throw_bad_allocv>
      }
   d8d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8d9a:	0100      	lsls	r0, r0, #4
   d8d9c:	f7fb b97b 	b.w	d4096 <_Znwj>

000d8da0 <_ZN11SleepHelper23stateHandlerPublishWaitEv>:
   d8da0:	4770      	bx	lr
	...

000d8da4 <_ZN11SleepHelper14PersistentDataD1Ev>:
        virtual ~PersistentData() {};
   d8da4:	b510      	push	{r4, lr}
    class PersistentDataFile : public PersistentDataBase {
   d8da6:	4b07      	ldr	r3, [pc, #28]	; (d8dc4 <_ZN11SleepHelper14PersistentDataD1Ev+0x20>)
        virtual ~PersistentData() {};
   d8da8:	4604      	mov	r4, r0
    class PersistentDataFile : public PersistentDataBase {
   d8daa:	f840 3b20 	str.w	r3, [r0], #32
   d8dae:	f005 fd5b 	bl	de868 <_ZN6StringD1Ev>
            if (handle_) {
   d8db2:	6860      	ldr	r0, [r4, #4]
    class PersistentDataBase : public SleepHelperRecursiveMutex {
   d8db4:	4b04      	ldr	r3, [pc, #16]	; (d8dc8 <_ZN11SleepHelper14PersistentDataD1Ev+0x24>)
   d8db6:	6023      	str	r3, [r4, #0]
            if (handle_) {
   d8db8:	b108      	cbz	r0, d8dbe <_ZN11SleepHelper14PersistentDataD1Ev+0x1a>
                os_mutex_recursive_destroy(handle_);
   d8dba:	f002 ff83 	bl	dbcc4 <os_mutex_recursive_destroy>
        virtual ~PersistentData() {};
   d8dbe:	4620      	mov	r0, r4
   d8dc0:	bd10      	pop	{r4, pc}
   d8dc2:	bf00      	nop
   d8dc4:	000e2c04 	.word	0x000e2c04
   d8dc8:	000e2be4 	.word	0x000e2be4

000d8dcc <_ZN11SleepHelper14PersistentDataD0Ev>:
   d8dcc:	b510      	push	{r4, lr}
   d8dce:	4604      	mov	r4, r0
   d8dd0:	f7ff ffe8 	bl	d8da4 <_ZN11SleepHelper14PersistentDataD1Ev>
   d8dd4:	4620      	mov	r0, r4
   d8dd6:	2150      	movs	r1, #80	; 0x50
   d8dd8:	f006 fb44 	bl	df464 <_ZdlPvj>
   d8ddc:	4620      	mov	r0, r4
   d8dde:	bd10      	pop	{r4, pc}

000d8de0 <_ZN11SleepHelper12SettingsFileD1Ev>:
        virtual ~SettingsFile() {};
   d8de0:	b570      	push	{r4, r5, r6, lr}
   d8de2:	4b10      	ldr	r3, [pc, #64]	; (d8e24 <_ZN11SleepHelper12SettingsFileD1Ev+0x44>)
   d8de4:	6003      	str	r3, [r0, #0]
   d8de6:	4604      	mov	r4, r0
   d8de8:	f500 60ba 	add.w	r0, r0, #1488	; 0x5d0
   d8dec:	f005 fd3c 	bl	de868 <_ZN6StringD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d8df0:	f8d4 55c4 	ldr.w	r5, [r4, #1476]	; 0x5c4
   d8df4:	f8d4 65c8 	ldr.w	r6, [r4, #1480]	; 0x5c8
   d8df8:	42ae      	cmp	r6, r5
   d8dfa:	d004      	beq.n	d8e06 <_ZN11SleepHelper12SettingsFileD1Ev+0x26>
    class function<_Res(_ArgTypes...)>
   d8dfc:	4628      	mov	r0, r5
   d8dfe:	f7fb fa73 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d8e02:	3510      	adds	r5, #16
   d8e04:	e7f8      	b.n	d8df8 <_ZN11SleepHelper12SettingsFileD1Ev+0x18>
	_M_deallocate(_M_impl._M_start,
   d8e06:	f8d4 05c4 	ldr.w	r0, [r4, #1476]	; 0x5c4
	if (__p)
   d8e0a:	b108      	cbz	r0, d8e10 <_ZN11SleepHelper12SettingsFileD1Ev+0x30>
	::operator delete(__p);
   d8e0c:	f7fb f947 	bl	d409e <_ZdlPv>
   d8e10:	f104 0008 	add.w	r0, r4, #8
   d8e14:	f7ff fed4 	bl	d8bc0 <_ZN16JsonParserStaticILj622ELj50EED1Ev>
            if (handle_) {
   d8e18:	6860      	ldr	r0, [r4, #4]
   d8e1a:	b108      	cbz	r0, d8e20 <_ZN11SleepHelper12SettingsFileD1Ev+0x40>
                os_mutex_recursive_destroy(handle_);
   d8e1c:	f002 ff52 	bl	dbcc4 <os_mutex_recursive_destroy>
        virtual ~SettingsFile() {};
   d8e20:	4620      	mov	r0, r4
   d8e22:	bd70      	pop	{r4, r5, r6, pc}
   d8e24:	000e2b98 	.word	0x000e2b98

000d8e28 <_ZN11SleepHelper12SettingsFileD0Ev>:
   d8e28:	b510      	push	{r4, lr}
   d8e2a:	4604      	mov	r4, r0
   d8e2c:	f7ff ffd8 	bl	d8de0 <_ZN11SleepHelper12SettingsFileD1Ev>
   d8e30:	4620      	mov	r0, r4
   d8e32:	f240 51e4 	movw	r1, #1508	; 0x5e4
   d8e36:	f006 fb15 	bl	df464 <_ZdlPvj>
   d8e3a:	4620      	mov	r0, r4
   d8e3c:	bd10      	pop	{r4, pc}
	...

000d8e40 <_ZN8particle24SystemSleepConfigurationC1Ev>:
};

class SystemSleepConfiguration: protected SystemSleepConfigurationHelper {
public:
    // Constructor
    SystemSleepConfiguration()
   d8e40:	b510      	push	{r4, lr}
   d8e42:	4604      	mov	r4, r0
            : SystemSleepConfigurationHelper(&config_),
   d8e44:	3004      	adds	r0, #4
        : config_(config) {
   d8e46:	6020      	str	r0, [r4, #0]
              config_(),
              valid_(true) {
   d8e48:	2210      	movs	r2, #16
   d8e4a:	2100      	movs	r1, #0
   d8e4c:	f007 f8c2 	bl	dffd4 <memset>
   d8e50:	2301      	movs	r3, #1
   d8e52:	7523      	strb	r3, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d8e54:	4b02      	ldr	r3, [pc, #8]	; (d8e60 <_ZN8particle24SystemSleepConfigurationC1Ev+0x20>)
   d8e56:	6063      	str	r3, [r4, #4]
        config_.version = HAL_SLEEP_VERSION;
        config_.mode = HAL_SLEEP_MODE_NONE;
   d8e58:	2300      	movs	r3, #0
   d8e5a:	7223      	strb	r3, [r4, #8]
        config_.flags = 0;
        config_.wakeup_sources = nullptr;
    }
   d8e5c:	4620      	mov	r0, r4
   d8e5e:	bd10      	pop	{r4, pc}
   d8e60:	00030010 	.word	0x00030010

000d8e64 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d8e64:	b538      	push	{r3, r4, r5, lr}
   d8e66:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d8e68:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d8e6a:	b128      	cbz	r0, d8e78 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d8e6c:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d8e6e:	210c      	movs	r1, #12
   d8e70:	f006 faf8 	bl	df464 <_ZdlPvj>
            wakeupSource = next;
   d8e74:	4628      	mov	r0, r5
        while (wakeupSource) {
   d8e76:	e7f8      	b.n	d8e6a <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d8e78:	4620      	mov	r0, r4
   d8e7a:	bd38      	pop	{r3, r4, r5, pc}

000d8e7c <_ZN8particle24SystemSleepConfiguration8durationEm>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d8e7c:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d8e7e:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d8e80:	4605      	mov	r5, r0
   d8e82:	460e      	mov	r6, r1
        if (valid_) {
   d8e84:	b1cb      	cbz	r3, d8eba <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d8e86:	6803      	ldr	r3, [r0, #0]
   d8e88:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d8e8a:	b123      	cbz	r3, d8e96 <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d8e8c:	889a      	ldrh	r2, [r3, #4]
   d8e8e:	2a04      	cmp	r2, #4
   d8e90:	d017      	beq.n	d8ec2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d8e92:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d8e94:	e7f9      	b.n	d8e8a <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d8e96:	490c      	ldr	r1, [pc, #48]	; (d8ec8 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d8e98:	2010      	movs	r0, #16
   d8e9a:	f006 fae5 	bl	df468 <_ZnwjRKSt9nothrow_t>
   d8e9e:	4604      	mov	r4, r0
   d8ea0:	b168      	cbz	r0, d8ebe <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d8ea2:	2210      	movs	r2, #16
   d8ea4:	2100      	movs	r1, #0
   d8ea6:	f007 f895 	bl	dffd4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d8eaa:	4b08      	ldr	r3, [pc, #32]	; (d8ecc <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d8eac:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d8eae:	2304      	movs	r3, #4
   d8eb0:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d8eb2:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d8eb4:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d8eb6:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d8eba:	4628      	mov	r0, r5
   d8ebc:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d8ebe:	7528      	strb	r0, [r5, #20]
                return *this;
   d8ec0:	e7fb      	b.n	d8eba <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d8ec2:	60de      	str	r6, [r3, #12]
                return *this;
   d8ec4:	e7f9      	b.n	d8eba <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d8ec6:	bf00      	nop
   d8ec8:	000e2f20 	.word	0x000e2f20
   d8ecc:	00030010 	.word	0x00030010

000d8ed0 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
   d8ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d8ed2:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
   d8ed4:	4605      	mov	r5, r0
   d8ed6:	460f      	mov	r7, r1
   d8ed8:	4616      	mov	r6, r2
        if (valid_) {
   d8eda:	b1b3      	cbz	r3, d8f0a <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d8edc:	6803      	ldr	r3, [r0, #0]
   d8ede:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d8ee0:	b1ab      	cbz	r3, d8f0e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
            if (start->type == type) {
   d8ee2:	889a      	ldrh	r2, [r3, #4]
   d8ee4:	2a0e      	cmp	r2, #14
   d8ee6:	d006      	beq.n	d8ef6 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x26>
            start = start->next;
   d8ee8:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d8eea:	e7f9      	b.n	d8ee0 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x10>
                    if (networkWakeup->flags != flags.value()) {
                        networkWakeup->flags |= flags.value();
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   d8eec:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d8eee:	b173      	cbz	r3, d8f0e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
            if (start->type == type) {
   d8ef0:	889a      	ldrh	r2, [r3, #4]
   d8ef2:	2a0e      	cmp	r2, #14
   d8ef4:	d1fa      	bne.n	d8eec <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x1c>
            while (wakeup) {
   d8ef6:	b153      	cbz	r3, d8f0e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
                if (networkWakeup->index == netif) {
   d8ef8:	7b1a      	ldrb	r2, [r3, #12]
   d8efa:	42ba      	cmp	r2, r7
   d8efc:	d1f6      	bne.n	d8eec <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x1c>
                    if (networkWakeup->flags != flags.value()) {
   d8efe:	89da      	ldrh	r2, [r3, #14]
   d8f00:	8831      	ldrh	r1, [r6, #0]
   d8f02:	428a      	cmp	r2, r1
   d8f04:	d001      	beq.n	d8f0a <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
                        networkWakeup->flags |= flags.value();
   d8f06:	430a      	orrs	r2, r1
   d8f08:	81da      	strh	r2, [r3, #14]
            wakeupSource->index = static_cast<network_interface_index>(netif);
            wakeupSource->flags = flags.value();
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d8f0a:	4628      	mov	r0, r5
   d8f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   d8f0e:	490b      	ldr	r1, [pc, #44]	; (d8f3c <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x6c>)
   d8f10:	2014      	movs	r0, #20
   d8f12:	f006 faa9 	bl	df468 <_ZnwjRKSt9nothrow_t>
   d8f16:	4604      	mov	r4, r0
   d8f18:	b170      	cbz	r0, d8f38 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x68>
   d8f1a:	2214      	movs	r2, #20
   d8f1c:	2100      	movs	r1, #0
   d8f1e:	f007 f859 	bl	dffd4 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d8f22:	4b07      	ldr	r3, [pc, #28]	; (d8f40 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x70>)
   d8f24:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d8f26:	230e      	movs	r3, #14
   d8f28:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d8f2a:	692b      	ldr	r3, [r5, #16]
   d8f2c:	60a3      	str	r3, [r4, #8]
            wakeupSource->flags = flags.value();
   d8f2e:	8833      	ldrh	r3, [r6, #0]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   d8f30:	7327      	strb	r7, [r4, #12]
            wakeupSource->flags = flags.value();
   d8f32:	81e3      	strh	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d8f34:	612c      	str	r4, [r5, #16]
   d8f36:	e7e8      	b.n	d8f0a <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
                valid_ = false;
   d8f38:	7528      	strb	r0, [r5, #20]
                return *this;
   d8f3a:	e7e6      	b.n	d8f0a <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
   d8f3c:	000e2f20 	.word	0x000e2f20
   d8f40:	00030010 	.word	0x00030010

000d8f44 <_ZN5spark9JSONValue9parseCopyEPKc>:
inline spark::JSONValue spark::JSONValue::parseCopy(const char *json) {
   d8f44:	b513      	push	{r0, r1, r4, lr}
   d8f46:	4604      	mov	r4, r0
    return parseCopy(json, strlen(json));
   d8f48:	4608      	mov	r0, r1
   d8f4a:	9101      	str	r1, [sp, #4]
   d8f4c:	f007 f8cd 	bl	e00ea <strlen>
   d8f50:	9901      	ldr	r1, [sp, #4]
   d8f52:	4602      	mov	r2, r0
   d8f54:	4620      	mov	r0, r4
   d8f56:	f004 fb71 	bl	dd63c <_ZN5spark9JSONValue9parseCopyEPKcj>
}
   d8f5a:	4620      	mov	r0, r4
   d8f5c:	b002      	add	sp, #8
   d8f5e:	bd10      	pop	{r4, pc}

000d8f60 <_ZN5spark10JSONWriter4nameEPKc>:
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   d8f60:	b513      	push	{r0, r1, r4, lr}
   d8f62:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   d8f64:	4608      	mov	r0, r1
   d8f66:	9101      	str	r1, [sp, #4]
   d8f68:	f007 f8bf 	bl	e00ea <strlen>
   d8f6c:	9901      	ldr	r1, [sp, #4]
   d8f6e:	4602      	mov	r2, r0
   d8f70:	4620      	mov	r0, r4
}
   d8f72:	b002      	add	sp, #8
   d8f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   d8f78:	f004 bb2c 	b.w	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>

000d8f7c <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>:
        void lock() const { 
   d8f7c:	b510      	push	{r4, lr}
            if (!handle_) {
   d8f7e:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   d8f80:	4604      	mov	r4, r0
            if (!handle_) {
   d8f82:	b90b      	cbnz	r3, d8f88 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   d8f84:	f002 fe96 	bl	dbcb4 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   d8f88:	6820      	ldr	r0, [r4, #0]
        }
   d8f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   d8f8e:	f002 bea1 	b.w	dbcd4 <os_mutex_recursive_lock>

000d8f92 <_ZN11SleepHelper18PersistentDataBase4loadEv>:
bool SleepHelper::PersistentDataBase::load() {
   d8f92:	b510      	push	{r4, lr}
   d8f94:	4604      	mov	r4, r0
      { _M_device.lock(); }
   d8f96:	3004      	adds	r0, #4
   d8f98:	f7ff fff0 	bl	d8f7c <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   d8f9c:	6823      	ldr	r3, [r4, #0]
   d8f9e:	68e1      	ldr	r1, [r4, #12]
   d8fa0:	691b      	ldr	r3, [r3, #16]
   d8fa2:	4620      	mov	r0, r4
   d8fa4:	4798      	blx	r3
   d8fa6:	b918      	cbnz	r0, d8fb0 <_ZN11SleepHelper18PersistentDataBase4loadEv+0x1e>
            initialize();
   d8fa8:	6823      	ldr	r3, [r4, #0]
   d8faa:	4620      	mov	r0, r4
   d8fac:	695b      	ldr	r3, [r3, #20]
   d8fae:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   d8fb0:	6860      	ldr	r0, [r4, #4]
   d8fb2:	f002 fe97 	bl	dbce4 <os_mutex_recursive_unlock>
}
   d8fb6:	2001      	movs	r0, #1
   d8fb8:	bd10      	pop	{r4, pc}

000d8fba <_ZN11SleepHelper18PersistentDataFile4loadEv>:
bool SleepHelper::PersistentDataFile::load() {
   d8fba:	b570      	push	{r4, r5, r6, lr}
   d8fbc:	4604      	mov	r4, r0
   d8fbe:	3004      	adds	r0, #4
   d8fc0:	f7ff ffdc 	bl	d8f7c <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDONLY);
   d8fc4:	6a20      	ldr	r0, [r4, #32]
   d8fc6:	2100      	movs	r1, #0
   d8fc8:	f007 ffce 	bl	e0f68 <open>
        if (fd != -1) {
   d8fcc:	1c43      	adds	r3, r0, #1
        int fd = open(path, O_RDONLY);
   d8fce:	4605      	mov	r5, r0
        if (fd != -1) {
   d8fd0:	d108      	bne.n	d8fe4 <_ZN11SleepHelper18PersistentDataFile4loadEv+0x2a>
            initialize();
   d8fd2:	6823      	ldr	r3, [r4, #0]
   d8fd4:	4620      	mov	r0, r4
   d8fd6:	695b      	ldr	r3, [r3, #20]
   d8fd8:	4798      	blx	r3
   d8fda:	6860      	ldr	r0, [r4, #4]
   d8fdc:	f002 fe82 	bl	dbce4 <os_mutex_recursive_unlock>
}
   d8fe0:	2001      	movs	r0, #1
   d8fe2:	bd70      	pop	{r4, r5, r6, pc}
            dataSize = read(fd, savedDataHeader, savedDataSize);
   d8fe4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   d8fe8:	f007 ffd2 	bl	e0f90 <read>
            if (validate(dataSize)) {
   d8fec:	6823      	ldr	r3, [r4, #0]
            dataSize = read(fd, savedDataHeader, savedDataSize);
   d8fee:	4601      	mov	r1, r0
            if (validate(dataSize)) {
   d8ff0:	691b      	ldr	r3, [r3, #16]
   d8ff2:	4620      	mov	r0, r4
   d8ff4:	4798      	blx	r3
   d8ff6:	4606      	mov	r6, r0
            close(fd);
   d8ff8:	4628      	mov	r0, r5
   d8ffa:	f007 ff9b 	bl	e0f34 <close>
        if (!loaded) {
   d8ffe:	2e00      	cmp	r6, #0
   d9000:	d0e7      	beq.n	d8fd2 <_ZN11SleepHelper18PersistentDataFile4loadEv+0x18>
   d9002:	e7ea      	b.n	d8fda <_ZN11SleepHelper18PersistentDataFile4loadEv+0x20>

000d9004 <_ZN11SleepHelper18PersistentDataFile4saveEv>:
void SleepHelper::PersistentDataFile::save() {
   d9004:	b538      	push	{r3, r4, r5, lr}
   d9006:	4604      	mov	r4, r0
   d9008:	3004      	adds	r0, #4
   d900a:	f7ff ffb7 	bl	d8f7c <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDWR | O_CREAT | O_TRUNC, 0666);
   d900e:	6a20      	ldr	r0, [r4, #32]
   d9010:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   d9014:	f240 6102 	movw	r1, #1538	; 0x602
   d9018:	f007 ffa6 	bl	e0f68 <open>
        if (fd != -1) {            
   d901c:	1c43      	adds	r3, r0, #1
        int fd = open(path, O_RDWR | O_CREAT | O_TRUNC, 0666);
   d901e:	4605      	mov	r5, r0
        if (fd != -1) {            
   d9020:	d006      	beq.n	d9030 <_ZN11SleepHelper18PersistentDataFile4saveEv+0x2c>
            write(fd, savedDataHeader, savedDataSize);
   d9022:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   d9026:	f007 ffc5 	bl	e0fb4 <write>
            close(fd);
   d902a:	4628      	mov	r0, r5
   d902c:	f007 ff82 	bl	e0f34 <close>
   d9030:	6860      	ldr	r0, [r4, #4]
}
   d9032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9036:	f002 be55 	b.w	dbce4 <os_mutex_recursive_unlock>
	...

000d903c <_ZN11SleepHelper20eventsEnablePriorityEy>:
    const SleepHelperWakeEvents *ev = _findWakeEvent(flag);
   d903c:	4a0b      	ldr	r2, [pc, #44]	; (d906c <_ZN11SleepHelper20eventsEnablePriorityEy+0x30>)
int SleepHelper::eventsEnablePriority(uint64_t flag) {
   d903e:	b570      	push	{r4, r5, r6, lr}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9040:	2300      	movs	r3, #0
int SleepHelper::eventsEnablePriority(uint64_t flag) {
   d9042:	4604      	mov	r4, r0
   d9044:	460d      	mov	r5, r1
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9046:	4616      	mov	r6, r2
        if (_wakeEvents[ii].flag == flag) {
   d9048:	e9d2 0100 	ldrd	r0, r1, [r2]
   d904c:	428d      	cmp	r5, r1
   d904e:	bf08      	it	eq
   d9050:	4284      	cmpeq	r4, r0
   d9052:	d103      	bne.n	d905c <_ZN11SleepHelper20eventsEnablePriorityEy+0x20>
        return ev->priority;
   d9054:	eb06 1343 	add.w	r3, r6, r3, lsl #5
   d9058:	6998      	ldr	r0, [r3, #24]
}
   d905a:	bd70      	pop	{r4, r5, r6, pc}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d905c:	3301      	adds	r3, #1
   d905e:	2b04      	cmp	r3, #4
   d9060:	f102 0220 	add.w	r2, r2, #32
   d9064:	d1f0      	bne.n	d9048 <_ZN11SleepHelper20eventsEnablePriorityEy+0xc>
        return 0;
   d9066:	2000      	movs	r0, #0
   d9068:	e7f7      	b.n	d905a <_ZN11SleepHelper20eventsEnablePriorityEy+0x1e>
   d906a:	bf00      	nop
   d906c:	2003e4a8 	.word	0x2003e4a8

000d9070 <_ZN11SleepHelper16eventsEnableNameEy>:
    const SleepHelperWakeEvents *ev = _findWakeEvent(flag);
   d9070:	4a0b      	ldr	r2, [pc, #44]	; (d90a0 <_ZN11SleepHelper16eventsEnableNameEy+0x30>)
const char *SleepHelper::eventsEnableName(uint64_t flag) {
   d9072:	b570      	push	{r4, r5, r6, lr}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9074:	2300      	movs	r3, #0
const char *SleepHelper::eventsEnableName(uint64_t flag) {
   d9076:	4604      	mov	r4, r0
   d9078:	460d      	mov	r5, r1
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d907a:	4616      	mov	r6, r2
        if (_wakeEvents[ii].flag == flag) {
   d907c:	e9d2 0100 	ldrd	r0, r1, [r2]
   d9080:	428d      	cmp	r5, r1
   d9082:	bf08      	it	eq
   d9084:	4284      	cmpeq	r4, r0
   d9086:	d103      	bne.n	d9090 <_ZN11SleepHelper16eventsEnableNameEy+0x20>
        operator const char*() const { return c_str(); }
   d9088:	eb06 1343 	add.w	r3, r6, r3, lsl #5
   d908c:	6898      	ldr	r0, [r3, #8]
}
   d908e:	bd70      	pop	{r4, r5, r6, pc}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9090:	3301      	adds	r3, #1
   d9092:	2b04      	cmp	r3, #4
   d9094:	f102 0220 	add.w	r2, r2, #32
   d9098:	d1f0      	bne.n	d907c <_ZN11SleepHelper16eventsEnableNameEy+0xc>
        return "";
   d909a:	4802      	ldr	r0, [pc, #8]	; (d90a4 <_ZN11SleepHelper16eventsEnableNameEy+0x34>)
   d909c:	e7f7      	b.n	d908e <_ZN11SleepHelper16eventsEnableNameEy+0x1e>
   d909e:	bf00      	nop
   d90a0:	2003e4a8 	.word	0x2003e4a8
   d90a4:	000e296f 	.word	0x000e296f

000d90a8 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev>:
    class AppCallbackWithState {
   d90a8:	b570      	push	{r4, r5, r6, lr}
   d90aa:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   d90ac:	68c0      	ldr	r0, [r0, #12]
	if (__p)
   d90ae:	b108      	cbz	r0, d90b4 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0xc>
   d90b0:	f7fa fff5 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d90b4:	e9d4 5600 	ldrd	r5, r6, [r4]
   d90b8:	42ae      	cmp	r6, r5
   d90ba:	d004      	beq.n	d90c6 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0x1e>
   d90bc:	4628      	mov	r0, r5
   d90be:	f7fb f913 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d90c2:	3510      	adds	r5, #16
   d90c4:	e7f8      	b.n	d90b8 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0x10>
	_M_deallocate(_M_impl._M_start,
   d90c6:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d90c8:	b108      	cbz	r0, d90ce <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0x26>
   d90ca:	f7fa ffe8 	bl	d409e <_ZdlPv>
   d90ce:	4620      	mov	r0, r4
   d90d0:	bd70      	pop	{r4, r5, r6, pc}

000d90d2 <_ZN11SleepHelper11PublishDataD1Ev>:
    class PublishData {
   d90d2:	b510      	push	{r4, lr}
   d90d4:	4604      	mov	r4, r0
   d90d6:	3010      	adds	r0, #16
   d90d8:	f005 fbc6 	bl	de868 <_ZN6StringD1Ev>
   d90dc:	4620      	mov	r0, r4
   d90de:	f005 fbc3 	bl	de868 <_ZN6StringD1Ev>
   d90e2:	4620      	mov	r0, r4
   d90e4:	bd10      	pop	{r4, pc}
	...

000d90e8 <_ZN11SleepHelper12EventHistory12removeEventsEv>:
    }

    return bResult;
}

void SleepHelper::EventHistory::removeEvents() {
   d90e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d90ec:	b0a3      	sub	sp, #140	; 0x8c
   d90ee:	4604      	mov	r4, r0
   d90f0:	f7ff ff44 	bl	d8f7c <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
    WITH_LOCK(*this) {
        const size_t bufSize = 512;
        char *buf = (char *)malloc(bufSize);
   d90f4:	f44f 7000 	mov.w	r0, #512	; 0x200
   d90f8:	f003 f964 	bl	dc3c4 <malloc>
        if (buf) {
   d90fc:	4605      	mov	r5, r0
   d90fe:	2800      	cmp	r0, #0
   d9100:	d05b      	beq.n	d91ba <_ZN11SleepHelper12EventHistory12removeEventsEv+0xd2>
            int fdsrc = open(path, O_RDONLY);
   d9102:	6860      	ldr	r0, [r4, #4]
   d9104:	2100      	movs	r1, #0
   d9106:	f007 ff2f 	bl	e0f68 <open>
            if (fdsrc != -1) {
   d910a:	1c43      	adds	r3, r0, #1
            int fdsrc = open(path, O_RDONLY);
   d910c:	4606      	mov	r6, r0
            if (fdsrc != -1) {
   d910e:	d051      	beq.n	d91b4 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xcc>
                struct stat sb;
                fstat(fdsrc, &sb);
   d9110:	a90c      	add	r1, sp, #48	; 0x30
   d9112:	f007 ff17 	bl	e0f44 <fstat>
                size_t fileSize = sb.st_size;  
   d9116:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
                if (removeOffset < fileSize) {
   d911a:	69a1      	ldr	r1, [r4, #24]
   d911c:	4549      	cmp	r1, r9
   d911e:	d252      	bcs.n	d91c6 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xde>
                    lseek(fdsrc, removeOffset, SEEK_SET);
   d9120:	2200      	movs	r2, #0
   d9122:	4630      	mov	r0, r6
   d9124:	f007 ff16 	bl	e0f54 <lseek>

                    String tempPath = String(path) + ".tmp";
   d9128:	1d21      	adds	r1, r4, #4
   d912a:	a804      	add	r0, sp, #16
   d912c:	f005 fc32 	bl	de994 <_ZN6StringC1ERKS_>
	StringSumHelper(const String &s) : String(s) {}
   d9130:	a904      	add	r1, sp, #16
   d9132:	a808      	add	r0, sp, #32
   d9134:	f005 fc2e 	bl	de994 <_ZN6StringC1ERKS_>
   d9138:	4926      	ldr	r1, [pc, #152]	; (d91d4 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xec>)
   d913a:	a808      	add	r0, sp, #32
   d913c:	f005 fc83 	bl	dea46 <_ZplRK15StringSumHelperPKc>
   d9140:	4601      	mov	r1, r0
   d9142:	4668      	mov	r0, sp
   d9144:	f005 fc26 	bl	de994 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d9148:	a808      	add	r0, sp, #32
   d914a:	f005 fb8d 	bl	de868 <_ZN6StringD1Ev>
   d914e:	a804      	add	r0, sp, #16
   d9150:	f005 fb8a 	bl	de868 <_ZN6StringD1Ev>
                    int fddst = open(tempPath, O_RDWR | O_CREAT | O_TRUNC, 0666);
   d9154:	9800      	ldr	r0, [sp, #0]
   d9156:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   d915a:	f240 6102 	movw	r1, #1538	; 0x602
   d915e:	f007 ff03 	bl	e0f68 <open>
                    if (fddst) {
   d9162:	4607      	mov	r7, r0
   d9164:	b1b8      	cbz	r0, d9196 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xae>
                        while(removeOffset < fileSize) {
   d9166:	69a3      	ldr	r3, [r4, #24]
   d9168:	454b      	cmp	r3, r9
   d916a:	d211      	bcs.n	d9190 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xa8>
                            int count = read(fdsrc, buf, bufSize);
   d916c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d9170:	4629      	mov	r1, r5
   d9172:	4630      	mov	r0, r6
   d9174:	f007 ff0c 	bl	e0f90 <read>
                            if (count > 0) {
   d9178:	f1b0 0800 	subs.w	r8, r0, #0
   d917c:	dd08      	ble.n	d9190 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xa8>
                                write(fddst, buf, count);
   d917e:	4642      	mov	r2, r8
   d9180:	4629      	mov	r1, r5
   d9182:	4638      	mov	r0, r7
   d9184:	f007 ff16 	bl	e0fb4 <write>
                                removeOffset += count;
   d9188:	69a0      	ldr	r0, [r4, #24]
   d918a:	4440      	add	r0, r8
   d918c:	61a0      	str	r0, [r4, #24]
                        while(removeOffset < fileSize) {
   d918e:	e7ea      	b.n	d9166 <_ZN11SleepHelper12EventHistory12removeEventsEv+0x7e>
                            }
                            else {
                                break;
                            }
                        }
                        close(fddst);
   d9190:	4638      	mov	r0, r7
   d9192:	f007 fecf 	bl	e0f34 <close>
                    }
                    close(fdsrc);
   d9196:	4630      	mov	r0, r6
   d9198:	f007 fecc 	bl	e0f34 <close>

                    // Swap src and dst files
                    unlink(path);
   d919c:	6860      	ldr	r0, [r4, #4]
   d919e:	f007 ff01 	bl	e0fa4 <unlink>
                    rename(tempPath, path);
   d91a2:	6861      	ldr	r1, [r4, #4]
   d91a4:	9800      	ldr	r0, [sp, #0]
   d91a6:	f006 ff41 	bl	e002c <rename>
                    removeOffset = 0;
   d91aa:	2300      	movs	r3, #0
   d91ac:	61a3      	str	r3, [r4, #24]
                    String tempPath = String(path) + ".tmp";
   d91ae:	4668      	mov	r0, sp
   d91b0:	f005 fb5a 	bl	de868 <_ZN6StringD1Ev>
                else {
                    unlink(path);
                    hasEvents = false;
                }
            }
            free(buf);
   d91b4:	4628      	mov	r0, r5
   d91b6:	f003 f90d 	bl	dc3d4 <free>
            os_mutex_recursive_unlock(handle_); 
   d91ba:	6820      	ldr	r0, [r4, #0]
   d91bc:	f002 fd92 	bl	dbce4 <os_mutex_recursive_unlock>
        }

    }
}
   d91c0:	b023      	add	sp, #140	; 0x8c
   d91c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    unlink(path);
   d91c6:	6860      	ldr	r0, [r4, #4]
   d91c8:	f007 feec 	bl	e0fa4 <unlink>
                    hasEvents = false;
   d91cc:	2300      	movs	r3, #0
   d91ce:	7563      	strb	r3, [r4, #21]
   d91d0:	e7f0      	b.n	d91b4 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xcc>
   d91d2:	bf00      	nop
   d91d4:	000e2910 	.word	0x000e2910

000d91d8 <_ZN11SleepHelper12EventHistory12getHasEventsEv>:

bool SleepHelper::EventHistory::getHasEvents() { 
   d91d8:	b530      	push	{r4, r5, lr}
    if (firstRun) {
   d91da:	7d03      	ldrb	r3, [r0, #20]
bool SleepHelper::EventHistory::getHasEvents() { 
   d91dc:	b097      	sub	sp, #92	; 0x5c
   d91de:	4604      	mov	r4, r0
    if (firstRun) {
   d91e0:	b163      	cbz	r3, d91fc <_ZN11SleepHelper12EventHistory12getHasEventsEv+0x24>
        firstRun = false;
   d91e2:	2500      	movs	r5, #0
   d91e4:	7505      	strb	r5, [r0, #20]

        struct stat sb;
        int res = stat(path, &sb);
   d91e6:	4669      	mov	r1, sp
   d91e8:	6840      	ldr	r0, [r0, #4]
   d91ea:	f002 fec3 	bl	dbf74 <stat>

        hasEvents = (res == 0 && sb.st_size > 0);
   d91ee:	b920      	cbnz	r0, d91fa <_ZN11SleepHelper12EventHistory12getHasEventsEv+0x22>
   d91f0:	9d04      	ldr	r5, [sp, #16]
   d91f2:	2d00      	cmp	r5, #0
   d91f4:	bfd4      	ite	le
   d91f6:	2500      	movle	r5, #0
   d91f8:	2501      	movgt	r5, #1
   d91fa:	7565      	strb	r5, [r4, #21]
    }
    return hasEvents; 
};
   d91fc:	7d60      	ldrb	r0, [r4, #21]
   d91fe:	b017      	add	sp, #92	; 0x5c
   d9200:	bd30      	pop	{r4, r5, pc}

000d9202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d9202:	680b      	ldr	r3, [r1, #0]
   d9204:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d9206:	b113      	cbz	r3, d920e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d9208:	685a      	ldr	r2, [r3, #4]
   d920a:	3201      	adds	r2, #1
   d920c:	605a      	str	r2, [r3, #4]
      }
   d920e:	4770      	bx	lr

000d9210 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>:
void SleepHelper::JSONCopy(const char *src, JSONWriter &writer) {
    JSONCopy(JSONValue::parseCopy(src), writer);
}

// [static]
void SleepHelper::JSONCopy(const JSONValue &src, JSONWriter &writer) {
   d9210:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9212:	b08f      	sub	sp, #60	; 0x3c
   d9214:	4604      	mov	r4, r0
   d9216:	460d      	mov	r5, r1
    return type() == JSON_TYPE_ARRAY;
   d9218:	f003 feb5 	bl	dcf86 <_ZNK5spark9JSONValue4typeEv>
    // This is inefficient and annoying, but there's no way to insert pre-formatted JSON into a JSONWriter
    if (src.isArray()) {
   d921c:	2805      	cmp	r0, #5
   d921e:	d132      	bne.n	d9286 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x76>
        writer.beginArray();
   d9220:	4628      	mov	r0, r5
   d9222:	f004 f8e8 	bl	dd3f6 <_ZN5spark10JSONWriter10beginArrayEv>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9226:	4621      	mov	r1, r4
        JSONArrayIterator(value.t_, value.d_) {
   d9228:	68a6      	ldr	r6, [r4, #8]
   d922a:	f851 3b04 	ldr.w	r3, [r1], #4
   d922e:	9304      	str	r3, [sp, #16]
   d9230:	a805      	add	r0, sp, #20
   d9232:	f7ff ffe6 	bl	d9202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d9236:	aa04      	add	r2, sp, #16
   d9238:	4631      	mov	r1, r6
   d923a:	a808      	add	r0, sp, #32
   d923c:	f004 f895 	bl	dd36a <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9240:	a805      	add	r0, sp, #20
   d9242:	f7fb fffd 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

        JSONArrayIterator iter(src);
        while(iter.next()) {
   d9246:	a808      	add	r0, sp, #32
   d9248:	f004 f8a6 	bl	dd398 <_ZN5spark17JSONArrayIterator4nextEv>
   d924c:	b198      	cbz	r0, d9276 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x66>
    return JSONValue(v_, d_);
   d924e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9250:	9b08      	ldr	r3, [sp, #32]
   d9252:	9302      	str	r3, [sp, #8]
   d9254:	a909      	add	r1, sp, #36	; 0x24
   d9256:	a803      	add	r0, sp, #12
   d9258:	f7ff ffd3 	bl	d9202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d925c:	4621      	mov	r1, r4
   d925e:	aa02      	add	r2, sp, #8
   d9260:	a804      	add	r0, sp, #16
   d9262:	f003 fe82 	bl	dcf6a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9266:	a803      	add	r0, sp, #12
   d9268:	f7fb ffea 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            JSONCopy(iter.value(), writer);
   d926c:	4629      	mov	r1, r5
   d926e:	a804      	add	r0, sp, #16
   d9270:	f7ff ffce 	bl	d9210 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>
   d9274:	e7e4      	b.n	d9240 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x30>
        }

        writer.endArray();
   d9276:	4628      	mov	r0, r5
   d9278:	f004 f89e 	bl	dd3b8 <_ZN5spark10JSONWriter8endArrayEv>
   d927c:	a809      	add	r0, sp, #36	; 0x24
   d927e:	f7fb ffdf 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        else {
            writer.value(d);
        }
    }
}
   d9282:	b00f      	add	sp, #60	; 0x3c
   d9284:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return type() == JSON_TYPE_OBJECT;
   d9286:	4620      	mov	r0, r4
   d9288:	f003 fe7d 	bl	dcf86 <_ZNK5spark9JSONValue4typeEv>
    if (src.isObject()) {
   d928c:	2806      	cmp	r0, #6
   d928e:	d130      	bne.n	d92f2 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0xe2>
        writer.beginObject();
   d9290:	4628      	mov	r0, r5
   d9292:	f004 f8bc 	bl	dd40e <_ZN5spark10JSONWriter11beginObjectEv>
        JSONObjectIterator iter(src);
   d9296:	4621      	mov	r1, r4
   d9298:	a808      	add	r0, sp, #32
   d929a:	f7fd ff9b 	bl	d71d4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        while(iter.next()) {
   d929e:	a808      	add	r0, sp, #32
   d92a0:	f004 f850 	bl	dd344 <_ZN5spark18JSONObjectIterator4nextEv>
   d92a4:	b308      	cbz	r0, d92ea <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0xda>
            writer.name((const char *) iter.name());
   d92a6:	a908      	add	r1, sp, #32
   d92a8:	a804      	add	r0, sp, #16
   d92aa:	f7fd ffa4 	bl	d71f6 <_ZNK5spark18JSONObjectIterator4nameEv>
   d92ae:	9906      	ldr	r1, [sp, #24]
   d92b0:	4628      	mov	r0, r5
   d92b2:	f7ff fe55 	bl	d8f60 <_ZN5spark10JSONWriter4nameEPKc>
   d92b6:	a805      	add	r0, sp, #20
   d92b8:	f7fb ffc2 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONValue(v_, d_);
   d92bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d92be:	9b08      	ldr	r3, [sp, #32]
   d92c0:	9302      	str	r3, [sp, #8]
   d92c2:	a909      	add	r1, sp, #36	; 0x24
   d92c4:	a803      	add	r0, sp, #12
   d92c6:	f7ff ff9c 	bl	d9202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d92ca:	aa02      	add	r2, sp, #8
   d92cc:	4621      	mov	r1, r4
   d92ce:	a804      	add	r0, sp, #16
   d92d0:	f003 fe4b 	bl	dcf6a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d92d4:	a803      	add	r0, sp, #12
   d92d6:	f7fb ffb3 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            JSONCopy(iter.value(), writer);
   d92da:	a804      	add	r0, sp, #16
   d92dc:	4629      	mov	r1, r5
   d92de:	f7ff ff97 	bl	d9210 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>
   d92e2:	a805      	add	r0, sp, #20
   d92e4:	f7fb ffac 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        while(iter.next()) {
   d92e8:	e7d9      	b.n	d929e <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x8e>
        writer.endObject();
   d92ea:	4628      	mov	r0, r5
   d92ec:	f004 f86d 	bl	dd3ca <_ZN5spark10JSONWriter9endObjectEv>
   d92f0:	e7c4      	b.n	d927c <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x6c>
    return type() == JSON_TYPE_STRING;
   d92f2:	4620      	mov	r0, r4
   d92f4:	f003 fe47 	bl	dcf86 <_ZNK5spark9JSONValue4typeEv>
    if (src.isString()) {
   d92f8:	2804      	cmp	r0, #4
   d92fa:	d11a      	bne.n	d9332 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x122>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d92fc:	4621      	mov	r1, r4
    return JSONString(t_, d_);
   d92fe:	68a6      	ldr	r6, [r4, #8]
   d9300:	f851 3b04 	ldr.w	r3, [r1], #4
   d9304:	9304      	str	r3, [sp, #16]
   d9306:	a805      	add	r0, sp, #20
   d9308:	f7ff ff7b 	bl	d9202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d930c:	aa04      	add	r2, sp, #16
   d930e:	4631      	mov	r1, r6
   d9310:	a808      	add	r0, sp, #32
   d9312:	f003 ffdb 	bl	dd2cc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9316:	a805      	add	r0, sp, #20
   d9318:	f7fb ff92 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        writer.value(src.toString().data());
   d931c:	990a      	ldr	r1, [sp, #40]	; 0x28
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d931e:	9101      	str	r1, [sp, #4]
   d9320:	4608      	mov	r0, r1
   d9322:	f006 fee2 	bl	e00ea <strlen>
   d9326:	9901      	ldr	r1, [sp, #4]
   d9328:	4602      	mov	r2, r0
   d932a:	4628      	mov	r0, r5
   d932c:	f004 f962 	bl	dd5f4 <_ZN5spark10JSONWriter5valueEPKcj>
   d9330:	e7a4      	b.n	d927c <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x6c>
    return type() == JSON_TYPE_BOOL;
   d9332:	4620      	mov	r0, r4
   d9334:	f003 fe27 	bl	dcf86 <_ZNK5spark9JSONValue4typeEv>
    if (src.isBool()) {
   d9338:	2802      	cmp	r0, #2
        writer.value(src.toBool());
   d933a:	4620      	mov	r0, r4
    if (src.isBool()) {
   d933c:	d106      	bne.n	d934c <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x13c>
        writer.value(src.toBool());
   d933e:	f003 fe4b 	bl	dcfd8 <_ZNK5spark9JSONValue6toBoolEv>
   d9342:	4601      	mov	r1, r0
   d9344:	4628      	mov	r0, r5
   d9346:	f004 f86f 	bl	dd428 <_ZN5spark10JSONWriter5valueEb>
   d934a:	e79a      	b.n	d9282 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>
    return type() == JSON_TYPE_NULL;
   d934c:	f003 fe1b 	bl	dcf86 <_ZNK5spark9JSONValue4typeEv>
    if (src.isNull()) {
   d9350:	2801      	cmp	r0, #1
   d9352:	d103      	bne.n	d935c <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x14c>
        writer.nullValue();
   d9354:	4628      	mov	r0, r5
   d9356:	f004 f8d5 	bl	dd504 <_ZN5spark10JSONWriter9nullValueEv>
   d935a:	e792      	b.n	d9282 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>
        double d = src.toDouble();
   d935c:	4620      	mov	r0, r4
   d935e:	f003 fe9b 	bl	dd098 <_ZNK5spark9JSONValue8toDoubleEv>
   d9362:	ec57 6b10 	vmov	r6, r7, d0
        if (d == std::floor(d)) {
   d9366:	f006 f88f 	bl	df488 <floor>
   d936a:	4630      	mov	r0, r6
   d936c:	ec53 2b10 	vmov	r2, r3, d0
   d9370:	4639      	mov	r1, r7
   d9372:	f006 fd31 	bl	dfdd8 <__aeabi_dcmpeq>
   d9376:	b140      	cbz	r0, d938a <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x17a>
            writer.value((int)d);
   d9378:	4639      	mov	r1, r7
   d937a:	4630      	mov	r0, r6
   d937c:	f006 fd5e 	bl	dfe3c <__aeabi_d2iz>
   d9380:	4601      	mov	r1, r0
   d9382:	4628      	mov	r0, r5
   d9384:	f004 f868 	bl	dd458 <_ZN5spark10JSONWriter5valueEi>
   d9388:	e77b      	b.n	d9282 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>
            writer.value(d);
   d938a:	ec47 6b10 	vmov	d0, r6, r7
   d938e:	4628      	mov	r0, r5
   d9390:	f004 f8a4 	bl	dd4dc <_ZN5spark10JSONWriter5valueEd>
}
   d9394:	e775      	b.n	d9282 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>

000d9396 <_ZN11SleepHelper8JSONCopyEPKcRN5spark10JSONWriterE>:
void SleepHelper::JSONCopy(const char *src, JSONWriter &writer) {
   d9396:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9398:	460c      	mov	r4, r1
    JSONCopy(JSONValue::parseCopy(src), writer);
   d939a:	4601      	mov	r1, r0
   d939c:	a801      	add	r0, sp, #4
   d939e:	f7ff fdd1 	bl	d8f44 <_ZN5spark9JSONValue9parseCopyEPKc>
   d93a2:	4621      	mov	r1, r4
   d93a4:	a801      	add	r0, sp, #4
   d93a6:	f7ff ff33 	bl	d9210 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>
   d93aa:	a802      	add	r0, sp, #8
   d93ac:	f7fb ff48 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d93b0:	b004      	add	sp, #16
   d93b2:	bd10      	pop	{r4, pc}

000d93b4 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb>:
bool SleepHelper::EventHistory::getEvents(JSONWriter &writer, size_t maxSize, bool bRemoveEvents) {
   d93b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d93b8:	b085      	sub	sp, #20
    if (maxSize < 2 || !hasEvents) {
   d93ba:	2a01      	cmp	r2, #1
bool SleepHelper::EventHistory::getEvents(JSONWriter &writer, size_t maxSize, bool bRemoveEvents) {
   d93bc:	4605      	mov	r5, r0
   d93be:	4688      	mov	r8, r1
   d93c0:	4617      	mov	r7, r2
   d93c2:	9303      	str	r3, [sp, #12]
    if (maxSize < 2 || !hasEvents) {
   d93c4:	d804      	bhi.n	d93d0 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x1c>
        return false;
   d93c6:	2600      	movs	r6, #0
}
   d93c8:	4630      	mov	r0, r6
   d93ca:	b005      	add	sp, #20
   d93cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (maxSize < 2 || !hasEvents) {
   d93d0:	7d46      	ldrb	r6, [r0, #21]
   d93d2:	2e00      	cmp	r6, #0
   d93d4:	d0f7      	beq.n	d93c6 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x12>
    char *buf = (char *)malloc(maxSize);
   d93d6:	4610      	mov	r0, r2
   d93d8:	f002 fff4 	bl	dc3c4 <malloc>
    if (!buf) {
   d93dc:	4604      	mov	r4, r0
   d93de:	2800      	cmp	r0, #0
   d93e0:	d0f1      	beq.n	d93c6 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x12>
   d93e2:	4628      	mov	r0, r5
   d93e4:	f7ff fdca 	bl	d8f7c <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDONLY);
   d93e8:	6868      	ldr	r0, [r5, #4]
   d93ea:	2100      	movs	r1, #0
   d93ec:	f007 fdbc 	bl	e0f68 <open>
        if (fd != -1) {
   d93f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
        int fd = open(path, O_RDONLY);
   d93f4:	4681      	mov	r9, r0
        if (fd != -1) {
   d93f6:	d026      	beq.n	d9446 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x92>
            int dataSize = read(fd, buf, maxSize);
   d93f8:	463a      	mov	r2, r7
   d93fa:	4621      	mov	r1, r4
   d93fc:	f007 fdc8 	bl	e0f90 <read>
            if (dataSize > 0) {
   d9400:	f1b0 0a00 	subs.w	sl, r0, #0
   d9404:	dd1d      	ble.n	d9442 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x8e>
   d9406:	eb04 030a 	add.w	r3, r4, sl
                while(dataSize > 0 && buf[dataSize - 1] != '\n') {
   d940a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   d940e:	2a0a      	cmp	r2, #10
   d9410:	d01b      	beq.n	d944a <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x96>
   d9412:	f1ba 0a01 	subs.w	sl, sl, #1
   d9416:	d1f8      	bne.n	d940a <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x56>
    bool bResult = false;
   d9418:	4656      	mov	r6, sl
   d941a:	e002      	b.n	d9422 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x6e>
                    writer.endArray();
   d941c:	4640      	mov	r0, r8
   d941e:	f003 ffcb 	bl	dd3b8 <_ZN5spark10JSONWriter8endArrayEv>
            close(fd);
   d9422:	4648      	mov	r0, r9
   d9424:	f007 fd86 	bl	e0f34 <close>
   d9428:	6828      	ldr	r0, [r5, #0]
   d942a:	f002 fc5b 	bl	dbce4 <os_mutex_recursive_unlock>
    free(buf);
   d942e:	4620      	mov	r0, r4
   d9430:	f002 ffd0 	bl	dc3d4 <free>
    if (bRemoveEvents) {
   d9434:	9b03      	ldr	r3, [sp, #12]
   d9436:	2b00      	cmp	r3, #0
   d9438:	d0c6      	beq.n	d93c8 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x14>
        removeEvents();
   d943a:	4628      	mov	r0, r5
   d943c:	f7ff fe54 	bl	d90e8 <_ZN11SleepHelper12EventHistory12removeEventsEv>
   d9440:	e7c2      	b.n	d93c8 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x14>
    bool bResult = false;
   d9442:	2600      	movs	r6, #0
   d9444:	e7ed      	b.n	d9422 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x6e>
   d9446:	2600      	movs	r6, #0
   d9448:	e7ee      	b.n	d9428 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x74>
                    writer.beginArray();
   d944a:	4640      	mov	r0, r8
   d944c:	f003 ffd3 	bl	dd3f6 <_ZN5spark10JSONWriter10beginArrayEv>
                    char *end = &buf[dataSize];
   d9450:	eb04 030a 	add.w	r3, r4, sl
   d9454:	9302      	str	r3, [sp, #8]
   d9456:	46a2      	mov	sl, r4
                    size_t bytesUsed = 2;
   d9458:	f04f 0b02 	mov.w	fp, #2
                    while(cur < end) {
   d945c:	9b02      	ldr	r3, [sp, #8]
   d945e:	4553      	cmp	r3, sl
   d9460:	d9dc      	bls.n	d941c <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x68>
                        char *lf = strchr(cur, '\n');
   d9462:	210a      	movs	r1, #10
   d9464:	4650      	mov	r0, sl
   d9466:	f006 fdfa 	bl	e005e <strchr>
                        *lf = 0;
   d946a:	f04f 0200 	mov.w	r2, #0
                        char *lf = strchr(cur, '\n');
   d946e:	9001      	str	r0, [sp, #4]
                        *lf = 0;
   d9470:	7002      	strb	r2, [r0, #0]
                        bytesUsed += strlen(cur) + 1;
   d9472:	4650      	mov	r0, sl
   d9474:	f006 fe39 	bl	e00ea <strlen>
   d9478:	3001      	adds	r0, #1
   d947a:	4483      	add	fp, r0
                        if (bytesUsed > maxSize) {
   d947c:	455f      	cmp	r7, fp
   d947e:	d3cd      	bcc.n	d941c <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x68>
                        SleepHelper::JSONCopy(cur, writer);                        
   d9480:	4641      	mov	r1, r8
   d9482:	4650      	mov	r0, sl
   d9484:	f7ff ff87 	bl	d9396 <_ZN11SleepHelper8JSONCopyEPKcRN5spark10JSONWriterE>
                        cur = lf + 1;
   d9488:	9b01      	ldr	r3, [sp, #4]
   d948a:	f103 0a01 	add.w	sl, r3, #1
                        removeOffset = (cur - buf);                        
   d948e:	ebaa 0104 	sub.w	r1, sl, r4
   d9492:	61a9      	str	r1, [r5, #24]
                    while(cur < end) {
   d9494:	e7e2      	b.n	d945c <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0xa8>
	...

000d9498 <_ZN16JsonParserStaticILj622ELj50EEC1Ev>:
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   d9498:	b513      	push	{r0, r1, r4, lr}
   d949a:	2332      	movs	r3, #50	; 0x32
   d949c:	9300      	str	r3, [sp, #0]
   d949e:	f240 226e 	movw	r2, #622	; 0x26e
   d94a2:	f500 7327 	add.w	r3, r0, #668	; 0x29c
   d94a6:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   d94aa:	4604      	mov	r4, r0
   d94ac:	f7fc ff1e 	bl	d62ec <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   d94b0:	4b02      	ldr	r3, [pc, #8]	; (d94bc <_ZN16JsonParserStaticILj622ELj50EEC1Ev+0x24>)
   d94b2:	6023      	str	r3, [r4, #0]
   d94b4:	4620      	mov	r0, r4
   d94b6:	b002      	add	sp, #8
   d94b8:	bd10      	pop	{r4, pc}
   d94ba:	bf00      	nop
   d94bc:	000e2b88 	.word	0x000e2b88

000d94c0 <_ZN11SleepHelperC1Ev>:
SleepHelper::SleepHelper() : appLog("app.sleep") {
   d94c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d94c4:	4b83      	ldr	r3, [pc, #524]	; (d96d4 <_ZN11SleepHelperC1Ev+0x214>)
        SettingsFile() {};
   d94c6:	4e84      	ldr	r6, [pc, #528]	; (d96d8 <_ZN11SleepHelperC1Ev+0x218>)
   d94c8:	6003      	str	r3, [r0, #0]
   d94ca:	4604      	mov	r4, r0
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   d94cc:	2500      	movs	r5, #0
        SettingsFile() {};
   d94ce:	4b83      	ldr	r3, [pc, #524]	; (d96dc <_ZN11SleepHelperC1Ev+0x21c>)
   d94d0:	6043      	str	r3, [r0, #4]
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   d94d2:	6085      	str	r5, [r0, #8]
        SettingsFile() {};
   d94d4:	f204 58d4 	addw	r8, r4, #1492	; 0x5d4
   d94d8:	300c      	adds	r0, #12
   d94da:	f7ff ffdd 	bl	d9498 <_ZN16JsonParserStaticILj622ELj50EEC1Ev>
   d94de:	4631      	mov	r1, r6
	: _M_start(), _M_finish(), _M_end_of_storage()
   d94e0:	f8c4 55c8 	str.w	r5, [r4, #1480]	; 0x5c8
   d94e4:	f8c4 55cc 	str.w	r5, [r4, #1484]	; 0x5cc
   d94e8:	f8c4 55d0 	str.w	r5, [r4, #1488]	; 0x5d0
   d94ec:	4640      	mov	r0, r8
   d94ee:	f005 fa06 	bl	de8fe <_ZN6StringC1EPKc>
        PersistentData() : PersistentDataFile(&sleepHelperData.header, sizeof(SleepHelperData), SAVED_DATA_MAGIC, SAVED_DATA_VERSION) {};
   d94f2:	f504 63c3 	add.w	r3, r4, #1560	; 0x618
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   d94f6:	f8c4 35f0 	str.w	r3, [r4, #1520]	; 0x5f0
   d94fa:	2320      	movs	r3, #32
   d94fc:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
   d9500:	4b77      	ldr	r3, [pc, #476]	; (d96e0 <_ZN11SleepHelperC1Ev+0x220>)
   d9502:	f8c4 35f8 	str.w	r3, [r4, #1528]	; 0x5f8
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   d9506:	4b77      	ldr	r3, [pc, #476]	; (d96e4 <_ZN11SleepHelperC1Ev+0x224>)
   d9508:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   d950c:	f04f 0901 	mov.w	r9, #1
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   d9510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9514:	f504 67c1 	add.w	r7, r4, #1544	; 0x608
   d9518:	4631      	mov	r1, r6
   d951a:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
        SettingsFile() {};
   d951e:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   d9522:	f8c4 55ec 	str.w	r5, [r4, #1516]	; 0x5ec
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   d9526:	f8a4 95fc 	strh.w	r9, [r4, #1532]	; 0x5fc
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   d952a:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
   d952e:	4638      	mov	r0, r7
   d9530:	f005 f9e5 	bl	de8fe <_ZN6StringC1EPKc>
        PersistentData() : PersistentDataFile(&sleepHelperData.header, sizeof(SleepHelperData), SAVED_DATA_MAGIC, SAVED_DATA_VERSION) {};
   d9534:	4b6c      	ldr	r3, [pc, #432]	; (d96e8 <_ZN11SleepHelperC1Ev+0x228>)
   d9536:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
   d953a:	f8c4 5638 	str.w	r5, [r4, #1592]	; 0x638
   d953e:	f8c4 563c 	str.w	r5, [r4, #1596]	; 0x63c
   d9542:	f8c4 5640 	str.w	r5, [r4, #1600]	; 0x640
   d9546:	f8c4 5644 	str.w	r5, [r4, #1604]	; 0x644
   d954a:	f8c4 5648 	str.w	r5, [r4, #1608]	; 0x648
   d954e:	f8c4 564c 	str.w	r5, [r4, #1612]	; 0x64c
   d9552:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
   d9556:	f8c4 5654 	str.w	r5, [r4, #1620]	; 0x654
   d955a:	f8c4 5658 	str.w	r5, [r4, #1624]	; 0x658
   d955e:	f204 605c 	addw	r0, r4, #1628	; 0x65c
   d9562:	f7ff fc6d 	bl	d8e40 <_ZN8particle24SystemSleepConfigurationC1Ev>
   d9566:	4961      	ldr	r1, [pc, #388]	; (d96ec <_ZN11SleepHelperC1Ev+0x22c>)
   d9568:	f8c4 5698 	str.w	r5, [r4, #1688]	; 0x698
   d956c:	f8c4 569c 	str.w	r5, [r4, #1692]	; 0x69c
   d9570:	f8c4 56a0 	str.w	r5, [r4, #1696]	; 0x6a0
   d9574:	f8c4 56a4 	str.w	r5, [r4, #1700]	; 0x6a4
   d9578:	f8c4 56a8 	str.w	r5, [r4, #1704]	; 0x6a8
   d957c:	f8c4 56ac 	str.w	r5, [r4, #1708]	; 0x6ac
   d9580:	f8c4 56b0 	str.w	r5, [r4, #1712]	; 0x6b0
   d9584:	f8c4 56b4 	str.w	r5, [r4, #1716]	; 0x6b4
   d9588:	f8c4 56b8 	str.w	r5, [r4, #1720]	; 0x6b8
   d958c:	f8c4 56bc 	str.w	r5, [r4, #1724]	; 0x6bc
   d9590:	f8c4 56c0 	str.w	r5, [r4, #1728]	; 0x6c0
   d9594:	f8c4 56c4 	str.w	r5, [r4, #1732]	; 0x6c4
   d9598:	f8c4 56c8 	str.w	r5, [r4, #1736]	; 0x6c8
   d959c:	f8c4 56cc 	str.w	r5, [r4, #1740]	; 0x6cc
   d95a0:	f8c4 56d0 	str.w	r5, [r4, #1744]	; 0x6d0
   d95a4:	f8c4 56d4 	str.w	r5, [r4, #1748]	; 0x6d4
   d95a8:	f8c4 56d8 	str.w	r5, [r4, #1752]	; 0x6d8
   d95ac:	f8c4 56dc 	str.w	r5, [r4, #1756]	; 0x6dc
   d95b0:	f8c4 56e0 	str.w	r5, [r4, #1760]	; 0x6e0
   d95b4:	f8c4 56e4 	str.w	r5, [r4, #1764]	; 0x6e4
   d95b8:	f8c4 56e8 	str.w	r5, [r4, #1768]	; 0x6e8
   d95bc:	f8c4 56ec 	str.w	r5, [r4, #1772]	; 0x6ec
   d95c0:	f8c4 56f0 	str.w	r5, [r4, #1776]	; 0x6f0
   d95c4:	f8c4 56f4 	str.w	r5, [r4, #1780]	; 0x6f4
   d95c8:	f8c4 56f8 	str.w	r5, [r4, #1784]	; 0x6f8
   d95cc:	f8c4 56fc 	str.w	r5, [r4, #1788]	; 0x6fc
   d95d0:	f8c4 5700 	str.w	r5, [r4, #1792]	; 0x700
   d95d4:	f8c4 5704 	str.w	r5, [r4, #1796]	; 0x704
   d95d8:	f8c4 5708 	str.w	r5, [r4, #1800]	; 0x708
   d95dc:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
   d95e0:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
   d95e4:	f8c4 5714 	str.w	r5, [r4, #1812]	; 0x714
   d95e8:	f504 60e5 	add.w	r0, r4, #1832	; 0x728
   d95ec:	f8c4 5718 	str.w	r5, [r4, #1816]	; 0x718
   d95f0:	f8c4 571c 	str.w	r5, [r4, #1820]	; 0x71c
   d95f4:	f8c4 5720 	str.w	r5, [r4, #1824]	; 0x720
   d95f8:	f8c4 5724 	str.w	r5, [r4, #1828]	; 0x724
   d95fc:	f005 f97f 	bl	de8fe <_ZN6StringC1EPKc>
        EventHistory() {};
   d9600:	4631      	mov	r1, r6
   d9602:	f8c4 5738 	str.w	r5, [r4, #1848]	; 0x738
   d9606:	f8c4 573c 	str.w	r5, [r4, #1852]	; 0x73c
   d960a:	f8c4 5740 	str.w	r5, [r4, #1856]	; 0x740
   d960e:	f8c4 5744 	str.w	r5, [r4, #1860]	; 0x744
   d9612:	f8c4 5748 	str.w	r5, [r4, #1864]	; 0x748
   d9616:	f8c4 574c 	str.w	r5, [r4, #1868]	; 0x74c
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   d961a:	f8c4 5750 	str.w	r5, [r4, #1872]	; 0x750
        EventHistory() {};
   d961e:	f204 7054 	addw	r0, r4, #1876	; 0x754
   d9622:	f005 f96c 	bl	de8fe <_ZN6StringC1EPKc>
        EventCombiner() {};
   d9626:	4631      	mov	r1, r6
        EventHistory() {};
   d9628:	f8a4 9764 	strh.w	r9, [r4, #1892]	; 0x764
   d962c:	f8c4 5768 	str.w	r5, [r4, #1896]	; 0x768
        EventCombiner() {};
   d9630:	f204 706c 	addw	r0, r4, #1900	; 0x76c
   d9634:	f005 f963 	bl	de8fe <_ZN6StringC1EPKc>
   d9638:	f504 63f2 	add.w	r3, r4, #1936	; 0x790
   d963c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d9644:	f8c4 577c 	str.w	r5, [r4, #1916]	; 0x77c
   d9648:	f8c4 5780 	str.w	r5, [r4, #1920]	; 0x780
   d964c:	f8c4 5784 	str.w	r5, [r4, #1924]	; 0x784
   d9650:	f8c4 5788 	str.w	r5, [r4, #1928]	; 0x788
   d9654:	e9c3 0100 	strd	r0, r1, [r3]
   d9658:	f504 63f3 	add.w	r3, r4, #1944	; 0x798
   d965c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   d9660:	2100      	movs	r1, #0
   d9662:	e9c3 0100 	strd	r0, r1, [r3]
   d9666:	4b22      	ldr	r3, [pc, #136]	; (d96f0 <_ZN11SleepHelperC1Ev+0x230>)
   d9668:	f8c4 37a0 	str.w	r3, [r4, #1952]	; 0x7a0
   d966c:	f242 7310 	movw	r3, #10000	; 0x2710
   d9670:	f8c4 37a4 	str.w	r3, [r4, #1956]	; 0x7a4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d9674:	4b1f      	ldr	r3, [pc, #124]	; (d96f4 <_ZN11SleepHelperC1Ev+0x234>)
   d9676:	f8c4 37a8 	str.w	r3, [r4, #1960]	; 0x7a8
	    _M_invoker = &_My_handler::_M_invoke;
   d967a:	4b1f      	ldr	r3, [pc, #124]	; (d96f8 <_ZN11SleepHelperC1Ev+0x238>)
   d967c:	f8c4 37b4 	str.w	r3, [r4, #1972]	; 0x7b4
	    _M_manager = &_My_handler::_M_manager;
   d9680:	4b1e      	ldr	r3, [pc, #120]	; (d96fc <_ZN11SleepHelperC1Ev+0x23c>)
   d9682:	f8c4 37b0 	str.w	r3, [r4, #1968]	; 0x7b0
   d9686:	4b1e      	ldr	r3, [pc, #120]	; (d9700 <_ZN11SleepHelperC1Ev+0x240>)
   d9688:	f8c4 37e0 	str.w	r3, [r4, #2016]	; 0x7e0
   d968c:	4b1d      	ldr	r3, [pc, #116]	; (d9704 <_ZN11SleepHelperC1Ev+0x244>)
   d968e:	f8c4 37e4 	str.w	r3, [r4, #2020]	; 0x7e4
            this->path = path; 
   d9692:	491d      	ldr	r1, [pc, #116]	; (d9708 <_ZN11SleepHelperC1Ev+0x248>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d9694:	f8c4 57ac 	str.w	r5, [r4, #1964]	; 0x7ac
   d9698:	f8c4 57b8 	str.w	r5, [r4, #1976]	; 0x7b8
   d969c:	f8c4 57bc 	str.w	r5, [r4, #1980]	; 0x7bc
   d96a0:	f8c4 57c0 	str.w	r5, [r4, #1984]	; 0x7c0
   d96a4:	f8c4 57c4 	str.w	r5, [r4, #1988]	; 0x7c4
   d96a8:	f8c4 57c8 	str.w	r5, [r4, #1992]	; 0x7c8
   d96ac:	f8c4 57cc 	str.w	r5, [r4, #1996]	; 0x7cc
   d96b0:	f8a4 57d0 	strh.w	r5, [r4, #2000]	; 0x7d0
   d96b4:	f8c4 57d4 	str.w	r5, [r4, #2004]	; 0x7d4
   d96b8:	f8c4 57d8 	str.w	r5, [r4, #2008]	; 0x7d8
   d96bc:	f8c4 57dc 	str.w	r5, [r4, #2012]	; 0x7dc
   d96c0:	4640      	mov	r0, r8
   d96c2:	f005 f97a 	bl	de9ba <_ZN6StringaSEPKc>
            this->path = path; 
   d96c6:	4911      	ldr	r1, [pc, #68]	; (d970c <_ZN11SleepHelperC1Ev+0x24c>)
   d96c8:	4638      	mov	r0, r7
   d96ca:	f005 f976 	bl	de9ba <_ZN6StringaSEPKc>
}
   d96ce:	4620      	mov	r0, r4
   d96d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d96d4:	000e2bd4 	.word	0x000e2bd4
   d96d8:	000e296f 	.word	0x000e296f
   d96dc:	000e2b98 	.word	0x000e2b98
   d96e0:	d87cb6ce 	.word	0xd87cb6ce
   d96e4:	000e2c04 	.word	0x000e2c04
   d96e8:	000e2ba8 	.word	0x000e2ba8
   d96ec:	000e2915 	.word	0x000e2915
   d96f0:	000be6e0 	.word	0x000be6e0
   d96f4:	000d9ca9 	.word	0x000d9ca9
   d96f8:	000d8d6d 	.word	0x000d8d6d
   d96fc:	000d8ba7 	.word	0x000d8ba7
   d9700:	2003e534 	.word	0x2003e534
   d9704:	000e2921 	.word	0x000e2921
   d9708:	000e292b 	.word	0x000e292b
   d970c:	000e2943 	.word	0x000e2943

000d9710 <_ZN11SleepHelper8instanceEv>:
SleepHelper &SleepHelper::instance() {
   d9710:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d9712:	4c07      	ldr	r4, [pc, #28]	; (d9730 <_ZN11SleepHelper8instanceEv+0x20>)
   d9714:	6823      	ldr	r3, [r4, #0]
   d9716:	b943      	cbnz	r3, d972a <_ZN11SleepHelper8instanceEv+0x1a>
        _instance = new SleepHelper();
   d9718:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
   d971c:	f7fa fcbb 	bl	d4096 <_Znwj>
   d9720:	4605      	mov	r5, r0
   d9722:	b108      	cbz	r0, d9728 <_ZN11SleepHelper8instanceEv+0x18>
   d9724:	f7ff fecc 	bl	d94c0 <_ZN11SleepHelperC1Ev>
   d9728:	6025      	str	r5, [r4, #0]
}
   d972a:	6820      	ldr	r0, [r4, #0]
   d972c:	bd38      	pop	{r3, r4, r5, pc}
   d972e:	bf00      	nop
   d9730:	2003e52c 	.word	0x2003e52c

000d9734 <_ZN11SleepHelper12EventHistory8addEventEPKc>:
void SleepHelper::EventHistory::addEvent(const char *jsonObj) {
   d9734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9736:	460e      	mov	r6, r1
   d9738:	4605      	mov	r5, r0
    if (SleepHelper::instance().logEnableEnabled(SleepHelper::logEnabledHistoryData)) {
   d973a:	f7ff ffe9 	bl	d9710 <_ZN11SleepHelper8instanceEv>
        return (logEnabled & flag) != 0;
   d973e:	f8d0 179c 	ldr.w	r1, [r0, #1948]	; 0x79c
   d9742:	2400      	movs	r4, #0
   d9744:	4622      	mov	r2, r4
   d9746:	f401 7300 	and.w	r3, r1, #512	; 0x200
   d974a:	4313      	orrs	r3, r2
   d974c:	d01e      	beq.n	d978c <_ZN11SleepHelper12EventHistory8addEventEPKc+0x58>
        SleepHelper::instance().appLog.trace("EventHistory::addEvent");
   d974e:	f7ff ffdf 	bl	d9710 <_ZN11SleepHelper8instanceEv>
   d9752:	4921      	ldr	r1, [pc, #132]	; (d97d8 <_ZN11SleepHelper12EventHistory8addEventEPKc+0xa4>)
   d9754:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   d9758:	f7fb fea8 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
        SleepHelper::instance().appLog.write(LOG_LEVEL_TRACE, jsonObj, strlen(jsonObj));
   d975c:	f7ff ffd8 	bl	d9710 <_ZN11SleepHelper8instanceEv>
   d9760:	4607      	mov	r7, r0
   d9762:	4630      	mov	r0, r6
   d9764:	f006 fcc1 	bl	e00ea <strlen>
        log_write(level, name_, data, size, nullptr);
   d9768:	9400      	str	r4, [sp, #0]
   d976a:	4603      	mov	r3, r0
   d976c:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
   d9770:	4632      	mov	r2, r6
   d9772:	2001      	movs	r0, #1
   d9774:	f002 fcee 	bl	dc154 <log_write>
        SleepHelper::instance().appLog.write(LOG_LEVEL_TRACE, "\r\n", 2);
   d9778:	f7ff ffca 	bl	d9710 <_ZN11SleepHelper8instanceEv>
   d977c:	9400      	str	r4, [sp, #0]
   d977e:	f8d0 17e4 	ldr.w	r1, [r0, #2020]	; 0x7e4
   d9782:	4a16      	ldr	r2, [pc, #88]	; (d97dc <_ZN11SleepHelper12EventHistory8addEventEPKc+0xa8>)
   d9784:	2302      	movs	r3, #2
   d9786:	2001      	movs	r0, #1
   d9788:	f002 fce4 	bl	dc154 <log_write>
   d978c:	4628      	mov	r0, r5
   d978e:	f7ff fbf5 	bl	d8f7c <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDWR | O_CREAT | O_APPEND, 0666);
   d9792:	6868      	ldr	r0, [r5, #4]
   d9794:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   d9798:	f240 210a 	movw	r1, #522	; 0x20a
   d979c:	f007 fbe4 	bl	e0f68 <open>
        if (fd != -1) {
   d97a0:	1c43      	adds	r3, r0, #1
        int fd = open(path, O_RDWR | O_CREAT | O_APPEND, 0666);
   d97a2:	4604      	mov	r4, r0
        if (fd != -1) {
   d97a4:	d011      	beq.n	d97ca <_ZN11SleepHelper12EventHistory8addEventEPKc+0x96>
            write(fd, jsonObj, strlen(jsonObj));
   d97a6:	4630      	mov	r0, r6
   d97a8:	f006 fc9f 	bl	e00ea <strlen>
   d97ac:	4631      	mov	r1, r6
   d97ae:	4602      	mov	r2, r0
   d97b0:	4620      	mov	r0, r4
   d97b2:	f007 fbff 	bl	e0fb4 <write>
            write(fd, "\n", 1);
   d97b6:	490a      	ldr	r1, [pc, #40]	; (d97e0 <_ZN11SleepHelper12EventHistory8addEventEPKc+0xac>)
   d97b8:	2201      	movs	r2, #1
   d97ba:	4620      	mov	r0, r4
   d97bc:	f007 fbfa 	bl	e0fb4 <write>
            close(fd);
   d97c0:	4620      	mov	r0, r4
   d97c2:	f007 fbb7 	bl	e0f34 <close>
            hasEvents = true;
   d97c6:	2301      	movs	r3, #1
   d97c8:	756b      	strb	r3, [r5, #21]
            os_mutex_recursive_unlock(handle_); 
   d97ca:	6828      	ldr	r0, [r5, #0]
}
   d97cc:	b003      	add	sp, #12
   d97ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d97d2:	f002 ba87 	b.w	dbce4 <os_mutex_recursive_unlock>
   d97d6:	bf00      	nop
   d97d8:	000e2956 	.word	0x000e2956
   d97dc:	000e296d 	.word	0x000e296d
   d97e0:	000e296e 	.word	0x000e296e

000d97e4 <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE>:
void SleepHelper::EventHistory::addEvent(std::function<void(JSONWriter &)>callback) {
   d97e4:	b570      	push	{r4, r5, r6, lr}
   d97e6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
    memset(buf, 0, sizeof(buf));
   d97ea:	ae06      	add	r6, sp, #24
void SleepHelper::EventHistory::addEvent(std::function<void(JSONWriter &)>callback) {
   d97ec:	460c      	mov	r4, r1
    memset(buf, 0, sizeof(buf));
   d97ee:	f240 226e 	movw	r2, #622	; 0x26e
   d97f2:	2100      	movs	r1, #0
void SleepHelper::EventHistory::addEvent(std::function<void(JSONWriter &)>callback) {
   d97f4:	4605      	mov	r5, r0
    memset(buf, 0, sizeof(buf));
   d97f6:	4630      	mov	r0, r6
   d97f8:	f006 fbec 	bl	dffd4 <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   d97fc:	4a0f      	ldr	r2, [pc, #60]	; (d983c <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE+0x58>)
   d97fe:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d9800:	2300      	movs	r3, #0
        n_(0) {
   d9802:	f240 226d 	movw	r2, #621	; 0x26d
    writer.beginObject();
   d9806:	a801      	add	r0, sp, #4
   d9808:	e9cd 2304 	strd	r2, r3, [sp, #16]
        state_(BEGIN) {
   d980c:	f88d 3008 	strb.w	r3, [sp, #8]
        n_(0) {
   d9810:	9603      	str	r6, [sp, #12]
   d9812:	f003 fdfc 	bl	dd40e <_ZN5spark10JSONWriter11beginObjectEv>
      if (_M_empty())
   d9816:	68a3      	ldr	r3, [r4, #8]
   d9818:	b90b      	cbnz	r3, d981e <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE+0x3a>
	__throw_bad_function_call();
   d981a:	f005 fe2f 	bl	df47c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d981e:	68e3      	ldr	r3, [r4, #12]
   d9820:	a901      	add	r1, sp, #4
   d9822:	4620      	mov	r0, r4
   d9824:	4798      	blx	r3
    writer.endObject();
   d9826:	a801      	add	r0, sp, #4
   d9828:	f003 fdcf 	bl	dd3ca <_ZN5spark10JSONWriter9endObjectEv>
    addEvent(buf);
   d982c:	4631      	mov	r1, r6
   d982e:	4628      	mov	r0, r5
   d9830:	f7ff ff80 	bl	d9734 <_ZN11SleepHelper12EventHistory8addEventEPKc>
}
   d9834:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   d9838:	bd70      	pop	{r4, r5, r6, pc}
   d983a:	bf00      	nop
   d983c:	000e2d3c 	.word	0x000e2d3c

000d9840 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>:
        T getValue(size_t offset) const {
   d9840:	b538      	push	{r3, r4, r5, lr}
   d9842:	4604      	mov	r4, r0
   d9844:	3004      	adds	r0, #4
   d9846:	460d      	mov	r5, r1
   d9848:	f7ff fb98 	bl	d8f7c <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   d984c:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   d984e:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   d9850:	3b04      	subs	r3, #4
   d9852:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   d9854:	bf26      	itte	cs
   d9856:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   d9858:	595d      	ldrcs	r5, [r3, r5]
            T result = 0;
   d985a:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   d985c:	f002 fa42 	bl	dbce4 <os_mutex_recursive_unlock>
        }
   d9860:	4628      	mov	r0, r5
   d9862:	bd38      	pop	{r3, r4, r5, pc}

000d9864 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>:
        void setValue(size_t offset, T value)  {
   d9864:	b570      	push	{r4, r5, r6, lr}
   d9866:	4604      	mov	r4, r0
   d9868:	3004      	adds	r0, #4
   d986a:	460d      	mov	r5, r1
   d986c:	4616      	mov	r6, r2
   d986e:	f7ff fb85 	bl	d8f7c <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   d9872:	68e3      	ldr	r3, [r4, #12]
   d9874:	3b04      	subs	r3, #4
   d9876:	42ab      	cmp	r3, r5
   d9878:	d308      	bcc.n	d988c <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_+0x28>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   d987a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   d987c:	595a      	ldr	r2, [r3, r5]
   d987e:	42b2      	cmp	r2, r6
   d9880:	d004      	beq.n	d988c <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_+0x28>
                        *(T *)p = value;
   d9882:	515e      	str	r6, [r3, r5]
                        saveOrDefer();
   d9884:	6823      	ldr	r3, [r4, #0]
   d9886:	4620      	mov	r0, r4
   d9888:	68db      	ldr	r3, [r3, #12]
   d988a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   d988c:	6860      	ldr	r0, [r4, #4]
        }
   d988e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   d9892:	f002 ba27 	b.w	dbce4 <os_mutex_recursive_unlock>

000d9896 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   d9896:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d9898:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   d989c:	4604      	mov	r4, r0
   d989e:	42ae      	cmp	r6, r5
   d98a0:	d004      	beq.n	d98ac <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev+0x16>
    class function<_Res(_ArgTypes...)>
   d98a2:	4628      	mov	r0, r5
   d98a4:	f7fa fd20 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d98a8:	3510      	adds	r5, #16
   d98aa:	e7f8      	b.n	d989e <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   d98ac:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d98ae:	b108      	cbz	r0, d98b4 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev+0x1e>
   d98b0:	f7fa fbf5 	bl	d409e <_ZdlPv>
      }
   d98b4:	4620      	mov	r0, r4
   d98b6:	bd70      	pop	{r4, r5, r6, pc}

000d98b8 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d98b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d98ba:	2300      	movs	r3, #0
   d98bc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d98be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d98c0:	4604      	mov	r4, r0
   d98c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d98c4:	b12b      	cbz	r3, d98d2 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d98c6:	2202      	movs	r2, #2
   d98c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d98ca:	68eb      	ldr	r3, [r5, #12]
   d98cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d98ce:	68ab      	ldr	r3, [r5, #8]
   d98d0:	60a3      	str	r3, [r4, #8]
    }
   d98d2:	4620      	mov	r0, r4
   d98d4:	bd38      	pop	{r3, r4, r5, pc}

000d98d6 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d98d6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d98d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d98da:	4604      	mov	r4, r0
	  switch (__op)
   d98dc:	d008      	beq.n	d98f0 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   d98de:	2a03      	cmp	r2, #3
   d98e0:	d012      	beq.n	d9908 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
   d98e2:	2a01      	cmp	r2, #1
   d98e4:	d101      	bne.n	d98ea <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d98e6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d98e8:	6003      	str	r3, [r0, #0]
	}
   d98ea:	2000      	movs	r0, #0
   d98ec:	b003      	add	sp, #12
   d98ee:	bd30      	pop	{r4, r5, pc}
	  __dest._M_access<_Functor*>() =
   d98f0:	6809      	ldr	r1, [r1, #0]
   d98f2:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   d98f4:	2010      	movs	r0, #16
   d98f6:	f7fa fbce 	bl	d4096 <_Znwj>
   d98fa:	4605      	mov	r5, r0
   d98fc:	b110      	cbz	r0, d9904 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2e>
   d98fe:	9901      	ldr	r1, [sp, #4]
   d9900:	f7ff ffda 	bl	d98b8 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
	  __dest._M_access<_Functor*>() =
   d9904:	6025      	str	r5, [r4, #0]
	}
   d9906:	e7f0      	b.n	d98ea <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d9908:	6804      	ldr	r4, [r0, #0]
   d990a:	2c00      	cmp	r4, #0
   d990c:	d0ed      	beq.n	d98ea <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d990e:	4620      	mov	r0, r4
   d9910:	f7fa fcea 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d9914:	2110      	movs	r1, #16
   d9916:	4620      	mov	r0, r4
   d9918:	f005 fda4 	bl	df464 <_ZdlPvj>
   d991c:	e7e5      	b.n	d98ea <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

000d991e <_ZNSt8functionIFbvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d991e:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d9920:	2300      	movs	r3, #0
   d9922:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d9924:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d9926:	4604      	mov	r4, r0
   d9928:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d992a:	b12b      	cbz	r3, d9938 <_ZNSt8functionIFbvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d992c:	2202      	movs	r2, #2
   d992e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d9930:	68eb      	ldr	r3, [r5, #12]
   d9932:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9934:	68ab      	ldr	r3, [r5, #8]
   d9936:	60a3      	str	r3, [r4, #8]
    }
   d9938:	4620      	mov	r0, r4
   d993a:	bd38      	pop	{r3, r4, r5, pc}

000d993c <_ZNSt8functionIFbRiS0_EEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
   d993c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d993e:	2300      	movs	r3, #0
   d9940:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d9942:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d9944:	4604      	mov	r4, r0
   d9946:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d9948:	b12b      	cbz	r3, d9956 <_ZNSt8functionIFbRiS0_EEC1ERKS2_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d994a:	2202      	movs	r2, #2
   d994c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d994e:	68eb      	ldr	r3, [r5, #12]
   d9950:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9952:	68ab      	ldr	r3, [r5, #8]
   d9954:	60a3      	str	r3, [r4, #8]
    }
   d9956:	4620      	mov	r0, r4
   d9958:	bd38      	pop	{r3, r4, r5, pc}

000d995a <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_>:
    function<_Res(_ArgTypes...)>::
   d995a:	b510      	push	{r4, lr}
      if (_M_empty())
   d995c:	6884      	ldr	r4, [r0, #8]
   d995e:	b90c      	cbnz	r4, d9964 <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_+0xa>
	__throw_bad_function_call();
   d9960:	f005 fd8c 	bl	df47c <_ZSt25__throw_bad_function_callv>
    }
   d9964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9968:	68c3      	ldr	r3, [r0, #12]
   d996a:	4718      	bx	r3

000d996c <_ZNSt17_Function_handlerIFbRN5spark10JSONWriterERiEZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvS2_S3_EEEUlS2_S3_E_E9_M_invokeERKSt9_Any_dataS2_S3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d996c:	b570      	push	{r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   d996e:	6804      	ldr	r4, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9970:	460d      	mov	r5, r1
                const char *name = eventsEnableName(flag);
   d9972:	e9d4 0100 	ldrd	r0, r1, [r4]
   d9976:	4616      	mov	r6, r2
   d9978:	f7ff fb7a 	bl	d9070 <_ZN11SleepHelper16eventsEnableNameEy>
   d997c:	4601      	mov	r1, r0
                writer.name(name);
   d997e:	4628      	mov	r0, r5
   d9980:	f7ff faee 	bl	d8f60 <_ZN5spark10JSONWriter4nameEPKc>
                priority = eventsEnablePriority(flag);
   d9984:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   d9988:	f7ff fb58 	bl	d903c <_ZN11SleepHelper20eventsEnablePriorityEy>
                fn(writer, priority);
   d998c:	4632      	mov	r2, r6
                priority = eventsEnablePriority(flag);
   d998e:	6030      	str	r0, [r6, #0]
                fn(writer, priority);
   d9990:	4629      	mov	r1, r5
   d9992:	4620      	mov	r0, r4
   d9994:	f7ff ffe1 	bl	d995a <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_>
      }
   d9998:	2001      	movs	r0, #1
   d999a:	bd70      	pop	{r4, r5, r6, pc}

000d999c <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d999c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d999e:	2300      	movs	r3, #0
   d99a0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d99a2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d99a4:	4604      	mov	r4, r0
   d99a6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d99a8:	b12b      	cbz	r3, d99b6 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d99aa:	2202      	movs	r2, #2
   d99ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d99ae:	68eb      	ldr	r3, [r5, #12]
   d99b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d99b2:	68ab      	ldr	r3, [r5, #8]
   d99b4:	60a3      	str	r3, [r4, #8]
    }
   d99b6:	4620      	mov	r0, r4
   d99b8:	bd38      	pop	{r3, r4, r5, pc}

000d99ba <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	  switch (__op)
   d99ba:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d99bc:	b570      	push	{r4, r5, r6, lr}
   d99be:	4604      	mov	r4, r0
	  switch (__op)
   d99c0:	d007      	beq.n	d99d2 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x18>
   d99c2:	2a03      	cmp	r2, #3
   d99c4:	d014      	beq.n	d99f0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x36>
   d99c6:	2a01      	cmp	r2, #1
   d99c8:	d101      	bne.n	d99ce <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d99ca:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d99cc:	6003      	str	r3, [r0, #0]
	}
   d99ce:	2000      	movs	r0, #0
   d99d0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d99d2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d99d4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d99d6:	f7fa fb5e 	bl	d4096 <_Znwj>
   d99da:	4605      	mov	r5, r0
   d99dc:	b130      	cbz	r0, d99ec <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
            wakeEventFunctions.withOneTimeCallback([flag, fn](JSONWriter &writer, int &priority) {
   d99de:	4631      	mov	r1, r6
   d99e0:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   d99e4:	e8e0 2302 	strd	r2, r3, [r0], #8
   d99e8:	f7ff ffd8 	bl	d999c <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_>
	  __dest._M_access<_Functor*>() =
   d99ec:	6025      	str	r5, [r4, #0]
	}
   d99ee:	e7ee      	b.n	d99ce <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d99f0:	6804      	ldr	r4, [r0, #0]
   d99f2:	2c00      	cmp	r4, #0
   d99f4:	d0eb      	beq.n	d99ce <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d99f6:	f104 0008 	add.w	r0, r4, #8
   d99fa:	f7fa fc75 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d99fe:	2118      	movs	r1, #24
   d9a00:	4620      	mov	r0, r4
   d9a02:	f005 fd2f 	bl	df464 <_ZdlPvj>
   d9a06:	e7e2      	b.n	d99ce <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>

000d9a08 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   d9a08:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d9a0a:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   d9a0e:	4604      	mov	r4, r0
   d9a10:	42ae      	cmp	r6, r5
   d9a12:	d004      	beq.n	d9a1e <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev+0x16>
    class function<_Res(_ArgTypes...)>
   d9a14:	4628      	mov	r0, r5
   d9a16:	f7fa fc67 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d9a1a:	3510      	adds	r5, #16
   d9a1c:	e7f8      	b.n	d9a10 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   d9a1e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d9a20:	b108      	cbz	r0, d9a26 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev+0x1e>
   d9a22:	f7fa fb3c 	bl	d409e <_ZdlPv>
      }
   d9a26:	4620      	mov	r0, r4
   d9a28:	bd70      	pop	{r4, r5, r6, pc}

000d9a2a <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb>:
        void forEach(Types... args) {
   d9a2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
      : _M_current(__i) { }
   d9a2c:	6804      	ldr	r4, [r0, #0]
   d9a2e:	4605      	mov	r5, r0
   d9a30:	460e      	mov	r6, r1
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   d9a32:	686b      	ldr	r3, [r5, #4]
   d9a34:	429c      	cmp	r4, r3
   d9a36:	d00c      	beq.n	d9a52 <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb+0x28>
   d9a38:	f88d 6007 	strb.w	r6, [sp, #7]
      if (_M_empty())
   d9a3c:	68a3      	ldr	r3, [r4, #8]
   d9a3e:	b90b      	cbnz	r3, d9a44 <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb+0x1a>
	__throw_bad_function_call();
   d9a40:	f005 fd1c 	bl	df47c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9a44:	68e3      	ldr	r3, [r4, #12]
   d9a46:	4620      	mov	r0, r4
   d9a48:	f10d 0107 	add.w	r1, sp, #7
   d9a4c:	4798      	blx	r3
	++_M_current;
   d9a4e:	3410      	adds	r4, #16
	return *this;
   d9a50:	e7ef      	b.n	d9a32 <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb+0x8>
        }
   d9a52:	b002      	add	sp, #8
   d9a54:	bd70      	pop	{r4, r5, r6, pc}

000d9a56 <_ZN11SleepHelper18systemEventHandlerEyi>:
    switch(event) {
   d9a56:	2b00      	cmp	r3, #0
   d9a58:	bf08      	it	eq
   d9a5a:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
void SleepHelper::systemEventHandler(system_event_t event, int param) {
   d9a5e:	b538      	push	{r3, r4, r5, lr}
    switch(event) {
   d9a60:	d005      	beq.n	d9a6e <_ZN11SleepHelper18systemEventHandlerEyi+0x18>
   d9a62:	2b00      	cmp	r3, #0
   d9a64:	bf08      	it	eq
   d9a66:	f5b2 2f80 	cmpeq.w	r2, #262144	; 0x40000
   d9a6a:	d006      	beq.n	d9a7a <_ZN11SleepHelper18systemEventHandlerEyi+0x24>
}
   d9a6c:	bd38      	pop	{r3, r4, r5, pc}
            sleepOrResetFunctions.forEach(true);
   d9a6e:	2101      	movs	r1, #1
   d9a70:	f500 60df 	add.w	r0, r0, #1784	; 0x6f8
   d9a74:	f7ff ffd9 	bl	d9a2a <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb>
            break;
   d9a78:	e7f8      	b.n	d9a6c <_ZN11SleepHelper18systemEventHandlerEyi+0x16>
            outOfMemory = true;
   d9a7a:	2301      	movs	r3, #1
   d9a7c:	f880 37d0 	strb.w	r3, [r0, #2000]	; 0x7d0
}
   d9a80:	e7f4      	b.n	d9a6c <_ZN11SleepHelper18systemEventHandlerEyi+0x16>

000d9a82 <_ZN11SleepHelper24systemEventHandlerStaticEyi>:
void SleepHelper::systemEventHandlerStatic(system_event_t event, int param) {
   d9a82:	b530      	push	{r4, r5, lr}
   d9a84:	b085      	sub	sp, #20
   d9a86:	4615      	mov	r5, r2
   d9a88:	4604      	mov	r4, r0
   d9a8a:	9103      	str	r1, [sp, #12]
    SleepHelper::instance().systemEventHandler(event, param);
   d9a8c:	f7ff fe40 	bl	d9710 <_ZN11SleepHelper8instanceEv>
   d9a90:	9b03      	ldr	r3, [sp, #12]
   d9a92:	9500      	str	r5, [sp, #0]
   d9a94:	4622      	mov	r2, r4
   d9a96:	f7ff ffde 	bl	d9a56 <_ZN11SleepHelper18systemEventHandlerEyi>
}
   d9a9a:	b005      	add	sp, #20
   d9a9c:	bd30      	pop	{r4, r5, pc}

000d9a9e <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv>:
        bool whileAnyTrue(Types... args) {
   d9a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9aa2:	6805      	ldr	r5, [r0, #0]
   d9aa4:	68c4      	ldr	r4, [r0, #12]
   d9aa6:	4606      	mov	r6, r0
            bool finalRes = false;
   d9aa8:	2700      	movs	r7, #0
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   d9aaa:	f06f 0801 	mvn.w	r8, #1
            for(auto it = callbackState.begin(), it2 = callbackFunctions.begin(); it != callbackState.end(); ++it, ++it2) {
   d9aae:	6933      	ldr	r3, [r6, #16]
   d9ab0:	429c      	cmp	r4, r3
   d9ab2:	d012      	beq.n	d9ada <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x3c>
                if (it->callbackState != AppCallbackState::CALLBACK_START_RETURNED_FALSE) {
   d9ab4:	6823      	ldr	r3, [r4, #0]
   d9ab6:	3302      	adds	r3, #2
   d9ab8:	d00a      	beq.n	d9ad0 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x32>
      if (_M_empty())
   d9aba:	68ab      	ldr	r3, [r5, #8]
   d9abc:	b90b      	cbnz	r3, d9ac2 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x24>
	__throw_bad_function_call();
   d9abe:	f005 fcdd 	bl	df47c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9ac2:	68eb      	ldr	r3, [r5, #12]
   d9ac4:	4621      	mov	r1, r4
   d9ac6:	4628      	mov	r0, r5
   d9ac8:	4798      	blx	r3
                    if (res) {
   d9aca:	b920      	cbnz	r0, d9ad6 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x38>
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   d9acc:	f8c4 8000 	str.w	r8, [r4]
      operator++() _GLIBCXX_NOEXCEPT
   d9ad0:	3510      	adds	r5, #16
   d9ad2:	3408      	adds	r4, #8
	return *this;
   d9ad4:	e7eb      	b.n	d9aae <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x10>
                        finalRes = true;
   d9ad6:	4607      	mov	r7, r0
   d9ad8:	e7fa      	b.n	d9ad0 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x32>
        }
   d9ada:	4638      	mov	r0, r7
   d9adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9ae0 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm>:
        bool whileAnyFalse(bool defaultResult, Types... args) {
   d9ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9ae2:	6804      	ldr	r4, [r0, #0]
   d9ae4:	4606      	mov	r6, r0
   d9ae6:	4617      	mov	r7, r2
            bool finalRes = defaultResult;
   d9ae8:	460d      	mov	r5, r1
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   d9aea:	6873      	ldr	r3, [r6, #4]
   d9aec:	42a3      	cmp	r3, r4
   d9aee:	d00d      	beq.n	d9b0c <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm+0x2c>
   d9af0:	9701      	str	r7, [sp, #4]
      if (_M_empty())
   d9af2:	68a3      	ldr	r3, [r4, #8]
   d9af4:	b90b      	cbnz	r3, d9afa <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm+0x1a>
	__throw_bad_function_call();
   d9af6:	f005 fcc1 	bl	df47c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9afa:	68e3      	ldr	r3, [r4, #12]
   d9afc:	4620      	mov	r0, r4
   d9afe:	a901      	add	r1, sp, #4
   d9b00:	4798      	blx	r3
                    finalRes = res;
   d9b02:	2800      	cmp	r0, #0
   d9b04:	bf08      	it	eq
   d9b06:	2500      	moveq	r5, #0
      operator++() _GLIBCXX_NOEXCEPT
   d9b08:	3410      	adds	r4, #16
	return *this;
   d9b0a:	e7ee      	b.n	d9aea <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm+0xa>
        }
   d9b0c:	4628      	mov	r0, r5
   d9b0e:	b003      	add	sp, #12
   d9b10:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9b12 <_ZNKSt8functionIFbvEEclEv>:
    function<_Res(_ArgTypes...)>::
   d9b12:	b510      	push	{r4, lr}
      if (_M_empty())
   d9b14:	6882      	ldr	r2, [r0, #8]
   d9b16:	b90a      	cbnz	r2, d9b1c <_ZNKSt8functionIFbvEEclEv+0xa>
	__throw_bad_function_call();
   d9b18:	f005 fcb0 	bl	df47c <_ZSt25__throw_bad_function_callv>
    }
   d9b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9b20:	68c3      	ldr	r3, [r0, #12]
   d9b22:	4718      	bx	r3

000d9b24 <_ZNKSt8functionIFbiEEclEi>:
    function<_Res(_ArgTypes...)>::
   d9b24:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   d9b26:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d9b28:	9101      	str	r1, [sp, #4]
      if (_M_empty())
   d9b2a:	b90a      	cbnz	r2, d9b30 <_ZNKSt8functionIFbiEEclEi+0xc>
	__throw_bad_function_call();
   d9b2c:	f005 fca6 	bl	df47c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9b30:	68c3      	ldr	r3, [r0, #12]
   d9b32:	a901      	add	r1, sp, #4
   d9b34:	4798      	blx	r3
    }
   d9b36:	b003      	add	sp, #12
   d9b38:	f85d fb04 	ldr.w	pc, [sp], #4

000d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d9b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9b3e:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   d9b42:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d9b44:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d9b46:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   d9b48:	b90a      	cbnz	r2, d9b4e <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x12>
   d9b4a:	07d9      	lsls	r1, r3, #31
   d9b4c:	d505      	bpl.n	d9b5a <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d9b4e:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   d9b52:	4b0b      	ldr	r3, [pc, #44]	; (d9b80 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x44>)
   d9b54:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9b56:	4b0b      	ldr	r3, [pc, #44]	; (d9b84 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x48>)
   d9b58:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d9b5a:	4621      	mov	r1, r4
   d9b5c:	4668      	mov	r0, sp
   d9b5e:	f7fa fd8d 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9b62:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d9b64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9b66:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9b68:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9b6a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d9b6c:	4668      	mov	r0, sp
   d9b6e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9b70:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9b72:	9203      	str	r2, [sp, #12]
   d9b74:	f7fa fbb8 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	}
   d9b78:	4620      	mov	r0, r4
   d9b7a:	b004      	add	sp, #16
   d9b7c:	bd10      	pop	{r4, pc}
   d9b7e:	bf00      	nop
   d9b80:	000d8d6d 	.word	0x000d8d6d
   d9b84:	000d8ba7 	.word	0x000d8ba7

000d9b88 <_ZN11SleepHelper25stateHandlerTimeValidWaitEv>:
void SleepHelper::stateHandlerTimeValidWait() {
   d9b88:	b513      	push	{r0, r1, r4, lr}
   d9b8a:	4604      	mov	r4, r0
    if (Time.isValid()) {
   d9b8c:	f005 f9b4 	bl	deef8 <_ZN9TimeClass7isValidEv>
   d9b90:	b140      	cbz	r0, d9ba4 <_ZN11SleepHelper25stateHandlerTimeValidWaitEv+0x1c>
        stateHandler = &SleepHelper::stateHandlerConnectedStart;
   d9b92:	4b05      	ldr	r3, [pc, #20]	; (d9ba8 <_ZN11SleepHelper25stateHandlerTimeValidWaitEv+0x20>)
   d9b94:	9300      	str	r3, [sp, #0]
   d9b96:	4669      	mov	r1, sp
   d9b98:	2300      	movs	r3, #0
   d9b9a:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9b9e:	9301      	str	r3, [sp, #4]
   d9ba0:	f7ff ffcc 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d9ba4:	b002      	add	sp, #8
   d9ba6:	bd10      	pop	{r4, pc}
   d9ba8:	000da281 	.word	0x000da281

000d9bac <_ZN11SleepHelper28stateHandlerPublishRateLimitEv>:
void SleepHelper::stateHandlerPublishRateLimit() {
   d9bac:	b513      	push	{r0, r1, r4, lr}
   d9bae:	4604      	mov	r4, r0
   d9bb0:	f002 f8d0 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime > 1000) {
   d9bb4:	f8d4 37b8 	ldr.w	r3, [r4, #1976]	; 0x7b8
   d9bb8:	1ac0      	subs	r0, r0, r3
   d9bba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d9bbe:	d908      	bls.n	d9bd2 <_ZN11SleepHelper28stateHandlerPublishRateLimitEv+0x26>
        stateHandler = &SleepHelper::stateHandlerConnected;
   d9bc0:	4b05      	ldr	r3, [pc, #20]	; (d9bd8 <_ZN11SleepHelper28stateHandlerPublishRateLimitEv+0x2c>)
   d9bc2:	9300      	str	r3, [sp, #0]
   d9bc4:	4669      	mov	r1, sp
   d9bc6:	2300      	movs	r3, #0
   d9bc8:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9bcc:	9301      	str	r3, [sp, #4]
   d9bce:	f7ff ffb5 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d9bd2:	b002      	add	sp, #8
   d9bd4:	bd10      	pop	{r4, pc}
   d9bd6:	bf00      	nop
   d9bd8:	000daed1 	.word	0x000daed1

000d9bdc <_ZN11SleepHelper26stateHandlerDisconnectWaitEv>:
void SleepHelper::stateHandlerDisconnectWait() {
   d9bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9bde:	4604      	mov	r4, r0
   d9be0:	f002 fb60 	bl	dc2a4 <spark_cloud_flag_connected>
    if (Particle.disconnected()) {
   d9be4:	4605      	mov	r5, r0
   d9be6:	b988      	cbnz	r0, d9c0c <_ZN11SleepHelper26stateHandlerDisconnectWaitEv+0x30>
        appLog.info("Disconnecting cellular");
   d9be8:	4909      	ldr	r1, [pc, #36]	; (d9c10 <_ZN11SleepHelper26stateHandlerDisconnectWaitEv+0x34>)
   d9bea:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   d9bee:	f7fa fb84 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
        network.disconnect();
   d9bf2:	f8d4 07e0 	ldr.w	r0, [r4, #2016]	; 0x7e0
   d9bf6:	6803      	ldr	r3, [r0, #0]
   d9bf8:	685b      	ldr	r3, [r3, #4]
   d9bfa:	4798      	blx	r3
        stateHandler = &SleepHelper::stateHandlerWaitCellularDisconnected;
   d9bfc:	4b05      	ldr	r3, [pc, #20]	; (d9c14 <_ZN11SleepHelper26stateHandlerDisconnectWaitEv+0x38>)
   d9bfe:	4669      	mov	r1, sp
   d9c00:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9c04:	e9cd 3500 	strd	r3, r5, [sp]
   d9c08:	f7ff ff98 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d9c0c:	b003      	add	sp, #12
   d9c0e:	bd30      	pop	{r4, r5, pc}
   d9c10:	000e2970 	.word	0x000e2970
   d9c14:	000d9c19 	.word	0x000d9c19

000d9c18 <_ZN11SleepHelper36stateHandlerWaitCellularDisconnectedEv>:
void SleepHelper::stateHandlerWaitCellularDisconnected() {
   d9c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9c1a:	4604      	mov	r4, r0
    if (!network.ready()) {
   d9c1c:	f8d0 07e0 	ldr.w	r0, [r0, #2016]	; 0x7e0
   d9c20:	6803      	ldr	r3, [r0, #0]
   d9c22:	68db      	ldr	r3, [r3, #12]
   d9c24:	4798      	blx	r3
   d9c26:	4605      	mov	r5, r0
   d9c28:	b960      	cbnz	r0, d9c44 <_ZN11SleepHelper36stateHandlerWaitCellularDisconnectedEv+0x2c>
        network.off();
   d9c2a:	f8d4 07e0 	ldr.w	r0, [r4, #2016]	; 0x7e0
   d9c2e:	6803      	ldr	r3, [r0, #0]
   d9c30:	695b      	ldr	r3, [r3, #20]
   d9c32:	4798      	blx	r3
        stateHandler = &SleepHelper::stateHandlerWaitCellularOff;
   d9c34:	4b04      	ldr	r3, [pc, #16]	; (d9c48 <_ZN11SleepHelper36stateHandlerWaitCellularDisconnectedEv+0x30>)
   d9c36:	4669      	mov	r1, sp
   d9c38:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9c3c:	e9cd 3500 	strd	r3, r5, [sp]
   d9c40:	f7ff ff7c 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d9c44:	b003      	add	sp, #12
   d9c46:	bd30      	pop	{r4, r5, pc}
   d9c48:	000d9c4d 	.word	0x000d9c4d

000d9c4c <_ZN11SleepHelper27stateHandlerWaitCellularOffEv>:
void SleepHelper::stateHandlerWaitCellularOff() {
   d9c4c:	b513      	push	{r0, r1, r4, lr}
   d9c4e:	4604      	mov	r4, r0
    if (network.isOff()) {
   d9c50:	f8d0 07e0 	ldr.w	r0, [r0, #2016]	; 0x7e0
   d9c54:	6803      	ldr	r3, [r0, #0]
   d9c56:	69db      	ldr	r3, [r3, #28]
   d9c58:	4798      	blx	r3
   d9c5a:	b140      	cbz	r0, d9c6e <_ZN11SleepHelper27stateHandlerWaitCellularOffEv+0x22>
        stateHandler = &SleepHelper::stateHandlerSleep;
   d9c5c:	4b05      	ldr	r3, [pc, #20]	; (d9c74 <_ZN11SleepHelper27stateHandlerWaitCellularOffEv+0x28>)
   d9c5e:	9300      	str	r3, [sp, #0]
   d9c60:	4669      	mov	r1, sp
   d9c62:	2300      	movs	r3, #0
   d9c64:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9c68:	9301      	str	r3, [sp, #4]
   d9c6a:	f7ff ff67 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d9c6e:	b002      	add	sp, #8
   d9c70:	bd10      	pop	{r4, pc}
   d9c72:	bf00      	nop
   d9c74:	000d9e89 	.word	0x000d9e89

000d9c78 <_ZN11SleepHelper22stateHandlerSleepShortEv>:
void SleepHelper::stateHandlerSleepShort() {
   d9c78:	b513      	push	{r0, r1, r4, lr}
   d9c7a:	4604      	mov	r4, r0
   d9c7c:	f002 f86a 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= sleepParams.sleepTimeMs) {
   d9c80:	f8d4 37b8 	ldr.w	r3, [r4, #1976]	; 0x7b8
   d9c84:	1ac0      	subs	r0, r0, r3
   d9c86:	f8d4 3690 	ldr.w	r3, [r4, #1680]	; 0x690
   d9c8a:	4298      	cmp	r0, r3
   d9c8c:	d308      	bcc.n	d9ca0 <_ZN11SleepHelper22stateHandlerSleepShortEv+0x28>
        stateHandler = &SleepHelper::stateHandlerSleepDone;
   d9c8e:	4b05      	ldr	r3, [pc, #20]	; (d9ca4 <_ZN11SleepHelper22stateHandlerSleepShortEv+0x2c>)
   d9c90:	9300      	str	r3, [sp, #0]
   d9c92:	4669      	mov	r1, sp
   d9c94:	2300      	movs	r3, #0
   d9c96:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9c9a:	9301      	str	r3, [sp, #4]
   d9c9c:	f7ff ff4e 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d9ca0:	b002      	add	sp, #8
   d9ca2:	bd10      	pop	{r4, pc}
   d9ca4:	000da325 	.word	0x000da325

000d9ca8 <_ZN11SleepHelper17stateHandlerStartEv>:
void SleepHelper::stateHandlerStart() {
   d9ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    appLog.info("stateHandlerStart");
   d9cac:	f200 77e4 	addw	r7, r0, #2020	; 0x7e4
void SleepHelper::stateHandlerStart() {
   d9cb0:	b085      	sub	sp, #20
    appLog.info("stateHandlerStart");
   d9cb2:	493a      	ldr	r1, [pc, #232]	; (d9d9c <_ZN11SleepHelper17stateHandlerStartEv+0xf4>)
void SleepHelper::stateHandlerStart() {
   d9cb4:	4604      	mov	r4, r0
    appLog.info("stateHandlerStart");
   d9cb6:	4638      	mov	r0, r7
   d9cb8:	f7fa fb1f 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
    if (Time.isValid() && sleepParams.nextFullWakeTime) {        
   d9cbc:	f005 f91c 	bl	deef8 <_ZN9TimeClass7isValidEv>
   d9cc0:	b970      	cbnz	r0, d9ce0 <_ZN11SleepHelper17stateHandlerStartEv+0x38>
            int maxNoConnectConviction = 0;
   d9cc2:	2600      	movs	r6, #0
      : _M_current(__i) { }
   d9cc4:	f8d4 56e0 	ldr.w	r5, [r4, #1760]	; 0x6e0
            int maxConnectConviction = 0;
   d9cc8:	46b0      	mov	r8, r6
                int connectConviction = 0;
   d9cca:	46b1      	mov	r9, r6
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   d9ccc:	f8d4 36e4 	ldr.w	r3, [r4, #1764]	; 0x6e4
   d9cd0:	42ab      	cmp	r3, r5
   d9cd2:	d03d      	beq.n	d9d50 <_ZN11SleepHelper17stateHandlerStartEv+0xa8>
                int noConnectConviction = 0;
   d9cd4:	e9cd 9901 	strd	r9, r9, [sp, #4]
      if (_M_empty())
   d9cd8:	68ab      	ldr	r3, [r5, #8]
   d9cda:	bb53      	cbnz	r3, d9d32 <_ZN11SleepHelper17stateHandlerStartEv+0x8a>
	__throw_bad_function_call();
   d9cdc:	f005 fbce 	bl	df47c <_ZSt25__throw_bad_function_callv>
   d9ce0:	f504 65d0 	add.w	r5, r4, #1664	; 0x680
   d9ce4:	e9d5 2300 	ldrd	r2, r3, [r5]
   d9ce8:	4313      	orrs	r3, r2
   d9cea:	d0ea      	beq.n	d9cc2 <_ZN11SleepHelper17stateHandlerStartEv+0x1a>
        isQuickWake = (Time.now() < sleepParams.nextFullWakeTime);
   d9cec:	f005 f921 	bl	def32 <_ZN9TimeClass3nowEv>
    if (isQuickWake || !shouldConnectFunctions.shouldConnect()) {
   d9cf0:	e9d5 2300 	ldrd	r2, r3, [r5]
        isQuickWake = (Time.now() < sleepParams.nextFullWakeTime);
   d9cf4:	17c1      	asrs	r1, r0, #31
    if (isQuickWake || !shouldConnectFunctions.shouldConnect()) {
   d9cf6:	4290      	cmp	r0, r2
   d9cf8:	eb71 0303 	sbcs.w	r3, r1, r3
   d9cfc:	dae1      	bge.n	d9cc2 <_ZN11SleepHelper17stateHandlerStartEv+0x1a>
        appLog.info("running in no connection mode");
   d9cfe:	4928      	ldr	r1, [pc, #160]	; (d9da0 <_ZN11SleepHelper17stateHandlerStartEv+0xf8>)
   d9d00:	4638      	mov	r0, r7
   d9d02:	f7fa fafa 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
        SleepHelper::instance().persistentData.setValue_lastQuickWake(Time.now());
   d9d06:	f7ff fd03 	bl	d9710 <_ZN11SleepHelper8instanceEv>
   d9d0a:	4605      	mov	r5, r0
   d9d0c:	f005 f911 	bl	def32 <_ZN9TimeClass3nowEv>
            setValue<uint32_t>(offsetof(SleepHelperData, lastQuickWake), (uint32_t)value);
   d9d10:	2118      	movs	r1, #24
   d9d12:	4602      	mov	r2, r0
   d9d14:	f505 60bd 	add.w	r0, r5, #1512	; 0x5e8
   d9d18:	f7ff fda4 	bl	d9864 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d9d1c:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
                it->callbackState = newState;
   d9d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            for(auto it = callbackState.begin(); it != callbackState.end(); ++it) {
   d9d24:	f8d4 1720 	ldr.w	r1, [r4, #1824]	; 0x720
   d9d28:	4299      	cmp	r1, r3
   d9d2a:	d02d      	beq.n	d9d88 <_ZN11SleepHelper17stateHandlerStartEv+0xe0>
                it->callbackState = newState;
   d9d2c:	f843 2b08 	str.w	r2, [r3], #8
	return *this;
   d9d30:	e7f8      	b.n	d9d24 <_ZN11SleepHelper17stateHandlerStartEv+0x7c>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9d32:	68eb      	ldr	r3, [r5, #12]
   d9d34:	4628      	mov	r0, r5
   d9d36:	aa02      	add	r2, sp, #8
   d9d38:	a901      	add	r1, sp, #4
   d9d3a:	4798      	blx	r3
                if (connectConviction > maxConnectConviction) {
   d9d3c:	9b01      	ldr	r3, [sp, #4]
   d9d3e:	4598      	cmp	r8, r3
   d9d40:	bfb8      	it	lt
   d9d42:	4698      	movlt	r8, r3
                if (noConnectConviction > maxNoConnectConviction) {
   d9d44:	9b02      	ldr	r3, [sp, #8]
   d9d46:	429e      	cmp	r6, r3
   d9d48:	bfb8      	it	lt
   d9d4a:	461e      	movlt	r6, r3
	++_M_current;
   d9d4c:	3510      	adds	r5, #16
	return *this;
   d9d4e:	e7bd      	b.n	d9ccc <_ZN11SleepHelper17stateHandlerStartEv+0x24>
    if (isQuickWake || !shouldConnectFunctions.shouldConnect()) {
   d9d50:	45b0      	cmp	r8, r6
   d9d52:	dbd4      	blt.n	d9cfe <_ZN11SleepHelper17stateHandlerStartEv+0x56>
    appLog.info("connecting to cloud");
   d9d54:	4913      	ldr	r1, [pc, #76]	; (d9da4 <_ZN11SleepHelper17stateHandlerStartEv+0xfc>)
   d9d56:	4638      	mov	r0, r7
   d9d58:	f7fa facf 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
    stateHandler = &SleepHelper::stateHandlerConnectWait;
   d9d5c:	2500      	movs	r5, #0
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d9d5e:	f002 fa99 	bl	dc294 <spark_cloud_flag_connect>
   d9d62:	4b11      	ldr	r3, [pc, #68]	; (d9da8 <_ZN11SleepHelper17stateHandlerStartEv+0x100>)
   d9d64:	9302      	str	r3, [sp, #8]
   d9d66:	a902      	add	r1, sp, #8
   d9d68:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9d6c:	9503      	str	r5, [sp, #12]
   d9d6e:	f7ff fee5 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d9d72:	f001 ffef 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
    networkConnectedMillis = 0;
   d9d76:	f8c4 57c4 	str.w	r5, [r4, #1988]	; 0x7c4
    connectAttemptStartMillis = millis();
   d9d7a:	f8c4 07bc 	str.w	r0, [r4, #1980]	; 0x7bc
    reconnectAttemptStartMillis = 0;
   d9d7e:	f8c4 57c0 	str.w	r5, [r4, #1984]	; 0x7c0
}
   d9d82:	b005      	add	sp, #20
   d9d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        stateHandler = &SleepHelper::stateHandlerNoConnection;
   d9d88:	4b08      	ldr	r3, [pc, #32]	; (d9dac <_ZN11SleepHelper17stateHandlerStartEv+0x104>)
   d9d8a:	9302      	str	r3, [sp, #8]
   d9d8c:	a902      	add	r1, sp, #8
   d9d8e:	2300      	movs	r3, #0
   d9d90:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9d94:	9303      	str	r3, [sp, #12]
   d9d96:	f7ff fed1 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   d9d9a:	e7f2      	b.n	d9d82 <_ZN11SleepHelper17stateHandlerStartEv+0xda>
   d9d9c:	000e2987 	.word	0x000e2987
   d9da0:	000e2999 	.word	0x000e2999
   d9da4:	000e29e0 	.word	0x000e29e0
   d9da8:	000d9db1 	.word	0x000d9db1
   d9dac:	000dbaad 	.word	0x000dbaad

000d9db0 <_ZN11SleepHelper23stateHandlerConnectWaitEv>:
void SleepHelper::stateHandlerConnectWait() {
   d9db0:	b513      	push	{r0, r1, r4, lr}
   d9db2:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9db4:	f002 fa76 	bl	dc2a4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d9db8:	b150      	cbz	r0, d9dd0 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x20>
        stateHandler = &SleepHelper::stateHandlerTimeValidWait;
   d9dba:	4b19      	ldr	r3, [pc, #100]	; (d9e20 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x70>)
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   d9dbc:	9300      	str	r3, [sp, #0]
   d9dbe:	4669      	mov	r1, sp
   d9dc0:	2300      	movs	r3, #0
   d9dc2:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9dc6:	9301      	str	r3, [sp, #4]
   d9dc8:	f7ff feb8 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d9dcc:	b002      	add	sp, #8
   d9dce:	bd10      	pop	{r4, pc}
    if (!networkConnectedMillis && network.ready()) {
   d9dd0:	f8d4 37c4 	ldr.w	r3, [r4, #1988]	; 0x7c4
   d9dd4:	b98b      	cbnz	r3, d9dfa <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x4a>
   d9dd6:	f8d4 07e0 	ldr.w	r0, [r4, #2016]	; 0x7e0
   d9dda:	6803      	ldr	r3, [r0, #0]
   d9ddc:	68db      	ldr	r3, [r3, #12]
   d9dde:	4798      	blx	r3
   d9de0:	b158      	cbz	r0, d9dfa <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x4a>
   d9de2:	f001 ffb7 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
        system_tick_t elapsedMs = networkConnectedMillis - connectAttemptStartMillis;
   d9de6:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	; 0x7bc
        networkConnectedMillis = millis();
   d9dea:	f8c4 07c4 	str.w	r0, [r4, #1988]	; 0x7c4
        appLog.info("connected to network in %lu ms", elapsedMs);
   d9dee:	1a82      	subs	r2, r0, r2
   d9df0:	490c      	ldr	r1, [pc, #48]	; (d9e24 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x74>)
   d9df2:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   d9df6:	f7fa fa80 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
   d9dfa:	f001 ffab 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
    system_tick_t elapsedMs = millis() - connectAttemptStartMillis;
   d9dfe:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	; 0x7bc
    if (maximumTimeToConnectFunctions.whileAnyFalse(false, elapsedMs)) {
   d9e02:	2100      	movs	r1, #0
   d9e04:	1a82      	subs	r2, r0, r2
   d9e06:	f204 7004 	addw	r0, r4, #1796	; 0x704
   d9e0a:	f7ff fe69 	bl	d9ae0 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm>
   d9e0e:	2800      	cmp	r0, #0
   d9e10:	d0dc      	beq.n	d9dcc <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x1c>
        appLog.info("timed out connecting to cloud");
   d9e12:	4905      	ldr	r1, [pc, #20]	; (d9e28 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x78>)
   d9e14:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   d9e18:	f7fa fa6f 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   d9e1c:	4b03      	ldr	r3, [pc, #12]	; (d9e2c <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x7c>)
   d9e1e:	e7cd      	b.n	d9dbc <_ZN11SleepHelper23stateHandlerConnectWaitEv+0xc>
   d9e20:	000d9b89 	.word	0x000d9b89
   d9e24:	000e29b7 	.word	0x000e29b7
   d9e28:	000e29d6 	.word	0x000e29d6
   d9e2c:	000dbaf1 	.word	0x000dbaf1

000d9e30 <_ZN11SleepHelper25stateHandlerReconnectWaitEv>:
void SleepHelper::stateHandlerReconnectWait() {
   d9e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9e32:	4604      	mov	r4, r0
   d9e34:	f002 fa36 	bl	dc2a4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d9e38:	4605      	mov	r5, r0
   d9e3a:	b150      	cbz	r0, d9e52 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x22>
        stateHandler = &SleepHelper::stateHandlerConnected;
   d9e3c:	4b0f      	ldr	r3, [pc, #60]	; (d9e7c <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x4c>)
   d9e3e:	9300      	str	r3, [sp, #0]
   d9e40:	2300      	movs	r3, #0
   d9e42:	9301      	str	r3, [sp, #4]
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   d9e44:	4669      	mov	r1, sp
   d9e46:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9e4a:	f7ff fe77 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d9e4e:	b003      	add	sp, #12
   d9e50:	bd30      	pop	{r4, r5, pc}
   d9e52:	f001 ff7f 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
    system_tick_t elapsedMs = millis() - reconnectAttemptStartMillis;
   d9e56:	f8d4 27c0 	ldr.w	r2, [r4, #1984]	; 0x7c0
    if (maximumTimeToConnectFunctions.whileAnyFalse(false, elapsedMs)) {
   d9e5a:	4629      	mov	r1, r5
   d9e5c:	1a82      	subs	r2, r0, r2
   d9e5e:	f204 7004 	addw	r0, r4, #1796	; 0x704
   d9e62:	f7ff fe3d 	bl	d9ae0 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm>
   d9e66:	2800      	cmp	r0, #0
   d9e68:	d0f1      	beq.n	d9e4e <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x1e>
        appLog.info("timed out reconnecting to cloud");
   d9e6a:	4905      	ldr	r1, [pc, #20]	; (d9e80 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x50>)
   d9e6c:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   d9e70:	f7fa fa43 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   d9e74:	4b03      	ldr	r3, [pc, #12]	; (d9e84 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x54>)
   d9e76:	e9cd 3500 	strd	r3, r5, [sp]
   d9e7a:	e7e3      	b.n	d9e44 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x14>
   d9e7c:	000daed1 	.word	0x000daed1
   d9e80:	000e29f4 	.word	0x000e29f4
   d9e84:	000dbaf1 	.word	0x000dbaf1

000d9e88 <_ZN11SleepHelper17stateHandlerSleepEv>:
void SleepHelper::stateHandlerSleep() {
   d9e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    appLog.info("stateHandlerSleep");
   d9e8a:	f200 75e4 	addw	r5, r0, #2020	; 0x7e4
void SleepHelper::stateHandlerSleep() {
   d9e8e:	4604      	mov	r4, r0
   d9e90:	b087      	sub	sp, #28
    appLog.info("stateHandlerSleep");
   d9e92:	4937      	ldr	r1, [pc, #220]	; (d9f70 <_ZN11SleepHelper17stateHandlerSleepEv+0xe8>)
   d9e94:	4628      	mov	r0, r5
   d9e96:	f7fa fa30 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
    sleepOrResetFunctions.forEach(false);
   d9e9a:	2100      	movs	r1, #0
   d9e9c:	f504 60df 	add.w	r0, r4, #1784	; 0x6f8
   d9ea0:	f7ff fdc3 	bl	d9a2a <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb>
        return hal_timer_millis(nullptr);
   d9ea4:	2000      	movs	r0, #0
   d9ea6:	f001 ff65 	bl	dbd74 <hal_timer_millis>
    int adjustmentMs = System.millis() - sleepParams.calculatedMillis;
   d9eaa:	f8d4 2688 	ldr.w	r2, [r4, #1672]	; 0x688
    if (adjustmentMs < (int)sleepParams.sleepTimeMs) {
   d9eae:	f8d4 1690 	ldr.w	r1, [r4, #1680]	; 0x690
    int adjustmentMs = System.millis() - sleepParams.calculatedMillis;
   d9eb2:	1a87      	subs	r7, r0, r2
    if (adjustmentMs < (int)sleepParams.sleepTimeMs) {
   d9eb4:	42b9      	cmp	r1, r7
   d9eb6:	dd28      	ble.n	d9f0a <_ZN11SleepHelper17stateHandlerSleepEv+0x82>
        sleepParams.sleepTimeMs -= adjustmentMs;
   d9eb8:	440a      	add	r2, r1
   d9eba:	1a11      	subs	r1, r2, r0
   d9ebc:	f8c4 1690 	str.w	r1, [r4, #1680]	; 0x690
        sleepConfig.duration(sleepParams.sleepTimeMs);
   d9ec0:	f204 605c 	addw	r0, r4, #1628	; 0x65c
   d9ec4:	f7fe ffda 	bl	d8e7c <_ZN8particle24SystemSleepConfiguration8durationEm>
    if (sleepParams.sleepTimeMs >= minimumSleepTimeMs) {
   d9ec8:	f8d4 2690 	ldr.w	r2, [r4, #1680]	; 0x690
   d9ecc:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	; 0x7a4
    wakeReasonInt = 0; // SystemSleepWakeupReason::UNKNOWN
   d9ed0:	2600      	movs	r6, #0
    if (sleepParams.sleepTimeMs >= minimumSleepTimeMs) {
   d9ed2:	429a      	cmp	r2, r3
    wakeReasonInt = 0; // SystemSleepWakeupReason::UNKNOWN
   d9ed4:	f8c4 677c 	str.w	r6, [r4, #1916]	; 0x77c
    if (sleepParams.sleepTimeMs >= minimumSleepTimeMs) {
   d9ed8:	d335      	bcc.n	d9f46 <_ZN11SleepHelper17stateHandlerSleepEv+0xbe>
        appLog.info("sleeping for %d sec adjustmentMs=%d", (int)(sleepParams.sleepTimeMs / 1000), adjustmentMs);
   d9eda:	4628      	mov	r0, r5
   d9edc:	463b      	mov	r3, r7
   d9ede:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d9ee2:	fbb2 f2f1 	udiv	r2, r2, r1
   d9ee6:	4923      	ldr	r1, [pc, #140]	; (d9f74 <_ZN11SleepHelper17stateHandlerSleepEv+0xec>)
   d9ee8:	f7fa fa07 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
        SystemSleepResult sleepResult = System.sleep(sleepConfig);
   d9eec:	f204 615c 	addw	r1, r4, #1628	; 0x65c
   d9ef0:	a803      	add	r0, sp, #12
   d9ef2:	f004 fe85 	bl	dec00 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
      : _M_current(__i) { }
   d9ef6:	f8d4 5650 	ldr.w	r5, [r4, #1616]	; 0x650
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   d9efa:	f8d4 3654 	ldr.w	r3, [r4, #1620]	; 0x654
   d9efe:	42ab      	cmp	r3, r5
   d9f00:	d00d      	beq.n	d9f1e <_ZN11SleepHelper17stateHandlerSleepEv+0x96>
      if (_M_empty())
   d9f02:	68ab      	ldr	r3, [r5, #8]
   d9f04:	b92b      	cbnz	r3, d9f12 <_ZN11SleepHelper17stateHandlerSleepEv+0x8a>
	__throw_bad_function_call();
   d9f06:	f005 fab9 	bl	df47c <_ZSt25__throw_bad_function_callv>
        sleepParams.sleepTimeMs = 0;
   d9f0a:	2300      	movs	r3, #0
   d9f0c:	f8c4 3690 	str.w	r3, [r4, #1680]	; 0x690
   d9f10:	e7da      	b.n	d9ec8 <_ZN11SleepHelper17stateHandlerSleepEv+0x40>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9f12:	68eb      	ldr	r3, [r5, #12]
   d9f14:	4628      	mov	r0, r5
   d9f16:	a903      	add	r1, sp, #12
   d9f18:	4798      	blx	r3
	++_M_current;
   d9f1a:	3510      	adds	r5, #16
	return *this;
   d9f1c:	e7ed      	b.n	d9efa <_ZN11SleepHelper17stateHandlerSleepEv+0x72>
        wakeReasonInt = (int) sleepResult.wakeupReason();
   d9f1e:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d9f20:	b103      	cbz	r3, d9f24 <_ZN11SleepHelper17stateHandlerSleepEv+0x9c>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   d9f22:	889b      	ldrh	r3, [r3, #4]
   d9f24:	f8c4 377c 	str.w	r3, [r4, #1916]	; 0x77c
        stateHandler = &SleepHelper::stateHandlerSleepDone;
   d9f28:	4b13      	ldr	r3, [pc, #76]	; (d9f78 <_ZN11SleepHelper17stateHandlerSleepEv+0xf0>)
   d9f2a:	9301      	str	r3, [sp, #4]
   d9f2c:	a901      	add	r1, sp, #4
   d9f2e:	2300      	movs	r3, #0
   d9f30:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9f34:	9302      	str	r3, [sp, #8]
   d9f36:	f7ff fe01 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        if (wakeupSource_) {
   d9f3a:	9803      	ldr	r0, [sp, #12]
   d9f3c:	b108      	cbz	r0, d9f42 <_ZN11SleepHelper17stateHandlerSleepEv+0xba>
            free(wakeupSource_);
   d9f3e:	f002 fa49 	bl	dc3d4 <free>
}
   d9f42:	b007      	add	sp, #28
   d9f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        appLog.info("period too short to sleep %d", (int)sleepParams.sleepTimeMs);
   d9f46:	490d      	ldr	r1, [pc, #52]	; (d9f7c <_ZN11SleepHelper17stateHandlerSleepEv+0xf4>)
   d9f48:	4628      	mov	r0, r5
   d9f4a:	f7fa f9d6 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
        wakeReasonInt = WAKEUP_REASON_NO_SLEEP;
   d9f4e:	4b0c      	ldr	r3, [pc, #48]	; (d9f80 <_ZN11SleepHelper17stateHandlerSleepEv+0xf8>)
   d9f50:	f8c4 377c 	str.w	r3, [r4, #1916]	; 0x77c
        stateHandler = &SleepHelper::stateHandlerSleepShort;
   d9f54:	4b0b      	ldr	r3, [pc, #44]	; (d9f84 <_ZN11SleepHelper17stateHandlerSleepEv+0xfc>)
   d9f56:	a903      	add	r1, sp, #12
   d9f58:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9f5c:	e9cd 3603 	strd	r3, r6, [sp, #12]
   d9f60:	f7ff fdec 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d9f64:	f001 fef6 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   d9f68:	f8c4 07b8 	str.w	r0, [r4, #1976]	; 0x7b8
}
   d9f6c:	e7e9      	b.n	d9f42 <_ZN11SleepHelper17stateHandlerSleepEv+0xba>
   d9f6e:	bf00      	nop
   d9f70:	000e2a14 	.word	0x000e2a14
   d9f74:	000e2a26 	.word	0x000e2a26
   d9f78:	000da325 	.word	0x000da325
   d9f7c:	000e2a4a 	.word	0x000e2a4a
   d9f80:	00010002 	.word	0x00010002
   d9f84:	000d9c79 	.word	0x000d9c79

000d9f88 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9f88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
            if (succeeded) {
   d9f8c:	780b      	ldrb	r3, [r1, #0]
   d9f8e:	4605      	mov	r5, r0
   d9f90:	b373      	cbz	r3, d9ff0 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x68>
                appLog.info("removing item from publishData");
   d9f92:	6800      	ldr	r0, [r0, #0]
   d9f94:	491d      	ldr	r1, [pc, #116]	; (da00c <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x84>)
   d9f96:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   d9f9a:	f7fa f9ae 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
            [this](bool succeeded, const char *event_name, const char *event_data, const void *event_context) {
   d9f9e:	682f      	ldr	r7, [r5, #0]
      : _M_current(__i) { }
   d9fa0:	f8d7 4780 	ldr.w	r4, [r7, #1920]	; 0x780
   d9fa4:	f8d7 3784 	ldr.w	r3, [r7, #1924]	; 0x784
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
   d9fa8:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (__position + 1 != end())
   d9fac:	429a      	cmp	r2, r3
   d9fae:	d018      	beq.n	d9fe2 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x5a>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   d9fb0:	4e17      	ldr	r6, [pc, #92]	; (da010 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x88>)
   d9fb2:	1a9b      	subs	r3, r3, r2
   d9fb4:	109b      	asrs	r3, r3, #2
   d9fb6:	435e      	muls	r6, r3
   d9fb8:	2e00      	cmp	r6, #0
   d9fba:	dd12      	ble.n	d9fe2 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x5a>
    class PublishData {
   d9fbc:	f104 0824 	add.w	r8, r4, #36	; 0x24
   d9fc0:	4641      	mov	r1, r8
   d9fc2:	4620      	mov	r0, r4
   d9fc4:	f004 fcf1 	bl	de9aa <_ZN6StringaSEOS_>
   d9fc8:	f104 0134 	add.w	r1, r4, #52	; 0x34
   d9fcc:	f104 0010 	add.w	r0, r4, #16
   d9fd0:	f004 fceb 	bl	de9aa <_ZN6StringaSEOS_>
   d9fd4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   d9fd8:	f884 3020 	strb.w	r3, [r4, #32]
   d9fdc:	3e01      	subs	r6, #1
	      ++__result;
   d9fde:	4644      	mov	r4, r8
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   d9fe0:	e7ea      	b.n	d9fb8 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x30>
      --this->_M_impl._M_finish;
   d9fe2:	f8d7 0784 	ldr.w	r0, [r7, #1924]	; 0x784
   d9fe6:	3824      	subs	r0, #36	; 0x24
   d9fe8:	f8c7 0784 	str.w	r0, [r7, #1924]	; 0x784

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d9fec:	f7ff f871 	bl	d90d2 <_ZN11SleepHelper11PublishDataD1Ev>
            stateHandler = &SleepHelper::stateHandlerPublishRateLimit;
   d9ff0:	6828      	ldr	r0, [r5, #0]
   d9ff2:	4b08      	ldr	r3, [pc, #32]	; (da014 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x8c>)
   d9ff4:	9300      	str	r3, [sp, #0]
   d9ff6:	4669      	mov	r1, sp
   d9ff8:	2300      	movs	r3, #0
   d9ffa:	f500 60f5 	add.w	r0, r0, #1960	; 0x7a8
   d9ffe:	9301      	str	r3, [sp, #4]
   da000:	f7ff fd9c 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
      }
   da004:	b002      	add	sp, #8
   da006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da00a:	bf00      	nop
   da00c:	000e2a67 	.word	0x000e2a67
   da010:	38e38e39 	.word	0x38e38e39
   da014:	000d9bad 	.word	0x000d9bad

000da018 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   da018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_My_handler::_M_not_empty_function(__f))
   da01a:	688b      	ldr	r3, [r1, #8]
    _Function_base() : _M_manager(nullptr) { }
   da01c:	2700      	movs	r7, #0
      function<_Res(_ArgTypes...)>::
   da01e:	4606      	mov	r6, r0
   da020:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
   da022:	6087      	str	r7, [r0, #8]
	if (_My_handler::_M_not_empty_function(__f))
   da024:	b1b3      	cbz	r3, da054 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x3c>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   da026:	2010      	movs	r0, #16
   da028:	f7fa f835 	bl	d4096 <_Znwj>
   da02c:	4604      	mov	r4, r0
   da02e:	b160      	cbz	r0, da04a <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x32>
    _Function_base() : _M_manager(nullptr) { }
   da030:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   da032:	4601      	mov	r1, r0
   da034:	4628      	mov	r0, r5
   da036:	f7fa fb21 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da03a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   da03c:	68a2      	ldr	r2, [r4, #8]
   da03e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da040:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   da042:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da044:	68eb      	ldr	r3, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   da046:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   da048:	60ea      	str	r2, [r5, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   da04a:	4b03      	ldr	r3, [pc, #12]	; (da058 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x40>)
   da04c:	60f3      	str	r3, [r6, #12]
	    _M_manager = &_My_handler::_M_manager;
   da04e:	4b03      	ldr	r3, [pc, #12]	; (da05c <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x44>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   da050:	6034      	str	r4, [r6, #0]
	    _M_manager = &_My_handler::_M_manager;
   da052:	60b3      	str	r3, [r6, #8]
      }
   da054:	4630      	mov	r0, r6
   da056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da058:	000d8c05 	.word	0x000d8c05
   da05c:	000d98d7 	.word	0x000d98d7

000da060 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   da060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da064:	4607      	mov	r7, r0
   da066:	4688      	mov	r8, r1
   da068:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   da06a:	4615      	mov	r5, r2
   da06c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   da06e:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   da072:	4544      	cmp	r4, r8
   da074:	d014      	beq.n	da0a0 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0+0x40>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da076:	b16d      	cbz	r5, da094 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0+0x34>
   da078:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   da07c:	4629      	mov	r1, r5
   da07e:	4620      	mov	r0, r4
   da080:	f7fa fafc 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da084:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   da086:	68aa      	ldr	r2, [r5, #8]
   da088:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da08a:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da08c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   da08e:	68ea      	ldr	r2, [r5, #12]
   da090:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   da092:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   da094:	4620      	mov	r0, r4
   da096:	f7fa f927 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   da09a:	3410      	adds	r4, #16
   da09c:	3510      	adds	r5, #16
   da09e:	e7e8      	b.n	da072 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0+0x12>
      return __cur;
   da0a0:	1be0      	subs	r0, r4, r7
    }
   da0a2:	4430      	add	r0, r6
   da0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da0a8 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   da0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da0ac:	4607      	mov	r7, r0
   da0ae:	4688      	mov	r8, r1
   da0b0:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   da0b2:	4615      	mov	r5, r2
   da0b4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   da0b6:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   da0ba:	4544      	cmp	r4, r8
   da0bc:	d014      	beq.n	da0e8 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
   da0be:	b16d      	cbz	r5, da0dc <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   da0c0:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   da0c4:	4629      	mov	r1, r5
   da0c6:	4620      	mov	r0, r4
   da0c8:	f7fa fad8 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da0cc:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   da0ce:	68aa      	ldr	r2, [r5, #8]
   da0d0:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da0d2:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da0d4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   da0d6:	68ea      	ldr	r2, [r5, #12]
   da0d8:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   da0da:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   da0dc:	4620      	mov	r0, r4
   da0de:	f7fa f903 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   da0e2:	3410      	adds	r4, #16
   da0e4:	3510      	adds	r5, #16
   da0e6:	e7e8      	b.n	da0ba <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   da0e8:	1be0      	subs	r0, r4, r7
    }
   da0ea:	4430      	add	r0, r6
   da0ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da0f0 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   da0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da0f4:	4607      	mov	r7, r0
   da0f6:	4688      	mov	r8, r1
   da0f8:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   da0fa:	4615      	mov	r5, r2
   da0fc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   da0fe:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   da102:	4544      	cmp	r4, r8
   da104:	d014      	beq.n	da130 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0+0x40>
   da106:	b16d      	cbz	r5, da124 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0+0x34>
   da108:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   da10c:	4629      	mov	r1, r5
   da10e:	4620      	mov	r0, r4
   da110:	f7fa fab4 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da114:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   da116:	68aa      	ldr	r2, [r5, #8]
   da118:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da11a:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da11c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   da11e:	68ea      	ldr	r2, [r5, #12]
   da120:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   da122:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   da124:	4620      	mov	r0, r4
   da126:	f7fa f8df 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   da12a:	3410      	adds	r4, #16
   da12c:	3510      	adds	r5, #16
   da12e:	e7e8      	b.n	da102 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0+0x12>
      return __cur;
   da130:	1be0      	subs	r0, r4, r7
    }
   da132:	4430      	add	r0, r6
   da134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da138 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_>:
      vector<_Tp, _Alloc>::
   da138:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da13c:	e9d0 7900 	ldrd	r7, r9, [r0]
   da140:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   da142:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   da146:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da148:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   da14c:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   da150:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da152:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   da156:	d102      	bne.n	da15e <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   da158:	481a      	ldr	r0, [pc, #104]	; (da1c4 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x8c>)
   da15a:	f005 f98c 	bl	df476 <_ZSt20__throw_length_errorPKc>
   da15e:	2c01      	cmp	r4, #1
   da160:	4622      	mov	r2, r4
   da162:	bf38      	it	cc
   da164:	2201      	movcc	r2, #1
   da166:	18a4      	adds	r4, r4, r2
   da168:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   da16c:	d228      	bcs.n	da1c0 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   da16e:	b14c      	cbz	r4, da184 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x4c>
   da170:	429c      	cmp	r4, r3
   da172:	bf28      	it	cs
   da174:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da176:	0120      	lsls	r0, r4, #4
   da178:	9101      	str	r1, [sp, #4]
   da17a:	f7f9 ff8c 	bl	d4096 <_Znwj>
   da17e:	9901      	ldr	r1, [sp, #4]
   da180:	4605      	mov	r5, r0
   da182:	e000      	b.n	da186 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x4e>
   da184:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da186:	eb15 000a 	adds.w	r0, r5, sl
   da18a:	d001      	beq.n	da190 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x58>
   da18c:	f7ff fb94 	bl	d98b8 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
      return __relocate_a_1(std::__niter_base(__first),
   da190:	4641      	mov	r1, r8
   da192:	462a      	mov	r2, r5
   da194:	4638      	mov	r0, r7
   da196:	f7ff ffab 	bl	da0f0 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0>
   da19a:	4649      	mov	r1, r9
   da19c:	f100 0210 	add.w	r2, r0, #16
   da1a0:	4640      	mov	r0, r8
   da1a2:	f7ff ffa5 	bl	da0f0 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0>
   da1a6:	4680      	mov	r8, r0
	if (__p)
   da1a8:	b117      	cbz	r7, da1b0 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x78>
	::operator delete(__p);
   da1aa:	4638      	mov	r0, r7
   da1ac:	f7f9 ff77 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   da1b0:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   da1b4:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   da1b8:	60b4      	str	r4, [r6, #8]
    }
   da1ba:	b002      	add	sp, #8
   da1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   da1c0:	461c      	mov	r4, r3
   da1c2:	e7d8      	b.n	da176 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x3e>
   da1c4:	000e21b8 	.word	0x000e21b8

000da1c8 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>:
    SleepHelper &withWakeEventFlagOneTimeFunction(uint64_t flag, std::function<void(JSONWriter &, int &)> fn) {
   da1c8:	b570      	push	{r4, r5, r6, lr}
        if ((eventsEnabled & flag) != 0) {
   da1ca:	f8d0 4794 	ldr.w	r4, [r0, #1940]	; 0x794
   da1ce:	f8d0 6790 	ldr.w	r6, [r0, #1936]	; 0x790
    SleepHelper &withWakeEventFlagOneTimeFunction(uint64_t flag, std::function<void(JSONWriter &, int &)> fn) {
   da1d2:	4605      	mov	r5, r0
        if ((eventsEnabled & flag) != 0) {
   da1d4:	ea03 0104 	and.w	r1, r3, r4
   da1d8:	ea02 0006 	and.w	r0, r2, r6
   da1dc:	4301      	orrs	r1, r0
    SleepHelper &withWakeEventFlagOneTimeFunction(uint64_t flag, std::function<void(JSONWriter &, int &)> fn) {
   da1de:	b08e      	sub	sp, #56	; 0x38
        if ((eventsEnabled & flag) != 0) {
   da1e0:	d03f      	beq.n	da262 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x9a>
            });
   da1e2:	9912      	ldr	r1, [sp, #72]	; 0x48
   da1e4:	a80a      	add	r0, sp, #40	; 0x28
   da1e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    _Function_base() : _M_manager(nullptr) { }
   da1ea:	2600      	movs	r6, #0
   da1ec:	f7ff fbd6 	bl	d999c <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   da1f0:	2018      	movs	r0, #24
    _Function_base() : _M_manager(nullptr) { }
   da1f2:	9602      	str	r6, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   da1f4:	f7f9 ff4f 	bl	d4096 <_Znwj>
   da1f8:	4604      	mov	r4, r0
   da1fa:	b188      	cbz	r0, da220 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x58>
            wakeEventFunctions.withOneTimeCallback([flag, fn](JSONWriter &writer, int &priority) {
   da1fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    _Function_base() : _M_manager(nullptr) { }
   da200:	6106      	str	r6, [r0, #16]
   da202:	e9c0 2300 	strd	r2, r3, [r0]
	std::swap(_M_functor, __x._M_functor);
   da206:	f100 0108 	add.w	r1, r0, #8
   da20a:	a80a      	add	r0, sp, #40	; 0x28
   da20c:	f7fa fa36 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      __a = _GLIBCXX_MOVE(__b);
   da212:	6922      	ldr	r2, [r4, #16]
   da214:	920c      	str	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   da216:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   da218:	6962      	ldr	r2, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   da21c:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   da21e:	920d      	str	r2, [sp, #52]	; 0x34
	    _M_invoker = &_My_handler::_M_invoke;
   da220:	4b15      	ldr	r3, [pc, #84]	; (da278 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0xb0>)
   da222:	9303      	str	r3, [sp, #12]
            oneTimeCallbacks.add(fn); 
   da224:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   da226:	4b15      	ldr	r3, [pc, #84]	; (da27c <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0xb4>)
   da228:	9302      	str	r3, [sp, #8]
   da22a:	a804      	add	r0, sp, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   da22c:	9400      	str	r4, [sp, #0]
   da22e:	f7ff fb43 	bl	d98b8 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da232:	f8d5 0748 	ldr.w	r0, [r5, #1864]	; 0x748
   da236:	f8d5 374c 	ldr.w	r3, [r5, #1868]	; 0x74c
   da23a:	4298      	cmp	r0, r3
   da23c:	d014      	beq.n	da268 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0xa0>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da23e:	b110      	cbz	r0, da246 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x7e>
   da240:	a904      	add	r1, sp, #16
   da242:	f7ff fb39 	bl	d98b8 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
	    ++this->_M_impl._M_finish;
   da246:	f8d5 3748 	ldr.w	r3, [r5, #1864]	; 0x748
   da24a:	3310      	adds	r3, #16
   da24c:	f8c5 3748 	str.w	r3, [r5, #1864]	; 0x748
    class function<_Res(_ArgTypes...)>
   da250:	a804      	add	r0, sp, #16
   da252:	f7fa f849 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   da256:	4668      	mov	r0, sp
   da258:	f7fa f846 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   da25c:	a80a      	add	r0, sp, #40	; 0x28
   da25e:	f7fa f843 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
    }
   da262:	4628      	mov	r0, r5
   da264:	b00e      	add	sp, #56	; 0x38
   da266:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   da268:	4601      	mov	r1, r0
   da26a:	aa04      	add	r2, sp, #16
   da26c:	f205 7044 	addw	r0, r5, #1860	; 0x744
   da270:	f7ff ff62 	bl	da138 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_>
   da274:	e7ec      	b.n	da250 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x88>
   da276:	bf00      	nop
   da278:	000d996d 	.word	0x000d996d
   da27c:	000d99bb 	.word	0x000d99bb

000da280 <_ZN11SleepHelper26stateHandlerConnectedStartEv>:
void SleepHelper::stateHandlerConnectedStart() {
   da280:	b530      	push	{r4, r5, lr}
   da282:	b087      	sub	sp, #28
   da284:	4604      	mov	r4, r0
   da286:	f001 fd65 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
    connectedStartMillis = millis();
   da28a:	f8c4 07c8 	str.w	r0, [r4, #1992]	; 0x7c8
    SleepHelper::instance().persistentData.setValue_lastFullWake(Time.now());
   da28e:	f7ff fa3f 	bl	d9710 <_ZN11SleepHelper8instanceEv>
   da292:	4605      	mov	r5, r0
   da294:	f004 fe4d 	bl	def32 <_ZN9TimeClass3nowEv>
            setValue<uint32_t>(offsetof(SleepHelperData, lastFullWake), (uint32_t)value);
   da298:	2114      	movs	r1, #20
   da29a:	4602      	mov	r2, r0
   da29c:	f505 60bd 	add.w	r0, r5, #1512	; 0x5e8
   da2a0:	f7ff fae0 	bl	d9864 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>
    system_tick_t elapsedMs = connectedStartMillis - connectAttemptStartMillis;
   da2a4:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	; 0x7bc
   da2a8:	f8d4 57c8 	ldr.w	r5, [r4, #1992]	; 0x7c8
    appLog.info("connected to cloud in %lu ms", elapsedMs);
   da2ac:	4917      	ldr	r1, [pc, #92]	; (da30c <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x8c>)
    system_tick_t elapsedMs = connectedStartMillis - connectAttemptStartMillis;
   da2ae:	1aad      	subs	r5, r5, r2
    appLog.info("connected to cloud in %lu ms", elapsedMs);
   da2b0:	462a      	mov	r2, r5
   da2b2:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   da2b6:	f7fa f820 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
	    _M_invoker = &_My_handler::_M_invoke;
   da2ba:	4b15      	ldr	r3, [pc, #84]	; (da310 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x90>)
   da2bc:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   da2be:	4b15      	ldr	r3, [pc, #84]	; (da314 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x94>)
   da2c0:	9304      	str	r3, [sp, #16]
    });
   da2c2:	ab02      	add	r3, sp, #8
   da2c4:	9300      	str	r3, [sp, #0]
   da2c6:	2202      	movs	r2, #2
   da2c8:	2300      	movs	r3, #0
   da2ca:	4620      	mov	r0, r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da2cc:	9502      	str	r5, [sp, #8]
   da2ce:	f7ff ff7b 	bl	da1c8 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   da2d2:	a802      	add	r0, sp, #8
   da2d4:	f7fa f808 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   da2d8:	4b0f      	ldr	r3, [pc, #60]	; (da318 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x98>)
   da2da:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   da2dc:	4b0f      	ldr	r3, [pc, #60]	; (da31c <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x9c>)
   da2de:	9304      	str	r3, [sp, #16]
    });
   da2e0:	ab02      	add	r3, sp, #8
   da2e2:	2208      	movs	r2, #8
   da2e4:	9300      	str	r3, [sp, #0]
   da2e6:	4620      	mov	r0, r4
   da2e8:	2300      	movs	r3, #0
   da2ea:	f7ff ff6d 	bl	da1c8 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   da2ee:	a802      	add	r0, sp, #8
   da2f0:	f7f9 fffa 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
    stateHandler = &SleepHelper::stateHandlerConnectedWakeEvents;
   da2f4:	4b0a      	ldr	r3, [pc, #40]	; (da320 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0xa0>)
   da2f6:	9302      	str	r3, [sp, #8]
   da2f8:	a902      	add	r1, sp, #8
   da2fa:	2300      	movs	r3, #0
   da2fc:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da300:	9303      	str	r3, [sp, #12]
   da302:	f7ff fc1b 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   da306:	b007      	add	sp, #28
   da308:	bd30      	pop	{r4, r5, pc}
   da30a:	bf00      	nop
   da30c:	000e2a86 	.word	0x000e2a86
   da310:	000d8c23 	.word	0x000d8c23
   da314:	000d8b25 	.word	0x000d8b25
   da318:	000d8cf5 	.word	0x000d8cf5
   da31c:	000d8b3d 	.word	0x000d8b3d
   da320:	000db5fd 	.word	0x000db5fd

000da324 <_ZN11SleepHelper21stateHandlerSleepDoneEv>:
void SleepHelper::stateHandlerSleepDone() {
   da324:	b5f0      	push	{r4, r5, r6, r7, lr}
   da326:	b087      	sub	sp, #28
   da328:	4604      	mov	r4, r0
    stateHandler = &SleepHelper::stateHandlerStart;
   da32a:	4b14      	ldr	r3, [pc, #80]	; (da37c <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x58>)
   da32c:	9302      	str	r3, [sp, #8]
   da32e:	ae02      	add	r6, sp, #8
   da330:	2300      	movs	r3, #0
   da332:	4631      	mov	r1, r6
   da334:	f500 60f5 	add.w	r0, r0, #1960	; 0x7a8
   da338:	9303      	str	r3, [sp, #12]
   da33a:	f7ff fbff 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
    wakeOrBootFunctions.forEach(wakeReasonInt);
   da33e:	f8d4 777c 	ldr.w	r7, [r4, #1916]	; 0x77c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   da342:	f8d4 56ec 	ldr.w	r5, [r4, #1772]	; 0x6ec
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   da346:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
   da34a:	42ab      	cmp	r3, r5
   da34c:	d005      	beq.n	da35a <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x36>
                (*it)(args...);
   da34e:	4628      	mov	r0, r5
   da350:	4639      	mov	r1, r7
   da352:	f7ff fbe7 	bl	d9b24 <_ZNKSt8functionIFbiEEclEi>
      operator++() _GLIBCXX_NOEXCEPT
   da356:	3510      	adds	r5, #16
	return *this;
   da358:	e7f5      	b.n	da346 <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x22>
	    _M_invoker = &_My_handler::_M_invoke;
   da35a:	4b09      	ldr	r3, [pc, #36]	; (da380 <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x5c>)
   da35c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   da35e:	4b09      	ldr	r3, [pc, #36]	; (da384 <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x60>)
   da360:	9304      	str	r3, [sp, #16]
    });     
   da362:	2201      	movs	r2, #1
   da364:	2300      	movs	r3, #0
   da366:	9600      	str	r6, [sp, #0]
   da368:	4620      	mov	r0, r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da36a:	9402      	str	r4, [sp, #8]
   da36c:	f7ff ff2c 	bl	da1c8 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   da370:	4630      	mov	r0, r6
   da372:	f7f9 ffb9 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
}
   da376:	b007      	add	sp, #28
   da378:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da37a:	bf00      	nop
   da37c:	000d9ca9 	.word	0x000d9ca9
   da380:	000d8cbd 	.word	0x000d8cbd
   da384:	000d8b5f 	.word	0x000d8b5f

000da388 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   da388:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da38c:	e9d0 7900 	ldrd	r7, r9, [r0]
   da390:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   da392:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   da396:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da398:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   da39c:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   da3a0:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da3a2:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   da3a6:	d102      	bne.n	da3ae <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   da3a8:	481a      	ldr	r0, [pc, #104]	; (da414 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   da3aa:	f005 f864 	bl	df476 <_ZSt20__throw_length_errorPKc>
   da3ae:	2c01      	cmp	r4, #1
   da3b0:	4622      	mov	r2, r4
   da3b2:	bf38      	it	cc
   da3b4:	2201      	movcc	r2, #1
   da3b6:	18a4      	adds	r4, r4, r2
   da3b8:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   da3bc:	d228      	bcs.n	da410 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   da3be:	b14c      	cbz	r4, da3d4 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   da3c0:	429c      	cmp	r4, r3
   da3c2:	bf28      	it	cs
   da3c4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da3c6:	0120      	lsls	r0, r4, #4
   da3c8:	9101      	str	r1, [sp, #4]
   da3ca:	f7f9 fe64 	bl	d4096 <_Znwj>
   da3ce:	9901      	ldr	r1, [sp, #4]
   da3d0:	4605      	mov	r5, r0
   da3d2:	e000      	b.n	da3d6 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   da3d4:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da3d6:	eb15 000a 	adds.w	r0, r5, sl
   da3da:	d001      	beq.n	da3e0 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   da3dc:	f7ff fa9f 	bl	d991e <_ZNSt8functionIFbvEEC1ERKS1_>
   da3e0:	4641      	mov	r1, r8
   da3e2:	462a      	mov	r2, r5
   da3e4:	4638      	mov	r0, r7
   da3e6:	f7ff fe5f 	bl	da0a8 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   da3ea:	4649      	mov	r1, r9
   da3ec:	f100 0210 	add.w	r2, r0, #16
   da3f0:	4640      	mov	r0, r8
   da3f2:	f7ff fe59 	bl	da0a8 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   da3f6:	4680      	mov	r8, r0
	if (__p)
   da3f8:	b117      	cbz	r7, da400 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   da3fa:	4638      	mov	r0, r7
   da3fc:	f7f9 fe4f 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   da400:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   da404:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   da408:	60b4      	str	r4, [r6, #8]
    }
   da40a:	b002      	add	sp, #8
   da40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   da410:	461c      	mov	r4, r3
   da412:	e7d8      	b.n	da3c6 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   da414:	000e21b8 	.word	0x000e21b8

000da418 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:
      vector<_Tp, _Alloc>::
   da418:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da41c:	e9d0 7900 	ldrd	r7, r9, [r0]
   da420:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   da422:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   da426:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da428:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   da42c:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   da430:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da432:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   da436:	d102      	bne.n	da43e <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   da438:	481a      	ldr	r0, [pc, #104]	; (da4a4 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x8c>)
   da43a:	f005 f81c 	bl	df476 <_ZSt20__throw_length_errorPKc>
   da43e:	2c01      	cmp	r4, #1
   da440:	4622      	mov	r2, r4
   da442:	bf38      	it	cc
   da444:	2201      	movcc	r2, #1
   da446:	18a4      	adds	r4, r4, r2
   da448:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   da44c:	d228      	bcs.n	da4a0 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   da44e:	b14c      	cbz	r4, da464 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x4c>
   da450:	429c      	cmp	r4, r3
   da452:	bf28      	it	cs
   da454:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da456:	0120      	lsls	r0, r4, #4
   da458:	9101      	str	r1, [sp, #4]
   da45a:	f7f9 fe1c 	bl	d4096 <_Znwj>
   da45e:	9901      	ldr	r1, [sp, #4]
   da460:	4605      	mov	r5, r0
   da462:	e000      	b.n	da466 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x4e>
   da464:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da466:	eb15 000a 	adds.w	r0, r5, sl
   da46a:	d001      	beq.n	da470 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x58>
   da46c:	f7ff fa66 	bl	d993c <_ZNSt8functionIFbRiS0_EEC1ERKS2_>
   da470:	4641      	mov	r1, r8
   da472:	462a      	mov	r2, r5
   da474:	4638      	mov	r0, r7
   da476:	f7ff fdf3 	bl	da060 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0>
   da47a:	4649      	mov	r1, r9
   da47c:	f100 0210 	add.w	r2, r0, #16
   da480:	4640      	mov	r0, r8
   da482:	f7ff fded 	bl	da060 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0>
   da486:	4680      	mov	r8, r0
	if (__p)
   da488:	b117      	cbz	r7, da490 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x78>
	::operator delete(__p);
   da48a:	4638      	mov	r0, r7
   da48c:	f7f9 fe07 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   da490:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   da494:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   da498:	60b4      	str	r4, [r6, #8]
    }
   da49a:	b002      	add	sp, #8
   da49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   da4a0:	461c      	mov	r4, r3
   da4a2:	e7d8      	b.n	da456 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x3e>
   da4a4:	000e21b8 	.word	0x000e21b8

000da4a8 <_ZN11SleepHelper18PersistentDataFile5setupEv>:
void SleepHelper::PersistentDataFile::setup() {
   da4a8:	b530      	push	{r4, r5, lr}
   da4aa:	b089      	sub	sp, #36	; 0x24
   da4ac:	4605      	mov	r5, r0
    SleepHelper::PersistentDataBase::setup();
   da4ae:	f7fe fb19 	bl	d8ae4 <_ZN11SleepHelper18PersistentDataBase5setupEv>
    SleepHelper::instance().withLoopFunction([this]() {
   da4b2:	f7ff f92d 	bl	d9710 <_ZN11SleepHelper8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   da4b6:	4b28      	ldr	r3, [pc, #160]	; (da558 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xb0>)
   da4b8:	9303      	str	r3, [sp, #12]
   da4ba:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   da4bc:	4b27      	ldr	r3, [pc, #156]	; (da55c <_ZN11SleepHelper18PersistentDataFile5setupEv+0xb4>)
   da4be:	9302      	str	r3, [sp, #8]
        loopFunctions.add(fn); 
   da4c0:	4669      	mov	r1, sp
   da4c2:	a804      	add	r0, sp, #16
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da4c4:	9500      	str	r5, [sp, #0]
   da4c6:	f7ff fa2a 	bl	d991e <_ZNSt8functionIFbvEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da4ca:	f8d4 06a8 	ldr.w	r0, [r4, #1704]	; 0x6a8
   da4ce:	f8d4 36ac 	ldr.w	r3, [r4, #1708]	; 0x6ac
   da4d2:	4298      	cmp	r0, r3
   da4d4:	d031      	beq.n	da53a <_ZN11SleepHelper18PersistentDataFile5setupEv+0x92>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da4d6:	b110      	cbz	r0, da4de <_ZN11SleepHelper18PersistentDataFile5setupEv+0x36>
   da4d8:	a904      	add	r1, sp, #16
   da4da:	f7ff fa20 	bl	d991e <_ZNSt8functionIFbvEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   da4de:	f8d4 36a8 	ldr.w	r3, [r4, #1704]	; 0x6a8
   da4e2:	3310      	adds	r3, #16
   da4e4:	f8c4 36a8 	str.w	r3, [r4, #1704]	; 0x6a8
    class function<_Res(_ArgTypes...)>
   da4e8:	a804      	add	r0, sp, #16
   da4ea:	f7f9 fefd 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   da4ee:	4668      	mov	r0, sp
   da4f0:	f7f9 fefa 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
    SleepHelper::instance().withSleepOrResetFunction([this](bool) {
   da4f4:	f7ff f90c 	bl	d9710 <_ZN11SleepHelper8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   da4f8:	4b19      	ldr	r3, [pc, #100]	; (da560 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xb8>)
   da4fa:	9303      	str	r3, [sp, #12]
   da4fc:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   da4fe:	4b19      	ldr	r3, [pc, #100]	; (da564 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xbc>)
   da500:	9302      	str	r3, [sp, #8]
        sleepOrResetFunctions.add(fn); 
   da502:	4669      	mov	r1, sp
   da504:	a804      	add	r0, sp, #16
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da506:	9500      	str	r5, [sp, #0]
   da508:	f7fa f82e 	bl	d4568 <_ZNSt8functionIFbbEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da50c:	f8d4 06fc 	ldr.w	r0, [r4, #1788]	; 0x6fc
   da510:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
   da514:	4298      	cmp	r0, r3
   da516:	d017      	beq.n	da548 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xa0>
   da518:	b110      	cbz	r0, da520 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x78>
   da51a:	a904      	add	r1, sp, #16
   da51c:	f7fa f824 	bl	d4568 <_ZNSt8functionIFbbEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   da520:	f8d4 36fc 	ldr.w	r3, [r4, #1788]	; 0x6fc
   da524:	3310      	adds	r3, #16
   da526:	f8c4 36fc 	str.w	r3, [r4, #1788]	; 0x6fc
    class function<_Res(_ArgTypes...)>
   da52a:	a804      	add	r0, sp, #16
   da52c:	f7f9 fedc 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   da530:	4668      	mov	r0, sp
   da532:	f7f9 fed9 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
}
   da536:	b009      	add	sp, #36	; 0x24
   da538:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   da53a:	4601      	mov	r1, r0
   da53c:	aa04      	add	r2, sp, #16
   da53e:	f204 60a4 	addw	r0, r4, #1700	; 0x6a4
   da542:	f7ff ff21 	bl	da388 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   da546:	e7cf      	b.n	da4e8 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x40>
   da548:	4601      	mov	r1, r0
   da54a:	aa04      	add	r2, sp, #16
   da54c:	f504 60df 	add.w	r0, r4, #1784	; 0x6f8
   da550:	f7fa fab2 	bl	d4ab8 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   da554:	e7e9      	b.n	da52a <_ZN11SleepHelper18PersistentDataFile5setupEv+0x82>
   da556:	bf00      	nop
   da558:	000d8c8f 	.word	0x000d8c8f
   da55c:	000d8b77 	.word	0x000d8b77
   da560:	000d8c9f 	.word	0x000d8c9f
   da564:	000d8b8f 	.word	0x000d8b8f

000da568 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
   da568:	b538      	push	{r3, r4, r5, lr}
   da56a:	4603      	mov	r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da56c:	e9d3 3500 	ldrd	r3, r5, [r3]
   da570:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
   da572:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da576:	112c      	asrs	r4, r5, #4
	if (max_size() - size() < __n)
   da578:	eba3 1525 	sub.w	r5, r3, r5, asr #4
   da57c:	428d      	cmp	r5, r1
      _M_check_len(size_type __n, const char* __s) const
   da57e:	4610      	mov	r0, r2
	if (max_size() - size() < __n)
   da580:	d201      	bcs.n	da586 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
   da582:	f004 ff78 	bl	df476 <_ZSt20__throw_length_errorPKc>
   da586:	42a1      	cmp	r1, r4
   da588:	bf38      	it	cc
   da58a:	4621      	movcc	r1, r4
   da58c:	1860      	adds	r0, r4, r1
   da58e:	d203      	bcs.n	da598 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc+0x30>
   da590:	4298      	cmp	r0, r3
   da592:	bf28      	it	cs
   da594:	4618      	movcs	r0, r3
      }
   da596:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   da598:	4618      	mov	r0, r3
   da59a:	e7fc      	b.n	da596 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc+0x2e>

000da59c <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>:
        class EventInfo {
   da59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da5a0:	460e      	mov	r6, r1
   da5a2:	4605      	mov	r5, r0
   da5a4:	f004 f9f6 	bl	de994 <_ZN6StringC1ERKS_>
   da5a8:	6933      	ldr	r3, [r6, #16]
   da5aa:	612b      	str	r3, [r5, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da5ac:	e9d6 3705 	ldrd	r3, r7, [r6, #20]
   da5b0:	1aff      	subs	r7, r7, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   da5b2:	1138      	asrs	r0, r7, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
   da5b4:	f04f 0300 	mov.w	r3, #0
   da5b8:	e9c5 3305 	strd	r3, r3, [r5, #20]
   da5bc:	61eb      	str	r3, [r5, #28]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   da5be:	d001      	beq.n	da5c4 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x28>
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
   da5c0:	f7fe fbe3 	bl	d8d8a <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   da5c4:	e9c5 0005 	strd	r0, r0, [r5, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   da5c8:	4407      	add	r7, r0
   da5ca:	61ef      	str	r7, [r5, #28]
   da5cc:	e9d6 9705 	ldrd	r9, r7, [r6, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   da5d0:	4604      	mov	r4, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   da5d2:	464e      	mov	r6, r9
	  _ForwardIterator __cur = __result;
   da5d4:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   da5d6:	42b7      	cmp	r7, r6
   da5d8:	d00a      	beq.n	da5f0 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x54>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   da5da:	f1b8 0f00 	cmp.w	r8, #0
   da5de:	d003      	beq.n	da5e8 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x4c>
   da5e0:	4631      	mov	r1, r6
   da5e2:	4640      	mov	r0, r8
   da5e4:	f004 f9d6 	bl	de994 <_ZN6StringC1ERKS_>
   da5e8:	f108 0810 	add.w	r8, r8, #16
   da5ec:	3610      	adds	r6, #16
   da5ee:	e7f2      	b.n	da5d6 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x3a>
	this->_M_impl._M_finish =
   da5f0:	eba7 0709 	sub.w	r7, r7, r9
   da5f4:	443c      	add	r4, r7
   da5f6:	61ac      	str	r4, [r5, #24]
   da5f8:	4628      	mov	r0, r5
   da5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da5fe <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE>:
    SleepHelper &withSleepReadyFunction(std::function<bool(AppCallbackState &, system_tick_t)> fn) {
   da5fe:	b510      	push	{r4, lr}
   da600:	4604      	mov	r4, r0
   da602:	b086      	sub	sp, #24
        sleepReadyFunctions.add(fn); 
   da604:	a802      	add	r0, sp, #8
   da606:	f7f9 ff91 	bl	d452c <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da60a:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
   da60e:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
   da612:	4298      	cmp	r0, r3
   da614:	d024      	beq.n	da660 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x62>
   da616:	b110      	cbz	r0, da61e <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x20>
   da618:	a902      	add	r1, sp, #8
   da61a:	f7f9 ff87 	bl	d452c <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   da61e:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
   da622:	3310      	adds	r3, #16
   da624:	f8c4 36cc 	str.w	r3, [r4, #1740]	; 0x6cc
    class AppCallbackState {
   da628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da62c:	2200      	movs	r2, #0
   da62e:	e9cd 3200 	strd	r3, r2, [sp]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da632:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
   da636:	f8d4 26dc 	ldr.w	r2, [r4, #1756]	; 0x6dc
   da63a:	4293      	cmp	r3, r2
   da63c:	d017      	beq.n	da66e <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x70>
   da63e:	b123      	cbz	r3, da64a <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x4c>
   da640:	2100      	movs	r1, #0
   da642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da646:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   da64a:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
   da64e:	3308      	adds	r3, #8
   da650:	f8c4 36d8 	str.w	r3, [r4, #1752]	; 0x6d8
   da654:	a802      	add	r0, sp, #8
   da656:	f7f9 fe47 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
    }
   da65a:	4620      	mov	r0, r4
   da65c:	b006      	add	sp, #24
   da65e:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   da660:	4601      	mov	r1, r0
   da662:	aa02      	add	r2, sp, #8
   da664:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
   da668:	f7fa f996 	bl	d4998 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   da66c:	e7dc      	b.n	da628 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x2a>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   da66e:	466a      	mov	r2, sp
   da670:	4619      	mov	r1, r3
   da672:	f204 60d4 	addw	r0, r4, #1748	; 0x6d4
   da676:	f7fa faf7 	bl	d4c68 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
   da67a:	e7eb      	b.n	da654 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x56>

000da67c <_ZN11SleepHelper5setupEv>:
void SleepHelper::setup() {
   da67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da680:	b08a      	sub	sp, #40	; 0x28
        int reason = RESET_REASON_NONE;
   da682:	2300      	movs	r3, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   da684:	ad06      	add	r5, sp, #24
   da686:	4604      	mov	r4, r0
   da688:	461a      	mov	r2, r3
   da68a:	4619      	mov	r1, r3
   da68c:	4628      	mov	r0, r5
        int reason = RESET_REASON_NONE;
   da68e:	9306      	str	r3, [sp, #24]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   da690:	f001 fb40 	bl	dbd14 <HAL_Core_Get_Last_Reset_Info>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   da694:	4a3e      	ldr	r2, [pc, #248]	; (da790 <_ZN11SleepHelper5setupEv+0x114>)
   da696:	483f      	ldr	r0, [pc, #252]	; (da794 <_ZN11SleepHelper5setupEv+0x118>)
        return reason;
   da698:	f8dd 8018 	ldr.w	r8, [sp, #24]
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   da69c:	2300      	movs	r3, #0
   da69e:	2100      	movs	r1, #0
   da6a0:	f001 fd92 	bl	dc1c8 <system_subscribe_event>
        return scheduleManager.getScheduleByName("quick");
   da6a4:	f504 66c7 	add.w	r6, r4, #1592	; 0x638
    persistentData.setup();
   da6a8:	f504 60bd 	add.w	r0, r4, #1512	; 0x5e8
   da6ac:	f7ff fefc 	bl	da4a8 <_ZN11SleepHelper18PersistentDataFile5setupEv>
   da6b0:	4939      	ldr	r1, [pc, #228]	; (da798 <_ZN11SleepHelper5setupEv+0x11c>)
   da6b2:	4630      	mov	r0, r6
   da6b4:	f7fd f8f0 	bl	d7898 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        this->flags = flags;
   da6b8:	2701      	movs	r7, #1
        return scheduleManager.getScheduleByName("data");
   da6ba:	4938      	ldr	r1, [pc, #224]	; (da79c <_ZN11SleepHelper5setupEv+0x120>)
   da6bc:	6107      	str	r7, [r0, #16]
   da6be:	4630      	mov	r0, r6
   da6c0:	f7fd f8ea 	bl	d7898 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        return scheduleManager.getScheduleByName("full");
   da6c4:	4936      	ldr	r1, [pc, #216]	; (da7a0 <_ZN11SleepHelper5setupEv+0x124>)
   da6c6:	6107      	str	r7, [r0, #16]
   da6c8:	4630      	mov	r0, r6
   da6ca:	f7fd f8e5 	bl	d7898 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
   da6ce:	2302      	movs	r3, #2
   da6d0:	6103      	str	r3, [r0, #16]
	BackgroundPublishRK::instance().start();
   da6d2:	f7fb fc41 	bl	d5f58 <_ZN19BackgroundPublishRK8instanceEv>
   da6d6:	f7fb fd51 	bl	d617c <_ZN19BackgroundPublishRK5startEv>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   da6da:	f8d4 6698 	ldr.w	r6, [r4, #1688]	; 0x698
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   da6de:	f8d4 369c 	ldr.w	r3, [r4, #1692]	; 0x69c
   da6e2:	42b3      	cmp	r3, r6
   da6e4:	d004      	beq.n	da6f0 <_ZN11SleepHelper5setupEv+0x74>
                (*it)(args...);
   da6e6:	4630      	mov	r0, r6
   da6e8:	f7ff fa13 	bl	d9b12 <_ZNKSt8functionIFbvEEclEv>
      operator++() _GLIBCXX_NOEXCEPT
   da6ec:	3610      	adds	r6, #16
	return *this;
   da6ee:	e7f6      	b.n	da6de <_ZN11SleepHelper5setupEv+0x62>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   da6f0:	f8d4 66ec 	ldr.w	r6, [r4, #1772]	; 0x6ec
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   da6f4:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
   da6f8:	42b3      	cmp	r3, r6
   da6fa:	d006      	beq.n	da70a <_ZN11SleepHelper5setupEv+0x8e>
                (*it)(args...);
   da6fc:	4630      	mov	r0, r6
   da6fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   da702:	f7ff fa0f 	bl	d9b24 <_ZNKSt8functionIFbiEEclEi>
      operator++() _GLIBCXX_NOEXCEPT
   da706:	3610      	adds	r6, #16
	return *this;
   da708:	e7f4      	b.n	da6f4 <_ZN11SleepHelper5setupEv+0x78>
	    _M_invoker = &_My_handler::_M_invoke;
   da70a:	4b26      	ldr	r3, [pc, #152]	; (da7a4 <_ZN11SleepHelper5setupEv+0x128>)
   da70c:	9309      	str	r3, [sp, #36]	; 0x24
    });
   da70e:	4629      	mov	r1, r5
	    _M_manager = &_My_handler::_M_manager;
   da710:	4b25      	ldr	r3, [pc, #148]	; (da7a8 <_ZN11SleepHelper5setupEv+0x12c>)
   da712:	9308      	str	r3, [sp, #32]
   da714:	4620      	mov	r0, r4
   da716:	f7ff ff72 	bl	da5fe <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE>
    class function<_Res(_ArgTypes...)>
   da71a:	4628      	mov	r0, r5
   da71c:	f7f9 fde4 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   da720:	4b22      	ldr	r3, [pc, #136]	; (da7ac <_ZN11SleepHelper5setupEv+0x130>)
   da722:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   da724:	4b22      	ldr	r3, [pc, #136]	; (da7b0 <_ZN11SleepHelper5setupEv+0x134>)
   da726:	9308      	str	r3, [sp, #32]
    });
   da728:	2204      	movs	r2, #4
   da72a:	2300      	movs	r3, #0
   da72c:	9500      	str	r5, [sp, #0]
   da72e:	4620      	mov	r0, r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da730:	f8cd 8018 	str.w	r8, [sp, #24]
   da734:	f7ff fd48 	bl	da1c8 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   da738:	4628      	mov	r0, r5
   da73a:	f7f9 fdd5 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   da73e:	4b1d      	ldr	r3, [pc, #116]	; (da7b4 <_ZN11SleepHelper5setupEv+0x138>)
   da740:	9305      	str	r3, [sp, #20]
        shouldConnectFunctions.add(fn); 
   da742:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   da744:	4b1c      	ldr	r3, [pc, #112]	; (da7b8 <_ZN11SleepHelper5setupEv+0x13c>)
   da746:	9304      	str	r3, [sp, #16]
   da748:	4628      	mov	r0, r5
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da74a:	9402      	str	r4, [sp, #8]
   da74c:	f7ff f8f6 	bl	d993c <_ZNSt8functionIFbRiS0_EEC1ERKS2_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da750:	f8d4 06e4 	ldr.w	r0, [r4, #1764]	; 0x6e4
   da754:	f8d4 36e8 	ldr.w	r3, [r4, #1768]	; 0x6e8
   da758:	4298      	cmp	r0, r3
   da75a:	d011      	beq.n	da780 <_ZN11SleepHelper5setupEv+0x104>
   da75c:	b110      	cbz	r0, da764 <_ZN11SleepHelper5setupEv+0xe8>
   da75e:	4629      	mov	r1, r5
   da760:	f7ff f8ec 	bl	d993c <_ZNSt8functionIFbRiS0_EEC1ERKS2_>
	    ++this->_M_impl._M_finish;
   da764:	f8d4 36e4 	ldr.w	r3, [r4, #1764]	; 0x6e4
   da768:	3310      	adds	r3, #16
   da76a:	f8c4 36e4 	str.w	r3, [r4, #1764]	; 0x6e4
    class function<_Res(_ArgTypes...)>
   da76e:	4628      	mov	r0, r5
   da770:	f7f9 fdba 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   da774:	a802      	add	r0, sp, #8
   da776:	f7f9 fdb7 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
}
   da77a:	b00a      	add	sp, #40	; 0x28
   da77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  _M_realloc_insert(end(), __x);
   da780:	4601      	mov	r1, r0
   da782:	462a      	mov	r2, r5
   da784:	f504 60dc 	add.w	r0, r4, #1760	; 0x6e0
   da788:	f7ff fe46 	bl	da418 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
   da78c:	e7ef      	b.n	da76e <_ZN11SleepHelper5setupEv+0xf2>
   da78e:	bf00      	nop
   da790:	000d9a83 	.word	0x000d9a83
   da794:	00040b00 	.word	0x00040b00
   da798:	000e2aa3 	.word	0x000e2aa3
   da79c:	000e25ef 	.word	0x000e25ef
   da7a0:	000e224f 	.word	0x000e224f
   da7a4:	000d8caf 	.word	0x000d8caf
   da7a8:	000d8aeb 	.word	0x000d8aeb
   da7ac:	000d8c19 	.word	0x000d8c19
   da7b0:	000d8af5 	.word	0x000d8af5
   da7b4:	000db8c9 	.word	0x000db8c9
   da7b8:	000d8b0d 	.word	0x000d8b0d

000da7bc <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
   da7bc:	b538      	push	{r3, r4, r5, lr}
   da7be:	4604      	mov	r4, r0
   da7c0:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   da7c2:	42ac      	cmp	r4, r5
   da7c4:	d004      	beq.n	da7d0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_+0x14>
    { __pointer->~_Tp(); }
   da7c6:	4620      	mov	r0, r4
   da7c8:	f004 f84e 	bl	de868 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   da7cc:	3410      	adds	r4, #16
   da7ce:	e7f8      	b.n	da7c2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   da7d0:	bd38      	pop	{r3, r4, r5, pc}

000da7d2 <_ZNSt6vectorI6StringSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   da7d2:	b510      	push	{r4, lr}
   da7d4:	4604      	mov	r4, r0
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   da7d6:	e9d0 0100 	ldrd	r0, r1, [r0]
   da7da:	f7ff ffef 	bl	da7bc <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   da7de:	6820      	ldr	r0, [r4, #0]
	if (__p)
   da7e0:	b108      	cbz	r0, da7e6 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x14>
	::operator delete(__p);
   da7e2:	f7f9 fc5c 	bl	d409e <_ZdlPv>
      }
   da7e6:	4620      	mov	r0, r4
   da7e8:	bd10      	pop	{r4, pc}

000da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>:
        class EventInfo {
   da7ea:	b510      	push	{r4, lr}
   da7ec:	4604      	mov	r4, r0
   da7ee:	3014      	adds	r0, #20
   da7f0:	f7ff ffef 	bl	da7d2 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   da7f4:	4620      	mov	r0, r4
   da7f6:	f004 f837 	bl	de868 <_ZN6StringD1Ev>
   da7fa:	4620      	mov	r0, r4
   da7fc:	bd10      	pop	{r4, pc}
	...

000da800 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   da800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da804:	e9d0 8a00 	ldrd	r8, sl, [r0]
   da808:	460f      	mov	r7, r1
	if (max_size() - size() < __n)
   da80a:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
   da80e:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da810:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
   da814:	ebb3 1f62 	cmp.w	r3, r2, asr #5
   da818:	4681      	mov	r9, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da81a:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
   da81e:	d102      	bne.n	da826 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   da820:	482b      	ldr	r0, [pc, #172]	; (da8d0 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xd0>)
   da822:	f004 fe28 	bl	df476 <_ZSt20__throw_length_errorPKc>
   da826:	2c01      	cmp	r4, #1
   da828:	4622      	mov	r2, r4
   da82a:	bf38      	it	cc
   da82c:	2201      	movcc	r2, #1
   da82e:	18a4      	adds	r4, r4, r2
   da830:	eba7 0608 	sub.w	r6, r7, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   da834:	d24a      	bcs.n	da8cc <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xcc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   da836:	b14c      	cbz	r4, da84c <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   da838:	429c      	cmp	r4, r3
   da83a:	bf28      	it	cs
   da83c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da83e:	0160      	lsls	r0, r4, #5
   da840:	9101      	str	r1, [sp, #4]
   da842:	f7f9 fc28 	bl	d4096 <_Znwj>
   da846:	9901      	ldr	r1, [sp, #4]
   da848:	4605      	mov	r5, r0
   da84a:	e000      	b.n	da84e <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   da84c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da84e:	19a8      	adds	r0, r5, r6
   da850:	d001      	beq.n	da856 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x56>
   da852:	f7ff fea3 	bl	da59c <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   da856:	46ab      	mov	fp, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da858:	4646      	mov	r6, r8
   da85a:	42b7      	cmp	r7, r6
   da85c:	d00a      	beq.n	da874 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x74>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   da85e:	f1bb 0f00 	cmp.w	fp, #0
   da862:	d003      	beq.n	da86c <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x6c>
   da864:	4631      	mov	r1, r6
   da866:	4658      	mov	r0, fp
   da868:	f7ff fe98 	bl	da59c <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   da86c:	3620      	adds	r6, #32
   da86e:	f10b 0b20 	add.w	fp, fp, #32
   da872:	e7f2      	b.n	da85a <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x5a>
	      ++__new_finish;
   da874:	eba6 0708 	sub.w	r7, r6, r8
   da878:	3720      	adds	r7, #32
   da87a:	442f      	add	r7, r5
	  _ForwardIterator __cur = __result;
   da87c:	463b      	mov	r3, r7
   da87e:	46b3      	mov	fp, r6
	      for (; __first != __last; ++__first, (void)++__cur)
   da880:	45d3      	cmp	fp, sl
   da882:	d10a      	bne.n	da89a <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x9a>
   da884:	ebaa 0606 	sub.w	r6, sl, r6
   da888:	4437      	add	r7, r6
   da88a:	4646      	mov	r6, r8
	  for (; __first != __last; ++__first)
   da88c:	4556      	cmp	r6, sl
   da88e:	d00e      	beq.n	da8ae <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xae>
    { __pointer->~_Tp(); }
   da890:	4630      	mov	r0, r6
   da892:	f7ff ffaa 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
	  for (; __first != __last; ++__first)
   da896:	3620      	adds	r6, #32
   da898:	e7f8      	b.n	da88c <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   da89a:	4659      	mov	r1, fp
   da89c:	4618      	mov	r0, r3
   da89e:	9301      	str	r3, [sp, #4]
   da8a0:	f7ff fe7c 	bl	da59c <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   da8a4:	9b01      	ldr	r3, [sp, #4]
   da8a6:	f10b 0b20 	add.w	fp, fp, #32
   da8aa:	3320      	adds	r3, #32
   da8ac:	e7e8      	b.n	da880 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x80>
	if (__p)
   da8ae:	f1b8 0f00 	cmp.w	r8, #0
   da8b2:	d002      	beq.n	da8ba <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xba>
	::operator delete(__p);
   da8b4:	4640      	mov	r0, r8
   da8b6:	f7f9 fbf2 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   da8ba:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
   da8be:	e9c9 5700 	strd	r5, r7, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   da8c2:	f8c9 4008 	str.w	r4, [r9, #8]
    }
   da8c6:	b003      	add	sp, #12
   da8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   da8cc:	461c      	mov	r4, r3
   da8ce:	e7b6      	b.n	da83e <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   da8d0:	000e21b8 	.word	0x000e21b8

000da8d4 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
   da8d4:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da8d6:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   da8da:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   da8dc:	4604      	mov	r4, r0
   da8de:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da8e0:	d007      	beq.n	da8f2 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da8e2:	b113      	cbz	r3, da8ea <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_+0x16>
   da8e4:	4618      	mov	r0, r3
   da8e6:	f7ff fe59 	bl	da59c <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
	    ++this->_M_impl._M_finish;
   da8ea:	6863      	ldr	r3, [r4, #4]
   da8ec:	3320      	adds	r3, #32
   da8ee:	6063      	str	r3, [r4, #4]
      }
   da8f0:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   da8f2:	4619      	mov	r1, r3
   da8f4:	f7ff ff84 	bl	da800 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
   da8f8:	e7fa      	b.n	da8f0 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_+0x1c>

000da8fa <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>:
      { }

      template<typename _Iterator1, typename _Iterator2>
        _GLIBCXX14_CONSTEXPR
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
   da8fa:	b510      	push	{r4, lr}
   da8fc:	b090      	sub	sp, #64	; 0x40
   da8fe:	460c      	mov	r4, r1
        { return bool(_M_comp(*__it1, *__it2)); }
   da900:	4601      	mov	r1, r0
   da902:	a808      	add	r0, sp, #32
   da904:	f7ff fe4a 	bl	da59c <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   da908:	4621      	mov	r1, r4
   da90a:	4668      	mov	r0, sp
   da90c:	f7ff fe46 	bl	da59c <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
            return a.priority > b.priority;
   da910:	9c04      	ldr	r4, [sp, #16]
   da912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da914:	4668      	mov	r0, sp
   da916:	42a3      	cmp	r3, r4
   da918:	bfd4      	ite	le
   da91a:	2400      	movle	r4, #0
   da91c:	2401      	movgt	r4, #1
   da91e:	f7ff ff64 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   da922:	a808      	add	r0, sp, #32
   da924:	f7ff ff61 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   da928:	4620      	mov	r0, r4
   da92a:	b010      	add	sp, #64	; 0x40
   da92c:	bd10      	pop	{r4, pc}

000da92e <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   da92e:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   da930:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   da934:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   da936:	42ae      	cmp	r6, r5
   da938:	d004      	beq.n	da944 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev+0x16>
    { __pointer->~_Tp(); }
   da93a:	4628      	mov	r0, r5
   da93c:	f7ff ff55 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
	  for (; __first != __last; ++__first)
   da940:	3520      	adds	r5, #32
   da942:	e7f8      	b.n	da936 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   da944:	6820      	ldr	r0, [r4, #0]
	if (__p)
   da946:	b108      	cbz	r0, da94c <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev+0x1e>
	::operator delete(__p);
   da948:	f7f9 fba9 	bl	d409e <_ZdlPv>
      }
   da94c:	4620      	mov	r0, r4
   da94e:	bd70      	pop	{r4, r5, r6, pc}

000da950 <_ZNSt6vectorI6StringSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
   da950:	b538      	push	{r3, r4, r5, lr}
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   da952:	e9d0 5100 	ldrd	r5, r1, [r0]
   da956:	428d      	cmp	r5, r1
      clear() _GLIBCXX_NOEXCEPT
   da958:	4604      	mov	r4, r0
	if (size_type __n = this->_M_impl._M_finish - __pos)
   da95a:	d003      	beq.n	da964 <_ZNSt6vectorI6StringSaIS0_EE5clearEv+0x14>
	__destroy(__first, __last);
   da95c:	4628      	mov	r0, r5
   da95e:	f7ff ff2d 	bl	da7bc <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   da962:	6065      	str	r5, [r4, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
   da964:	bd38      	pop	{r3, r4, r5, pc}

000da966 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>:
   da966:	b538      	push	{r3, r4, r5, lr}
   da968:	460c      	mov	r4, r1
   da96a:	4605      	mov	r5, r0
   da96c:	f003 fff8 	bl	de960 <_ZN6StringC1EOS_>
   da970:	6923      	ldr	r3, [r4, #16]
   da972:	612b      	str	r3, [r5, #16]
	  _M_end_of_storage(__x._M_end_of_storage)
   da974:	6963      	ldr	r3, [r4, #20]
   da976:	616b      	str	r3, [r5, #20]
   da978:	69a3      	ldr	r3, [r4, #24]
   da97a:	61ab      	str	r3, [r5, #24]
   da97c:	69e3      	ldr	r3, [r4, #28]
   da97e:	61eb      	str	r3, [r5, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   da980:	2300      	movs	r3, #0
   da982:	e9c4 3306 	strd	r3, r3, [r4, #24]
   da986:	6163      	str	r3, [r4, #20]
   da988:	4628      	mov	r0, r5
   da98a:	bd38      	pop	{r3, r4, r5, pc}

000da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>:
   da98c:	b530      	push	{r4, r5, lr}
   da98e:	460d      	mov	r5, r1
   da990:	4604      	mov	r4, r0
   da992:	b085      	sub	sp, #20
   da994:	f004 f809 	bl	de9aa <_ZN6StringaSEOS_>
   da998:	692b      	ldr	r3, [r5, #16]
   da99a:	6123      	str	r3, [r4, #16]
	  _M_start = __x._M_start;
   da99c:	6968      	ldr	r0, [r5, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
   da99e:	69e3      	ldr	r3, [r4, #28]
   da9a0:	9303      	str	r3, [sp, #12]
	  _M_finish = __x._M_finish;
   da9a2:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
	  _M_start = __x._M_start;
   da9a6:	6160      	str	r0, [r4, #20]
	  _M_finish = __x._M_finish;
   da9a8:	69a8      	ldr	r0, [r5, #24]
   da9aa:	61a0      	str	r0, [r4, #24]
	  _M_end_of_storage = __x._M_end_of_storage;
   da9ac:	69e8      	ldr	r0, [r5, #28]
   da9ae:	61e0      	str	r0, [r4, #28]
	  _M_start = __x._M_start;
   da9b0:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
   da9b2:	e9c5 3305 	strd	r3, r3, [r5, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
   da9b6:	61eb      	str	r3, [r5, #28]
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
      {
	vector __tmp(get_allocator());
   da9b8:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   da9ba:	e9cd 1201 	strd	r1, r2, [sp, #4]
	vector __tmp(get_allocator());
   da9be:	f7ff ff08 	bl	da7d2 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   da9c2:	4620      	mov	r0, r4
   da9c4:	b005      	add	sp, #20
   da9c6:	bd30      	pop	{r4, r5, pc}

000da9c8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0>:
    }

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   da9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da9cc:	4698      	mov	r8, r3
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
   da9ce:	1e53      	subs	r3, r2, #1
   da9d0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   da9d4:	b099      	sub	sp, #100	; 0x64
   da9d6:	4605      	mov	r5, r0
   da9d8:	460f      	mov	r7, r1
   da9da:	4616      	mov	r6, r2
      while (__secondChild < (__len - 1) / 2)
   da9dc:	ea4f 0a63 	mov.w	sl, r3, asr #1
   da9e0:	460c      	mov	r4, r1
   da9e2:	45a2      	cmp	sl, r4
   da9e4:	ea4f 1944 	mov.w	r9, r4, lsl #5
   da9e8:	dd13      	ble.n	daa12 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x4a>
	{
	  __secondChild = 2 * (__secondChild + 1);
   da9ea:	1c60      	adds	r0, r4, #1
   da9ec:	0044      	lsls	r4, r0, #1
	  if (__comp(__first + __secondChild,
   da9ee:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   da9f2:	eb05 114b 	add.w	r1, r5, fp, lsl #5
   da9f6:	eb05 1080 	add.w	r0, r5, r0, lsl #6
   da9fa:	f7ff ff7e 	bl	da8fa <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
		     __first + (__secondChild - 1)))
	    __secondChild--;
   da9fe:	2800      	cmp	r0, #0
   daa00:	bf18      	it	ne
   daa02:	465c      	movne	r4, fp
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   daa04:	eb05 1144 	add.w	r1, r5, r4, lsl #5
   daa08:	eb05 0009 	add.w	r0, r5, r9
   daa0c:	f7ff ffbe 	bl	da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      while (__secondChild < (__len - 1) / 2)
   daa10:	e7e7      	b.n	da9e2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x1a>
	  __holeIndex = __secondChild;
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   daa12:	07f3      	lsls	r3, r6, #31
   daa14:	d40d      	bmi.n	daa32 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x6a>
   daa16:	3e02      	subs	r6, #2
   daa18:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   daa1c:	ebb4 0f66 	cmp.w	r4, r6, asr #1
   daa20:	d107      	bne.n	daa32 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x6a>
	{
	  __secondChild = 2 * (__secondChild + 1);
   daa22:	0064      	lsls	r4, r4, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   daa24:	3401      	adds	r4, #1
   daa26:	eb05 1144 	add.w	r1, r5, r4, lsl #5
   daa2a:	eb05 0009 	add.w	r0, r5, r9
   daa2e:	f7ff ffad 	bl	da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
   daa32:	4641      	mov	r1, r8
   daa34:	4668      	mov	r0, sp
      _Distance __parent = (__holeIndex - 1) / 2;
   daa36:	1e66      	subs	r6, r4, #1
      std::__push_heap(__first, __holeIndex, __topIndex,
   daa38:	f7ff ff95 	bl	da966 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
      _Distance __parent = (__holeIndex - 1) / 2;
   daa3c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   daa40:	1076      	asrs	r6, r6, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   daa42:	42a7      	cmp	r7, r4
   daa44:	eb05 1844 	add.w	r8, r5, r4, lsl #5
   daa48:	da1f      	bge.n	daa8a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0xc2>
      { return __normal_iterator(_M_current + __n); }
   daa4a:	eb05 1446 	add.w	r4, r5, r6, lsl #5
#endif

      template<typename _Iterator, typename _Value>
	bool
	operator()(_Iterator __it, _Value& __val)
	{ return bool(_M_comp(*__it, __val)); }
   daa4e:	4621      	mov	r1, r4
   daa50:	a808      	add	r0, sp, #32
   daa52:	f7ff fda3 	bl	da59c <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   daa56:	4669      	mov	r1, sp
   daa58:	a810      	add	r0, sp, #64	; 0x40
   daa5a:	f7ff fd9f 	bl	da59c <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   daa5e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   daa62:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   daa66:	a810      	add	r0, sp, #64	; 0x40
   daa68:	f7ff febf 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   daa6c:	a808      	add	r0, sp, #32
   daa6e:	f7ff febc 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   daa72:	45ca      	cmp	sl, r9
   daa74:	dd09      	ble.n	daa8a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0xc2>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   daa76:	4621      	mov	r1, r4
   daa78:	4640      	mov	r0, r8
   daa7a:	f7ff ff87 	bl	da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	  __parent = (__holeIndex - 1) / 2;
   daa7e:	1e73      	subs	r3, r6, #1
   daa80:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
	  __holeIndex = __parent;
   daa84:	4634      	mov	r4, r6
	  __parent = (__holeIndex - 1) / 2;
   daa86:	105e      	asrs	r6, r3, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   daa88:	e7db      	b.n	daa42 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x7a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   daa8a:	4669      	mov	r1, sp
   daa8c:	4640      	mov	r0, r8
   daa8e:	f7ff ff7d 	bl	da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      std::__push_heap(__first, __holeIndex, __topIndex,
   daa92:	4668      	mov	r0, sp
   daa94:	f7ff fea9 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
		       _GLIBCXX_MOVE(__value), __cmp);
    }
   daa98:	b019      	add	sp, #100	; 0x64
   daa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000daa9e <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_SI_RT0_.isra.0>:

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
   daa9e:	b570      	push	{r4, r5, r6, lr}
   daaa0:	b092      	sub	sp, #72	; 0x48
   daaa2:	4605      	mov	r5, r0
   daaa4:	4616      	mov	r6, r2
   daaa6:	460c      	mov	r4, r1
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
   daaa8:	a802      	add	r0, sp, #8
   daaaa:	4611      	mov	r1, r2
   daaac:	f7ff ff5b 	bl	da966 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
      *__result = _GLIBCXX_MOVE(*__first);
   daab0:	4629      	mov	r1, r5
   daab2:	4630      	mov	r0, r6
   daab4:	f7ff ff6a 	bl	da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   daab8:	1b62      	subs	r2, r4, r5
   daaba:	1152      	asrs	r2, r2, #5
      std::__adjust_heap(__first, _DistanceType(0),
   daabc:	a902      	add	r1, sp, #8
   daabe:	a80a      	add	r0, sp, #40	; 0x28
   daac0:	9201      	str	r2, [sp, #4]
   daac2:	f7ff ff50 	bl	da966 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
   daac6:	9a01      	ldr	r2, [sp, #4]
   daac8:	ab0a      	add	r3, sp, #40	; 0x28
   daaca:	2100      	movs	r1, #0
   daacc:	4628      	mov	r0, r5
   daace:	f7ff ff7b 	bl	da9c8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0>
   daad2:	a80a      	add	r0, sp, #40	; 0x28
   daad4:	f7ff fe89 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
   daad8:	a802      	add	r0, sp, #8
   daada:	f7ff fe86 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
			 _DistanceType(__last - __first),
			 _GLIBCXX_MOVE(__value), __comp);
    }
   daade:	b012      	add	sp, #72	; 0x48
   daae0:	bd70      	pop	{r4, r5, r6, pc}

000daae2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
   daae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daae6:	b098      	sub	sp, #96	; 0x60
   daae8:	4604      	mov	r4, r0
			      _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
   daaea:	4601      	mov	r1, r0
   daaec:	4668      	mov	r0, sp
   daaee:	f7ff ff3a 	bl	da966 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
	--_M_current;
   daaf2:	3c20      	subs	r4, #32
#endif

      template<typename _Value, typename _Iterator>
	bool
	operator()(_Value& __val, _Iterator __it)
	{ return bool(_M_comp(__val, *__it)); }
   daaf4:	4669      	mov	r1, sp
   daaf6:	a808      	add	r0, sp, #32
   daaf8:	f7ff fd50 	bl	da59c <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   daafc:	4621      	mov	r1, r4
   daafe:	a810      	add	r0, sp, #64	; 0x40
   dab00:	f7ff fd4c 	bl	da59c <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   dab04:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   dab08:	9f14      	ldr	r7, [sp, #80]	; 0x50
   dab0a:	a810      	add	r0, sp, #64	; 0x40
   dab0c:	f7ff fe6d 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   dab10:	a808      	add	r0, sp, #32
   dab12:	f7ff fe6a 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
   dab16:	45b8      	cmp	r8, r7
   dab18:	4626      	mov	r6, r4
   dab1a:	f104 0520 	add.w	r5, r4, #32
   dab1e:	f1a4 0420 	sub.w	r4, r4, #32
   dab22:	dd04      	ble.n	dab2e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0+0x4c>
	{
	  *__last = _GLIBCXX_MOVE(*__next);
   dab24:	4631      	mov	r1, r6
   dab26:	4628      	mov	r0, r5
   dab28:	f7ff ff30 	bl	da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	return *this;
   dab2c:	e7e2      	b.n	daaf4 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0+0x12>
	  __last = __next;
	  --__next;
	}
      *__last = _GLIBCXX_MOVE(__val);
   dab2e:	4669      	mov	r1, sp
   dab30:	4628      	mov	r0, r5
   dab32:	f7ff ff2b 	bl	da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	__val = _GLIBCXX_MOVE(*__last);
   dab36:	4668      	mov	r0, sp
   dab38:	f7ff fe57 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
    }
   dab3c:	b018      	add	sp, #96	; 0x60
   dab3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dab42 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
   dab42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
   dab46:	4281      	cmp	r1, r0
    __insertion_sort(_RandomAccessIterator __first,
   dab48:	b088      	sub	sp, #32
   dab4a:	4605      	mov	r5, r0
   dab4c:	460f      	mov	r7, r1
      if (__first == __last) return;
   dab4e:	d026      	beq.n	dab9e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x5c>
      { return __normal_iterator(_M_current + __n); }
   dab50:	f100 0420 	add.w	r4, r0, #32

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   dab54:	42a7      	cmp	r7, r4
   dab56:	d022      	beq.n	dab9e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x5c>
	{
	  if (__comp(__i, __first))
   dab58:	4629      	mov	r1, r5
   dab5a:	4620      	mov	r0, r4
   dab5c:	f7ff fecd 	bl	da8fa <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dab60:	f104 0820 	add.w	r8, r4, #32
   dab64:	b1b8      	cbz	r0, dab96 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x54>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
   dab66:	4621      	mov	r1, r4
   dab68:	4668      	mov	r0, sp
   dab6a:	f7ff fefc 	bl	da966 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
	  for (__n = __last - __first; __n > 0; --__n)
   dab6e:	1b66      	subs	r6, r4, r5
   dab70:	1176      	asrs	r6, r6, #5
   dab72:	2e00      	cmp	r6, #0
   dab74:	dd06      	ble.n	dab84 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x42>
	    *--__result = std::move(*--__last);
   dab76:	4620      	mov	r0, r4
   dab78:	3c20      	subs	r4, #32
   dab7a:	4621      	mov	r1, r4
   dab7c:	f7ff ff06 	bl	da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	  for (__n = __last - __first; __n > 0; --__n)
   dab80:	3e01      	subs	r6, #1
   dab82:	e7f6      	b.n	dab72 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x30>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
	      *__first = _GLIBCXX_MOVE(__val);
   dab84:	4669      	mov	r1, sp
   dab86:	4628      	mov	r0, r5
   dab88:	f7ff ff00 	bl	da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
		__val = _GLIBCXX_MOVE(*__i);
   dab8c:	4668      	mov	r0, sp
   dab8e:	f7ff fe2c 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
	++_M_current;
   dab92:	4644      	mov	r4, r8
	return *this;
   dab94:	e7de      	b.n	dab54 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x12>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
   dab96:	4620      	mov	r0, r4
   dab98:	f7ff ffa3 	bl	daae2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0>
   dab9c:	e7f9      	b.n	dab92 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x50>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
   dab9e:	b008      	add	sp, #32
   daba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000daba4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   daba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daba8:	4606      	mov	r6, r0
   dabaa:	4688      	mov	r8, r1
   dabac:	4615      	mov	r5, r2
	  _ForwardIterator __cur = __result;
   dabae:	4617      	mov	r7, r2
   dabb0:	4604      	mov	r4, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   dabb2:	4544      	cmp	r4, r8
   dabb4:	d007      	beq.n	dabc6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_+0x22>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   dabb6:	b11f      	cbz	r7, dabc0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_+0x1c>
   dabb8:	4621      	mov	r1, r4
   dabba:	4638      	mov	r0, r7
   dabbc:	f003 feea 	bl	de994 <_ZN6StringC1ERKS_>
   dabc0:	3410      	adds	r4, #16
   dabc2:	3710      	adds	r7, #16
   dabc4:	e7f5      	b.n	dabb2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_+0xe>
	      return __cur;
   dabc6:	1ba0      	subs	r0, r4, r6
	}
   dabc8:	4428      	add	r0, r5
   dabca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000dabd0 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   dabd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   dabd4:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   dabd8:	429e      	cmp	r6, r3
      push_back(const value_type& __x)
   dabda:	4604      	mov	r4, r0
   dabdc:	468a      	mov	sl, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   dabde:	d008      	beq.n	dabf2 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dabe0:	b116      	cbz	r6, dabe8 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x18>
   dabe2:	4630      	mov	r0, r6
   dabe4:	f003 fed6 	bl	de994 <_ZN6StringC1ERKS_>
	    ++this->_M_impl._M_finish;
   dabe8:	6863      	ldr	r3, [r4, #4]
   dabea:	3310      	adds	r3, #16
   dabec:	6063      	str	r3, [r4, #4]
      }
   dabee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      const size_type __len =
   dabf2:	4a18      	ldr	r2, [pc, #96]	; (dac54 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x84>)
   dabf4:	2101      	movs	r1, #1
   dabf6:	f7ff fcb7 	bl	da568 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
   dabfa:	f8d4 8000 	ldr.w	r8, [r4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   dabfe:	4607      	mov	r7, r0
    { return __lhs.base() - __rhs.base(); }
   dac00:	eba6 0908 	sub.w	r9, r6, r8
   dac04:	b320      	cbz	r0, dac50 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x80>
   dac06:	f7fe f8c0 	bl	d8d8a <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>
   dac0a:	4605      	mov	r5, r0
   dac0c:	eb15 0009 	adds.w	r0, r5, r9
   dac10:	d002      	beq.n	dac18 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x48>
   dac12:	4651      	mov	r1, sl
   dac14:	f003 febe 	bl	de994 <_ZN6StringC1ERKS_>
	__uninit_copy(__first, __last, __result);
   dac18:	462a      	mov	r2, r5
   dac1a:	4631      	mov	r1, r6
   dac1c:	4640      	mov	r0, r8
   dac1e:	f7ff ffc1 	bl	daba4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
   dac22:	4631      	mov	r1, r6
   dac24:	f100 0210 	add.w	r2, r0, #16
   dac28:	4630      	mov	r0, r6
   dac2a:	f7ff ffbb 	bl	daba4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
	__destroy(__first, __last);
   dac2e:	4631      	mov	r1, r6
   dac30:	4681      	mov	r9, r0
   dac32:	4640      	mov	r0, r8
   dac34:	f7ff fdc2 	bl	da7bc <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	if (__p)
   dac38:	f1b8 0f00 	cmp.w	r8, #0
   dac3c:	d002      	beq.n	dac44 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x74>
	::operator delete(__p);
   dac3e:	4640      	mov	r0, r8
   dac40:	f7f9 fa2d 	bl	d409e <_ZdlPv>
      this->_M_impl._M_finish = __new_finish;
   dac44:	e9c4 5900 	strd	r5, r9, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   dac48:	eb05 1507 	add.w	r5, r5, r7, lsl #4
   dac4c:	60a5      	str	r5, [r4, #8]
      }
   dac4e:	e7ce      	b.n	dabee <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x1e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   dac50:	4605      	mov	r5, r0
   dac52:	e7db      	b.n	dac0c <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x3c>
   dac54:	000e21b8 	.word	0x000e21b8

000dac58 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
   dac58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   dac5c:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   dac60:	429e      	cmp	r6, r3
      vector<_Tp, _Alloc>::
   dac62:	4604      	mov	r4, r0
   dac64:	468a      	mov	sl, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   dac66:	d008      	beq.n	dac7a <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dac68:	b116      	cbz	r6, dac70 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x18>
   dac6a:	4630      	mov	r0, r6
   dac6c:	f003 fe78 	bl	de960 <_ZN6StringC1EOS_>
	    ++this->_M_impl._M_finish;
   dac70:	6863      	ldr	r3, [r4, #4]
   dac72:	3310      	adds	r3, #16
   dac74:	6063      	str	r3, [r4, #4]
      }
   dac76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      const size_type __len =
   dac7a:	4a18      	ldr	r2, [pc, #96]	; (dacdc <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x84>)
   dac7c:	2101      	movs	r1, #1
   dac7e:	f7ff fc73 	bl	da568 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
   dac82:	f8d4 8000 	ldr.w	r8, [r4]
   dac86:	4607      	mov	r7, r0
   dac88:	eba6 0908 	sub.w	r9, r6, r8
   dac8c:	b320      	cbz	r0, dacd8 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x80>
   dac8e:	f7fe f87c 	bl	d8d8a <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>
   dac92:	4605      	mov	r5, r0
   dac94:	eb15 0009 	adds.w	r0, r5, r9
   dac98:	d002      	beq.n	daca0 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x48>
   dac9a:	4651      	mov	r1, sl
   dac9c:	f003 fe60 	bl	de960 <_ZN6StringC1EOS_>
   daca0:	462a      	mov	r2, r5
   daca2:	4631      	mov	r1, r6
   daca4:	4640      	mov	r0, r8
   daca6:	f7ff ff7d 	bl	daba4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
   dacaa:	4631      	mov	r1, r6
   dacac:	f100 0210 	add.w	r2, r0, #16
   dacb0:	4630      	mov	r0, r6
   dacb2:	f7ff ff77 	bl	daba4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
   dacb6:	4631      	mov	r1, r6
   dacb8:	4681      	mov	r9, r0
   dacba:	4640      	mov	r0, r8
   dacbc:	f7ff fd7e 	bl	da7bc <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	if (__p)
   dacc0:	f1b8 0f00 	cmp.w	r8, #0
   dacc4:	d002      	beq.n	daccc <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x74>
	::operator delete(__p);
   dacc6:	4640      	mov	r0, r8
   dacc8:	f7f9 f9e9 	bl	d409e <_ZdlPv>
      this->_M_impl._M_finish = __new_finish;
   daccc:	e9c4 5900 	strd	r5, r9, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   dacd0:	eb05 1507 	add.w	r5, r5, r7, lsl #4
   dacd4:	60a5      	str	r5, [r4, #8]
      }
   dacd6:	e7ce      	b.n	dac76 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x1e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   dacd8:	4605      	mov	r5, r0
   dacda:	e7db      	b.n	dac94 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3c>
   dacdc:	000e21b8 	.word	0x000e21b8

000dace0 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE>:
void SleepHelper::EventCombiner::generateEventInternal(std::function<void(JSONWriter &, int &)> callback, char *buf, size_t maxSize, std::vector<EventInfo> &infoArray) {
   dace0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dace2:	4614      	mov	r4, r2
   dace4:	b0a1      	sub	sp, #132	; 0x84
    memset(buf, 0, maxSize);
   dace6:	461a      	mov	r2, r3
void SleepHelper::EventCombiner::generateEventInternal(std::function<void(JSONWriter &, int &)> callback, char *buf, size_t maxSize, std::vector<EventInfo> &infoArray) {
   dace8:	460f      	mov	r7, r1
    memset(buf, 0, maxSize);
   dacea:	4620      	mov	r0, r4
   dacec:	2100      	movs	r1, #0
        state_(BEGIN) {
   dacee:	2500      	movs	r5, #0
void SleepHelper::EventCombiner::generateEventInternal(std::function<void(JSONWriter &, int &)> callback, char *buf, size_t maxSize, std::vector<EventInfo> &infoArray) {
   dacf0:	461e      	mov	r6, r3
    memset(buf, 0, maxSize);
   dacf2:	f005 f96f 	bl	dffd4 <memset>
        n_(0) {
   dacf6:	4b30      	ldr	r3, [pc, #192]	; (dadb8 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd8>)
   dacf8:	930d      	str	r3, [sp, #52]	; 0x34
    writer.beginObject();
   dacfa:	a80d      	add	r0, sp, #52	; 0x34
   dacfc:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
        state_(BEGIN) {
   dad00:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
        n_(0) {
   dad04:	9511      	str	r5, [sp, #68]	; 0x44
    int priority = 0;
   dad06:	9501      	str	r5, [sp, #4]
    writer.beginObject();
   dad08:	f002 fb81 	bl	dd40e <_ZN5spark10JSONWriter11beginObjectEv>
    callback(writer, priority);
   dad0c:	aa01      	add	r2, sp, #4
   dad0e:	a90d      	add	r1, sp, #52	; 0x34
   dad10:	4638      	mov	r0, r7
   dad12:	f7fe fe22 	bl	d995a <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_>
    writer.endObject();
   dad16:	a80d      	add	r0, sp, #52	; 0x34
   dad18:	f002 fb57 	bl	dd3ca <_ZN5spark10JSONWriter9endObjectEv>
    if (priority > 0 && strlen(buf) > 2) {
   dad1c:	9b01      	ldr	r3, [sp, #4]
   dad1e:	42ab      	cmp	r3, r5
   dad20:	dd48      	ble.n	dadb4 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd4>
   dad22:	4620      	mov	r0, r4
   dad24:	f005 f9e1 	bl	e00ea <strlen>
   dad28:	2802      	cmp	r0, #2
   dad2a:	d943      	bls.n	dadb4 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd4>
        if (writer.dataSize() <= writer.bufferSize()) {
   dad2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   dad30:	429a      	cmp	r2, r3
   dad32:	d33f      	bcc.n	dadb4 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd4>
   dad34:	4921      	ldr	r1, [pc, #132]	; (dadbc <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xdc>)
   dad36:	a818      	add	r0, sp, #96	; 0x60
   dad38:	f003 fde1 	bl	de8fe <_ZN6StringC1EPKc>
            eventInfo.priority = priority;
   dad3c:	9b01      	ldr	r3, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   dad3e:	951f      	str	r5, [sp, #124]	; 0x7c
            JSONValue outerObj = JSONValue::parseCopy(buf);
   dad40:	4621      	mov	r1, r4
   dad42:	a802      	add	r0, sp, #8
   dad44:	e9cd 551d 	strd	r5, r5, [sp, #116]	; 0x74
            eventInfo.priority = priority;
   dad48:	931c      	str	r3, [sp, #112]	; 0x70
            JSONValue outerObj = JSONValue::parseCopy(buf);
   dad4a:	f7fe f8fb 	bl	d8f44 <_ZN5spark9JSONValue9parseCopyEPKc>
            JSONObjectIterator iter(outerObj);
   dad4e:	a902      	add	r1, sp, #8
   dad50:	a812      	add	r0, sp, #72	; 0x48
   dad52:	f7fc fa3f 	bl	d71d4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
            while(iter.next()) {
   dad56:	a812      	add	r0, sp, #72	; 0x48
   dad58:	f002 faf4 	bl	dd344 <_ZN5spark18JSONObjectIterator4nextEv>
   dad5c:	4605      	mov	r5, r0
   dad5e:	b190      	cbz	r0, dad86 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xa6>
                eventInfo.keys.push_back((const char *)iter.name());
   dad60:	a912      	add	r1, sp, #72	; 0x48
   dad62:	a805      	add	r0, sp, #20
   dad64:	f7fc fa47 	bl	d71f6 <_ZNK5spark18JSONObjectIterator4nameEv>
   dad68:	9907      	ldr	r1, [sp, #28]
   dad6a:	a809      	add	r0, sp, #36	; 0x24
   dad6c:	f003 fdc7 	bl	de8fe <_ZN6StringC1EPKc>
      { emplace_back(std::move(__x)); }
   dad70:	a909      	add	r1, sp, #36	; 0x24
   dad72:	a81d      	add	r0, sp, #116	; 0x74
   dad74:	f7ff ff70 	bl	dac58 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   dad78:	a809      	add	r0, sp, #36	; 0x24
   dad7a:	f003 fd75 	bl	de868 <_ZN6StringD1Ev>
   dad7e:	a806      	add	r0, sp, #24
   dad80:	f7fa fa5e 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            while(iter.next()) {
   dad84:	e7e7      	b.n	dad56 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0x76>
            buf[strlen(buf) - 1] = 0;
   dad86:	4620      	mov	r0, r4
   dad88:	f005 f9af 	bl	e00ea <strlen>
   dad8c:	4420      	add	r0, r4
            eventInfo.json = &buf[1];
   dad8e:	1c61      	adds	r1, r4, #1
            buf[strlen(buf) - 1] = 0;
   dad90:	f800 5c01 	strb.w	r5, [r0, #-1]
            eventInfo.json = &buf[1];
   dad94:	a818      	add	r0, sp, #96	; 0x60
   dad96:	f003 fe10 	bl	de9ba <_ZN6StringaSEPKc>
            infoArray.push_back(eventInfo);
   dad9a:	a918      	add	r1, sp, #96	; 0x60
   dad9c:	9826      	ldr	r0, [sp, #152]	; 0x98
   dad9e:	f7ff fd99 	bl	da8d4 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_>
   dada2:	a813      	add	r0, sp, #76	; 0x4c
   dada4:	f7fa fa4c 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dada8:	a803      	add	r0, sp, #12
   dadaa:	f7fa fa49 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            EventInfo eventInfo;
   dadae:	a818      	add	r0, sp, #96	; 0x60
   dadb0:	f7ff fd1b 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
}
   dadb4:	b021      	add	sp, #132	; 0x84
   dadb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dadb8:	000e2d3c 	.word	0x000e2d3c
   dadbc:	000e296f 	.word	0x000e296f

000dadc0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   dadc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dadc4:	4607      	mov	r7, r0
   dadc6:	4688      	mov	r8, r1
   dadc8:	4616      	mov	r6, r2
	  _ForwardIterator __cur = __result;
   dadca:	4615      	mov	r5, r2
   dadcc:	4604      	mov	r4, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   dadce:	4544      	cmp	r4, r8
   dadd0:	d011      	beq.n	dadf6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0x36>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   dadd2:	b16d      	cbz	r5, dadf0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0x30>
    class PublishData {
   dadd4:	4621      	mov	r1, r4
   dadd6:	4628      	mov	r0, r5
   dadd8:	f003 fddc 	bl	de994 <_ZN6StringC1ERKS_>
   daddc:	f104 0110 	add.w	r1, r4, #16
   dade0:	f105 0010 	add.w	r0, r5, #16
   dade4:	f003 fdd6 	bl	de994 <_ZN6StringC1ERKS_>
   dade8:	f894 3020 	ldrb.w	r3, [r4, #32]
   dadec:	f885 3020 	strb.w	r3, [r5, #32]
   dadf0:	3424      	adds	r4, #36	; 0x24
   dadf2:	3524      	adds	r5, #36	; 0x24
   dadf4:	e7eb      	b.n	dadce <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0xe>
	      return __cur;
   dadf6:	1be0      	subs	r0, r4, r7
   dadf8:	0884      	lsrs	r4, r0, #2
   dadfa:	4804      	ldr	r0, [pc, #16]	; (dae0c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0x4c>)
   dadfc:	4344      	muls	r4, r0
   dadfe:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
	}
   dae02:	2024      	movs	r0, #36	; 0x24
   dae04:	fb00 6004 	mla	r0, r0, r4, r6
   dae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dae0c:	38e38e39 	.word	0x38e38e39

000dae10 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
   dae10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   dae14:	e9d0 9800 	ldrd	r9, r8, [r0]
   dae18:	eba8 0409 	sub.w	r4, r8, r9
   dae1c:	10a3      	asrs	r3, r4, #2
   dae1e:	4c29      	ldr	r4, [pc, #164]	; (daec4 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb4>)
   dae20:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   dae22:	4b29      	ldr	r3, [pc, #164]	; (daec8 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb8>)
   dae24:	429c      	cmp	r4, r3
   dae26:	4605      	mov	r5, r0
   dae28:	460e      	mov	r6, r1
   dae2a:	4617      	mov	r7, r2
   dae2c:	d102      	bne.n	dae34 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   dae2e:	4827      	ldr	r0, [pc, #156]	; (daecc <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xbc>)
   dae30:	f004 fb21 	bl	df476 <_ZSt20__throw_length_errorPKc>
   dae34:	2c01      	cmp	r4, #1
   dae36:	4622      	mov	r2, r4
   dae38:	bf38      	it	cc
   dae3a:	2201      	movcc	r2, #1
   dae3c:	18a4      	adds	r4, r4, r2
   dae3e:	eba1 0b09 	sub.w	fp, r1, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   dae42:	d23d      	bcs.n	daec0 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   dae44:	b144      	cbz	r4, dae58 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
   dae46:	429c      	cmp	r4, r3
   dae48:	bf28      	it	cs
   dae4a:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dae4c:	2024      	movs	r0, #36	; 0x24
   dae4e:	4360      	muls	r0, r4
   dae50:	f7f9 f921 	bl	d4096 <_Znwj>
   dae54:	4682      	mov	sl, r0
   dae56:	e000      	b.n	dae5a <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x4a>
   dae58:	46a2      	mov	sl, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dae5a:	eb1a 0b0b 	adds.w	fp, sl, fp
   dae5e:	d00d      	beq.n	dae7c <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6c>
   dae60:	4639      	mov	r1, r7
   dae62:	4658      	mov	r0, fp
   dae64:	f003 fd7c 	bl	de960 <_ZN6StringC1EOS_>
   dae68:	f107 0110 	add.w	r1, r7, #16
   dae6c:	f10b 0010 	add.w	r0, fp, #16
   dae70:	f003 fd76 	bl	de960 <_ZN6StringC1EOS_>
   dae74:	f897 3020 	ldrb.w	r3, [r7, #32]
   dae78:	f88b 3020 	strb.w	r3, [fp, #32]
	__uninit_copy(__first, __last, __result);
   dae7c:	4631      	mov	r1, r6
   dae7e:	4652      	mov	r2, sl
   dae80:	4648      	mov	r0, r9
   dae82:	f7ff ff9d 	bl	dadc0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_>
   dae86:	4641      	mov	r1, r8
   dae88:	f100 0224 	add.w	r2, r0, #36	; 0x24
   dae8c:	4630      	mov	r0, r6
   dae8e:	f7ff ff97 	bl	dadc0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   dae92:	464e      	mov	r6, r9
   dae94:	4607      	mov	r7, r0
	  for (; __first != __last; ++__first)
   dae96:	4546      	cmp	r6, r8
   dae98:	d004      	beq.n	daea4 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
    { __pointer->~_Tp(); }
   dae9a:	4630      	mov	r0, r6
   dae9c:	f7fe f919 	bl	d90d2 <_ZN11SleepHelper11PublishDataD1Ev>
	  for (; __first != __last; ++__first)
   daea0:	3624      	adds	r6, #36	; 0x24
   daea2:	e7f8      	b.n	dae96 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x86>
	if (__p)
   daea4:	f1b9 0f00 	cmp.w	r9, #0
   daea8:	d002      	beq.n	daeb0 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
	::operator delete(__p);
   daeaa:	4648      	mov	r0, r9
   daeac:	f7f9 f8f7 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   daeb0:	2024      	movs	r0, #36	; 0x24
   daeb2:	fb00 a404 	mla	r4, r0, r4, sl
      this->_M_impl._M_finish = __new_finish;
   daeb6:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   daeba:	60ac      	str	r4, [r5, #8]
    }
   daebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   daec0:	461c      	mov	r4, r3
   daec2:	e7c3      	b.n	dae4c <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3c>
   daec4:	38e38e39 	.word	0x38e38e39
   daec8:	038e38e3 	.word	0x038e38e3
   daecc:	000e21b8 	.word	0x000e21b8

000daed0 <_ZN11SleepHelper21stateHandlerConnectedEv>:
void SleepHelper::stateHandlerConnected() {
   daed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   daed4:	b091      	sub	sp, #68	; 0x44
   daed6:	4604      	mov	r4, r0
   daed8:	f001 f9e4 	bl	dc2a4 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   daedc:	4605      	mov	r5, r0
   daede:	b960      	cbnz	r0, daefa <_ZN11SleepHelper21stateHandlerConnectedEv+0x2a>
   daee0:	f000 ff38 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &SleepHelper::stateHandlerReconnectWait;
   daee4:	4b77      	ldr	r3, [pc, #476]	; (db0c4 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1f4>)
        reconnectAttemptStartMillis = millis();
   daee6:	f8c4 07c0 	str.w	r0, [r4, #1984]	; 0x7c0
        stateHandler = &SleepHelper::stateHandlerReconnectWait;
   daeea:	e9cd 3507 	strd	r3, r5, [sp, #28]
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   daeee:	a907      	add	r1, sp, #28
   daef0:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   daef4:	f7fe fe22 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   daef8:	e0a8      	b.n	db04c <_ZN11SleepHelper21stateHandlerConnectedEv+0x17c>
    if (wakeEventName.length() > 0) {
   daefa:	f8d4 3730 	ldr.w	r3, [r4, #1840]	; 0x730
   daefe:	2b00      	cmp	r3, #0
   daf00:	d042      	beq.n	daf88 <_ZN11SleepHelper21stateHandlerConnectedEv+0xb8>
        if (!lastEventHistoryCheckMillis || millis() - lastEventHistoryCheckMillis >= 1000) {
   daf02:	f8d4 37cc 	ldr.w	r3, [r4, #1996]	; 0x7cc
   daf06:	bbbb      	cbnz	r3, daf78 <_ZN11SleepHelper21stateHandlerConnectedEv+0xa8>
   daf08:	f000 ff24 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
   daf0c:	4f6e      	ldr	r7, [pc, #440]	; (db0c8 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1f8>)
   daf0e:	f8d4 67d4 	ldr.w	r6, [r4, #2004]	; 0x7d4
            lastEventHistoryCheckMillis = millis();
   daf12:	f8c4 07cc 	str.w	r0, [r4, #1996]	; 0x7cc
            for(auto it = wakeEventPayload.begin(); it != wakeEventPayload.end(); ++it) {
   daf16:	f8d4 37d8 	ldr.w	r3, [r4, #2008]	; 0x7d8
   daf1a:	42b3      	cmp	r3, r6
   daf1c:	f000 80a0 	beq.w	db060 <_ZN11SleepHelper21stateHandlerConnectedEv+0x190>
        operator const char*() const { return c_str(); }
   daf20:	6835      	ldr	r5, [r6, #0]
        PublishData(const char *eventName, const char *eventData) : eventName(eventName), eventData(eventData) {}
   daf22:	f8d4 1728 	ldr.w	r1, [r4, #1832]	; 0x728
   daf26:	a807      	add	r0, sp, #28
   daf28:	f003 fce9 	bl	de8fe <_ZN6StringC1EPKc>
   daf2c:	4629      	mov	r1, r5
   daf2e:	a80b      	add	r0, sp, #44	; 0x2c
   daf30:	f003 fce5 	bl	de8fe <_ZN6StringC1EPKc>
   daf34:	783b      	ldrb	r3, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   daf36:	f8d4 5784 	ldr.w	r5, [r4, #1924]	; 0x784
        val_(flag.value()) {
   daf3a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   daf3e:	f8d4 3788 	ldr.w	r3, [r4, #1928]	; 0x788
   daf42:	429d      	cmp	r5, r3
   daf44:	f000 8085 	beq.w	db052 <_ZN11SleepHelper21stateHandlerConnectedEv+0x182>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   daf48:	b165      	cbz	r5, daf64 <_ZN11SleepHelper21stateHandlerConnectedEv+0x94>
    class PublishData {
   daf4a:	a907      	add	r1, sp, #28
   daf4c:	4628      	mov	r0, r5
   daf4e:	f003 fd07 	bl	de960 <_ZN6StringC1EOS_>
   daf52:	a90b      	add	r1, sp, #44	; 0x2c
   daf54:	f105 0010 	add.w	r0, r5, #16
   daf58:	f003 fd02 	bl	de960 <_ZN6StringC1EOS_>
   daf5c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   daf60:	f885 3020 	strb.w	r3, [r5, #32]
	    ++this->_M_impl._M_finish;
   daf64:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
   daf68:	3324      	adds	r3, #36	; 0x24
   daf6a:	f8c4 3784 	str.w	r3, [r4, #1924]	; 0x784
                publishData.push_back(PublishData(wakeEventName, *it));            
   daf6e:	a807      	add	r0, sp, #28
   daf70:	f7fe f8af 	bl	d90d2 <_ZN11SleepHelper11PublishDataD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   daf74:	3610      	adds	r6, #16
	return *this;
   daf76:	e7ce      	b.n	daf16 <_ZN11SleepHelper21stateHandlerConnectedEv+0x46>
   daf78:	f000 feec 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
        if (!lastEventHistoryCheckMillis || millis() - lastEventHistoryCheckMillis >= 1000) {
   daf7c:	f8d4 37cc 	ldr.w	r3, [r4, #1996]	; 0x7cc
   daf80:	1ac0      	subs	r0, r0, r3
   daf82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   daf86:	d2bf      	bcs.n	daf08 <_ZN11SleepHelper21stateHandlerConnectedEv+0x38>
      { return begin() == end(); }
   daf88:	f8d4 5780 	ldr.w	r5, [r4, #1920]	; 0x780
    if (!publishData.empty()) {
   daf8c:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
   daf90:	429d      	cmp	r5, r3
   daf92:	d06a      	beq.n	db06a <_ZN11SleepHelper21stateHandlerConnectedEv+0x19a>
   daf94:	4629      	mov	r1, r5
   daf96:	a807      	add	r0, sp, #28
   daf98:	f003 fcfc 	bl	de994 <_ZN6StringC1ERKS_>
   daf9c:	f105 0110 	add.w	r1, r5, #16
   dafa0:	a80b      	add	r0, sp, #44	; 0x2c
   dafa2:	f003 fcf7 	bl	de994 <_ZN6StringC1ERKS_>
   dafa6:	f895 3020 	ldrb.w	r3, [r5, #32]
   dafaa:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   dafae:	f000 fed1 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &SleepHelper::stateHandlerPublishWait;
   dafb2:	f504 67f5 	add.w	r7, r4, #1960	; 0x7a8
   dafb6:	ad03      	add	r5, sp, #12
   dafb8:	4b44      	ldr	r3, [pc, #272]	; (db0cc <_ZN11SleepHelper21stateHandlerConnectedEv+0x1fc>)
        stateTime = millis();
   dafba:	f8c4 07b8 	str.w	r0, [r4, #1976]	; 0x7b8
        stateHandler = &SleepHelper::stateHandlerPublishWait;
   dafbe:	2600      	movs	r6, #0
   dafc0:	4629      	mov	r1, r5
   dafc2:	4638      	mov	r0, r7
   dafc4:	9303      	str	r3, [sp, #12]
   dafc6:	9604      	str	r6, [sp, #16]
   dafc8:	f7fe fdb8 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return (logEnabled & flag) != 0;
   dafcc:	f8d4 179c 	ldr.w	r1, [r4, #1948]	; 0x79c
   dafd0:	4632      	mov	r2, r6
   dafd2:	f401 7380 	and.w	r3, r1, #256	; 0x100
        if (logEnableEnabled(logEnabledPublishData)) {
   dafd6:	4313      	orrs	r3, r2
   dafd8:	d019      	beq.n	db00e <_ZN11SleepHelper21stateHandlerConnectedEv+0x13e>
            appLog.trace("publishing name=%s flags=0x%x", event.eventName.c_str(), (int)event.flags.value());
   dafda:	9a07      	ldr	r2, [sp, #28]
   dafdc:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   dafe0:	493b      	ldr	r1, [pc, #236]	; (db0d0 <_ZN11SleepHelper21stateHandlerConnectedEv+0x200>)
   dafe2:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dafe6:	f7fa fa61 	bl	d54ac <_ZNK5spark6Logger5traceEPKcz>
            appLog.write(LOG_LEVEL_TRACE, event.eventData.c_str(), event.eventData.length());
   dafea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    if (data) {
   dafec:	b132      	cbz	r2, daffc <_ZN11SleepHelper21stateHandlerConnectedEv+0x12c>
        log_write(level, name_, data, size, nullptr);
   dafee:	9600      	str	r6, [sp, #0]
   daff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   daff2:	f8d4 17e4 	ldr.w	r1, [r4, #2020]	; 0x7e4
   daff6:	2001      	movs	r0, #1
   daff8:	f001 f8ac 	bl	dc154 <log_write>
   daffc:	2300      	movs	r3, #0
   daffe:	9300      	str	r3, [sp, #0]
   db000:	4a34      	ldr	r2, [pc, #208]	; (db0d4 <_ZN11SleepHelper21stateHandlerConnectedEv+0x204>)
   db002:	f8d4 17e4 	ldr.w	r1, [r4, #2020]	; 0x7e4
   db006:	2302      	movs	r3, #2
   db008:	2001      	movs	r0, #1
   db00a:	f001 f8a3 	bl	dc154 <log_write>
        bool bResult = BackgroundPublishRK::instance().publish(event.eventName, event.eventData, event.flags, 
   db00e:	f7fa ffa3 	bl	d5f58 <_ZN19BackgroundPublishRK8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   db012:	4b31      	ldr	r3, [pc, #196]	; (db0d8 <_ZN11SleepHelper21stateHandlerConnectedEv+0x208>)
   db014:	9306      	str	r3, [sp, #24]
	    _M_manager = &_My_handler::_M_manager;
   db016:	4b31      	ldr	r3, [pc, #196]	; (db0dc <_ZN11SleepHelper21stateHandlerConnectedEv+0x20c>)
   db018:	9305      	str	r3, [sp, #20]
   db01a:	2300      	movs	r3, #0
   db01c:	e9cd 5300 	strd	r5, r3, [sp]
   db020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   db022:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   db026:	9907      	ldr	r1, [sp, #28]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db028:	9403      	str	r4, [sp, #12]
   db02a:	f7fb f8cd 	bl	d61c8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
   db02e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   db030:	4628      	mov	r0, r5
   db032:	f7f9 f959 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
        if (!bResult) {
   db036:	b934      	cbnz	r4, db046 <_ZN11SleepHelper21stateHandlerConnectedEv+0x176>
            stateHandler = &SleepHelper::stateHandlerConnected;
   db038:	4b29      	ldr	r3, [pc, #164]	; (db0e0 <_ZN11SleepHelper21stateHandlerConnectedEv+0x210>)
   db03a:	4629      	mov	r1, r5
   db03c:	4638      	mov	r0, r7
   db03e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   db042:	f7fe fd7b 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        PublishData event = publishData.front();
   db046:	a807      	add	r0, sp, #28
   db048:	f7fe f843 	bl	d90d2 <_ZN11SleepHelper11PublishDataD1Ev>
}
   db04c:	b011      	add	sp, #68	; 0x44
   db04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   db052:	aa07      	add	r2, sp, #28
   db054:	4629      	mov	r1, r5
   db056:	f504 60f0 	add.w	r0, r4, #1920	; 0x780
   db05a:	f7ff fed9 	bl	dae10 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
   db05e:	e786      	b.n	daf6e <_ZN11SleepHelper21stateHandlerConnectedEv+0x9e>
            wakeEventPayload.clear();
   db060:	f204 70d4 	addw	r0, r4, #2004	; 0x7d4
   db064:	f7ff fc74 	bl	da950 <_ZNSt6vectorI6StringSaIS0_EE5clearEv>
   db068:	e78e      	b.n	daf88 <_ZN11SleepHelper21stateHandlerConnectedEv+0xb8>
   db06a:	f000 fe73 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
    system_tick_t elapsedMs = millis() - connectedStartMillis;
   db06e:	f8d4 37c8 	ldr.w	r3, [r4, #1992]	; 0x7c8
   db072:	f8d4 56d4 	ldr.w	r5, [r4, #1748]	; 0x6d4
   db076:	f8d4 66c8 	ldr.w	r6, [r4, #1736]	; 0x6c8
   db07a:	eba0 0803 	sub.w	r8, r0, r3
            bool finalRes = false;
   db07e:	2700      	movs	r7, #0
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   db080:	f06f 0901 	mvn.w	r9, #1
            for(auto it = callbackState.begin(), it2 = callbackFunctions.begin(); it != callbackState.end(); ++it, ++it2) {
   db084:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
   db088:	42ab      	cmp	r3, r5
   db08a:	d015      	beq.n	db0b8 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1e8>
                if (it->callbackState != AppCallbackState::CALLBACK_START_RETURNED_FALSE) {
   db08c:	682b      	ldr	r3, [r5, #0]
   db08e:	3302      	adds	r3, #2
   db090:	d00d      	beq.n	db0ae <_ZN11SleepHelper21stateHandlerConnectedEv+0x1de>
   db092:	f8cd 801c 	str.w	r8, [sp, #28]
      if (_M_empty())
   db096:	68b3      	ldr	r3, [r6, #8]
   db098:	b90b      	cbnz	r3, db09e <_ZN11SleepHelper21stateHandlerConnectedEv+0x1ce>
	__throw_bad_function_call();
   db09a:	f004 f9ef 	bl	df47c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db09e:	68f3      	ldr	r3, [r6, #12]
   db0a0:	aa07      	add	r2, sp, #28
   db0a2:	4629      	mov	r1, r5
   db0a4:	4630      	mov	r0, r6
   db0a6:	4798      	blx	r3
                    if (res) {
   db0a8:	b920      	cbnz	r0, db0b4 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1e4>
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   db0aa:	f8c5 9000 	str.w	r9, [r5]
      operator++() _GLIBCXX_NOEXCEPT
   db0ae:	3508      	adds	r5, #8
   db0b0:	3610      	adds	r6, #16
	return *this;
   db0b2:	e7e7      	b.n	db084 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1b4>
                        finalRes = true;
   db0b4:	4607      	mov	r7, r0
   db0b6:	e7fa      	b.n	db0ae <_ZN11SleepHelper21stateHandlerConnectedEv+0x1de>
    if (!sleepReadyFunctions.whileAnyTrue(elapsedMs)) {
   db0b8:	2f00      	cmp	r7, #0
   db0ba:	d1c7      	bne.n	db04c <_ZN11SleepHelper21stateHandlerConnectedEv+0x17c>
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   db0bc:	4b09      	ldr	r3, [pc, #36]	; (db0e4 <_ZN11SleepHelper21stateHandlerConnectedEv+0x214>)
   db0be:	e9cd 3707 	strd	r3, r7, [sp, #28]
   db0c2:	e714      	b.n	daeee <_ZN11SleepHelper21stateHandlerConnectedEv+0x1e>
   db0c4:	000d9e31 	.word	0x000d9e31
   db0c8:	2003e528 	.word	0x2003e528
   db0cc:	000d8da1 	.word	0x000d8da1
   db0d0:	000e2aa9 	.word	0x000e2aa9
   db0d4:	000e296d 	.word	0x000e296d
   db0d8:	000d9f89 	.word	0x000d9f89
   db0dc:	000d8b47 	.word	0x000d8b47
   db0e0:	000daed1 	.word	0x000daed1
   db0e4:	000dbaf1 	.word	0x000dbaf1

000db0e8 <_ZSt4swapIN11SleepHelper13EventCombiner9EventInfoEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
   db0e8:	b530      	push	{r4, r5, lr}
   db0ea:	b089      	sub	sp, #36	; 0x24
   db0ec:	460c      	mov	r4, r1
   db0ee:	4605      	mov	r5, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db0f0:	4601      	mov	r1, r0
   db0f2:	4668      	mov	r0, sp
   db0f4:	f7ff fc37 	bl	da966 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
      __a = _GLIBCXX_MOVE(__b);
   db0f8:	4621      	mov	r1, r4
   db0fa:	4628      	mov	r0, r5
   db0fc:	f7ff fc46 	bl	da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      __b = _GLIBCXX_MOVE(__tmp);
   db100:	4669      	mov	r1, sp
   db102:	4620      	mov	r0, r4
   db104:	f7ff fc42 	bl	da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db108:	4668      	mov	r0, sp
   db10a:	f7ff fb6e 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
    }
   db10e:	b009      	add	sp, #36	; 0x24
   db110:	bd30      	pop	{r4, r5, pc}

000db112 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
   db112:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db116:	4604      	mov	r4, r0
   db118:	b091      	sub	sp, #68	; 0x44
   db11a:	4617      	mov	r7, r2
   db11c:	469a      	mov	sl, r3
   db11e:	460d      	mov	r5, r1
      { return __normal_iterator(_M_current + __n); }
   db120:	f100 0820 	add.w	r8, r0, #32
    { return __lhs.base() - __rhs.base(); }
   db124:	1b2e      	subs	r6, r5, r4
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
   db126:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db12a:	dd75      	ble.n	db218 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x106>
   db12c:	ea4f 1966 	mov.w	r9, r6, asr #5
	{
	  if (__depth_limit == 0)
   db130:	bb47      	cbnz	r7, db184 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x72>

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
   db132:	f1a9 0602 	sub.w	r6, r9, #2
   db136:	1076      	asrs	r6, r6, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   db138:	eb04 1146 	add.w	r1, r4, r6, lsl #5
   db13c:	4668      	mov	r0, sp
   db13e:	f7ff fc12 	bl	da966 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
   db142:	4669      	mov	r1, sp
   db144:	a808      	add	r0, sp, #32
   db146:	f7ff fc0e 	bl	da966 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
   db14a:	4620      	mov	r0, r4
   db14c:	ab08      	add	r3, sp, #32
   db14e:	464a      	mov	r2, r9
   db150:	4631      	mov	r1, r6
   db152:	f7ff fc39 	bl	da9c8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0>
   db156:	a808      	add	r0, sp, #32
   db158:	f7ff fb47 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
			     __comp);
	  if (__parent == 0)
   db15c:	b96e      	cbnz	r6, db17a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x68>
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   db15e:	4668      	mov	r0, sp
   db160:	f7ff fb43 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db164:	1b2b      	subs	r3, r5, r4
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
   db166:	2b20      	cmp	r3, #32
   db168:	f1a5 0520 	sub.w	r5, r5, #32
   db16c:	dd54      	ble.n	db218 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x106>
	{
	  --__last;
	  std::__pop_heap(__first, __last, __last, __comp);
   db16e:	462a      	mov	r2, r5
   db170:	4629      	mov	r1, r5
   db172:	4620      	mov	r0, r4
   db174:	f7ff fc93 	bl	daa9e <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_SI_RT0_.isra.0>
      while (__last - __first > 1)
   db178:	e7f4      	b.n	db164 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x52>
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   db17a:	4668      	mov	r0, sp
	  __parent--;
   db17c:	3e01      	subs	r6, #1
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   db17e:	f7ff fb34 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db182:	e7d9      	b.n	db138 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x26>
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
   db184:	11b6      	asrs	r6, r6, #6
      { return __normal_iterator(_M_current + __n); }
   db186:	eb04 1646 	add.w	r6, r4, r6, lsl #5
      if (__comp(__a, __b))
   db18a:	4631      	mov	r1, r6
   db18c:	4640      	mov	r0, r8
   db18e:	f7ff fbb4 	bl	da8fa <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
      { return __normal_iterator(_M_current - __n); }
   db192:	f1a5 0920 	sub.w	r9, r5, #32
	    {
	      std::__partial_sort(__first, __last, __last, __comp);
	      return;
	    }
	  --__depth_limit;
   db196:	3f01      	subs	r7, #1
	  if (__comp(__b, __c))
   db198:	4649      	mov	r1, r9
      if (__comp(__a, __b))
   db19a:	b160      	cbz	r0, db1b6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xa4>
	  if (__comp(__b, __c))
   db19c:	4630      	mov	r0, r6
   db19e:	f7ff fbac 	bl	da8fa <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   db1a2:	b108      	cbz	r0, db1a8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x96>
      swap(*__a, *__b);
   db1a4:	4631      	mov	r1, r6
   db1a6:	e00b      	b.n	db1c0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xae>
	  else if (__comp(__a, __c))
   db1a8:	4649      	mov	r1, r9
   db1aa:	4640      	mov	r0, r8
   db1ac:	f7ff fba5 	bl	da8fa <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   db1b0:	b128      	cbz	r0, db1be <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xac>
   db1b2:	4649      	mov	r1, r9
   db1b4:	e004      	b.n	db1c0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xae>
      else if (__comp(__a, __c))
   db1b6:	4640      	mov	r0, r8
   db1b8:	f7ff fb9f 	bl	da8fa <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   db1bc:	b1f8      	cbz	r0, db1fe <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xec>
   db1be:	4641      	mov	r1, r8
   db1c0:	4620      	mov	r0, r4
   db1c2:	f7ff ff91 	bl	db0e8 <_ZSt4swapIN11SleepHelper13EventCombiner9EventInfoEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
    __unguarded_partition(_RandomAccessIterator __first,
   db1c6:	4646      	mov	r6, r8
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
   db1c8:	46a9      	mov	r9, r5
	  while (__comp(__first, __pivot))
   db1ca:	4621      	mov	r1, r4
   db1cc:	4630      	mov	r0, r6
   db1ce:	f7ff fb94 	bl	da8fa <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   db1d2:	b9f8      	cbnz	r0, db214 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x102>
   db1d4:	f1a9 0b20 	sub.w	fp, r9, #32
	  while (__comp(__pivot, __last))
   db1d8:	4659      	mov	r1, fp
   db1da:	4620      	mov	r0, r4
   db1dc:	f7ff fb8d 	bl	da8fa <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   db1e0:	46d9      	mov	r9, fp
   db1e2:	f1ab 0b20 	sub.w	fp, fp, #32
   db1e6:	2800      	cmp	r0, #0
   db1e8:	d1f6      	bne.n	db1d8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xc6>
	  if (!(__first < __last))
   db1ea:	454e      	cmp	r6, r9
   db1ec:	d30e      	bcc.n	db20c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xfa>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   db1ee:	4629      	mov	r1, r5
   db1f0:	4653      	mov	r3, sl
   db1f2:	463a      	mov	r2, r7
   db1f4:	4630      	mov	r0, r6
   db1f6:	f7ff ff8c 	bl	db112 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_>
      while (__last - __first > int(_S_threshold))
   db1fa:	4635      	mov	r5, r6
   db1fc:	e792      	b.n	db124 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x12>
      else if (__comp(__b, __c))
   db1fe:	4649      	mov	r1, r9
   db200:	4630      	mov	r0, r6
   db202:	f7ff fb7a 	bl	da8fa <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   db206:	2800      	cmp	r0, #0
   db208:	d0cc      	beq.n	db1a4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x92>
   db20a:	e7d2      	b.n	db1b2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xa0>
   db20c:	4649      	mov	r1, r9
   db20e:	4630      	mov	r0, r6
   db210:	f7ff ff6a 	bl	db0e8 <_ZSt4swapIN11SleepHelper13EventCombiner9EventInfoEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
      operator++() _GLIBCXX_NOEXCEPT
   db214:	3620      	adds	r6, #32
   db216:	e7d8      	b.n	db1ca <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xb8>
	  __last = __cut;
	}
    }
   db218:	b011      	add	sp, #68	; 0x44
   db21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000db220 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj>:
void SleepHelper::EventCombiner::generateEvents(std::vector<String> &events, size_t maxSize) {
   db220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db224:	4617      	mov	r7, r2
   db226:	b09f      	sub	sp, #124	; 0x7c
   db228:	4604      	mov	r4, r0
    events.clear();
   db22a:	4608      	mov	r0, r1
void SleepHelper::EventCombiner::generateEvents(std::vector<String> &events, size_t maxSize) {
   db22c:	4688      	mov	r8, r1
    events.clear();
   db22e:	f7ff fb8f 	bl	da950 <_ZNSt6vectorI6StringSaIS0_EE5clearEv>
	: _M_start(), _M_finish(), _M_end_of_storage()
   db232:	2300      	movs	r3, #0
    char *buf = (char *)malloc(maxSize + 1);
   db234:	1c78      	adds	r0, r7, #1
   db236:	e9cd 3307 	strd	r3, r3, [sp, #28]
   db23a:	9309      	str	r3, [sp, #36]	; 0x24
   db23c:	f001 f8c2 	bl	dc3c4 <malloc>
    if (!buf) {
   db240:	4606      	mov	r6, r0
   db242:	b928      	cbnz	r0, db250 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x30>
    std::vector<EventInfo> infoArray;
   db244:	a807      	add	r0, sp, #28
   db246:	f7ff fb72 	bl	da92e <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev>
}
   db24a:	b01f      	add	sp, #124	; 0x7c
   db24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      : _M_current(__i) { }
   db250:	6925      	ldr	r5, [r4, #16]
        generateEventInternal(*it, buf, maxSize, infoArray);        
   db252:	f10d 091c 	add.w	r9, sp, #28
    for(auto it = oneTimeCallbacks.callbackFunctions.rbegin(); it != oneTimeCallbacks.callbackFunctions.rend(); ++it) {
   db256:	68e3      	ldr	r3, [r4, #12]
   db258:	429d      	cmp	r5, r3
   db25a:	d017      	beq.n	db28c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x6c>
	--_M_current;
   db25c:	3d10      	subs	r5, #16
        generateEventInternal(*it, buf, maxSize, infoArray);        
   db25e:	4629      	mov	r1, r5
   db260:	a811      	add	r0, sp, #68	; 0x44
   db262:	f7fe fb29 	bl	d98b8 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
   db266:	a911      	add	r1, sp, #68	; 0x44
   db268:	a816      	add	r0, sp, #88	; 0x58
   db26a:	f7fe fed5 	bl	da018 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_>
   db26e:	463b      	mov	r3, r7
   db270:	4632      	mov	r2, r6
   db272:	a916      	add	r1, sp, #88	; 0x58
   db274:	4620      	mov	r0, r4
   db276:	f8cd 9000 	str.w	r9, [sp]
   db27a:	f7ff fd31 	bl	dace0 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE>
    class function<_Res(_ArgTypes...)>
   db27e:	a816      	add	r0, sp, #88	; 0x58
   db280:	f7f9 f832 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   db284:	a811      	add	r0, sp, #68	; 0x44
   db286:	f7f9 f82f 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	return *this;
   db28a:	e7e4      	b.n	db256 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x36>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   db28c:	6825      	ldr	r5, [r4, #0]
        generateEventInternal(*it, buf, maxSize, infoArray);        
   db28e:	f10d 091c 	add.w	r9, sp, #28
    for(auto it = callbacks.callbackFunctions.begin(); it != callbacks.callbackFunctions.end(); ++it) {
   db292:	6863      	ldr	r3, [r4, #4]
   db294:	42ab      	cmp	r3, r5
   db296:	d017      	beq.n	db2c8 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0xa8>
        generateEventInternal(*it, buf, maxSize, infoArray);        
   db298:	4629      	mov	r1, r5
   db29a:	a811      	add	r0, sp, #68	; 0x44
   db29c:	f7fe fb0c 	bl	d98b8 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
   db2a0:	a911      	add	r1, sp, #68	; 0x44
   db2a2:	a816      	add	r0, sp, #88	; 0x58
   db2a4:	f7fe feb8 	bl	da018 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_>
   db2a8:	463b      	mov	r3, r7
   db2aa:	4632      	mov	r2, r6
   db2ac:	a916      	add	r1, sp, #88	; 0x58
   db2ae:	4620      	mov	r0, r4
   db2b0:	f8cd 9000 	str.w	r9, [sp]
   db2b4:	f7ff fd14 	bl	dace0 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE>
   db2b8:	a816      	add	r0, sp, #88	; 0x58
   db2ba:	f7f9 f815 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   db2be:	a811      	add	r0, sp, #68	; 0x44
   db2c0:	f7f9 f812 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   db2c4:	3510      	adds	r5, #16
	return *this;
   db2c6:	e7e4      	b.n	db292 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x72>
    if (eventHistory.getHasEvents()) {
   db2c8:	f104 0a18 	add.w	sl, r4, #24
   db2cc:	4650      	mov	r0, sl
   db2ce:	f7fd ff83 	bl	d91d8 <_ZN11SleepHelper12EventHistory12getHasEventsEv>
   db2d2:	9003      	str	r0, [sp, #12]
   db2d4:	2800      	cmp	r0, #0
   db2d6:	d040      	beq.n	db35a <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x13a>
        memset(buf, 0, maxSize);
   db2d8:	463a      	mov	r2, r7
   db2da:	2100      	movs	r1, #0
   db2dc:	4630      	mov	r0, r6
   db2de:	f004 fe79 	bl	dffd4 <memset>
        state_(BEGIN) {
   db2e2:	2500      	movs	r5, #0
        n_(0) {
   db2e4:	4bc1      	ldr	r3, [pc, #772]	; (db5ec <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3cc>)
   db2e6:	9311      	str	r3, [sp, #68]	; 0x44
        writer.beginObject();
   db2e8:	a811      	add	r0, sp, #68	; 0x44
   db2ea:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
        state_(BEGIN) {
   db2ee:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
        n_(0) {
   db2f2:	9515      	str	r5, [sp, #84]	; 0x54
   db2f4:	f002 f88b 	bl	dd40e <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name.c_str(), name.length());
   db2f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   db2fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   db2fc:	a811      	add	r0, sp, #68	; 0x44
   db2fe:	f002 f969 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
        if (eventHistory.getEvents(writer, maxSize - overhead, false)) {
   db302:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db304:	1ffa      	subs	r2, r7, #7
   db306:	1a52      	subs	r2, r2, r1
   db308:	462b      	mov	r3, r5
   db30a:	a911      	add	r1, sp, #68	; 0x44
   db30c:	4650      	mov	r0, sl
   db30e:	f7fe f851 	bl	d93b4 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb>
   db312:	9003      	str	r0, [sp, #12]
   db314:	b308      	cbz	r0, db35a <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x13a>
        class EventInfo {
   db316:	49b6      	ldr	r1, [pc, #728]	; (db5f0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3d0>)
   db318:	a816      	add	r0, sp, #88	; 0x58
   db31a:	f003 faf0 	bl	de8fe <_ZN6StringC1EPKc>
            eventInfo.priority = 1;
   db31e:	2301      	movs	r3, #1
            eventInfo.keys.push_back(eventHistoryKey);
   db320:	f104 0134 	add.w	r1, r4, #52	; 0x34
   db324:	a81b      	add	r0, sp, #108	; 0x6c
            eventInfo.priority = 1;
   db326:	931a      	str	r3, [sp, #104]	; 0x68
   db328:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
   db32c:	951d      	str	r5, [sp, #116]	; 0x74
            eventInfo.keys.push_back(eventHistoryKey);
   db32e:	f7ff fc4f 	bl	dabd0 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_>
            writer.endObject();
   db332:	a811      	add	r0, sp, #68	; 0x44
   db334:	f002 f849 	bl	dd3ca <_ZN5spark10JSONWriter9endObjectEv>
            buf[strlen(buf) - 1] = 0;
   db338:	4630      	mov	r0, r6
   db33a:	f004 fed6 	bl	e00ea <strlen>
   db33e:	4430      	add	r0, r6
            eventInfo.json = &buf[1];
   db340:	1c71      	adds	r1, r6, #1
            buf[strlen(buf) - 1] = 0;
   db342:	f800 5c01 	strb.w	r5, [r0, #-1]
            eventInfo.json = &buf[1];
   db346:	a816      	add	r0, sp, #88	; 0x58
   db348:	f003 fb37 	bl	de9ba <_ZN6StringaSEPKc>
            infoArray.push_back(eventInfo);
   db34c:	a807      	add	r0, sp, #28
   db34e:	a916      	add	r1, sp, #88	; 0x58
   db350:	f7ff fac0 	bl	da8d4 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_>
            EventInfo eventInfo;
   db354:	a816      	add	r0, sp, #88	; 0x58
   db356:	f7ff fa48 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
      { return begin() == end(); }
   db35a:	e9dd 9b07 	ldrd	r9, fp, [sp, #28]
    if (!infoArray.empty()) {
   db35e:	45d9      	cmp	r9, fp
   db360:	f000 80bf 	beq.w	db4e2 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2c2>
    { return __lhs.base() - __rhs.base(); }
   db364:	ebab 0509 	sub.w	r5, fp, r9
   db368:	116a      	asrs	r2, r5, #5

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
   db36a:	fab2 f282 	clz	r2, r2
   db36e:	f1c2 021f 	rsb	r2, r2, #31
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
	   _Compare __comp)
    {
      if (__first != __last)
	{
	  std::__introsort_loop(__first, __last,
   db372:	f04f 0300 	mov.w	r3, #0
   db376:	0052      	lsls	r2, r2, #1
   db378:	4659      	mov	r1, fp
   db37a:	4648      	mov	r0, r9
   db37c:	f7ff fec9 	bl	db112 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_>
      if (__last - __first > int(_S_threshold))
   db380:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   db384:	dd0c      	ble.n	db3a0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x180>
      { return __normal_iterator(_M_current + __n); }
   db386:	f509 7500 	add.w	r5, r9, #512	; 0x200
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   db38a:	4629      	mov	r1, r5
   db38c:	4648      	mov	r0, r9
   db38e:	f7ff fbd8 	bl	dab42 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   db392:	45ab      	cmp	fp, r5
   db394:	d008      	beq.n	db3a8 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x188>
	std::__unguarded_linear_insert(__i,
   db396:	4628      	mov	r0, r5
   db398:	f7ff fba3 	bl	daae2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0>
      operator++() _GLIBCXX_NOEXCEPT
   db39c:	3520      	adds	r5, #32
	return *this;
   db39e:	e7f8      	b.n	db392 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x172>
	std::__insertion_sort(__first, __last, __comp);
   db3a0:	4659      	mov	r1, fp
   db3a2:	4648      	mov	r0, r9
   db3a4:	f7ff fbcd 	bl	dab42 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   db3a8:	2300      	movs	r3, #0
   db3aa:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
      : _M_current(__i) { }
   db3ae:	f8dd b01c 	ldr.w	fp, [sp, #28]
   db3b2:	9313      	str	r3, [sp, #76]	; 0x4c
        for(auto it = infoArray.begin(); it != infoArray.end(); ) {
   db3b4:	9b08      	ldr	r3, [sp, #32]
   db3b6:	459b      	cmp	fp, r3
   db3b8:	d036      	beq.n	db428 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x208>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   db3ba:	f8db 9014 	ldr.w	r9, [fp, #20]
            bool keyExists = false;
   db3be:	2500      	movs	r5, #0
            for(auto it2 = it->keys.begin(); it2 != it->keys.end(); ++it2) {
   db3c0:	f8db 3018 	ldr.w	r3, [fp, #24]
   db3c4:	4599      	cmp	r9, r3
   db3c6:	d014      	beq.n	db3f2 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1d2>
   db3c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
                for(auto it3 = keysAdded.begin(); it3 != keysAdded.end(); ++it3) {
   db3ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
   db3cc:	4293      	cmp	r3, r2
   db3ce:	d009      	beq.n	db3e4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1c4>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   db3d0:	4618      	mov	r0, r3
   db3d2:	4649      	mov	r1, r9
   db3d4:	9304      	str	r3, [sp, #16]
   db3d6:	f003 fb60 	bl	dea9a <_ZNK6String6equalsERKS_>
   db3da:	9b04      	ldr	r3, [sp, #16]
   db3dc:	3310      	adds	r3, #16
                    if (*it3 == *it2) {
   db3de:	2800      	cmp	r0, #0
   db3e0:	d0f3      	beq.n	db3ca <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1aa>
                        keyExists = true;
   db3e2:	2501      	movs	r5, #1
                keysAdded.push_back(*it2);
   db3e4:	4649      	mov	r1, r9
   db3e6:	a811      	add	r0, sp, #68	; 0x44
   db3e8:	f7ff fbf2 	bl	dabd0 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_>
      operator++() _GLIBCXX_NOEXCEPT
   db3ec:	f109 0910 	add.w	r9, r9, #16
	return *this;
   db3f0:	e7e6      	b.n	db3c0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1a0>
            if (keyExists) {
   db3f2:	f10b 0320 	add.w	r3, fp, #32
   db3f6:	b1ad      	cbz	r5, db424 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x204>
   db3f8:	9d08      	ldr	r5, [sp, #32]
      if (__position + 1 != end())
   db3fa:	429d      	cmp	r5, r3
   db3fc:	d00c      	beq.n	db418 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1f8>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   db3fe:	1aed      	subs	r5, r5, r3
   db400:	116d      	asrs	r5, r5, #5
   db402:	4658      	mov	r0, fp
   db404:	2d00      	cmp	r5, #0
   db406:	f100 0920 	add.w	r9, r0, #32
   db40a:	dd05      	ble.n	db418 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1f8>
	      *__result = std::move(*__first);
   db40c:	4649      	mov	r1, r9
   db40e:	f7ff fabd 	bl	da98c <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   db412:	3d01      	subs	r5, #1
	      ++__result;
   db414:	4648      	mov	r0, r9
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   db416:	e7f5      	b.n	db404 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1e4>
      --this->_M_impl._M_finish;
   db418:	9808      	ldr	r0, [sp, #32]
   db41a:	3820      	subs	r0, #32
   db41c:	9008      	str	r0, [sp, #32]
	{ __p->~_Up(); }
   db41e:	f7ff f9e4 	bl	da7ea <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db422:	465b      	mov	r3, fp
   db424:	469b      	mov	fp, r3
   db426:	e7c5      	b.n	db3b4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x194>
        char *end = &buf[maxSize - 2]; // Room for leading , and trailing }
   db428:	1ebb      	subs	r3, r7, #2
   db42a:	18f3      	adds	r3, r6, r3
        *cur++ = '{';
   db42c:	46b3      	mov	fp, r6
        char *end = &buf[maxSize - 2]; // Room for leading , and trailing }
   db42e:	9305      	str	r3, [sp, #20]
        *cur++ = '{';
   db430:	237b      	movs	r3, #123	; 0x7b
   db432:	f80b 3b01 	strb.w	r3, [fp], #1
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   db436:	9b07      	ldr	r3, [sp, #28]
   db438:	f103 0920 	add.w	r9, r3, #32
        bool firstEventBuffer = true;
   db43c:	2301      	movs	r3, #1
        *cur++ = '{';
   db43e:	465d      	mov	r5, fp
        bool firstEventBuffer = true;
   db440:	9304      	str	r3, [sp, #16]
        for(auto it = infoArray.begin(); it != infoArray.end(); ++it) {
   db442:	9808      	ldr	r0, [sp, #32]
   db444:	f1a9 0120 	sub.w	r1, r9, #32
   db448:	4288      	cmp	r0, r1
   db44a:	d036      	beq.n	db4ba <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x29a>
            if (&cur[strlen(it->json)] >= end) {
   db44c:	f859 0c20 	ldr.w	r0, [r9, #-32]
   db450:	f004 fe4b 	bl	e00ea <strlen>
   db454:	9b05      	ldr	r3, [sp, #20]
   db456:	4428      	add	r0, r5
   db458:	4283      	cmp	r3, r0
   db45a:	d81a      	bhi.n	db492 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x272>
                if (cur > &buf[1]) {
   db45c:	455d      	cmp	r5, fp
   db45e:	d911      	bls.n	db484 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x264>
                    *cur++ = '}';
   db460:	f04f 037d 	mov.w	r3, #125	; 0x7d
   db464:	702b      	strb	r3, [r5, #0]
                    *cur = 0;
   db466:	f04f 0300 	mov.w	r3, #0
   db46a:	706b      	strb	r3, [r5, #1]
                    events.push_back(buf);
   db46c:	4631      	mov	r1, r6
   db46e:	a816      	add	r0, sp, #88	; 0x58
   db470:	f003 fa45 	bl	de8fe <_ZN6StringC1EPKc>
      { emplace_back(std::move(__x)); }
   db474:	a916      	add	r1, sp, #88	; 0x58
   db476:	4640      	mov	r0, r8
   db478:	f7ff fbee 	bl	dac58 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   db47c:	a816      	add	r0, sp, #88	; 0x58
   db47e:	f003 f9f3 	bl	de868 <_ZN6StringD1Ev>
   db482:	465d      	mov	r5, fp
            if (!firstEventBuffer && it->priority < 50) {
   db484:	f859 1c10 	ldr.w	r1, [r9, #-16]
   db488:	2931      	cmp	r1, #49	; 0x31
   db48a:	dd16      	ble.n	db4ba <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x29a>
   db48c:	2300      	movs	r3, #0
   db48e:	9304      	str	r3, [sp, #16]
   db490:	e002      	b.n	db498 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x278>
   db492:	9b04      	ldr	r3, [sp, #16]
   db494:	2b00      	cmp	r3, #0
   db496:	d0f5      	beq.n	db484 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x264>
            if (cur != &buf[1]) {
   db498:	45ab      	cmp	fp, r5
                *cur++ = ',';
   db49a:	bf1c      	itt	ne
   db49c:	212c      	movne	r1, #44	; 0x2c
   db49e:	f805 1b01 	strbne.w	r1, [r5], #1
            strcpy(cur, it->json);
   db4a2:	f859 1c20 	ldr.w	r1, [r9, #-32]
   db4a6:	4628      	mov	r0, r5
   db4a8:	f004 fdfa 	bl	e00a0 <strcpy>
            cur += strlen(cur);
   db4ac:	4628      	mov	r0, r5
   db4ae:	f004 fe1c 	bl	e00ea <strlen>
   db4b2:	f109 0920 	add.w	r9, r9, #32
   db4b6:	4405      	add	r5, r0
	return *this;
   db4b8:	e7c3      	b.n	db442 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x222>
        if (cur > &buf[1]) {
   db4ba:	455d      	cmp	r5, fp
   db4bc:	d90e      	bls.n	db4dc <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2bc>
            *cur++ = '}';
   db4be:	237d      	movs	r3, #125	; 0x7d
   db4c0:	702b      	strb	r3, [r5, #0]
            *cur = 0;
   db4c2:	2300      	movs	r3, #0
   db4c4:	706b      	strb	r3, [r5, #1]
            events.push_back(buf);
   db4c6:	4631      	mov	r1, r6
   db4c8:	a816      	add	r0, sp, #88	; 0x58
   db4ca:	f003 fa18 	bl	de8fe <_ZN6StringC1EPKc>
   db4ce:	4640      	mov	r0, r8
   db4d0:	a916      	add	r1, sp, #88	; 0x58
   db4d2:	f7ff fbc1 	bl	dac58 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   db4d6:	a816      	add	r0, sp, #88	; 0x58
   db4d8:	f003 f9c6 	bl	de868 <_ZN6StringD1Ev>
        std::vector<String> keysAdded;
   db4dc:	a811      	add	r0, sp, #68	; 0x44
   db4de:	f7ff f978 	bl	da7d2 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
    if (doRemoveEvents) {
   db4e2:	9b03      	ldr	r3, [sp, #12]
   db4e4:	2b00      	cmp	r3, #0
   db4e6:	d039      	beq.n	db55c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x33c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   db4e8:	f8d8 5000 	ldr.w	r5, [r8]
        doRemoveEvents = false;
   db4ec:	f04f 0b00 	mov.w	fp, #0
        for(auto it = events.begin(); it != events.end(); ++it) {
   db4f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   db4f4:	42ab      	cmp	r3, r5
   db4f6:	d02b      	beq.n	db550 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x330>
            JSONValue obj = JSONValue::parseCopy(*it);
   db4f8:	6829      	ldr	r1, [r5, #0]
   db4fa:	a80a      	add	r0, sp, #40	; 0x28
   db4fc:	f7fd fd22 	bl	d8f44 <_ZN5spark9JSONValue9parseCopyEPKc>
            JSONObjectIterator iter(obj);
   db500:	a90a      	add	r1, sp, #40	; 0x28
   db502:	a816      	add	r0, sp, #88	; 0x58
   db504:	f7fb fe66 	bl	d71d4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
            while(iter.next()) {
   db508:	a816      	add	r0, sp, #88	; 0x58
   db50a:	f001 ff1b 	bl	dd344 <_ZN5spark18JSONObjectIterator4nextEv>
   db50e:	4681      	mov	r9, r0
   db510:	b1b0      	cbz	r0, db540 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x320>
                String key = (const char *)iter.name();
   db512:	a916      	add	r1, sp, #88	; 0x58
   db514:	a811      	add	r0, sp, #68	; 0x44
   db516:	f7fb fe6e 	bl	d71f6 <_ZNK5spark18JSONObjectIterator4nameEv>
   db51a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   db51c:	a80d      	add	r0, sp, #52	; 0x34
   db51e:	f003 f9ee 	bl	de8fe <_ZN6StringC1EPKc>
   db522:	a812      	add	r0, sp, #72	; 0x48
   db524:	f7f9 fe8c 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db528:	f104 0134 	add.w	r1, r4, #52	; 0x34
   db52c:	a80d      	add	r0, sp, #52	; 0x34
   db52e:	f003 fab4 	bl	dea9a <_ZNK6String6equalsERKS_>
                    doRemoveEvents = true;
   db532:	2800      	cmp	r0, #0
   db534:	bf18      	it	ne
   db536:	46cb      	movne	fp, r9
                String key = (const char *)iter.name();
   db538:	a80d      	add	r0, sp, #52	; 0x34
   db53a:	f003 f995 	bl	de868 <_ZN6StringD1Ev>
            while(iter.next()) {
   db53e:	e7e3      	b.n	db508 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2e8>
   db540:	a817      	add	r0, sp, #92	; 0x5c
   db542:	f7f9 fe7d 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db546:	a80b      	add	r0, sp, #44	; 0x2c
   db548:	f7f9 fe7a 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   db54c:	3510      	adds	r5, #16
	return *this;
   db54e:	e7cf      	b.n	db4f0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2d0>
        if (doRemoveEvents) {
   db550:	f1bb 0f00 	cmp.w	fp, #0
   db554:	d002      	beq.n	db55c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x33c>
            eventHistory.removeEvents();
   db556:	4650      	mov	r0, sl
   db558:	f7fd fdc6 	bl	d90e8 <_ZN11SleepHelper12EventHistory12removeEventsEv>
        n_(0) {
   db55c:	f8df 908c 	ldr.w	r9, [pc, #140]	; db5ec <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3cc>
        memset(buf, 0, maxSize);
   db560:	2500      	movs	r5, #0
    while(eventHistory.getHasEvents()) {
   db562:	4650      	mov	r0, sl
   db564:	f7fd fe38 	bl	d91d8 <_ZN11SleepHelper12EventHistory12getHasEventsEv>
   db568:	b378      	cbz	r0, db5ca <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3aa>
        memset(buf, 0, maxSize);
   db56a:	463a      	mov	r2, r7
   db56c:	2100      	movs	r1, #0
   db56e:	4630      	mov	r0, r6
   db570:	f004 fd30 	bl	dffd4 <memset>
        writer.beginObject();
   db574:	a816      	add	r0, sp, #88	; 0x58
   db576:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
        state_(BEGIN) {
   db57a:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
        n_(0) {
   db57e:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
   db582:	951a      	str	r5, [sp, #104]	; 0x68
   db584:	f001 ff43 	bl	dd40e <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name.c_str(), name.length());
   db588:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   db58a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   db58c:	a816      	add	r0, sp, #88	; 0x58
   db58e:	f002 f821 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
        if (eventHistory.getEvents(writer, maxSize - eventHistoryKey.length() - 6, false)) {        
   db592:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db594:	1fba      	subs	r2, r7, #6
   db596:	1a52      	subs	r2, r2, r1
   db598:	2300      	movs	r3, #0
   db59a:	a916      	add	r1, sp, #88	; 0x58
   db59c:	4650      	mov	r0, sl
   db59e:	f7fd ff09 	bl	d93b4 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb>
   db5a2:	2800      	cmp	r0, #0
   db5a4:	d0dd      	beq.n	db562 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x342>
            writer.endObject();
   db5a6:	a816      	add	r0, sp, #88	; 0x58
   db5a8:	f001 ff0f 	bl	dd3ca <_ZN5spark10JSONWriter9endObjectEv>
            events.push_back(buf);
   db5ac:	4631      	mov	r1, r6
   db5ae:	a811      	add	r0, sp, #68	; 0x44
   db5b0:	f003 f9a5 	bl	de8fe <_ZN6StringC1EPKc>
   db5b4:	a911      	add	r1, sp, #68	; 0x44
   db5b6:	4640      	mov	r0, r8
   db5b8:	f7ff fb4e 	bl	dac58 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   db5bc:	a811      	add	r0, sp, #68	; 0x44
   db5be:	f003 f953 	bl	de868 <_ZN6StringD1Ev>
            eventHistory.removeEvents();
   db5c2:	4650      	mov	r0, sl
   db5c4:	f7fd fd90 	bl	d90e8 <_ZN11SleepHelper12EventHistory12removeEventsEv>
    while(eventHistory.getHasEvents()) {
   db5c8:	e7cb      	b.n	db562 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x342>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   db5ca:	e9d4 7803 	ldrd	r7, r8, [r4, #12]
   db5ce:	4547      	cmp	r7, r8
   db5d0:	d007      	beq.n	db5e2 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3c2>
   db5d2:	463d      	mov	r5, r7
   db5d4:	4628      	mov	r0, r5
   db5d6:	3510      	adds	r5, #16
   db5d8:	f7f8 fe86 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   db5dc:	45a8      	cmp	r8, r5
   db5de:	d1f9      	bne.n	db5d4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3b4>
	    this->_M_impl._M_finish = __pos;
   db5e0:	6127      	str	r7, [r4, #16]
    free(buf);
   db5e2:	4630      	mov	r0, r6
   db5e4:	f000 fef6 	bl	dc3d4 <free>
   db5e8:	e62c      	b.n	db244 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x24>
   db5ea:	bf00      	nop
   db5ec:	000e2d3c 	.word	0x000e2d3c
   db5f0:	000e296f 	.word	0x000e296f

000db5f4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EE>:
    generateEvents(events, maxSize);
   db5f4:	f240 226e 	movw	r2, #622	; 0x26e
   db5f8:	f7ff be12 	b.w	db220 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj>

000db5fc <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv>:
void SleepHelper::stateHandlerConnectedWakeEvents() {
   db5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (dataCaptureActive) {
   db5fe:	f890 57d1 	ldrb.w	r5, [r0, #2001]	; 0x7d1
void SleepHelper::stateHandlerConnectedWakeEvents() {
   db602:	4604      	mov	r4, r0
    if (dataCaptureActive) {
   db604:	b9dd      	cbnz	r5, db63e <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x42>
    wakeEventFunctions.generateEvents(wakeEventPayload);
   db606:	f200 71d4 	addw	r1, r0, #2004	; 0x7d4
   db60a:	f500 60e7 	add.w	r0, r0, #1848	; 0x738
   db60e:	f7ff fff1 	bl	db5f4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EE>
    lastEventHistoryCheckMillis = 0;
   db612:	f8d4 36d4 	ldr.w	r3, [r4, #1748]	; 0x6d4
   db616:	f8c4 57cc 	str.w	r5, [r4, #1996]	; 0x7cc
                it->callbackState = newState;
   db61a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            for(auto it = callbackState.begin(); it != callbackState.end(); ++it) {
   db61e:	f8d4 16d8 	ldr.w	r1, [r4, #1752]	; 0x6d8
   db622:	4299      	cmp	r1, r3
   db624:	d002      	beq.n	db62c <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x30>
                it->callbackState = newState;
   db626:	f843 2b08 	str.w	r2, [r3], #8
   db62a:	e7f8      	b.n	db61e <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x22>
    stateHandler = &SleepHelper::stateHandlerConnected;
   db62c:	4b05      	ldr	r3, [pc, #20]	; (db644 <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x48>)
   db62e:	9300      	str	r3, [sp, #0]
   db630:	4669      	mov	r1, sp
   db632:	2300      	movs	r3, #0
   db634:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   db638:	9301      	str	r3, [sp, #4]
   db63a:	f7fe fa7f 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   db63e:	b003      	add	sp, #12
   db640:	bd30      	pop	{r4, r5, pc}
   db642:	bf00      	nop
   db644:	000daed1 	.word	0x000daed1

000db648 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE>:
}
   db648:	b538      	push	{r3, r4, r5, lr}
};
   db64a:	4c16      	ldr	r4, [pc, #88]	; (db6a4 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x5c>)
        val_(val) {
   db64c:	4b16      	ldr	r3, [pc, #88]	; (db6a8 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x60>)
   db64e:	4917      	ldr	r1, [pc, #92]	; (db6ac <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x64>)
   db650:	2201      	movs	r2, #1
   db652:	701a      	strb	r2, [r3, #0]
   db654:	4620      	mov	r0, r4
   db656:	2201      	movs	r2, #1
   db658:	2300      	movs	r3, #0
   db65a:	e8e0 2302 	strd	r2, r3, [r0], #8
   db65e:	f003 f94e 	bl	de8fe <_ZN6StringC1EPKc>
   db662:	2532      	movs	r5, #50	; 0x32
   db664:	2202      	movs	r2, #2
   db666:	2300      	movs	r3, #0
   db668:	4911      	ldr	r1, [pc, #68]	; (db6b0 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x68>)
   db66a:	61a5      	str	r5, [r4, #24]
   db66c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   db670:	e9c4 2308 	strd	r2, r3, [r4, #32]
   db674:	f003 f943 	bl	de8fe <_ZN6StringC1EPKc>
   db678:	2204      	movs	r2, #4
   db67a:	2300      	movs	r3, #0
   db67c:	490d      	ldr	r1, [pc, #52]	; (db6b4 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x6c>)
   db67e:	63a5      	str	r5, [r4, #56]	; 0x38
   db680:	f104 0048 	add.w	r0, r4, #72	; 0x48
   db684:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   db688:	f003 f939 	bl	de8fe <_ZN6StringC1EPKc>
   db68c:	2208      	movs	r2, #8
   db68e:	2300      	movs	r3, #0
   db690:	4909      	ldr	r1, [pc, #36]	; (db6b8 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x70>)
   db692:	65a5      	str	r5, [r4, #88]	; 0x58
   db694:	f104 0068 	add.w	r0, r4, #104	; 0x68
   db698:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
   db69c:	f003 f92f 	bl	de8fe <_ZN6StringC1EPKc>
   db6a0:	67a5      	str	r5, [r4, #120]	; 0x78
}
   db6a2:	bd38      	pop	{r3, r4, r5, pc}
   db6a4:	2003e4a8 	.word	0x2003e4a8
   db6a8:	2003e528 	.word	0x2003e528
   db6ac:	000e2ac7 	.word	0x000e2ac7
   db6b0:	000e2aca 	.word	0x000e2aca
   db6b4:	000e2ace 	.word	0x000e2ace
   db6b8:	000e2ad1 	.word	0x000e2ad1

000db6bc <_ZN11SleepHelperD1Ev>:
SleepHelper::~SleepHelper() {
   db6bc:	4b7b      	ldr	r3, [pc, #492]	; (db8ac <_ZN11SleepHelperD1Ev+0x1f0>)
   db6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db6c2:	4604      	mov	r4, r0
   db6c4:	6003      	str	r3, [r0, #0]
   db6c6:	f200 70d4 	addw	r0, r0, #2004	; 0x7d4
   db6ca:	f7ff f882 	bl	da7d2 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   db6ce:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   db6d2:	f7f8 fe09 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   db6d6:	f8d4 5780 	ldr.w	r5, [r4, #1920]	; 0x780
   db6da:	f8d4 6784 	ldr.w	r6, [r4, #1924]	; 0x784
   db6de:	42ae      	cmp	r6, r5
   db6e0:	d004      	beq.n	db6ec <_ZN11SleepHelperD1Ev+0x30>
    { __pointer->~_Tp(); }
   db6e2:	4628      	mov	r0, r5
   db6e4:	f7fd fcf5 	bl	d90d2 <_ZN11SleepHelper11PublishDataD1Ev>
	  for (; __first != __last; ++__first)
   db6e8:	3524      	adds	r5, #36	; 0x24
   db6ea:	e7f8      	b.n	db6de <_ZN11SleepHelperD1Ev+0x22>
	_M_deallocate(_M_impl._M_start,
   db6ec:	f8d4 0780 	ldr.w	r0, [r4, #1920]	; 0x780
	if (__p)
   db6f0:	b108      	cbz	r0, db6f6 <_ZN11SleepHelperD1Ev+0x3a>
	::operator delete(__p);
   db6f2:	f7f8 fcd4 	bl	d409e <_ZdlPv>
    class EventCombiner {
   db6f6:	f204 706c 	addw	r0, r4, #1900	; 0x76c
   db6fa:	f003 f8b5 	bl	de868 <_ZN6StringD1Ev>
    class EventHistory : public SleepHelperRecursiveMutex {
   db6fe:	f204 7054 	addw	r0, r4, #1876	; 0x754
   db702:	f003 f8b1 	bl	de868 <_ZN6StringD1Ev>
            if (handle_) {
   db706:	f8d4 0750 	ldr.w	r0, [r4, #1872]	; 0x750
   db70a:	f504 65e7 	add.w	r5, r4, #1848	; 0x738
   db70e:	b108      	cbz	r0, db714 <_ZN11SleepHelperD1Ev+0x58>
                os_mutex_recursive_destroy(handle_);
   db710:	f000 fad8 	bl	dbcc4 <os_mutex_recursive_destroy>
    class AppCallback {
   db714:	f204 7044 	addw	r0, r4, #1860	; 0x744
   db718:	f7fe f8bd 	bl	d9896 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev>
   db71c:	4628      	mov	r0, r5
   db71e:	f7fe f8ba 	bl	d9896 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev>
   db722:	f504 60e5 	add.w	r0, r4, #1832	; 0x728
   db726:	f003 f89f 	bl	de868 <_ZN6StringD1Ev>
   db72a:	f504 60e2 	add.w	r0, r4, #1808	; 0x710
   db72e:	f7fd fcbb 	bl	d90a8 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   db732:	f8d4 5704 	ldr.w	r5, [r4, #1796]	; 0x704
   db736:	f8d4 6708 	ldr.w	r6, [r4, #1800]	; 0x708
   db73a:	42ae      	cmp	r6, r5
   db73c:	d004      	beq.n	db748 <_ZN11SleepHelperD1Ev+0x8c>
   db73e:	4628      	mov	r0, r5
   db740:	f7f8 fdd2 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   db744:	3510      	adds	r5, #16
   db746:	e7f8      	b.n	db73a <_ZN11SleepHelperD1Ev+0x7e>
	_M_deallocate(_M_impl._M_start,
   db748:	f8d4 0704 	ldr.w	r0, [r4, #1796]	; 0x704
	if (__p)
   db74c:	b108      	cbz	r0, db752 <_ZN11SleepHelperD1Ev+0x96>
   db74e:	f7f8 fca6 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   db752:	f8d4 56f8 	ldr.w	r5, [r4, #1784]	; 0x6f8
   db756:	f8d4 66fc 	ldr.w	r6, [r4, #1788]	; 0x6fc
   db75a:	42ae      	cmp	r6, r5
   db75c:	d004      	beq.n	db768 <_ZN11SleepHelperD1Ev+0xac>
   db75e:	4628      	mov	r0, r5
   db760:	f7f8 fdc2 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   db764:	3510      	adds	r5, #16
   db766:	e7f8      	b.n	db75a <_ZN11SleepHelperD1Ev+0x9e>
	_M_deallocate(_M_impl._M_start,
   db768:	f8d4 06f8 	ldr.w	r0, [r4, #1784]	; 0x6f8
	if (__p)
   db76c:	b108      	cbz	r0, db772 <_ZN11SleepHelperD1Ev+0xb6>
   db76e:	f7f8 fc96 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   db772:	f8d4 56ec 	ldr.w	r5, [r4, #1772]	; 0x6ec
   db776:	f8d4 66f0 	ldr.w	r6, [r4, #1776]	; 0x6f0
   db77a:	42ae      	cmp	r6, r5
   db77c:	d004      	beq.n	db788 <_ZN11SleepHelperD1Ev+0xcc>
   db77e:	4628      	mov	r0, r5
   db780:	f7f8 fdb2 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   db784:	3510      	adds	r5, #16
   db786:	e7f8      	b.n	db77a <_ZN11SleepHelperD1Ev+0xbe>
	_M_deallocate(_M_impl._M_start,
   db788:	f8d4 06ec 	ldr.w	r0, [r4, #1772]	; 0x6ec
	if (__p)
   db78c:	b108      	cbz	r0, db792 <_ZN11SleepHelperD1Ev+0xd6>
   db78e:	f7f8 fc86 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   db792:	f8d4 56e0 	ldr.w	r5, [r4, #1760]	; 0x6e0
   db796:	f8d4 66e4 	ldr.w	r6, [r4, #1764]	; 0x6e4
   db79a:	42ae      	cmp	r6, r5
   db79c:	d004      	beq.n	db7a8 <_ZN11SleepHelperD1Ev+0xec>
   db79e:	4628      	mov	r0, r5
   db7a0:	f7f8 fda2 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   db7a4:	3510      	adds	r5, #16
   db7a6:	e7f8      	b.n	db79a <_ZN11SleepHelperD1Ev+0xde>
	_M_deallocate(_M_impl._M_start,
   db7a8:	f8d4 06e0 	ldr.w	r0, [r4, #1760]	; 0x6e0
	if (__p)
   db7ac:	b108      	cbz	r0, db7b2 <_ZN11SleepHelperD1Ev+0xf6>
   db7ae:	f7f8 fc76 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   db7b2:	f8d4 06d4 	ldr.w	r0, [r4, #1748]	; 0x6d4
	if (__p)
   db7b6:	b108      	cbz	r0, db7bc <_ZN11SleepHelperD1Ev+0x100>
   db7b8:	f7f8 fc71 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   db7bc:	f8d4 56c8 	ldr.w	r5, [r4, #1736]	; 0x6c8
   db7c0:	f8d4 66cc 	ldr.w	r6, [r4, #1740]	; 0x6cc
   db7c4:	42ae      	cmp	r6, r5
   db7c6:	d004      	beq.n	db7d2 <_ZN11SleepHelperD1Ev+0x116>
   db7c8:	4628      	mov	r0, r5
   db7ca:	f7f8 fd8d 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   db7ce:	3510      	adds	r5, #16
   db7d0:	e7f8      	b.n	db7c4 <_ZN11SleepHelperD1Ev+0x108>
	_M_deallocate(_M_impl._M_start,
   db7d2:	f8d4 06c8 	ldr.w	r0, [r4, #1736]	; 0x6c8
	if (__p)
   db7d6:	b108      	cbz	r0, db7dc <_ZN11SleepHelperD1Ev+0x120>
   db7d8:	f7f8 fc61 	bl	d409e <_ZdlPv>
   db7dc:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   db7e0:	f7fd fc62 	bl	d90a8 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev>
   db7e4:	f204 60a4 	addw	r0, r4, #1700	; 0x6a4
   db7e8:	f7fe f90e 	bl	d9a08 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev>
   db7ec:	f504 60d3 	add.w	r0, r4, #1688	; 0x698
   db7f0:	f7fe f90a 	bl	d9a08 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev>
   db7f4:	f204 605c 	addw	r0, r4, #1628	; 0x65c
   db7f8:	f7fd fb34 	bl	d8e64 <_ZN8particle24SystemSleepConfigurationD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   db7fc:	f8d4 5650 	ldr.w	r5, [r4, #1616]	; 0x650
   db800:	f8d4 6654 	ldr.w	r6, [r4, #1620]	; 0x654
   db804:	42ae      	cmp	r6, r5
   db806:	d004      	beq.n	db812 <_ZN11SleepHelperD1Ev+0x156>
   db808:	4628      	mov	r0, r5
   db80a:	f7f8 fd6d 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   db80e:	3510      	adds	r5, #16
   db810:	e7f8      	b.n	db804 <_ZN11SleepHelperD1Ev+0x148>
	_M_deallocate(_M_impl._M_start,
   db812:	f8d4 0650 	ldr.w	r0, [r4, #1616]	; 0x650
	if (__p)
   db816:	b108      	cbz	r0, db81c <_ZN11SleepHelperD1Ev+0x160>
   db818:	f7f8 fc41 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   db81c:	f8d4 5644 	ldr.w	r5, [r4, #1604]	; 0x644
   db820:	f8d4 6648 	ldr.w	r6, [r4, #1608]	; 0x648
   db824:	42ae      	cmp	r6, r5
   db826:	d004      	beq.n	db832 <_ZN11SleepHelperD1Ev+0x176>
   db828:	4628      	mov	r0, r5
   db82a:	f7f8 fd5d 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   db82e:	3510      	adds	r5, #16
   db830:	e7f8      	b.n	db824 <_ZN11SleepHelperD1Ev+0x168>
	_M_deallocate(_M_impl._M_start,
   db832:	f8d4 0644 	ldr.w	r0, [r4, #1604]	; 0x644
	if (__p)
   db836:	b108      	cbz	r0, db83c <_ZN11SleepHelperD1Ev+0x180>
   db838:	f7f8 fc31 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   db83c:	f8d4 6638 	ldr.w	r6, [r4, #1592]	; 0x638
   db840:	f8d4 763c 	ldr.w	r7, [r4, #1596]	; 0x63c
   db844:	42b7      	cmp	r7, r6
   db846:	d022      	beq.n	db88e <_ZN11SleepHelperD1Ev+0x1d2>
   db848:	e9d6 5808 	ldrd	r5, r8, [r6, #32]
   db84c:	45a8      	cmp	r8, r5
   db84e:	d015      	beq.n	db87c <_ZN11SleepHelperD1Ev+0x1c0>
class LocalTimeScheduleItem {
   db850:	f105 0038 	add.w	r0, r5, #56	; 0x38
   db854:	f003 f808 	bl	de868 <_ZN6StringD1Ev>
class LocalTimeRange : public LocalTimeRestrictedDate {
   db858:	f105 0024 	add.w	r0, r5, #36	; 0x24
   db85c:	f7fa fd56 	bl	d630c <_ZN12LocalTimeHMSD1Ev>
   db860:	f105 001c 	add.w	r0, r5, #28
   db864:	f7fa fd52 	bl	d630c <_ZN12LocalTimeHMSD1Ev>
	_M_deallocate(_M_impl._M_start,
   db868:	6928      	ldr	r0, [r5, #16]
	if (__p)
   db86a:	b108      	cbz	r0, db870 <_ZN11SleepHelperD1Ev+0x1b4>
   db86c:	f7f8 fc17 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   db870:	6868      	ldr	r0, [r5, #4]
	if (__p)
   db872:	b108      	cbz	r0, db878 <_ZN11SleepHelperD1Ev+0x1bc>
   db874:	f7f8 fc13 	bl	d409e <_ZdlPv>
   db878:	354c      	adds	r5, #76	; 0x4c
   db87a:	e7e7      	b.n	db84c <_ZN11SleepHelperD1Ev+0x190>
	_M_deallocate(_M_impl._M_start,
   db87c:	6a30      	ldr	r0, [r6, #32]
	if (__p)
   db87e:	b108      	cbz	r0, db884 <_ZN11SleepHelperD1Ev+0x1c8>
   db880:	f7f8 fc0d 	bl	d409e <_ZdlPv>
class LocalTimeSchedule {
   db884:	4630      	mov	r0, r6
   db886:	f002 ffef 	bl	de868 <_ZN6StringD1Ev>
   db88a:	3630      	adds	r6, #48	; 0x30
   db88c:	e7da      	b.n	db844 <_ZN11SleepHelperD1Ev+0x188>
	_M_deallocate(_M_impl._M_start,
   db88e:	f8d4 0638 	ldr.w	r0, [r4, #1592]	; 0x638
	if (__p)
   db892:	b108      	cbz	r0, db898 <_ZN11SleepHelperD1Ev+0x1dc>
   db894:	f7f8 fc03 	bl	d409e <_ZdlPv>
   db898:	f504 60bd 	add.w	r0, r4, #1512	; 0x5e8
   db89c:	f7fd fa82 	bl	d8da4 <_ZN11SleepHelper14PersistentDataD1Ev>
   db8a0:	1d20      	adds	r0, r4, #4
   db8a2:	f7fd fa9d 	bl	d8de0 <_ZN11SleepHelper12SettingsFileD1Ev>
}
   db8a6:	4620      	mov	r0, r4
   db8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db8ac:	000e2bd4 	.word	0x000e2bd4

000db8b0 <_ZN11SleepHelperD0Ev>:
SleepHelper::~SleepHelper() {
   db8b0:	b510      	push	{r4, lr}
   db8b2:	4604      	mov	r4, r0
}
   db8b4:	f7ff ff02 	bl	db6bc <_ZN11SleepHelperD1Ev>
   db8b8:	4620      	mov	r0, r4
   db8ba:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
   db8be:	f003 fdd1 	bl	df464 <_ZdlPvj>
   db8c2:	4620      	mov	r0, r4
   db8c4:	bd10      	pop	{r4, pc}
	...

000db8c8 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   db8ca:	b0bd      	sub	sp, #244	; 0xf4
   db8cc:	4604      	mov	r4, r0
   db8ce:	460d      	mov	r5, r1
        if (!Time.isValid()) {
   db8d0:	f003 fb12 	bl	deef8 <_ZN9TimeClass7isValidEv>
   db8d4:	b950      	cbnz	r0, db8ec <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x24>
            appLog.info("no RTC time, doing full wake");
   db8d6:	6820      	ldr	r0, [r4, #0]
   db8d8:	491e      	ldr	r1, [pc, #120]	; (db954 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x8c>)
   db8da:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   db8de:	f7f8 fd0c 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
            connectConviction = 80;
   db8e2:	2350      	movs	r3, #80	; 0x50
   db8e4:	602b      	str	r3, [r5, #0]
      }
   db8e6:	2001      	movs	r0, #1
   db8e8:	b03d      	add	sp, #244	; 0xf4
   db8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        time_t t = SleepHelper::instance().persistentData.getValue_lastFullWake();
   db8ec:	f7fd ff10 	bl	d9710 <_ZN11SleepHelper8instanceEv>
            return (time_t) getValue<uint32_t>(offsetof(SleepHelperData, lastFullWake));
   db8f0:	2114      	movs	r1, #20
   db8f2:	f500 60bd 	add.w	r0, r0, #1512	; 0x5e8
   db8f6:	f7fd ffa3 	bl	d9840 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>
   db8fa:	2700      	movs	r7, #0
   db8fc:	4606      	mov	r6, r0
        if (t == 0) {
   db8fe:	b918      	cbnz	r0, db908 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x40>
            t = Time.now();
   db900:	f003 fb17 	bl	def32 <_ZN9TimeClass3nowEv>
   db904:	4606      	mov	r6, r0
   db906:	17c7      	asrs	r7, r0, #31
class LocalTimeConvert {
   db908:	2306      	movs	r3, #6
   db90a:	a801      	add	r0, sp, #4
   db90c:	9300      	str	r3, [sp, #0]
   db90e:	f7fa ffd9 	bl	d68c4 <_ZN22LocalTimePosixTimezoneC1Ev>
        conv.withTime(t).convert();
   db912:	4668      	mov	r0, sp
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   db914:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
   db918:	f7fb f9da 	bl	d6cd0 <_ZN16LocalTimeConvert7convertEv>
        t = scheduleManager.getNextFullWake(conv);
   db91c:	6820      	ldr	r0, [r4, #0]
   db91e:	4669      	mov	r1, sp
   db920:	f500 60c7 	add.w	r0, r0, #1592	; 0x638
   db924:	f7fb fd45 	bl	d73b2 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert>
   db928:	460f      	mov	r7, r1
   db92a:	4606      	mov	r6, r0
        if (t <= Time.now()) {
   db92c:	f003 fb01 	bl	def32 <_ZN9TimeClass3nowEv>
   db930:	17c1      	asrs	r1, r0, #31
   db932:	42b0      	cmp	r0, r6
   db934:	eb71 0307 	sbcs.w	r3, r1, r7
   db938:	db07      	blt.n	db94a <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x82>
            appLog.info("time to do full wake");
   db93a:	6820      	ldr	r0, [r4, #0]
   db93c:	4906      	ldr	r1, [pc, #24]	; (db958 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x90>)
   db93e:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   db942:	f7f8 fcda 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
            connectConviction = 80;
   db946:	2350      	movs	r3, #80	; 0x50
   db948:	602b      	str	r3, [r5, #0]
class LocalTimeConvert {
   db94a:	a801      	add	r0, sp, #4
   db94c:	f7fa fcf6 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
   db950:	e7c9      	b.n	db8e6 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x1e>
   db952:	bf00      	nop
   db954:	000e2ad5 	.word	0x000e2ad5
   db958:	000e2af2 	.word	0x000e2af2

000db95c <_ZN11SleepHelper22calculateSleepSettingsEb>:
void SleepHelper::calculateSleepSettings(bool isConnected) {
   db95c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db960:	b0bf      	sub	sp, #252	; 0xfc
   db962:	4604      	mov	r4, r0
    sleepConfig = SystemSleepConfiguration();
   db964:	f200 685c 	addw	r8, r0, #1628	; 0x65c
   db968:	a802      	add	r0, sp, #8
void SleepHelper::calculateSleepSettings(bool isConnected) {
   db96a:	460e      	mov	r6, r1
        memcpy(&config_, &config.config_, sizeof(hal_sleep_config_t));
   db96c:	ad03      	add	r5, sp, #12
    sleepConfig = SystemSleepConfiguration();
   db96e:	f7fd fa67 	bl	d8e40 <_ZN8particle24SystemSleepConfigurationC1Ev>
        valid_ = config.valid_;
   db972:	f89d 301c 	ldrb.w	r3, [sp, #28]
   db976:	f884 3670 	strb.w	r3, [r4, #1648]	; 0x670
        memcpy(&config_, &config.config_, sizeof(hal_sleep_config_t));
   db97a:	f504 62cc 	add.w	r2, r4, #1632	; 0x660
   db97e:	af07      	add	r7, sp, #28
   db980:	46a9      	mov	r9, r5
   db982:	462b      	mov	r3, r5
   db984:	cb03      	ldmia	r3!, {r0, r1}
   db986:	42bb      	cmp	r3, r7
   db988:	6010      	str	r0, [r2, #0]
   db98a:	6051      	str	r1, [r2, #4]
   db98c:	461d      	mov	r5, r3
   db98e:	f102 0208 	add.w	r2, r2, #8
   db992:	d1f6      	bne.n	db982 <_ZN11SleepHelper22calculateSleepSettingsEb+0x26>
        config.config_.wakeup_sources = nullptr;
   db994:	2300      	movs	r3, #0
   db996:	a802      	add	r0, sp, #8
   db998:	9306      	str	r3, [sp, #24]
   db99a:	f7fd fa63 	bl	d8e64 <_ZN8particle24SystemSleepConfigurationD1Ev>
        if (valid_) {
   db99e:	f894 3670 	ldrb.w	r3, [r4, #1648]	; 0x670
   db9a2:	b113      	cbz	r3, db9aa <_ZN11SleepHelper22calculateSleepSettingsEb+0x4e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   db9a4:	2302      	movs	r3, #2
   db9a6:	f884 3664 	strb.w	r3, [r4, #1636]	; 0x664
    sleepParams.sleepTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(15min).count();
   db9aa:	4b3f      	ldr	r3, [pc, #252]	; (dbaa8 <_ZN11SleepHelper22calculateSleepSettingsEb+0x14c>)
    sleepParams.isConnected = isConnected;
   db9ac:	f884 6678 	strb.w	r6, [r4, #1656]	; 0x678
    sleepParams.sleepTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(15min).count();
   db9b0:	f8c4 3690 	str.w	r3, [r4, #1680]	; 0x690
   db9b4:	4648      	mov	r0, r9
   db9b6:	2306      	movs	r3, #6
   db9b8:	9302      	str	r3, [sp, #8]
   db9ba:	f7fa ff83 	bl	d68c4 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   db9be:	f003 fab8 	bl	def32 <_ZN9TimeClass3nowEv>
   db9c2:	17c1      	asrs	r1, r0, #31
   db9c4:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    time_t nextWake = scheduleManager.getNextWake(conv);
   db9c8:	f504 65c7 	add.w	r5, r4, #1592	; 0x638
    conv.withCurrentTime().convert();
   db9cc:	a802      	add	r0, sp, #8
   db9ce:	f7fb f97f 	bl	d6cd0 <_ZN16LocalTimeConvert7convertEv>
    time_t nextWake = scheduleManager.getNextWake(conv);
   db9d2:	a902      	add	r1, sp, #8
   db9d4:	4628      	mov	r0, r5
   db9d6:	f7fb fcbf 	bl	d7358 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert>
   db9da:	4606      	mov	r6, r0
   db9dc:	460f      	mov	r7, r1
    if (nextWake != 0) {
   db9de:	ea56 0307 	orrs.w	r3, r6, r7
   db9e2:	d007      	beq.n	db9f4 <_ZN11SleepHelper22calculateSleepSettingsEb+0x98>
        sleepParams.sleepTimeMs = (nextWake - Time.now()) * 1000;
   db9e4:	f003 faa5 	bl	def32 <_ZN9TimeClass3nowEv>
   db9e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db9ec:	1a36      	subs	r6, r6, r0
   db9ee:	435e      	muls	r6, r3
   db9f0:	f8c4 6690 	str.w	r6, [r4, #1680]	; 0x690
    sleepParams.nextFullWakeTime = scheduleManager.getNextFullWake(conv);
   db9f4:	a902      	add	r1, sp, #8
   db9f6:	4628      	mov	r0, r5
   db9f8:	f7fb fcdb 	bl	d73b2 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert>
   db9fc:	f504 63d0 	add.w	r3, r4, #1664	; 0x680
   dba00:	4606      	mov	r6, r0
   dba02:	460f      	mov	r7, r1
   dba04:	e9c3 6700 	strd	r6, r7, [r3]
    if (sleepParams.nextFullWakeTime != 0) {
   dba08:	ea56 0307 	orrs.w	r3, r6, r7
   dba0c:	d007      	beq.n	dba1e <_ZN11SleepHelper22calculateSleepSettingsEb+0xc2>
        sleepParams.timeUntilNextFullWakeMs = (sleepParams.nextFullWakeTime - Time.now()) * 1000;
   dba0e:	f003 fa90 	bl	def32 <_ZN9TimeClass3nowEv>
   dba12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dba16:	1a36      	subs	r6, r6, r0
   dba18:	435e      	muls	r6, r3
   dba1a:	f8c4 667c 	str.w	r6, [r4, #1660]	; 0x67c
    sleepParams.disconnectCellular = (sleepParams.timeUntilNextFullWakeMs >= minimumCellularOffTimeMs);
   dba1e:	f8d4 367c 	ldr.w	r3, [r4, #1660]	; 0x67c
   dba22:	f8d4 27a0 	ldr.w	r2, [r4, #1952]	; 0x7a0
      : _M_current(__i) { }
   dba26:	f8d4 5644 	ldr.w	r5, [r4, #1604]	; 0x644
   dba2a:	4293      	cmp	r3, r2
   dba2c:	bf34      	ite	cc
   dba2e:	2300      	movcc	r3, #0
   dba30:	2301      	movcs	r3, #1
   dba32:	f884 3694 	strb.w	r3, [r4, #1684]	; 0x694
    sleepConfigurationFunctions.forEach(sleepConfig, sleepParams);
   dba36:	f504 66cf 	add.w	r6, r4, #1656	; 0x678
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   dba3a:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
   dba3e:	42ab      	cmp	r3, r5
   dba40:	d00a      	beq.n	dba58 <_ZN11SleepHelper22calculateSleepSettingsEb+0xfc>
      if (_M_empty())
   dba42:	68ab      	ldr	r3, [r5, #8]
   dba44:	b90b      	cbnz	r3, dba4a <_ZN11SleepHelper22calculateSleepSettingsEb+0xee>
	__throw_bad_function_call();
   dba46:	f003 fd19 	bl	df47c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dba4a:	68eb      	ldr	r3, [r5, #12]
   dba4c:	4628      	mov	r0, r5
   dba4e:	4632      	mov	r2, r6
   dba50:	4641      	mov	r1, r8
   dba52:	4798      	blx	r3
	++_M_current;
   dba54:	3510      	adds	r5, #16
	return *this;
   dba56:	e7f0      	b.n	dba3a <_ZN11SleepHelper22calculateSleepSettingsEb+0xde>
    if (sleepParams.sleepTimeMs < 1000) {
   dba58:	f8d4 3690 	ldr.w	r3, [r4, #1680]	; 0x690
   dba5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        sleepParams.sleepTimeMs = 1000;
   dba60:	bf3c      	itt	cc
   dba62:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
   dba66:	f8c4 3690 	strcc.w	r3, [r4, #1680]	; 0x690
        return hal_timer_millis(nullptr);
   dba6a:	2000      	movs	r0, #0
   dba6c:	f000 f982 	bl	dbd74 <hal_timer_millis>
    sleepParams.calculatedMillis = System.millis();
   dba70:	f504 63d1 	add.w	r3, r4, #1672	; 0x688
   dba74:	e9c3 0100 	strd	r0, r1, [r3]
    if (sleepParams.isConnected && !sleepParams.disconnectCellular) {
   dba78:	f894 3678 	ldrb.w	r3, [r4, #1656]	; 0x678
   dba7c:	b14b      	cbz	r3, dba92 <_ZN11SleepHelper22calculateSleepSettingsEb+0x136>
   dba7e:	f894 3694 	ldrb.w	r3, [r4, #1684]	; 0x694
   dba82:	b933      	cbnz	r3, dba92 <_ZN11SleepHelper22calculateSleepSettingsEb+0x136>
        sleepConfig.network(NETWORK_INTERFACE_CELLULAR);
   dba84:	aa01      	add	r2, sp, #4
   dba86:	2104      	movs	r1, #4
   dba88:	4640      	mov	r0, r8
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   dba8a:	f8ad 3004 	strh.w	r3, [sp, #4]
   dba8e:	f7fd fa1f 	bl	d8ed0 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE>
    sleepConfig.duration(sleepParams.sleepTimeMs);
   dba92:	f8d4 1690 	ldr.w	r1, [r4, #1680]	; 0x690
   dba96:	4640      	mov	r0, r8
   dba98:	f7fd f9f0 	bl	d8e7c <_ZN8particle24SystemSleepConfiguration8durationEm>
class LocalTimeConvert {
   dba9c:	4648      	mov	r0, r9
   dba9e:	f7fa fc4d 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   dbaa2:	b03f      	add	sp, #252	; 0xfc
   dbaa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dbaa8:	000dbba0 	.word	0x000dbba0

000dbaac <_ZN11SleepHelper24stateHandlerNoConnectionEv>:
void SleepHelper::stateHandlerNoConnection() {
   dbaac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (dataCaptureActive) {
   dbaae:	f890 37d1 	ldrb.w	r3, [r0, #2001]	; 0x7d1
void SleepHelper::stateHandlerNoConnection() {
   dbab2:	4604      	mov	r4, r0
    if (dataCaptureActive) {
   dbab4:	b9b3      	cbnz	r3, dbae4 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x38>
    if (!noConnectionFunctions.whileAnyTrue()) {
   dbab6:	f500 60e2 	add.w	r0, r0, #1808	; 0x710
   dbaba:	f7fd fff0 	bl	d9a9e <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv>
   dbabe:	4605      	mov	r5, r0
   dbac0:	b980      	cbnz	r0, dbae4 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x38>
        appLog.info("done with no connection mode, preparing to sleep");
   dbac2:	4909      	ldr	r1, [pc, #36]	; (dbae8 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x3c>)
   dbac4:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dbac8:	f7f8 fc17 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
        calculateSleepSettings(false);
   dbacc:	4629      	mov	r1, r5
   dbace:	4620      	mov	r0, r4
   dbad0:	f7ff ff44 	bl	db95c <_ZN11SleepHelper22calculateSleepSettingsEb>
        stateHandler = &SleepHelper::stateHandlerSleep;
   dbad4:	4b05      	ldr	r3, [pc, #20]	; (dbaec <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x40>)
   dbad6:	4669      	mov	r1, sp
   dbad8:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dbadc:	e9cd 3500 	strd	r3, r5, [sp]
   dbae0:	f7fe f82c 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dbae4:	b003      	add	sp, #12
   dbae6:	bd30      	pop	{r4, r5, pc}
   dbae8:	000e2b07 	.word	0x000e2b07
   dbaec:	000d9e89 	.word	0x000d9e89

000dbaf0 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv>:
void SleepHelper::stateHandlerDisconnectBeforeSleep() {
   dbaf0:	b530      	push	{r4, r5, lr}
   dbaf2:	4604      	mov	r4, r0
   dbaf4:	b085      	sub	sp, #20
    calculateSleepSettings(true);
   dbaf6:	2101      	movs	r1, #1
   dbaf8:	f7ff ff30 	bl	db95c <_ZN11SleepHelper22calculateSleepSettingsEb>
    if (!sleepParams.disconnectCellular) {
   dbafc:	f504 65f5 	add.w	r5, r4, #1960	; 0x7a8
   dbb00:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dbb04:	f894 4694 	ldrb.w	r4, [r4, #1684]	; 0x694
   dbb08:	b95c      	cbnz	r4, dbb22 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x32>
        appLog.info("sleep cycle is short, using cellular standby");
   dbb0a:	490f      	ldr	r1, [pc, #60]	; (dbb48 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x58>)
   dbb0c:	f7f8 fbf5 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &SleepHelper::stateHandlerSleep;
   dbb10:	4b0e      	ldr	r3, [pc, #56]	; (dbb4c <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x5c>)
   dbb12:	e9cd 3401 	strd	r3, r4, [sp, #4]
    stateHandler = &SleepHelper::stateHandlerDisconnectWait;
   dbb16:	a901      	add	r1, sp, #4
   dbb18:	4628      	mov	r0, r5
   dbb1a:	f7fe f80f 	bl	d9b3c <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dbb1e:	b005      	add	sp, #20
   dbb20:	bd30      	pop	{r4, r5, pc}
    appLog.info("disconnecting from cloud");
   dbb22:	490b      	ldr	r1, [pc, #44]	; (dbb50 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x60>)
   dbb24:	f7f8 fbe9 	bl	d42fa <_ZNK5spark6Logger4infoEPKcz>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   dbb28:	2203      	movs	r2, #3
   dbb2a:	f241 3388 	movw	r3, #5000	; 0x1388
   dbb2e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    Particle.disconnect(CloudDisconnectOptions().graceful(true).timeout(5000)); // 5 seconds
   dbb32:	a801      	add	r0, sp, #4
    graceful_ = enabled;
   dbb34:	2301      	movs	r3, #1
   dbb36:	f8ad 300c 	strh.w	r3, [sp, #12]
   dbb3a:	f000 fd93 	bl	dc664 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    stateHandler = &SleepHelper::stateHandlerDisconnectWait;
   dbb3e:	4b05      	ldr	r3, [pc, #20]	; (dbb54 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x64>)
   dbb40:	9301      	str	r3, [sp, #4]
   dbb42:	2300      	movs	r3, #0
   dbb44:	9302      	str	r3, [sp, #8]
   dbb46:	e7e6      	b.n	dbb16 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x26>
   dbb48:	000e2b38 	.word	0x000e2b38
   dbb4c:	000d9e89 	.word	0x000d9e89
   dbb50:	000e2b65 	.word	0x000e2b65
   dbb54:	000d9bdd 	.word	0x000d9bdd

000dbb58 <_ZN11SleepHelper18dataCaptureHandlerEv>:
void SleepHelper::dataCaptureHandler() {
   dbb58:	b570      	push	{r4, r5, r6, lr}
    if (dataCaptureFunctions.isEmpty()) {
   dbb5a:	f8d0 26b0 	ldr.w	r2, [r0, #1712]	; 0x6b0
   dbb5e:	f8d0 36b4 	ldr.w	r3, [r0, #1716]	; 0x6b4
   dbb62:	429a      	cmp	r2, r3
void SleepHelper::dataCaptureHandler() {
   dbb64:	b0bc      	sub	sp, #240	; 0xf0
   dbb66:	4604      	mov	r4, r0
    if (dataCaptureFunctions.isEmpty()) {
   dbb68:	d00c      	beq.n	dbb84 <_ZN11SleepHelper18dataCaptureHandlerEv+0x2c>
    if (!Time.isValid()) {
   dbb6a:	f003 f9c5 	bl	deef8 <_ZN9TimeClass7isValidEv>
   dbb6e:	b148      	cbz	r0, dbb84 <_ZN11SleepHelper18dataCaptureHandlerEv+0x2c>
    if (dataCaptureActive) {
   dbb70:	f894 37d1 	ldrb.w	r3, [r4, #2001]	; 0x7d1
   dbb74:	b143      	cbz	r3, dbb88 <_ZN11SleepHelper18dataCaptureHandlerEv+0x30>
        if (!dataCaptureFunctions.whileAnyTrue()) {
   dbb76:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   dbb7a:	f7fd ff90 	bl	d9a9e <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv>
   dbb7e:	b908      	cbnz	r0, dbb84 <_ZN11SleepHelper18dataCaptureHandlerEv+0x2c>
            dataCaptureActive = false;
   dbb80:	f884 07d1 	strb.w	r0, [r4, #2001]	; 0x7d1
}
   dbb84:	b03c      	add	sp, #240	; 0xf0
   dbb86:	bd70      	pop	{r4, r5, r6, pc}
            return (time_t) getValue<uint32_t>(offsetof(SleepHelperData, nextDataCapture));
   dbb88:	f504 66bd 	add.w	r6, r4, #1512	; 0x5e8
   dbb8c:	211c      	movs	r1, #28
   dbb8e:	4630      	mov	r0, r6
   dbb90:	f7fd fe56 	bl	d9840 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>
        if (!persistentData.getValue_nextDataCapture()) {
   dbb94:	b1d0      	cbz	r0, dbbcc <_ZN11SleepHelper18dataCaptureHandlerEv+0x74>
   dbb96:	211c      	movs	r1, #28
   dbb98:	4630      	mov	r0, r6
   dbb9a:	f7fd fe51 	bl	d9840 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>
   dbb9e:	4605      	mov	r5, r0
            if (persistentData.getValue_nextDataCapture() <= Time.now()) {
   dbba0:	f003 f9c7 	bl	def32 <_ZN9TimeClass3nowEv>
   dbba4:	2300      	movs	r3, #0
   dbba6:	17c1      	asrs	r1, r0, #31
   dbba8:	42a8      	cmp	r0, r5
   dbbaa:	eb71 0303 	sbcs.w	r3, r1, r3
   dbbae:	dbe9      	blt.n	dbb84 <_ZN11SleepHelper18dataCaptureHandlerEv+0x2c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   dbbb0:	f8d4 36bc 	ldr.w	r3, [r4, #1724]	; 0x6bc
                it->callbackState = newState;
   dbbb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            for(auto it = callbackState.begin(); it != callbackState.end(); ++it) {
   dbbb8:	f8d4 16c0 	ldr.w	r1, [r4, #1728]	; 0x6c0
   dbbbc:	428b      	cmp	r3, r1
   dbbbe:	d002      	beq.n	dbbc6 <_ZN11SleepHelper18dataCaptureHandlerEv+0x6e>
                it->callbackState = newState;
   dbbc0:	f843 2b08 	str.w	r2, [r3], #8
	return *this;
   dbbc4:	e7f8      	b.n	dbbb8 <_ZN11SleepHelper18dataCaptureHandlerEv+0x60>
                dataCaptureActive = true;
   dbbc6:	2301      	movs	r3, #1
   dbbc8:	f884 37d1 	strb.w	r3, [r4, #2001]	; 0x7d1
   dbbcc:	2306      	movs	r3, #6
   dbbce:	a801      	add	r0, sp, #4
   dbbd0:	9300      	str	r3, [sp, #0]
   dbbd2:	f7fa fe77 	bl	d68c4 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   dbbd6:	f003 f9ac 	bl	def32 <_ZN9TimeClass3nowEv>
   dbbda:	17c1      	asrs	r1, r0, #31
   dbbdc:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
            conv.withCurrentTime().convert();
   dbbe0:	4668      	mov	r0, sp
   dbbe2:	f7fb f875 	bl	d6cd0 <_ZN16LocalTimeConvert7convertEv>
            time_t t = scheduleManager.getNextDataCapture(conv);
   dbbe6:	4669      	mov	r1, sp
   dbbe8:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   dbbec:	f7fb fc10 	bl	d7410 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert>
   dbbf0:	4602      	mov	r2, r0
   dbbf2:	460b      	mov	r3, r1
            if (t != 0) {
   dbbf4:	ea52 0103 	orrs.w	r1, r2, r3
   dbbf8:	d003      	beq.n	dbc02 <_ZN11SleepHelper18dataCaptureHandlerEv+0xaa>
            setValue<uint32_t>(offsetof(SleepHelperData, nextDataCapture), (uint32_t)value);
   dbbfa:	211c      	movs	r1, #28
   dbbfc:	4630      	mov	r0, r6
   dbbfe:	f7fd fe31 	bl	d9864 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>
class LocalTimeConvert {
   dbc02:	a801      	add	r0, sp, #4
   dbc04:	f7fa fb9a 	bl	d633c <_ZN22LocalTimePosixTimezoneD1Ev>
   dbc08:	e7bc      	b.n	dbb84 <_ZN11SleepHelper18dataCaptureHandlerEv+0x2c>

000dbc0a <_ZN11SleepHelper4loopEv>:
void SleepHelper::loop() {
   dbc0a:	b570      	push	{r4, r5, r6, lr}
   dbc0c:	f8d0 56a4 	ldr.w	r5, [r0, #1700]	; 0x6a4
   dbc10:	4604      	mov	r4, r0
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   dbc12:	f8d4 36a8 	ldr.w	r3, [r4, #1704]	; 0x6a8
   dbc16:	42ab      	cmp	r3, r5
   dbc18:	d004      	beq.n	dbc24 <_ZN11SleepHelper4loopEv+0x1a>
                (*it)(args...);
   dbc1a:	4628      	mov	r0, r5
   dbc1c:	f7fd ff79 	bl	d9b12 <_ZNKSt8functionIFbvEEclEv>
      operator++() _GLIBCXX_NOEXCEPT
   dbc20:	3510      	adds	r5, #16
	return *this;
   dbc22:	e7f6      	b.n	dbc12 <_ZN11SleepHelper4loopEv+0x8>
    dataCaptureHandler();
   dbc24:	4620      	mov	r0, r4
   dbc26:	f7ff ff97 	bl	dbb58 <_ZN11SleepHelper18dataCaptureHandlerEv>
      if (_M_empty())
   dbc2a:	f8d4 37b0 	ldr.w	r3, [r4, #1968]	; 0x7b0
   dbc2e:	b90b      	cbnz	r3, dbc34 <_ZN11SleepHelper4loopEv+0x2a>
	__throw_bad_function_call();
   dbc30:	f003 fc24 	bl	df47c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbc34:	f8d4 37b4 	ldr.w	r3, [r4, #1972]	; 0x7b4
   dbc38:	4621      	mov	r1, r4
   dbc3a:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
}
   dbc3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dbc42:	4718      	bx	r3

000dbc44 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   dbc44:	b508      	push	{r3, lr}
   dbc46:	4b02      	ldr	r3, [pc, #8]	; (dbc50 <os_thread_create+0xc>)
   dbc48:	681b      	ldr	r3, [r3, #0]
   dbc4a:	685b      	ldr	r3, [r3, #4]
   dbc4c:	9301      	str	r3, [sp, #4]
   dbc4e:	bd08      	pop	{r3, pc}
   dbc50:	00030248 	.word	0x00030248

000dbc54 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   dbc54:	b508      	push	{r3, lr}
   dbc56:	4b02      	ldr	r3, [pc, #8]	; (dbc60 <os_thread_is_current+0xc>)
   dbc58:	681b      	ldr	r3, [r3, #0]
   dbc5a:	689b      	ldr	r3, [r3, #8]
   dbc5c:	9301      	str	r3, [sp, #4]
   dbc5e:	bd08      	pop	{r3, pc}
   dbc60:	00030248 	.word	0x00030248

000dbc64 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   dbc64:	b508      	push	{r3, lr}
   dbc66:	4b02      	ldr	r3, [pc, #8]	; (dbc70 <os_thread_join+0xc>)
   dbc68:	681b      	ldr	r3, [r3, #0]
   dbc6a:	691b      	ldr	r3, [r3, #16]
   dbc6c:	9301      	str	r3, [sp, #4]
   dbc6e:	bd08      	pop	{r3, pc}
   dbc70:	00030248 	.word	0x00030248

000dbc74 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   dbc74:	b508      	push	{r3, lr}
   dbc76:	4b02      	ldr	r3, [pc, #8]	; (dbc80 <os_thread_cleanup+0xc>)
   dbc78:	681b      	ldr	r3, [r3, #0]
   dbc7a:	695b      	ldr	r3, [r3, #20]
   dbc7c:	9301      	str	r3, [sp, #4]
   dbc7e:	bd08      	pop	{r3, pc}
   dbc80:	00030248 	.word	0x00030248

000dbc84 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   dbc84:	b508      	push	{r3, lr}
   dbc86:	4b02      	ldr	r3, [pc, #8]	; (dbc90 <os_mutex_create+0xc>)
   dbc88:	681b      	ldr	r3, [r3, #0]
   dbc8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dbc8c:	9301      	str	r3, [sp, #4]
   dbc8e:	bd08      	pop	{r3, pc}
   dbc90:	00030248 	.word	0x00030248

000dbc94 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   dbc94:	b508      	push	{r3, lr}
   dbc96:	4b02      	ldr	r3, [pc, #8]	; (dbca0 <os_mutex_lock+0xc>)
   dbc98:	681b      	ldr	r3, [r3, #0]
   dbc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dbc9c:	9301      	str	r3, [sp, #4]
   dbc9e:	bd08      	pop	{r3, pc}
   dbca0:	00030248 	.word	0x00030248

000dbca4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   dbca4:	b508      	push	{r3, lr}
   dbca6:	4b02      	ldr	r3, [pc, #8]	; (dbcb0 <os_mutex_unlock+0xc>)
   dbca8:	681b      	ldr	r3, [r3, #0]
   dbcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dbcac:	9301      	str	r3, [sp, #4]
   dbcae:	bd08      	pop	{r3, pc}
   dbcb0:	00030248 	.word	0x00030248

000dbcb4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   dbcb4:	b508      	push	{r3, lr}
   dbcb6:	4b02      	ldr	r3, [pc, #8]	; (dbcc0 <os_mutex_recursive_create+0xc>)
   dbcb8:	681b      	ldr	r3, [r3, #0]
   dbcba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dbcbc:	9301      	str	r3, [sp, #4]
   dbcbe:	bd08      	pop	{r3, pc}
   dbcc0:	00030248 	.word	0x00030248

000dbcc4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   dbcc4:	b508      	push	{r3, lr}
   dbcc6:	4b02      	ldr	r3, [pc, #8]	; (dbcd0 <os_mutex_recursive_destroy+0xc>)
   dbcc8:	681b      	ldr	r3, [r3, #0]
   dbcca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dbccc:	9301      	str	r3, [sp, #4]
   dbcce:	bd08      	pop	{r3, pc}
   dbcd0:	00030248 	.word	0x00030248

000dbcd4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   dbcd4:	b508      	push	{r3, lr}
   dbcd6:	4b02      	ldr	r3, [pc, #8]	; (dbce0 <os_mutex_recursive_lock+0xc>)
   dbcd8:	681b      	ldr	r3, [r3, #0]
   dbcda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dbcdc:	9301      	str	r3, [sp, #4]
   dbcde:	bd08      	pop	{r3, pc}
   dbce0:	00030248 	.word	0x00030248

000dbce4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   dbce4:	b508      	push	{r3, lr}
   dbce6:	4b02      	ldr	r3, [pc, #8]	; (dbcf0 <os_mutex_recursive_unlock+0xc>)
   dbce8:	681b      	ldr	r3, [r3, #0]
   dbcea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dbcec:	9301      	str	r3, [sp, #4]
   dbcee:	bd08      	pop	{r3, pc}
   dbcf0:	00030248 	.word	0x00030248

000dbcf4 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   dbcf4:	b508      	push	{r3, lr}
   dbcf6:	4b02      	ldr	r3, [pc, #8]	; (dbd00 <os_thread_exit+0xc>)
   dbcf8:	681b      	ldr	r3, [r3, #0]
   dbcfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dbcfc:	9301      	str	r3, [sp, #4]
   dbcfe:	bd08      	pop	{r3, pc}
   dbd00:	00030248 	.word	0x00030248

000dbd04 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   dbd04:	b508      	push	{r3, lr}
   dbd06:	4b02      	ldr	r3, [pc, #8]	; (dbd10 <HAL_Feature_Set+0xc>)
   dbd08:	681b      	ldr	r3, [r3, #0]
   dbd0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   dbd0c:	9301      	str	r3, [sp, #4]
   dbd0e:	bd08      	pop	{r3, pc}
   dbd10:	00030234 	.word	0x00030234

000dbd14 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   dbd14:	b508      	push	{r3, lr}
   dbd16:	4b02      	ldr	r3, [pc, #8]	; (dbd20 <HAL_Core_Get_Last_Reset_Info+0xc>)
   dbd18:	681b      	ldr	r3, [r3, #0]
   dbd1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dbd1c:	9301      	str	r3, [sp, #4]
   dbd1e:	bd08      	pop	{r3, pc}
   dbd20:	00030234 	.word	0x00030234

000dbd24 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   dbd24:	b508      	push	{r3, lr}
   dbd26:	4b02      	ldr	r3, [pc, #8]	; (dbd30 <HAL_RNG_GetRandomNumber+0xc>)
   dbd28:	681b      	ldr	r3, [r3, #0]
   dbd2a:	685b      	ldr	r3, [r3, #4]
   dbd2c:	9301      	str	r3, [sp, #4]
   dbd2e:	bd08      	pop	{r3, pc}
   dbd30:	00030218 	.word	0x00030218

000dbd34 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   dbd34:	b508      	push	{r3, lr}
   dbd36:	4b02      	ldr	r3, [pc, #8]	; (dbd40 <HAL_Delay_Milliseconds+0xc>)
   dbd38:	681b      	ldr	r3, [r3, #0]
   dbd3a:	689b      	ldr	r3, [r3, #8]
   dbd3c:	9301      	str	r3, [sp, #4]
   dbd3e:	bd08      	pop	{r3, pc}
   dbd40:	00030218 	.word	0x00030218

000dbd44 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   dbd44:	b508      	push	{r3, lr}
   dbd46:	4b02      	ldr	r3, [pc, #8]	; (dbd50 <HAL_Delay_Microseconds+0xc>)
   dbd48:	681b      	ldr	r3, [r3, #0]
   dbd4a:	68db      	ldr	r3, [r3, #12]
   dbd4c:	9301      	str	r3, [sp, #4]
   dbd4e:	bd08      	pop	{r3, pc}
   dbd50:	00030218 	.word	0x00030218

000dbd54 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   dbd54:	b508      	push	{r3, lr}
   dbd56:	4b02      	ldr	r3, [pc, #8]	; (dbd60 <HAL_Timer_Get_Milli_Seconds+0xc>)
   dbd58:	681b      	ldr	r3, [r3, #0]
   dbd5a:	695b      	ldr	r3, [r3, #20]
   dbd5c:	9301      	str	r3, [sp, #4]
   dbd5e:	bd08      	pop	{r3, pc}
   dbd60:	00030218 	.word	0x00030218

000dbd64 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   dbd64:	b508      	push	{r3, lr}
   dbd66:	4b02      	ldr	r3, [pc, #8]	; (dbd70 <hal_rtc_time_is_valid+0xc>)
   dbd68:	681b      	ldr	r3, [r3, #0]
   dbd6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dbd6c:	9301      	str	r3, [sp, #4]
   dbd6e:	bd08      	pop	{r3, pc}
   dbd70:	00030218 	.word	0x00030218

000dbd74 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   dbd74:	b508      	push	{r3, lr}
   dbd76:	4b02      	ldr	r3, [pc, #8]	; (dbd80 <hal_timer_millis+0xc>)
   dbd78:	681b      	ldr	r3, [r3, #0]
   dbd7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dbd7c:	9301      	str	r3, [sp, #4]
   dbd7e:	bd08      	pop	{r3, pc}
   dbd80:	00030218 	.word	0x00030218

000dbd84 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   dbd84:	b508      	push	{r3, lr}
   dbd86:	4b02      	ldr	r3, [pc, #8]	; (dbd90 <hal_rtc_get_time+0xc>)
   dbd88:	681b      	ldr	r3, [r3, #0]
   dbd8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   dbd8c:	9301      	str	r3, [sp, #4]
   dbd8e:	bd08      	pop	{r3, pc}
   dbd90:	00030218 	.word	0x00030218

000dbd94 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   dbd94:	b508      	push	{r3, lr}
   dbd96:	4b02      	ldr	r3, [pc, #8]	; (dbda0 <hal_rtc_set_time+0xc>)
   dbd98:	681b      	ldr	r3, [r3, #0]
   dbd9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   dbd9c:	9301      	str	r3, [sp, #4]
   dbd9e:	bd08      	pop	{r3, pc}
   dbda0:	00030218 	.word	0x00030218

000dbda4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   dbda4:	b508      	push	{r3, lr}
   dbda6:	4b02      	ldr	r3, [pc, #8]	; (dbdb0 <HAL_Validate_Pin_Function+0xc>)
   dbda8:	681b      	ldr	r3, [r3, #0]
   dbdaa:	685b      	ldr	r3, [r3, #4]
   dbdac:	9301      	str	r3, [sp, #4]
   dbdae:	bd08      	pop	{r3, pc}
   dbdb0:	0003022c 	.word	0x0003022c

000dbdb4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   dbdb4:	b508      	push	{r3, lr}
   dbdb6:	4b02      	ldr	r3, [pc, #8]	; (dbdc0 <HAL_Get_Pin_Mode+0xc>)
   dbdb8:	681b      	ldr	r3, [r3, #0]
   dbdba:	68db      	ldr	r3, [r3, #12]
   dbdbc:	9301      	str	r3, [sp, #4]
   dbdbe:	bd08      	pop	{r3, pc}
   dbdc0:	0003022c 	.word	0x0003022c

000dbdc4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   dbdc4:	b508      	push	{r3, lr}
   dbdc6:	4b02      	ldr	r3, [pc, #8]	; (dbdd0 <HAL_GPIO_Write+0xc>)
   dbdc8:	681b      	ldr	r3, [r3, #0]
   dbdca:	691b      	ldr	r3, [r3, #16]
   dbdcc:	9301      	str	r3, [sp, #4]
   dbdce:	bd08      	pop	{r3, pc}
   dbdd0:	0003022c 	.word	0x0003022c

000dbdd4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   dbdd4:	b508      	push	{r3, lr}
   dbdd6:	4b02      	ldr	r3, [pc, #8]	; (dbde0 <HAL_GPIO_Read+0xc>)
   dbdd8:	681b      	ldr	r3, [r3, #0]
   dbdda:	695b      	ldr	r3, [r3, #20]
   dbddc:	9301      	str	r3, [sp, #4]
   dbdde:	bd08      	pop	{r3, pc}
   dbde0:	0003022c 	.word	0x0003022c

000dbde4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   dbde4:	b508      	push	{r3, lr}
   dbde6:	4b02      	ldr	r3, [pc, #8]	; (dbdf0 <hal_adc_read+0xc>)
   dbde8:	681b      	ldr	r3, [r3, #0]
   dbdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dbdec:	9301      	str	r3, [sp, #4]
   dbdee:	bd08      	pop	{r3, pc}
   dbdf0:	0003022c 	.word	0x0003022c

000dbdf4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   dbdf4:	b508      	push	{r3, lr}
   dbdf6:	4b02      	ldr	r3, [pc, #8]	; (dbe00 <hal_i2c_begin+0xc>)
   dbdf8:	681b      	ldr	r3, [r3, #0]
   dbdfa:	68db      	ldr	r3, [r3, #12]
   dbdfc:	9301      	str	r3, [sp, #4]
   dbdfe:	bd08      	pop	{r3, pc}
   dbe00:	00030228 	.word	0x00030228

000dbe04 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   dbe04:	b508      	push	{r3, lr}
   dbe06:	4b02      	ldr	r3, [pc, #8]	; (dbe10 <hal_i2c_begin_transmission+0xc>)
   dbe08:	681b      	ldr	r3, [r3, #0]
   dbe0a:	699b      	ldr	r3, [r3, #24]
   dbe0c:	9301      	str	r3, [sp, #4]
   dbe0e:	bd08      	pop	{r3, pc}
   dbe10:	00030228 	.word	0x00030228

000dbe14 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   dbe14:	b508      	push	{r3, lr}
   dbe16:	4b02      	ldr	r3, [pc, #8]	; (dbe20 <hal_i2c_end_transmission+0xc>)
   dbe18:	681b      	ldr	r3, [r3, #0]
   dbe1a:	69db      	ldr	r3, [r3, #28]
   dbe1c:	9301      	str	r3, [sp, #4]
   dbe1e:	bd08      	pop	{r3, pc}
   dbe20:	00030228 	.word	0x00030228

000dbe24 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   dbe24:	b508      	push	{r3, lr}
   dbe26:	4b02      	ldr	r3, [pc, #8]	; (dbe30 <hal_i2c_write+0xc>)
   dbe28:	681b      	ldr	r3, [r3, #0]
   dbe2a:	6a1b      	ldr	r3, [r3, #32]
   dbe2c:	9301      	str	r3, [sp, #4]
   dbe2e:	bd08      	pop	{r3, pc}
   dbe30:	00030228 	.word	0x00030228

000dbe34 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   dbe34:	b508      	push	{r3, lr}
   dbe36:	4b02      	ldr	r3, [pc, #8]	; (dbe40 <hal_i2c_available+0xc>)
   dbe38:	681b      	ldr	r3, [r3, #0]
   dbe3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dbe3c:	9301      	str	r3, [sp, #4]
   dbe3e:	bd08      	pop	{r3, pc}
   dbe40:	00030228 	.word	0x00030228

000dbe44 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   dbe44:	b508      	push	{r3, lr}
   dbe46:	4b02      	ldr	r3, [pc, #8]	; (dbe50 <hal_i2c_read+0xc>)
   dbe48:	681b      	ldr	r3, [r3, #0]
   dbe4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dbe4c:	9301      	str	r3, [sp, #4]
   dbe4e:	bd08      	pop	{r3, pc}
   dbe50:	00030228 	.word	0x00030228

000dbe54 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   dbe54:	b508      	push	{r3, lr}
   dbe56:	4b02      	ldr	r3, [pc, #8]	; (dbe60 <hal_i2c_peek+0xc>)
   dbe58:	681b      	ldr	r3, [r3, #0]
   dbe5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dbe5c:	9301      	str	r3, [sp, #4]
   dbe5e:	bd08      	pop	{r3, pc}
   dbe60:	00030228 	.word	0x00030228

000dbe64 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   dbe64:	b508      	push	{r3, lr}
   dbe66:	4b02      	ldr	r3, [pc, #8]	; (dbe70 <hal_i2c_flush+0xc>)
   dbe68:	681b      	ldr	r3, [r3, #0]
   dbe6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dbe6c:	9301      	str	r3, [sp, #4]
   dbe6e:	bd08      	pop	{r3, pc}
   dbe70:	00030228 	.word	0x00030228

000dbe74 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   dbe74:	b508      	push	{r3, lr}
   dbe76:	4b02      	ldr	r3, [pc, #8]	; (dbe80 <hal_i2c_is_enabled+0xc>)
   dbe78:	681b      	ldr	r3, [r3, #0]
   dbe7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dbe7c:	9301      	str	r3, [sp, #4]
   dbe7e:	bd08      	pop	{r3, pc}
   dbe80:	00030228 	.word	0x00030228

000dbe84 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   dbe84:	b508      	push	{r3, lr}
   dbe86:	4b02      	ldr	r3, [pc, #8]	; (dbe90 <hal_i2c_init+0xc>)
   dbe88:	681b      	ldr	r3, [r3, #0]
   dbe8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dbe8c:	9301      	str	r3, [sp, #4]
   dbe8e:	bd08      	pop	{r3, pc}
   dbe90:	00030228 	.word	0x00030228

000dbe94 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   dbe94:	b508      	push	{r3, lr}
   dbe96:	4b02      	ldr	r3, [pc, #8]	; (dbea0 <hal_i2c_lock+0xc>)
   dbe98:	681b      	ldr	r3, [r3, #0]
   dbe9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dbe9c:	9301      	str	r3, [sp, #4]
   dbe9e:	bd08      	pop	{r3, pc}
   dbea0:	00030228 	.word	0x00030228

000dbea4 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   dbea4:	b508      	push	{r3, lr}
   dbea6:	4b02      	ldr	r3, [pc, #8]	; (dbeb0 <hal_i2c_unlock+0xc>)
   dbea8:	681b      	ldr	r3, [r3, #0]
   dbeaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dbeac:	9301      	str	r3, [sp, #4]
   dbeae:	bd08      	pop	{r3, pc}
   dbeb0:	00030228 	.word	0x00030228

000dbeb4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   dbeb4:	b508      	push	{r3, lr}
   dbeb6:	4b02      	ldr	r3, [pc, #8]	; (dbec0 <hal_i2c_request_ex+0xc>)
   dbeb8:	681b      	ldr	r3, [r3, #0]
   dbeba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dbebc:	9301      	str	r3, [sp, #4]
   dbebe:	bd08      	pop	{r3, pc}
   dbec0:	00030228 	.word	0x00030228

000dbec4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   dbec4:	b508      	push	{r3, lr}
   dbec6:	4b02      	ldr	r3, [pc, #8]	; (dbed0 <inet_inet_ntop+0xc>)
   dbec8:	681b      	ldr	r3, [r3, #0]
   dbeca:	695b      	ldr	r3, [r3, #20]
   dbecc:	9301      	str	r3, [sp, #4]
   dbece:	bd08      	pop	{r3, pc}
   dbed0:	00030264 	.word	0x00030264

000dbed4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   dbed4:	b508      	push	{r3, lr}
   dbed6:	4b02      	ldr	r3, [pc, #8]	; (dbee0 <netdb_freeaddrinfo+0xc>)
   dbed8:	681b      	ldr	r3, [r3, #0]
   dbeda:	689b      	ldr	r3, [r3, #8]
   dbedc:	9301      	str	r3, [sp, #4]
   dbede:	bd08      	pop	{r3, pc}
   dbee0:	00030268 	.word	0x00030268

000dbee4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   dbee4:	b508      	push	{r3, lr}
   dbee6:	4b02      	ldr	r3, [pc, #8]	; (dbef0 <netdb_getaddrinfo+0xc>)
   dbee8:	681b      	ldr	r3, [r3, #0]
   dbeea:	68db      	ldr	r3, [r3, #12]
   dbeec:	9301      	str	r3, [sp, #4]
   dbeee:	bd08      	pop	{r3, pc}
   dbef0:	00030268 	.word	0x00030268

000dbef4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   dbef4:	b508      	push	{r3, lr}
   dbef6:	4b02      	ldr	r3, [pc, #8]	; (dbf00 <hal_spi_init+0xc>)
   dbef8:	681b      	ldr	r3, [r3, #0]
   dbefa:	69db      	ldr	r3, [r3, #28]
   dbefc:	9301      	str	r3, [sp, #4]
   dbefe:	bd08      	pop	{r3, pc}
   dbf00:	00030230 	.word	0x00030230

000dbf04 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   dbf04:	b508      	push	{r3, lr}
   dbf06:	4b02      	ldr	r3, [pc, #8]	; (dbf10 <hal_spi_is_enabled+0xc>)
   dbf08:	681b      	ldr	r3, [r3, #0]
   dbf0a:	6a1b      	ldr	r3, [r3, #32]
   dbf0c:	9301      	str	r3, [sp, #4]
   dbf0e:	bd08      	pop	{r3, pc}
   dbf10:	00030230 	.word	0x00030230

000dbf14 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   dbf14:	b508      	push	{r3, lr}
   dbf16:	4b02      	ldr	r3, [pc, #8]	; (dbf20 <_open+0xc>)
   dbf18:	681b      	ldr	r3, [r3, #0]
   dbf1a:	681b      	ldr	r3, [r3, #0]
   dbf1c:	9301      	str	r3, [sp, #4]
   dbf1e:	bd08      	pop	{r3, pc}
   dbf20:	00030284 	.word	0x00030284

000dbf24 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   dbf24:	b508      	push	{r3, lr}
   dbf26:	4b02      	ldr	r3, [pc, #8]	; (dbf30 <_write+0xc>)
   dbf28:	681b      	ldr	r3, [r3, #0]
   dbf2a:	685b      	ldr	r3, [r3, #4]
   dbf2c:	9301      	str	r3, [sp, #4]
   dbf2e:	bd08      	pop	{r3, pc}
   dbf30:	00030284 	.word	0x00030284

000dbf34 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   dbf34:	b508      	push	{r3, lr}
   dbf36:	4b02      	ldr	r3, [pc, #8]	; (dbf40 <_read+0xc>)
   dbf38:	681b      	ldr	r3, [r3, #0]
   dbf3a:	689b      	ldr	r3, [r3, #8]
   dbf3c:	9301      	str	r3, [sp, #4]
   dbf3e:	bd08      	pop	{r3, pc}
   dbf40:	00030284 	.word	0x00030284

000dbf44 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   dbf44:	b508      	push	{r3, lr}
   dbf46:	4b02      	ldr	r3, [pc, #8]	; (dbf50 <_close+0xc>)
   dbf48:	681b      	ldr	r3, [r3, #0]
   dbf4a:	68db      	ldr	r3, [r3, #12]
   dbf4c:	9301      	str	r3, [sp, #4]
   dbf4e:	bd08      	pop	{r3, pc}
   dbf50:	00030284 	.word	0x00030284

000dbf54 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   dbf54:	b508      	push	{r3, lr}
   dbf56:	4b02      	ldr	r3, [pc, #8]	; (dbf60 <_fstat+0xc>)
   dbf58:	681b      	ldr	r3, [r3, #0]
   dbf5a:	695b      	ldr	r3, [r3, #20]
   dbf5c:	9301      	str	r3, [sp, #4]
   dbf5e:	bd08      	pop	{r3, pc}
   dbf60:	00030284 	.word	0x00030284

000dbf64 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   dbf64:	b508      	push	{r3, lr}
   dbf66:	4b02      	ldr	r3, [pc, #8]	; (dbf70 <_lseek+0xc>)
   dbf68:	681b      	ldr	r3, [r3, #0]
   dbf6a:	6a1b      	ldr	r3, [r3, #32]
   dbf6c:	9301      	str	r3, [sp, #4]
   dbf6e:	bd08      	pop	{r3, pc}
   dbf70:	00030284 	.word	0x00030284

000dbf74 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   dbf74:	b508      	push	{r3, lr}
   dbf76:	4b02      	ldr	r3, [pc, #8]	; (dbf80 <stat+0xc>)
   dbf78:	681b      	ldr	r3, [r3, #0]
   dbf7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dbf7c:	9301      	str	r3, [sp, #4]
   dbf7e:	bd08      	pop	{r3, pc}
   dbf80:	00030284 	.word	0x00030284

000dbf84 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   dbf84:	b508      	push	{r3, lr}
   dbf86:	4b02      	ldr	r3, [pc, #8]	; (dbf90 <mkdir+0xc>)
   dbf88:	681b      	ldr	r3, [r3, #0]
   dbf8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dbf8c:	9301      	str	r3, [sp, #4]
   dbf8e:	bd08      	pop	{r3, pc}
   dbf90:	00030284 	.word	0x00030284

000dbf94 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   dbf94:	b508      	push	{r3, lr}
   dbf96:	4b02      	ldr	r3, [pc, #8]	; (dbfa0 <_unlink+0xc>)
   dbf98:	681b      	ldr	r3, [r3, #0]
   dbf9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dbf9c:	9301      	str	r3, [sp, #4]
   dbf9e:	bd08      	pop	{r3, pc}
   dbfa0:	00030284 	.word	0x00030284

000dbfa4 <_link>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
   dbfa4:	b508      	push	{r3, lr}
   dbfa6:	4b02      	ldr	r3, [pc, #8]	; (dbfb0 <_link+0xc>)
   dbfa8:	681b      	ldr	r3, [r3, #0]
   dbfaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dbfac:	9301      	str	r3, [sp, #4]
   dbfae:	bd08      	pop	{r3, pc}
   dbfb0:	00030284 	.word	0x00030284

000dbfb4 <opendir>:
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   dbfb4:	b508      	push	{r3, lr}
   dbfb6:	4b02      	ldr	r3, [pc, #8]	; (dbfc0 <opendir+0xc>)
   dbfb8:	681b      	ldr	r3, [r3, #0]
   dbfba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dbfbc:	9301      	str	r3, [sp, #4]
   dbfbe:	bd08      	pop	{r3, pc}
   dbfc0:	00030284 	.word	0x00030284

000dbfc4 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   dbfc4:	b508      	push	{r3, lr}
   dbfc6:	4b02      	ldr	r3, [pc, #8]	; (dbfd0 <readdir+0xc>)
   dbfc8:	681b      	ldr	r3, [r3, #0]
   dbfca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dbfcc:	9301      	str	r3, [sp, #4]
   dbfce:	bd08      	pop	{r3, pc}
   dbfd0:	00030284 	.word	0x00030284

000dbfd4 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   dbfd4:	b508      	push	{r3, lr}
   dbfd6:	4b02      	ldr	r3, [pc, #8]	; (dbfe0 <closedir+0xc>)
   dbfd8:	681b      	ldr	r3, [r3, #0]
   dbfda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dbfdc:	9301      	str	r3, [sp, #4]
   dbfde:	bd08      	pop	{r3, pc}
   dbfe0:	00030284 	.word	0x00030284

000dbfe4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   dbfe4:	b508      	push	{r3, lr}
   dbfe6:	4b02      	ldr	r3, [pc, #8]	; (dbff0 <hal_usart_init+0xc>)
   dbfe8:	681b      	ldr	r3, [r3, #0]
   dbfea:	681b      	ldr	r3, [r3, #0]
   dbfec:	9301      	str	r3, [sp, #4]
   dbfee:	bd08      	pop	{r3, pc}
   dbff0:	0003023c 	.word	0x0003023c

000dbff4 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   dbff4:	b508      	push	{r3, lr}
   dbff6:	4b02      	ldr	r3, [pc, #8]	; (dc000 <hal_usart_end+0xc>)
   dbff8:	681b      	ldr	r3, [r3, #0]
   dbffa:	689b      	ldr	r3, [r3, #8]
   dbffc:	9301      	str	r3, [sp, #4]
   dbffe:	bd08      	pop	{r3, pc}
   dc000:	0003023c 	.word	0x0003023c

000dc004 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   dc004:	b508      	push	{r3, lr}
   dc006:	4b02      	ldr	r3, [pc, #8]	; (dc010 <hal_usart_write+0xc>)
   dc008:	681b      	ldr	r3, [r3, #0]
   dc00a:	68db      	ldr	r3, [r3, #12]
   dc00c:	9301      	str	r3, [sp, #4]
   dc00e:	bd08      	pop	{r3, pc}
   dc010:	0003023c 	.word	0x0003023c

000dc014 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   dc014:	b508      	push	{r3, lr}
   dc016:	4b02      	ldr	r3, [pc, #8]	; (dc020 <hal_usart_available+0xc>)
   dc018:	681b      	ldr	r3, [r3, #0]
   dc01a:	691b      	ldr	r3, [r3, #16]
   dc01c:	9301      	str	r3, [sp, #4]
   dc01e:	bd08      	pop	{r3, pc}
   dc020:	0003023c 	.word	0x0003023c

000dc024 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   dc024:	b508      	push	{r3, lr}
   dc026:	4b02      	ldr	r3, [pc, #8]	; (dc030 <hal_usart_read+0xc>)
   dc028:	681b      	ldr	r3, [r3, #0]
   dc02a:	695b      	ldr	r3, [r3, #20]
   dc02c:	9301      	str	r3, [sp, #4]
   dc02e:	bd08      	pop	{r3, pc}
   dc030:	0003023c 	.word	0x0003023c

000dc034 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   dc034:	b508      	push	{r3, lr}
   dc036:	4b02      	ldr	r3, [pc, #8]	; (dc040 <hal_usart_peek+0xc>)
   dc038:	681b      	ldr	r3, [r3, #0]
   dc03a:	699b      	ldr	r3, [r3, #24]
   dc03c:	9301      	str	r3, [sp, #4]
   dc03e:	bd08      	pop	{r3, pc}
   dc040:	0003023c 	.word	0x0003023c

000dc044 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   dc044:	b508      	push	{r3, lr}
   dc046:	4b02      	ldr	r3, [pc, #8]	; (dc050 <hal_usart_flush+0xc>)
   dc048:	681b      	ldr	r3, [r3, #0]
   dc04a:	69db      	ldr	r3, [r3, #28]
   dc04c:	9301      	str	r3, [sp, #4]
   dc04e:	bd08      	pop	{r3, pc}
   dc050:	0003023c 	.word	0x0003023c

000dc054 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   dc054:	b508      	push	{r3, lr}
   dc056:	4b02      	ldr	r3, [pc, #8]	; (dc060 <hal_usart_is_enabled+0xc>)
   dc058:	681b      	ldr	r3, [r3, #0]
   dc05a:	6a1b      	ldr	r3, [r3, #32]
   dc05c:	9301      	str	r3, [sp, #4]
   dc05e:	bd08      	pop	{r3, pc}
   dc060:	0003023c 	.word	0x0003023c

000dc064 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   dc064:	b508      	push	{r3, lr}
   dc066:	4b02      	ldr	r3, [pc, #8]	; (dc070 <hal_usart_available_data_for_write+0xc>)
   dc068:	681b      	ldr	r3, [r3, #0]
   dc06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dc06c:	9301      	str	r3, [sp, #4]
   dc06e:	bd08      	pop	{r3, pc}
   dc070:	0003023c 	.word	0x0003023c

000dc074 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   dc074:	b508      	push	{r3, lr}
   dc076:	4b02      	ldr	r3, [pc, #8]	; (dc080 <hal_usart_begin_config+0xc>)
   dc078:	681b      	ldr	r3, [r3, #0]
   dc07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dc07c:	9301      	str	r3, [sp, #4]
   dc07e:	bd08      	pop	{r3, pc}
   dc080:	0003023c 	.word	0x0003023c

000dc084 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   dc084:	b508      	push	{r3, lr}
   dc086:	4b02      	ldr	r3, [pc, #8]	; (dc090 <HAL_USB_USART_Init+0xc>)
   dc088:	681b      	ldr	r3, [r3, #0]
   dc08a:	681b      	ldr	r3, [r3, #0]
   dc08c:	9301      	str	r3, [sp, #4]
   dc08e:	bd08      	pop	{r3, pc}
   dc090:	0003024c 	.word	0x0003024c

000dc094 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   dc094:	b508      	push	{r3, lr}
   dc096:	4b02      	ldr	r3, [pc, #8]	; (dc0a0 <HAL_USB_USART_Begin+0xc>)
   dc098:	681b      	ldr	r3, [r3, #0]
   dc09a:	685b      	ldr	r3, [r3, #4]
   dc09c:	9301      	str	r3, [sp, #4]
   dc09e:	bd08      	pop	{r3, pc}
   dc0a0:	0003024c 	.word	0x0003024c

000dc0a4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   dc0a4:	b508      	push	{r3, lr}
   dc0a6:	4b02      	ldr	r3, [pc, #8]	; (dc0b0 <HAL_USB_USART_End+0xc>)
   dc0a8:	681b      	ldr	r3, [r3, #0]
   dc0aa:	689b      	ldr	r3, [r3, #8]
   dc0ac:	9301      	str	r3, [sp, #4]
   dc0ae:	bd08      	pop	{r3, pc}
   dc0b0:	0003024c 	.word	0x0003024c

000dc0b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   dc0b4:	b508      	push	{r3, lr}
   dc0b6:	4b02      	ldr	r3, [pc, #8]	; (dc0c0 <HAL_USB_USART_Available_Data+0xc>)
   dc0b8:	681b      	ldr	r3, [r3, #0]
   dc0ba:	691b      	ldr	r3, [r3, #16]
   dc0bc:	9301      	str	r3, [sp, #4]
   dc0be:	bd08      	pop	{r3, pc}
   dc0c0:	0003024c 	.word	0x0003024c

000dc0c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   dc0c4:	b508      	push	{r3, lr}
   dc0c6:	4b02      	ldr	r3, [pc, #8]	; (dc0d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   dc0c8:	681b      	ldr	r3, [r3, #0]
   dc0ca:	695b      	ldr	r3, [r3, #20]
   dc0cc:	9301      	str	r3, [sp, #4]
   dc0ce:	bd08      	pop	{r3, pc}
   dc0d0:	0003024c 	.word	0x0003024c

000dc0d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   dc0d4:	b508      	push	{r3, lr}
   dc0d6:	4b02      	ldr	r3, [pc, #8]	; (dc0e0 <HAL_USB_USART_Receive_Data+0xc>)
   dc0d8:	681b      	ldr	r3, [r3, #0]
   dc0da:	699b      	ldr	r3, [r3, #24]
   dc0dc:	9301      	str	r3, [sp, #4]
   dc0de:	bd08      	pop	{r3, pc}
   dc0e0:	0003024c 	.word	0x0003024c

000dc0e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   dc0e4:	b508      	push	{r3, lr}
   dc0e6:	4b02      	ldr	r3, [pc, #8]	; (dc0f0 <HAL_USB_USART_Send_Data+0xc>)
   dc0e8:	681b      	ldr	r3, [r3, #0]
   dc0ea:	69db      	ldr	r3, [r3, #28]
   dc0ec:	9301      	str	r3, [sp, #4]
   dc0ee:	bd08      	pop	{r3, pc}
   dc0f0:	0003024c 	.word	0x0003024c

000dc0f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   dc0f4:	b508      	push	{r3, lr}
   dc0f6:	4b02      	ldr	r3, [pc, #8]	; (dc100 <HAL_USB_USART_Flush_Data+0xc>)
   dc0f8:	681b      	ldr	r3, [r3, #0]
   dc0fa:	6a1b      	ldr	r3, [r3, #32]
   dc0fc:	9301      	str	r3, [sp, #4]
   dc0fe:	bd08      	pop	{r3, pc}
   dc100:	0003024c 	.word	0x0003024c

000dc104 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   dc104:	b508      	push	{r3, lr}
   dc106:	4b02      	ldr	r3, [pc, #8]	; (dc110 <panic_+0xc>)
   dc108:	681b      	ldr	r3, [r3, #0]
   dc10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dc10c:	9301      	str	r3, [sp, #4]
   dc10e:	bd08      	pop	{r3, pc}
   dc110:	00030260 	.word	0x00030260

000dc114 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   dc114:	b508      	push	{r3, lr}
   dc116:	4b02      	ldr	r3, [pc, #8]	; (dc120 <jsmn_init+0xc>)
   dc118:	681b      	ldr	r3, [r3, #0]
   dc11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dc11c:	9301      	str	r3, [sp, #4]
   dc11e:	bd08      	pop	{r3, pc}
   dc120:	00030260 	.word	0x00030260

000dc124 <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   dc124:	b508      	push	{r3, lr}
   dc126:	4b02      	ldr	r3, [pc, #8]	; (dc130 <jsmn_parse_deprecated+0xc>)
   dc128:	681b      	ldr	r3, [r3, #0]
   dc12a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dc12c:	9301      	str	r3, [sp, #4]
   dc12e:	bd08      	pop	{r3, pc}
   dc130:	00030260 	.word	0x00030260

000dc134 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   dc134:	b508      	push	{r3, lr}
   dc136:	4b02      	ldr	r3, [pc, #8]	; (dc140 <log_message+0xc>)
   dc138:	681b      	ldr	r3, [r3, #0]
   dc13a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dc13c:	9301      	str	r3, [sp, #4]
   dc13e:	bd08      	pop	{r3, pc}
   dc140:	00030260 	.word	0x00030260

000dc144 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   dc144:	b508      	push	{r3, lr}
   dc146:	4b02      	ldr	r3, [pc, #8]	; (dc150 <log_message_v+0xc>)
   dc148:	681b      	ldr	r3, [r3, #0]
   dc14a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dc14c:	9301      	str	r3, [sp, #4]
   dc14e:	bd08      	pop	{r3, pc}
   dc150:	00030260 	.word	0x00030260

000dc154 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   dc154:	b508      	push	{r3, lr}
   dc156:	4b02      	ldr	r3, [pc, #8]	; (dc160 <log_write+0xc>)
   dc158:	681b      	ldr	r3, [r3, #0]
   dc15a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dc15c:	9301      	str	r3, [sp, #4]
   dc15e:	bd08      	pop	{r3, pc}
   dc160:	00030260 	.word	0x00030260

000dc164 <log_level_name>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   dc164:	b508      	push	{r3, lr}
   dc166:	4b02      	ldr	r3, [pc, #8]	; (dc170 <log_level_name+0xc>)
   dc168:	681b      	ldr	r3, [r3, #0]
   dc16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dc16c:	9301      	str	r3, [sp, #4]
   dc16e:	bd08      	pop	{r3, pc}
   dc170:	00030260 	.word	0x00030260

000dc174 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   dc174:	b508      	push	{r3, lr}
   dc176:	4b02      	ldr	r3, [pc, #8]	; (dc180 <log_set_callbacks+0xc>)
   dc178:	681b      	ldr	r3, [r3, #0]
   dc17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   dc17c:	9301      	str	r3, [sp, #4]
   dc17e:	bd08      	pop	{r3, pc}
   dc180:	00030260 	.word	0x00030260

000dc184 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   dc184:	b508      	push	{r3, lr}
   dc186:	4b03      	ldr	r3, [pc, #12]	; (dc194 <diag_get_source+0x10>)
   dc188:	681b      	ldr	r3, [r3, #0]
   dc18a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   dc18e:	9301      	str	r3, [sp, #4]
   dc190:	bd08      	pop	{r3, pc}
   dc192:	0000      	.short	0x0000
   dc194:	00030260 	.word	0x00030260

000dc198 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   dc198:	b508      	push	{r3, lr}
   dc19a:	4b02      	ldr	r3, [pc, #8]	; (dc1a4 <system_mode+0xc>)
   dc19c:	681b      	ldr	r3, [r3, #0]
   dc19e:	681b      	ldr	r3, [r3, #0]
   dc1a0:	9301      	str	r3, [sp, #4]
   dc1a2:	bd08      	pop	{r3, pc}
   dc1a4:	00030220 	.word	0x00030220

000dc1a8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   dc1a8:	b508      	push	{r3, lr}
   dc1aa:	4b02      	ldr	r3, [pc, #8]	; (dc1b4 <set_system_mode+0xc>)
   dc1ac:	681b      	ldr	r3, [r3, #0]
   dc1ae:	685b      	ldr	r3, [r3, #4]
   dc1b0:	9301      	str	r3, [sp, #4]
   dc1b2:	bd08      	pop	{r3, pc}
   dc1b4:	00030220 	.word	0x00030220

000dc1b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   dc1b8:	b508      	push	{r3, lr}
   dc1ba:	4b02      	ldr	r3, [pc, #8]	; (dc1c4 <system_delay_ms+0xc>)
   dc1bc:	681b      	ldr	r3, [r3, #0]
   dc1be:	695b      	ldr	r3, [r3, #20]
   dc1c0:	9301      	str	r3, [sp, #4]
   dc1c2:	bd08      	pop	{r3, pc}
   dc1c4:	00030220 	.word	0x00030220

000dc1c8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   dc1c8:	b508      	push	{r3, lr}
   dc1ca:	4b02      	ldr	r3, [pc, #8]	; (dc1d4 <system_subscribe_event+0xc>)
   dc1cc:	681b      	ldr	r3, [r3, #0]
   dc1ce:	6a1b      	ldr	r3, [r3, #32]
   dc1d0:	9301      	str	r3, [sp, #4]
   dc1d2:	bd08      	pop	{r3, pc}
   dc1d4:	00030220 	.word	0x00030220

000dc1d8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   dc1d8:	b508      	push	{r3, lr}
   dc1da:	4b02      	ldr	r3, [pc, #8]	; (dc1e4 <system_thread_set_state+0xc>)
   dc1dc:	681b      	ldr	r3, [r3, #0]
   dc1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dc1e0:	9301      	str	r3, [sp, #4]
   dc1e2:	bd08      	pop	{r3, pc}
   dc1e4:	00030220 	.word	0x00030220

000dc1e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   dc1e8:	b508      	push	{r3, lr}
   dc1ea:	4b02      	ldr	r3, [pc, #8]	; (dc1f4 <application_thread_current+0xc>)
   dc1ec:	681b      	ldr	r3, [r3, #0]
   dc1ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dc1f0:	9301      	str	r3, [sp, #4]
   dc1f2:	bd08      	pop	{r3, pc}
   dc1f4:	00030220 	.word	0x00030220

000dc1f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   dc1f8:	b508      	push	{r3, lr}
   dc1fa:	4b02      	ldr	r3, [pc, #8]	; (dc204 <application_thread_invoke+0xc>)
   dc1fc:	681b      	ldr	r3, [r3, #0]
   dc1fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dc200:	9301      	str	r3, [sp, #4]
   dc202:	bd08      	pop	{r3, pc}
   dc204:	00030220 	.word	0x00030220

000dc208 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   dc208:	b508      	push	{r3, lr}
   dc20a:	4b02      	ldr	r3, [pc, #8]	; (dc214 <system_thread_get_state+0xc>)
   dc20c:	681b      	ldr	r3, [r3, #0]
   dc20e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dc210:	9301      	str	r3, [sp, #4]
   dc212:	bd08      	pop	{r3, pc}
   dc214:	00030220 	.word	0x00030220

000dc218 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   dc218:	b508      	push	{r3, lr}
   dc21a:	4b02      	ldr	r3, [pc, #8]	; (dc224 <system_notify_time_changed+0xc>)
   dc21c:	681b      	ldr	r3, [r3, #0]
   dc21e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dc220:	9301      	str	r3, [sp, #4]
   dc222:	bd08      	pop	{r3, pc}
   dc224:	00030220 	.word	0x00030220

000dc228 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   dc228:	b508      	push	{r3, lr}
   dc22a:	4b03      	ldr	r3, [pc, #12]	; (dc238 <system_ctrl_set_app_request_handler+0x10>)
   dc22c:	681b      	ldr	r3, [r3, #0]
   dc22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   dc232:	9301      	str	r3, [sp, #4]
   dc234:	bd08      	pop	{r3, pc}
   dc236:	0000      	.short	0x0000
   dc238:	00030220 	.word	0x00030220

000dc23c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   dc23c:	b508      	push	{r3, lr}
   dc23e:	4b03      	ldr	r3, [pc, #12]	; (dc24c <system_ctrl_set_result+0x10>)
   dc240:	681b      	ldr	r3, [r3, #0]
   dc242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   dc246:	9301      	str	r3, [sp, #4]
   dc248:	bd08      	pop	{r3, pc}
   dc24a:	0000      	.short	0x0000
   dc24c:	00030220 	.word	0x00030220

000dc250 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   dc250:	b508      	push	{r3, lr}
   dc252:	4b03      	ldr	r3, [pc, #12]	; (dc260 <system_sleep_ext+0x10>)
   dc254:	681b      	ldr	r3, [r3, #0]
   dc256:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   dc25a:	9301      	str	r3, [sp, #4]
   dc25c:	bd08      	pop	{r3, pc}
   dc25e:	0000      	.short	0x0000
   dc260:	00030220 	.word	0x00030220

000dc264 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   dc264:	b508      	push	{r3, lr}
   dc266:	4b02      	ldr	r3, [pc, #8]	; (dc270 <spark_variable+0xc>)
   dc268:	681b      	ldr	r3, [r3, #0]
   dc26a:	681b      	ldr	r3, [r3, #0]
   dc26c:	9301      	str	r3, [sp, #4]
   dc26e:	bd08      	pop	{r3, pc}
   dc270:	00030244 	.word	0x00030244

000dc274 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   dc274:	b508      	push	{r3, lr}
   dc276:	4b02      	ldr	r3, [pc, #8]	; (dc280 <spark_function+0xc>)
   dc278:	681b      	ldr	r3, [r3, #0]
   dc27a:	685b      	ldr	r3, [r3, #4]
   dc27c:	9301      	str	r3, [sp, #4]
   dc27e:	bd08      	pop	{r3, pc}
   dc280:	00030244 	.word	0x00030244

000dc284 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   dc284:	b508      	push	{r3, lr}
   dc286:	4b02      	ldr	r3, [pc, #8]	; (dc290 <spark_process+0xc>)
   dc288:	681b      	ldr	r3, [r3, #0]
   dc28a:	689b      	ldr	r3, [r3, #8]
   dc28c:	9301      	str	r3, [sp, #4]
   dc28e:	bd08      	pop	{r3, pc}
   dc290:	00030244 	.word	0x00030244

000dc294 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   dc294:	b508      	push	{r3, lr}
   dc296:	4b02      	ldr	r3, [pc, #8]	; (dc2a0 <spark_cloud_flag_connect+0xc>)
   dc298:	681b      	ldr	r3, [r3, #0]
   dc29a:	68db      	ldr	r3, [r3, #12]
   dc29c:	9301      	str	r3, [sp, #4]
   dc29e:	bd08      	pop	{r3, pc}
   dc2a0:	00030244 	.word	0x00030244

000dc2a4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   dc2a4:	b508      	push	{r3, lr}
   dc2a6:	4b02      	ldr	r3, [pc, #8]	; (dc2b0 <spark_cloud_flag_connected+0xc>)
   dc2a8:	681b      	ldr	r3, [r3, #0]
   dc2aa:	695b      	ldr	r3, [r3, #20]
   dc2ac:	9301      	str	r3, [sp, #4]
   dc2ae:	bd08      	pop	{r3, pc}
   dc2b0:	00030244 	.word	0x00030244

000dc2b4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   dc2b4:	b508      	push	{r3, lr}
   dc2b6:	4b02      	ldr	r3, [pc, #8]	; (dc2c0 <spark_send_event+0xc>)
   dc2b8:	681b      	ldr	r3, [r3, #0]
   dc2ba:	6a1b      	ldr	r3, [r3, #32]
   dc2bc:	9301      	str	r3, [sp, #4]
   dc2be:	bd08      	pop	{r3, pc}
   dc2c0:	00030244 	.word	0x00030244

000dc2c4 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   dc2c4:	b508      	push	{r3, lr}
   dc2c6:	4b02      	ldr	r3, [pc, #8]	; (dc2d0 <spark_sync_time_pending+0xc>)
   dc2c8:	681b      	ldr	r3, [r3, #0]
   dc2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dc2cc:	9301      	str	r3, [sp, #4]
   dc2ce:	bd08      	pop	{r3, pc}
   dc2d0:	00030244 	.word	0x00030244

000dc2d4 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   dc2d4:	b508      	push	{r3, lr}
   dc2d6:	4b02      	ldr	r3, [pc, #8]	; (dc2e0 <spark_sync_time_last+0xc>)
   dc2d8:	681b      	ldr	r3, [r3, #0]
   dc2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dc2dc:	9301      	str	r3, [sp, #4]
   dc2de:	bd08      	pop	{r3, pc}
   dc2e0:	00030244 	.word	0x00030244

000dc2e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   dc2e4:	b508      	push	{r3, lr}
   dc2e6:	4b02      	ldr	r3, [pc, #8]	; (dc2f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   dc2e8:	681b      	ldr	r3, [r3, #0]
   dc2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dc2ec:	9301      	str	r3, [sp, #4]
   dc2ee:	bd08      	pop	{r3, pc}
   dc2f0:	00030244 	.word	0x00030244

000dc2f4 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   dc2f4:	b508      	push	{r3, lr}
   dc2f6:	4b02      	ldr	r3, [pc, #8]	; (dc300 <spark_cloud_disconnect+0xc>)
   dc2f8:	681b      	ldr	r3, [r3, #0]
   dc2fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dc2fc:	9301      	str	r3, [sp, #4]
   dc2fe:	bd08      	pop	{r3, pc}
   dc300:	00030244 	.word	0x00030244

000dc304 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   dc304:	b508      	push	{r3, lr}
   dc306:	4b02      	ldr	r3, [pc, #8]	; (dc310 <network_connect+0xc>)
   dc308:	681b      	ldr	r3, [r3, #0]
   dc30a:	685b      	ldr	r3, [r3, #4]
   dc30c:	9301      	str	r3, [sp, #4]
   dc30e:	bd08      	pop	{r3, pc}
   dc310:	00030240 	.word	0x00030240

000dc314 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   dc314:	b508      	push	{r3, lr}
   dc316:	4b02      	ldr	r3, [pc, #8]	; (dc320 <network_connecting+0xc>)
   dc318:	681b      	ldr	r3, [r3, #0]
   dc31a:	689b      	ldr	r3, [r3, #8]
   dc31c:	9301      	str	r3, [sp, #4]
   dc31e:	bd08      	pop	{r3, pc}
   dc320:	00030240 	.word	0x00030240

000dc324 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   dc324:	b508      	push	{r3, lr}
   dc326:	4b02      	ldr	r3, [pc, #8]	; (dc330 <network_disconnect+0xc>)
   dc328:	681b      	ldr	r3, [r3, #0]
   dc32a:	68db      	ldr	r3, [r3, #12]
   dc32c:	9301      	str	r3, [sp, #4]
   dc32e:	bd08      	pop	{r3, pc}
   dc330:	00030240 	.word	0x00030240

000dc334 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   dc334:	b508      	push	{r3, lr}
   dc336:	4b02      	ldr	r3, [pc, #8]	; (dc340 <network_ready+0xc>)
   dc338:	681b      	ldr	r3, [r3, #0]
   dc33a:	691b      	ldr	r3, [r3, #16]
   dc33c:	9301      	str	r3, [sp, #4]
   dc33e:	bd08      	pop	{r3, pc}
   dc340:	00030240 	.word	0x00030240

000dc344 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   dc344:	b508      	push	{r3, lr}
   dc346:	4b02      	ldr	r3, [pc, #8]	; (dc350 <network_on+0xc>)
   dc348:	681b      	ldr	r3, [r3, #0]
   dc34a:	695b      	ldr	r3, [r3, #20]
   dc34c:	9301      	str	r3, [sp, #4]
   dc34e:	bd08      	pop	{r3, pc}
   dc350:	00030240 	.word	0x00030240

000dc354 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   dc354:	b508      	push	{r3, lr}
   dc356:	4b02      	ldr	r3, [pc, #8]	; (dc360 <network_off+0xc>)
   dc358:	681b      	ldr	r3, [r3, #0]
   dc35a:	699b      	ldr	r3, [r3, #24]
   dc35c:	9301      	str	r3, [sp, #4]
   dc35e:	bd08      	pop	{r3, pc}
   dc360:	00030240 	.word	0x00030240

000dc364 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   dc364:	b508      	push	{r3, lr}
   dc366:	4b02      	ldr	r3, [pc, #8]	; (dc370 <network_listen+0xc>)
   dc368:	681b      	ldr	r3, [r3, #0]
   dc36a:	69db      	ldr	r3, [r3, #28]
   dc36c:	9301      	str	r3, [sp, #4]
   dc36e:	bd08      	pop	{r3, pc}
   dc370:	00030240 	.word	0x00030240

000dc374 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   dc374:	b508      	push	{r3, lr}
   dc376:	4b02      	ldr	r3, [pc, #8]	; (dc380 <network_listening+0xc>)
   dc378:	681b      	ldr	r3, [r3, #0]
   dc37a:	6a1b      	ldr	r3, [r3, #32]
   dc37c:	9301      	str	r3, [sp, #4]
   dc37e:	bd08      	pop	{r3, pc}
   dc380:	00030240 	.word	0x00030240

000dc384 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   dc384:	b508      	push	{r3, lr}
   dc386:	4b02      	ldr	r3, [pc, #8]	; (dc390 <network_set_listen_timeout+0xc>)
   dc388:	681b      	ldr	r3, [r3, #0]
   dc38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dc38c:	9301      	str	r3, [sp, #4]
   dc38e:	bd08      	pop	{r3, pc}
   dc390:	00030240 	.word	0x00030240

000dc394 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   dc394:	b508      	push	{r3, lr}
   dc396:	4b02      	ldr	r3, [pc, #8]	; (dc3a0 <network_get_listen_timeout+0xc>)
   dc398:	681b      	ldr	r3, [r3, #0]
   dc39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dc39c:	9301      	str	r3, [sp, #4]
   dc39e:	bd08      	pop	{r3, pc}
   dc3a0:	00030240 	.word	0x00030240

000dc3a4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   dc3a4:	b508      	push	{r3, lr}
   dc3a6:	4b02      	ldr	r3, [pc, #8]	; (dc3b0 <network_is_on+0xc>)
   dc3a8:	681b      	ldr	r3, [r3, #0]
   dc3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dc3ac:	9301      	str	r3, [sp, #4]
   dc3ae:	bd08      	pop	{r3, pc}
   dc3b0:	00030240 	.word	0x00030240

000dc3b4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   dc3b4:	b508      	push	{r3, lr}
   dc3b6:	4b02      	ldr	r3, [pc, #8]	; (dc3c0 <network_is_off+0xc>)
   dc3b8:	681b      	ldr	r3, [r3, #0]
   dc3ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dc3bc:	9301      	str	r3, [sp, #4]
   dc3be:	bd08      	pop	{r3, pc}
   dc3c0:	00030240 	.word	0x00030240

000dc3c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   dc3c4:	b508      	push	{r3, lr}
   dc3c6:	4b02      	ldr	r3, [pc, #8]	; (dc3d0 <malloc+0xc>)
   dc3c8:	681b      	ldr	r3, [r3, #0]
   dc3ca:	681b      	ldr	r3, [r3, #0]
   dc3cc:	9301      	str	r3, [sp, #4]
   dc3ce:	bd08      	pop	{r3, pc}
   dc3d0:	0003021c 	.word	0x0003021c

000dc3d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   dc3d4:	b508      	push	{r3, lr}
   dc3d6:	4b02      	ldr	r3, [pc, #8]	; (dc3e0 <free+0xc>)
   dc3d8:	681b      	ldr	r3, [r3, #0]
   dc3da:	685b      	ldr	r3, [r3, #4]
   dc3dc:	9301      	str	r3, [sp, #4]
   dc3de:	bd08      	pop	{r3, pc}
   dc3e0:	0003021c 	.word	0x0003021c

000dc3e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   dc3e4:	b508      	push	{r3, lr}
   dc3e6:	4b02      	ldr	r3, [pc, #8]	; (dc3f0 <realloc+0xc>)
   dc3e8:	681b      	ldr	r3, [r3, #0]
   dc3ea:	689b      	ldr	r3, [r3, #8]
   dc3ec:	9301      	str	r3, [sp, #4]
   dc3ee:	bd08      	pop	{r3, pc}
   dc3f0:	0003021c 	.word	0x0003021c

000dc3f4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   dc3f4:	b508      	push	{r3, lr}
   dc3f6:	4b02      	ldr	r3, [pc, #8]	; (dc400 <siprintf+0xc>)
   dc3f8:	681b      	ldr	r3, [r3, #0]
   dc3fa:	691b      	ldr	r3, [r3, #16]
   dc3fc:	9301      	str	r3, [sp, #4]
   dc3fe:	bd08      	pop	{r3, pc}
   dc400:	0003021c 	.word	0x0003021c

000dc404 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   dc404:	b508      	push	{r3, lr}
   dc406:	4b02      	ldr	r3, [pc, #8]	; (dc410 <sscanf+0xc>)
   dc408:	681b      	ldr	r3, [r3, #0]
   dc40a:	695b      	ldr	r3, [r3, #20]
   dc40c:	9301      	str	r3, [sp, #4]
   dc40e:	bd08      	pop	{r3, pc}
   dc410:	0003021c 	.word	0x0003021c

000dc414 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   dc414:	b508      	push	{r3, lr}
   dc416:	4b02      	ldr	r3, [pc, #8]	; (dc420 <snprintf+0xc>)
   dc418:	681b      	ldr	r3, [r3, #0]
   dc41a:	69db      	ldr	r3, [r3, #28]
   dc41c:	9301      	str	r3, [sp, #4]
   dc41e:	bd08      	pop	{r3, pc}
   dc420:	0003021c 	.word	0x0003021c

000dc424 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   dc424:	b508      	push	{r3, lr}
   dc426:	4b02      	ldr	r3, [pc, #8]	; (dc430 <vsnprintf+0xc>)
   dc428:	681b      	ldr	r3, [r3, #0]
   dc42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dc42c:	9301      	str	r3, [sp, #4]
   dc42e:	bd08      	pop	{r3, pc}
   dc430:	0003021c 	.word	0x0003021c

000dc434 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   dc434:	b508      	push	{r3, lr}
   dc436:	4b02      	ldr	r3, [pc, #8]	; (dc440 <abort+0xc>)
   dc438:	681b      	ldr	r3, [r3, #0]
   dc43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dc43c:	9301      	str	r3, [sp, #4]
   dc43e:	bd08      	pop	{r3, pc}
   dc440:	0003021c 	.word	0x0003021c

000dc444 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   dc444:	b508      	push	{r3, lr}
   dc446:	4b02      	ldr	r3, [pc, #8]	; (dc450 <_malloc_r+0xc>)
   dc448:	681b      	ldr	r3, [r3, #0]
   dc44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dc44c:	9301      	str	r3, [sp, #4]
   dc44e:	bd08      	pop	{r3, pc}
   dc450:	0003021c 	.word	0x0003021c

000dc454 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   dc454:	b508      	push	{r3, lr}
   dc456:	4b02      	ldr	r3, [pc, #8]	; (dc460 <__errno+0xc>)
   dc458:	681b      	ldr	r3, [r3, #0]
   dc45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dc45c:	9301      	str	r3, [sp, #4]
   dc45e:	bd08      	pop	{r3, pc}
   dc460:	0003021c 	.word	0x0003021c

000dc464 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   dc464:	b508      	push	{r3, lr}
   dc466:	4b02      	ldr	r3, [pc, #8]	; (dc470 <newlib_impure_ptr_callback+0xc>)
   dc468:	681b      	ldr	r3, [r3, #0]
   dc46a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dc46c:	9301      	str	r3, [sp, #4]
   dc46e:	bd08      	pop	{r3, pc}
   dc470:	0003021c 	.word	0x0003021c

000dc474 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   dc474:	b508      	push	{r3, lr}
   dc476:	4b02      	ldr	r3, [pc, #8]	; (dc480 <strftime+0xc>)
   dc478:	681b      	ldr	r3, [r3, #0]
   dc47a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dc47c:	9301      	str	r3, [sp, #4]
   dc47e:	bd08      	pop	{r3, pc}
   dc480:	0003021c 	.word	0x0003021c

000dc484 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   dc484:	b508      	push	{r3, lr}
   dc486:	4b02      	ldr	r3, [pc, #8]	; (dc490 <localtime_r+0xc>)
   dc488:	681b      	ldr	r3, [r3, #0]
   dc48a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dc48c:	9301      	str	r3, [sp, #4]
   dc48e:	bd08      	pop	{r3, pc}
   dc490:	0003021c 	.word	0x0003021c

000dc494 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   dc494:	b508      	push	{r3, lr}
   dc496:	4b02      	ldr	r3, [pc, #8]	; (dc4a0 <gmtime_r+0xc>)
   dc498:	681b      	ldr	r3, [r3, #0]
   dc49a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dc49c:	9301      	str	r3, [sp, #4]
   dc49e:	bd08      	pop	{r3, pc}
   dc4a0:	0003021c 	.word	0x0003021c

000dc4a4 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   dc4a4:	b508      	push	{r3, lr}
   dc4a6:	4b02      	ldr	r3, [pc, #8]	; (dc4b0 <mktime+0xc>)
   dc4a8:	681b      	ldr	r3, [r3, #0]
   dc4aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dc4ac:	9301      	str	r3, [sp, #4]
   dc4ae:	bd08      	pop	{r3, pc}
   dc4b0:	0003021c 	.word	0x0003021c

000dc4b4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   dc4b4:	2100      	movs	r1, #0
   dc4b6:	f7ff be7f 	b.w	dc1b8 <system_delay_ms>

000dc4ba <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dc4ba:	b510      	push	{r4, lr}
      if (_M_empty())
   dc4bc:	6883      	ldr	r3, [r0, #8]
   dc4be:	4604      	mov	r4, r0
   dc4c0:	b90b      	cbnz	r3, dc4c6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dc4c2:	f002 ffdb 	bl	df47c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc4c6:	68c3      	ldr	r3, [r0, #12]
   dc4c8:	4798      	blx	r3
      if (_M_manager)
   dc4ca:	68a3      	ldr	r3, [r4, #8]
   dc4cc:	b11b      	cbz	r3, dc4d6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dc4ce:	2203      	movs	r2, #3
   dc4d0:	4621      	mov	r1, r4
   dc4d2:	4620      	mov	r0, r4
   dc4d4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dc4d6:	4620      	mov	r0, r4
   dc4d8:	2110      	movs	r1, #16
}
   dc4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   dc4de:	f002 bfc1 	b.w	df464 <_ZdlPvj>
	...

000dc4e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dc4e4:	4802      	ldr	r0, [pc, #8]	; (dc4f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   dc4e6:	2300      	movs	r3, #0
   dc4e8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   dc4ea:	f7ff bbe3 	b.w	dbcb4 <os_mutex_recursive_create>
   dc4ee:	bf00      	nop
   dc4f0:	2003e530 	.word	0x2003e530

000dc4f4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   dc4f4:	2200      	movs	r2, #0
   dc4f6:	6840      	ldr	r0, [r0, #4]
   dc4f8:	4611      	mov	r1, r2
   dc4fa:	f7ff bf1b 	b.w	dc334 <network_ready>

000dc4fe <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   dc4fe:	2200      	movs	r2, #0
   dc500:	6840      	ldr	r0, [r0, #4]
   dc502:	4611      	mov	r1, r2
   dc504:	f7ff bf36 	b.w	dc374 <network_listening>

000dc508 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   dc508:	2200      	movs	r2, #0
   dc50a:	6840      	ldr	r0, [r0, #4]
   dc50c:	4611      	mov	r1, r2
   dc50e:	f7ff bf41 	b.w	dc394 <network_get_listen_timeout>

000dc512 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dc512:	6840      	ldr	r0, [r0, #4]
   dc514:	2200      	movs	r2, #0
   dc516:	f7ff bf35 	b.w	dc384 <network_set_listen_timeout>

000dc51a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   dc51a:	6840      	ldr	r0, [r0, #4]
   dc51c:	2200      	movs	r2, #0
   dc51e:	f081 0101 	eor.w	r1, r1, #1
   dc522:	f7ff bf1f 	b.w	dc364 <network_listen>

000dc526 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   dc526:	2300      	movs	r3, #0
   dc528:	6840      	ldr	r0, [r0, #4]
   dc52a:	461a      	mov	r2, r3
   dc52c:	4619      	mov	r1, r3
   dc52e:	f7ff bf11 	b.w	dc354 <network_off>

000dc532 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   dc532:	2300      	movs	r3, #0
   dc534:	6840      	ldr	r0, [r0, #4]
   dc536:	461a      	mov	r2, r3
   dc538:	4619      	mov	r1, r3
   dc53a:	f7ff bf03 	b.w	dc344 <network_on>

000dc53e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   dc53e:	2200      	movs	r2, #0
   dc540:	6840      	ldr	r0, [r0, #4]
   dc542:	4611      	mov	r1, r2
   dc544:	f7ff bee6 	b.w	dc314 <network_connecting>

000dc548 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dc548:	6840      	ldr	r0, [r0, #4]
   dc54a:	2200      	movs	r2, #0
   dc54c:	2102      	movs	r1, #2
   dc54e:	f7ff bee9 	b.w	dc324 <network_disconnect>

000dc552 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   dc552:	2300      	movs	r3, #0
   dc554:	6840      	ldr	r0, [r0, #4]
   dc556:	461a      	mov	r2, r3
   dc558:	f7ff bed4 	b.w	dc304 <network_connect>

000dc55c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   dc55c:	4b08      	ldr	r3, [pc, #32]	; (dc580 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   dc55e:	b510      	push	{r4, lr}
   dc560:	2428      	movs	r4, #40	; 0x28
   dc562:	4622      	mov	r2, r4
   dc564:	4618      	mov	r0, r3
   dc566:	2100      	movs	r1, #0
   dc568:	f003 fd34 	bl	dffd4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   dc56c:	4b05      	ldr	r3, [pc, #20]	; (dc584 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   dc56e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   dc570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc574:	6042      	str	r2, [r0, #4]
   dc576:	2204      	movs	r2, #4
   dc578:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   dc57a:	4a03      	ldr	r2, [pc, #12]	; (dc588 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   dc57c:	601a      	str	r2, [r3, #0]
   dc57e:	bd10      	pop	{r4, pc}
   dc580:	2003e53c 	.word	0x2003e53c
   dc584:	2003e534 	.word	0x2003e534
   dc588:	000e2c2c 	.word	0x000e2c2c

000dc58c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dc58c:	4770      	bx	lr

000dc58e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   dc58e:	2000      	movs	r0, #0
   dc590:	4770      	bx	lr

000dc592 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dc592:	b510      	push	{r4, lr}
   dc594:	2110      	movs	r1, #16
   dc596:	4604      	mov	r4, r0
   dc598:	f002 ff64 	bl	df464 <_ZdlPvj>
   dc59c:	4620      	mov	r0, r4
   dc59e:	bd10      	pop	{r4, pc}

000dc5a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   dc5a0:	b508      	push	{r3, lr}
      { delete this; }
   dc5a2:	f7ff fff6 	bl	dc592 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dc5a6:	bd08      	pop	{r3, pc}

000dc5a8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dc5a8:	b530      	push	{r4, r5, lr}
        type_(type) {
   dc5aa:	2200      	movs	r2, #0
   dc5ac:	f64f 749c 	movw	r4, #65436	; 0xff9c
   dc5b0:	6002      	str	r2, [r0, #0]
   dc5b2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   dc5b4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dc5b6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   dc5b8:	680c      	ldr	r4, [r1, #0]
   dc5ba:	8085      	strh	r5, [r0, #4]
   dc5bc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dc5be:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   dc5c0:	bd30      	pop	{r4, r5, pc}

000dc5c2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dc5c2:	b510      	push	{r4, lr}
   dc5c4:	4604      	mov	r4, r0
    free((void*)msg_);
   dc5c6:	6800      	ldr	r0, [r0, #0]
   dc5c8:	f7ff ff04 	bl	dc3d4 <free>
}
   dc5cc:	4620      	mov	r0, r4
   dc5ce:	bd10      	pop	{r4, pc}

000dc5d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   dc5d0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dc5d2:	68c4      	ldr	r4, [r0, #12]
   dc5d4:	b1f4      	cbz	r4, dc614 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   dc5d6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dc5d8:	2b02      	cmp	r3, #2
   dc5da:	d103      	bne.n	dc5e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dc5dc:	f104 000c 	add.w	r0, r4, #12
   dc5e0:	f7ff ffef 	bl	dc5c2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   dc5e4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   dc5e6:	b135      	cbz	r5, dc5f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   dc5e8:	4628      	mov	r0, r5
   dc5ea:	f7f7 fe7d 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   dc5ee:	2110      	movs	r1, #16
   dc5f0:	4628      	mov	r0, r5
   dc5f2:	f002 ff37 	bl	df464 <_ZdlPvj>
   dc5f6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dc5f8:	b135      	cbz	r5, dc608 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dc5fa:	4628      	mov	r0, r5
   dc5fc:	f7f7 fe74 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   dc600:	2110      	movs	r1, #16
   dc602:	4628      	mov	r0, r5
   dc604:	f002 ff2e 	bl	df464 <_ZdlPvj>
   dc608:	4620      	mov	r0, r4
   dc60a:	2114      	movs	r1, #20
   dc60c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc610:	f002 bf28 	b.w	df464 <_ZdlPvj>
   dc614:	bd38      	pop	{r3, r4, r5, pc}

000dc616 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   dc616:	b510      	push	{r4, lr}
   dc618:	b088      	sub	sp, #32
   dc61a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   dc61c:	4668      	mov	r0, sp
   dc61e:	f002 f96e 	bl	de8fe <_ZN6StringC1EPKc>
    return (*fn)(p);
   dc622:	4669      	mov	r1, sp
   dc624:	a804      	add	r0, sp, #16
   dc626:	f002 f9b5 	bl	de994 <_ZN6StringC1ERKS_>
   dc62a:	a804      	add	r0, sp, #16
   dc62c:	47a0      	blx	r4
   dc62e:	4604      	mov	r4, r0
   dc630:	a804      	add	r0, sp, #16
   dc632:	f002 f919 	bl	de868 <_ZN6StringD1Ev>
    String p(param);
   dc636:	4668      	mov	r0, sp
   dc638:	f002 f916 	bl	de868 <_ZN6StringD1Ev>
}
   dc63c:	4620      	mov	r0, r4
   dc63e:	b008      	add	sp, #32
   dc640:	bd10      	pop	{r4, pc}

000dc642 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   dc642:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   dc644:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   dc646:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   dc64a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   dc64c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   dc64e:	461a      	mov	r2, r3
   dc650:	4669      	mov	r1, sp
   dc652:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   dc654:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   dc658:	f8ad 4000 	strh.w	r4, [sp]
   dc65c:	f7ff fe0a 	bl	dc274 <spark_function>
}
   dc660:	b004      	add	sp, #16
   dc662:	bd10      	pop	{r4, pc}

000dc664 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   dc664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   dc666:	230c      	movs	r3, #12
   dc668:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   dc66c:	6803      	ldr	r3, [r0, #0]
   dc66e:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   dc672:	7a03      	ldrb	r3, [r0, #8]
   dc674:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   dc678:	6843      	ldr	r3, [r0, #4]
   dc67a:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   dc67c:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   dc67e:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   dc680:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   dc684:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   dc686:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   dc68a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   dc68e:	f7ff fe31 	bl	dc2f4 <spark_cloud_disconnect>
}
   dc692:	b005      	add	sp, #20
   dc694:	f85d fb04 	ldr.w	pc, [sp], #4

000dc698 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dc698:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dc69a:	460e      	mov	r6, r1
   dc69c:	4604      	mov	r4, r0
   dc69e:	f856 3b04 	ldr.w	r3, [r6], #4
   dc6a2:	9300      	str	r3, [sp, #0]
   dc6a4:	460d      	mov	r5, r1
   dc6a6:	a801      	add	r0, sp, #4
   dc6a8:	4631      	mov	r1, r6
   dc6aa:	f7fc fdaa 	bl	d9202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dc6ae:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dc6b0:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   dc6b2:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   dc6b4:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   dc6b6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   dc6b8:	2300      	movs	r3, #0
   dc6ba:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dc6bc:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   dc6be:	f7f8 fdbf 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc6c2:	4630      	mov	r0, r6
   dc6c4:	f7f8 fdbc 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   dc6c8:	4628      	mov	r0, r5
   dc6ca:	2108      	movs	r1, #8
   dc6cc:	f002 feca 	bl	df464 <_ZdlPvj>
        return p;
    }
   dc6d0:	4620      	mov	r0, r4
   dc6d2:	b002      	add	sp, #8
   dc6d4:	bd70      	pop	{r4, r5, r6, pc}

000dc6d6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   dc6d6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   dc6d8:	b510      	push	{r4, lr}
      if (_M_empty())
   dc6da:	b90a      	cbnz	r2, dc6e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dc6dc:	f002 fece 	bl	df47c <_ZSt25__throw_bad_function_callv>
    }
   dc6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc6e4:	68c3      	ldr	r3, [r0, #12]
   dc6e6:	4718      	bx	r3

000dc6e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dc6e8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   dc6ea:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   dc6ec:	f100 0110 	add.w	r1, r0, #16
   dc6f0:	f7ff fff1 	bl	dc6d6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   dc6f4:	bd08      	pop	{r3, pc}

000dc6f6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   dc6f6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   dc6f8:	b510      	push	{r4, lr}
      if (_M_empty())
   dc6fa:	b90a      	cbnz	r2, dc700 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dc6fc:	f002 febe 	bl	df47c <_ZSt25__throw_bad_function_callv>
    }
   dc700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc704:	68c3      	ldr	r3, [r0, #12]
   dc706:	4718      	bx	r3

000dc708 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dc708:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   dc70a:	6800      	ldr	r0, [r0, #0]
   dc70c:	f100 0110 	add.w	r1, r0, #16
   dc710:	f7ff fff1 	bl	dc6f6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   dc714:	bd08      	pop	{r3, pc}
	...

000dc718 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   dc718:	b538      	push	{r3, r4, r5, lr}
   dc71a:	2300      	movs	r3, #0
   dc71c:	4604      	mov	r4, r0
   dc71e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dc720:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   dc722:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dc724:	f7f7 fcb7 	bl	d4096 <_Znwj>
   dc728:	b128      	cbz	r0, dc736 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   dc72a:	2301      	movs	r3, #1
   dc72c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   dc730:	4b02      	ldr	r3, [pc, #8]	; (dc73c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dc732:	6003      	str	r3, [r0, #0]
   dc734:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dc736:	6020      	str	r0, [r4, #0]
	}
   dc738:	4620      	mov	r0, r4
   dc73a:	bd38      	pop	{r3, r4, r5, pc}
   dc73c:	000e2c68 	.word	0x000e2c68

000dc740 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   dc740:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   dc742:	2300      	movs	r3, #0
   dc744:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   dc746:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   dc748:	4604      	mov	r4, r0
   dc74a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   dc74c:	b12b      	cbz	r3, dc75a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dc74e:	2202      	movs	r2, #2
   dc750:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dc752:	68eb      	ldr	r3, [r5, #12]
   dc754:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dc756:	68ab      	ldr	r3, [r5, #8]
   dc758:	60a3      	str	r3, [r4, #8]
    }
   dc75a:	4620      	mov	r0, r4
   dc75c:	bd38      	pop	{r3, r4, r5, pc}
	...

000dc760 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   dc760:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc762:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   dc764:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dc766:	4668      	mov	r0, sp
   dc768:	f7ff ff1e 	bl	dc5a8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   dc76c:	f04f 0302 	mov.w	r3, #2
   dc770:	e8d4 2f4f 	ldrexb	r2, [r4]
   dc774:	2a00      	cmp	r2, #0
   dc776:	d103      	bne.n	dc780 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   dc778:	e8c4 3f41 	strexb	r1, r3, [r4]
   dc77c:	2900      	cmp	r1, #0
   dc77e:	d1f7      	bne.n	dc770 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   dc780:	d125      	bne.n	dc7ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   dc782:	f104 050c 	add.w	r5, r4, #12
   dc786:	4669      	mov	r1, sp
   dc788:	4628      	mov	r0, r5
   dc78a:	f7ff ff0d 	bl	dc5a8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   dc78e:	f3bf 8f5b 	dmb	ish
   dc792:	2301      	movs	r3, #1
   dc794:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   dc796:	2000      	movs	r0, #0
   dc798:	f104 0308 	add.w	r3, r4, #8
   dc79c:	f3bf 8f5b 	dmb	ish
   dc7a0:	e853 6f00 	ldrex	r6, [r3]
   dc7a4:	e843 0200 	strex	r2, r0, [r3]
   dc7a8:	2a00      	cmp	r2, #0
   dc7aa:	d1f9      	bne.n	dc7a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   dc7ac:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   dc7b0:	b16e      	cbz	r6, dc7ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   dc7b2:	f7ff fd19 	bl	dc1e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   dc7b6:	b178      	cbz	r0, dc7d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dc7b8:	4629      	mov	r1, r5
   dc7ba:	4630      	mov	r0, r6
   dc7bc:	f7ff ff8b 	bl	dc6d6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   dc7c0:	4630      	mov	r0, r6
   dc7c2:	f7f7 fd91 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   dc7c6:	2110      	movs	r1, #16
   dc7c8:	4630      	mov	r0, r6
   dc7ca:	f002 fe4b 	bl	df464 <_ZdlPvj>
        p_->setError(std::move(error));
   dc7ce:	4668      	mov	r0, sp
   dc7d0:	f7ff fef7 	bl	dc5c2 <_ZN8particle5ErrorD1Ev>
    }
   dc7d4:	b009      	add	sp, #36	; 0x24
   dc7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dc7d8:	4631      	mov	r1, r6
   dc7da:	a802      	add	r0, sp, #8
   dc7dc:	f7ff ffb0 	bl	dc740 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   dc7e0:	68e0      	ldr	r0, [r4, #12]
   dc7e2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dc7e6:	b108      	cbz	r0, dc7ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   dc7e8:	f003 fc62 	bl	e00b0 <strdup>
        type_(type) {
   dc7ec:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dc7ee:	2010      	movs	r0, #16
   dc7f0:	f8ad 501c 	strh.w	r5, [sp, #28]
   dc7f4:	f7f7 fc4f 	bl	d4096 <_Znwj>
   dc7f8:	4605      	mov	r5, r0
   dc7fa:	b1e8      	cbz	r0, dc838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   dc7fc:	2700      	movs	r7, #0
   dc7fe:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dc800:	2018      	movs	r0, #24
   dc802:	f7f7 fc48 	bl	d4096 <_Znwj>
   dc806:	4604      	mov	r4, r0
   dc808:	b188      	cbz	r0, dc82e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   dc80a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   dc80c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   dc80e:	a802      	add	r0, sp, #8
   dc810:	f7f7 ff34 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc814:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc816:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc818:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc81a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dc81c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dc81e:	a906      	add	r1, sp, #24
   dc820:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dc822:	60e3      	str	r3, [r4, #12]
   dc824:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   dc828:	9205      	str	r2, [sp, #20]
   dc82a:	f7ff febd 	bl	dc5a8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   dc82e:	4b08      	ldr	r3, [pc, #32]	; (dc850 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   dc830:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dc832:	4b08      	ldr	r3, [pc, #32]	; (dc854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dc834:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   dc836:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   dc838:	a806      	add	r0, sp, #24
   dc83a:	f7ff fec2 	bl	dc5c2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   dc83e:	a802      	add	r0, sp, #8
   dc840:	f7f7 fd52 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dc844:	2200      	movs	r2, #0
   dc846:	4629      	mov	r1, r5
   dc848:	4803      	ldr	r0, [pc, #12]	; (dc858 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   dc84a:	f7ff fcd5 	bl	dc1f8 <application_thread_invoke>
   dc84e:	e7b7      	b.n	dc7c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   dc850:	000dc6e9 	.word	0x000dc6e9
   dc854:	000dc981 	.word	0x000dc981
   dc858:	000dc4bb 	.word	0x000dc4bb

000dc85c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   dc85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc860:	b08a      	sub	sp, #40	; 0x28
   dc862:	4605      	mov	r5, r0
   dc864:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   dc868:	460c      	mov	r4, r1
   dc86a:	4617      	mov	r7, r2
   dc86c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dc86e:	f7ff fd19 	bl	dc2a4 <spark_cloud_flag_connected>
   dc872:	ae07      	add	r6, sp, #28
    if (!connected()) {
   dc874:	4682      	mov	sl, r0
   dc876:	bb38      	cbnz	r0, dc8c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   dc878:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dc87c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dc87e:	a905      	add	r1, sp, #20
   dc880:	4630      	mov	r0, r6
   dc882:	f8ad 3018 	strh.w	r3, [sp, #24]
   dc886:	f7ff fe8f 	bl	dc5a8 <_ZN8particle5ErrorC1EOS0_>
   dc88a:	2014      	movs	r0, #20
   dc88c:	f7f7 fc03 	bl	d4096 <_Znwj>
   dc890:	4604      	mov	r4, r0
   dc892:	b148      	cbz	r0, dc8a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dc894:	2302      	movs	r3, #2
   dc896:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dc898:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dc89a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dc89e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   dc8a0:	4631      	mov	r1, r6
   dc8a2:	300c      	adds	r0, #12
   dc8a4:	f7ff fe80 	bl	dc5a8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dc8a8:	4628      	mov	r0, r5
	: __shared_count(__p)
   dc8aa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dc8ac:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   dc8b0:	f7ff ff32 	bl	dc718 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dc8b4:	4630      	mov	r0, r6
   dc8b6:	f7ff fe84 	bl	dc5c2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dc8ba:	a805      	add	r0, sp, #20
   dc8bc:	f7ff fe81 	bl	dc5c2 <_ZN8particle5ErrorD1Ev>
}
   dc8c0:	4628      	mov	r0, r5
   dc8c2:	b00a      	add	sp, #40	; 0x28
   dc8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dc8c8:	230c      	movs	r3, #12
   dc8ca:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dc8ce:	2014      	movs	r0, #20
   dc8d0:	e9cd aa08 	strd	sl, sl, [sp, #32]
   dc8d4:	9307      	str	r3, [sp, #28]
   dc8d6:	f7f7 fbde 	bl	d4096 <_Znwj>
   dc8da:	4601      	mov	r1, r0
   dc8dc:	b128      	cbz	r0, dc8ea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dc8de:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   dc8e2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dc8e6:	f880 a001 	strb.w	sl, [r0, #1]
   dc8ea:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dc8ec:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   dc8ee:	f7ff ff13 	bl	dc718 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   dc8f2:	4b22      	ldr	r3, [pc, #136]	; (dc97c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   dc8f4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dc8f6:	2008      	movs	r0, #8
   dc8f8:	f7f7 fbcd 	bl	d4096 <_Znwj>
   dc8fc:	4682      	mov	sl, r0
   dc8fe:	b128      	cbz	r0, dc90c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dc900:	9b03      	ldr	r3, [sp, #12]
   dc902:	f840 3b04 	str.w	r3, [r0], #4
   dc906:	a904      	add	r1, sp, #16
   dc908:	f7fc fc7b 	bl	d9202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dc90c:	9600      	str	r6, [sp, #0]
   dc90e:	fa5f f389 	uxtb.w	r3, r9
   dc912:	4642      	mov	r2, r8
   dc914:	4639      	mov	r1, r7
   dc916:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   dc918:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dc91c:	f7ff fcca 	bl	dc2b4 <spark_send_event>
   dc920:	b9b8      	cbnz	r0, dc952 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   dc922:	9b03      	ldr	r3, [sp, #12]
   dc924:	785b      	ldrb	r3, [r3, #1]
   dc926:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dc92a:	b993      	cbnz	r3, dc952 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   dc92c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   dc930:	a905      	add	r1, sp, #20
   dc932:	a803      	add	r0, sp, #12
   dc934:	9205      	str	r2, [sp, #20]
   dc936:	f8ad 3018 	strh.w	r3, [sp, #24]
   dc93a:	f7ff ff11 	bl	dc760 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dc93e:	a805      	add	r0, sp, #20
   dc940:	f7ff fe3f 	bl	dc5c2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dc944:	a805      	add	r0, sp, #20
   dc946:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc948:	f7ff fea6 	bl	dc698 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   dc94c:	a806      	add	r0, sp, #24
   dc94e:	f7f8 fc77 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dc952:	9b03      	ldr	r3, [sp, #12]
   dc954:	9305      	str	r3, [sp, #20]
   dc956:	a904      	add	r1, sp, #16
   dc958:	a806      	add	r0, sp, #24
   dc95a:	f7fc fc52 	bl	d9202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   dc95e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dc960:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   dc962:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   dc964:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   dc966:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   dc968:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   dc96a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   dc96c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   dc96e:	f7f8 fc67 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc972:	a804      	add	r0, sp, #16
   dc974:	f7f8 fc64 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   dc978:	e7a2      	b.n	dc8c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   dc97a:	bf00      	nop
   dc97c:	000dca45 	.word	0x000dca45

000dc980 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   dc980:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dc982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc984:	4605      	mov	r5, r0
	  switch (__op)
   dc986:	d007      	beq.n	dc998 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   dc988:	2a03      	cmp	r2, #3
   dc98a:	d018      	beq.n	dc9be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   dc98c:	2a01      	cmp	r2, #1
   dc98e:	d101      	bne.n	dc994 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   dc990:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dc992:	6003      	str	r3, [r0, #0]
	}
   dc994:	2000      	movs	r0, #0
   dc996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   dc998:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   dc99a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   dc99c:	f7f7 fb7b 	bl	d4096 <_Znwj>
   dc9a0:	4604      	mov	r4, r0
   dc9a2:	b150      	cbz	r0, dc9ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dc9a4:	4631      	mov	r1, r6
   dc9a6:	f7ff fecb 	bl	dc740 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   dc9aa:	6930      	ldr	r0, [r6, #16]
   dc9ac:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dc9b0:	b108      	cbz	r0, dc9b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   dc9b2:	f003 fb7d 	bl	e00b0 <strdup>
        type_(type) {
   dc9b6:	6120      	str	r0, [r4, #16]
   dc9b8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   dc9ba:	602c      	str	r4, [r5, #0]
	}
   dc9bc:	e7ea      	b.n	dc994 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   dc9be:	6804      	ldr	r4, [r0, #0]
   dc9c0:	2c00      	cmp	r4, #0
   dc9c2:	d0e7      	beq.n	dc994 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   dc9c4:	f104 0010 	add.w	r0, r4, #16
   dc9c8:	f7ff fdfb 	bl	dc5c2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   dc9cc:	4620      	mov	r0, r4
   dc9ce:	f7f7 fc8b 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   dc9d2:	2118      	movs	r1, #24
   dc9d4:	4620      	mov	r0, r4
   dc9d6:	f002 fd45 	bl	df464 <_ZdlPvj>
   dc9da:	e7db      	b.n	dc994 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000dc9dc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   dc9dc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   dc9de:	2300      	movs	r3, #0
   dc9e0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   dc9e2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   dc9e4:	4604      	mov	r4, r0
   dc9e6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   dc9e8:	b12b      	cbz	r3, dc9f6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dc9ea:	2202      	movs	r2, #2
   dc9ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dc9ee:	68eb      	ldr	r3, [r5, #12]
   dc9f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dc9f2:	68ab      	ldr	r3, [r5, #8]
   dc9f4:	60a3      	str	r3, [r4, #8]
    }
   dc9f6:	4620      	mov	r0, r4
   dc9f8:	bd38      	pop	{r3, r4, r5, pc}

000dc9fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   dc9fa:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dc9fc:	b570      	push	{r4, r5, r6, lr}
   dc9fe:	4604      	mov	r4, r0
	  switch (__op)
   dca00:	d007      	beq.n	dca12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   dca02:	2a03      	cmp	r2, #3
   dca04:	d012      	beq.n	dca2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   dca06:	2a01      	cmp	r2, #1
   dca08:	d101      	bne.n	dca0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   dca0a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dca0c:	6003      	str	r3, [r0, #0]
	}
   dca0e:	2000      	movs	r0, #0
   dca10:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   dca12:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   dca14:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   dca16:	f7f7 fb3e 	bl	d4096 <_Znwj>
   dca1a:	4605      	mov	r5, r0
   dca1c:	b120      	cbz	r0, dca28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   dca1e:	4631      	mov	r1, r6
   dca20:	f7ff ffdc 	bl	dc9dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dca24:	7c33      	ldrb	r3, [r6, #16]
   dca26:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   dca28:	6025      	str	r5, [r4, #0]
	}
   dca2a:	e7f0      	b.n	dca0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   dca2c:	6804      	ldr	r4, [r0, #0]
   dca2e:	2c00      	cmp	r4, #0
   dca30:	d0ed      	beq.n	dca0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   dca32:	4620      	mov	r0, r4
   dca34:	f7f7 fc58 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   dca38:	2114      	movs	r1, #20
   dca3a:	4620      	mov	r0, r4
   dca3c:	f002 fd12 	bl	df464 <_ZdlPvj>
   dca40:	e7e5      	b.n	dca0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000dca44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dca44:	b5f0      	push	{r4, r5, r6, r7, lr}
   dca46:	b089      	sub	sp, #36	; 0x24
   dca48:	4604      	mov	r4, r0
   dca4a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dca4c:	a801      	add	r0, sp, #4
   dca4e:	4611      	mov	r1, r2
   dca50:	f7ff fe22 	bl	dc698 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dca54:	b1a4      	cbz	r4, dca80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   dca56:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dca58:	b11d      	cbz	r5, dca62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   dca5a:	4628      	mov	r0, r5
   dca5c:	f003 fb28 	bl	e00b0 <strdup>
   dca60:	4605      	mov	r5, r0
   dca62:	a801      	add	r0, sp, #4
   dca64:	a903      	add	r1, sp, #12
        type_(type) {
   dca66:	9503      	str	r5, [sp, #12]
   dca68:	f8ad 4010 	strh.w	r4, [sp, #16]
   dca6c:	f7ff fe78 	bl	dc760 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dca70:	a803      	add	r0, sp, #12
   dca72:	f7ff fda6 	bl	dc5c2 <_ZN8particle5ErrorD1Ev>
   dca76:	a802      	add	r0, sp, #8
   dca78:	f7f8 fbe2 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dca7c:	b009      	add	sp, #36	; 0x24
   dca7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   dca80:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   dca82:	2301      	movs	r3, #1
   dca84:	e8d5 2f4f 	ldrexb	r2, [r5]
   dca88:	2a00      	cmp	r2, #0
   dca8a:	d103      	bne.n	dca94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   dca8c:	e8c5 3f41 	strexb	r1, r3, [r5]
   dca90:	2900      	cmp	r1, #0
   dca92:	d1f7      	bne.n	dca84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   dca94:	d1ef      	bne.n	dca76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   dca96:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   dca98:	f3bf 8f5b 	dmb	ish
   dca9c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   dca9e:	1d2b      	adds	r3, r5, #4
   dcaa0:	f3bf 8f5b 	dmb	ish
   dcaa4:	e853 6f00 	ldrex	r6, [r3]
   dcaa8:	e843 4200 	strex	r2, r4, [r3]
   dcaac:	2a00      	cmp	r2, #0
   dcaae:	d1f9      	bne.n	dcaa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   dcab0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   dcab4:	2e00      	cmp	r6, #0
   dcab6:	d0de      	beq.n	dca76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   dcab8:	4620      	mov	r0, r4
   dcaba:	f7ff fb95 	bl	dc1e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   dcabe:	4607      	mov	r7, r0
   dcac0:	b160      	cbz	r0, dcadc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dcac2:	f105 010c 	add.w	r1, r5, #12
   dcac6:	4630      	mov	r0, r6
   dcac8:	f7ff fe15 	bl	dc6f6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   dcacc:	4630      	mov	r0, r6
   dcace:	f7f7 fc0b 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   dcad2:	2110      	movs	r1, #16
   dcad4:	4630      	mov	r0, r6
   dcad6:	f002 fcc5 	bl	df464 <_ZdlPvj>
   dcada:	e7cc      	b.n	dca76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dcadc:	4631      	mov	r1, r6
   dcade:	a803      	add	r0, sp, #12
   dcae0:	f7ff ff7c 	bl	dc9dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dcae4:	7b2b      	ldrb	r3, [r5, #12]
   dcae6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dcaea:	2010      	movs	r0, #16
   dcaec:	f7f7 fad3 	bl	d4096 <_Znwj>
   dcaf0:	4605      	mov	r5, r0
   dcaf2:	b1d0      	cbz	r0, dcb2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   dcaf4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dcaf6:	2014      	movs	r0, #20
   dcaf8:	f7f7 facd 	bl	d4096 <_Znwj>
   dcafc:	4604      	mov	r4, r0
   dcafe:	b178      	cbz	r0, dcb20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   dcb00:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   dcb02:	4601      	mov	r1, r0
   dcb04:	a803      	add	r0, sp, #12
   dcb06:	f7f7 fdb9 	bl	d467c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcb0a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dcb0c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dcb0e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcb10:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   dcb12:	9205      	str	r2, [sp, #20]
   dcb14:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dcb16:	60e3      	str	r3, [r4, #12]
   dcb18:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   dcb1c:	9206      	str	r2, [sp, #24]
   dcb1e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   dcb20:	4b06      	ldr	r3, [pc, #24]	; (dcb3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   dcb22:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dcb24:	4b06      	ldr	r3, [pc, #24]	; (dcb40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dcb26:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   dcb28:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   dcb2a:	a803      	add	r0, sp, #12
   dcb2c:	f7f7 fbdc 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dcb30:	2200      	movs	r2, #0
   dcb32:	4629      	mov	r1, r5
   dcb34:	4803      	ldr	r0, [pc, #12]	; (dcb44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   dcb36:	f7ff fb5f 	bl	dc1f8 <application_thread_invoke>
   dcb3a:	e7c7      	b.n	dcacc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   dcb3c:	000dc709 	.word	0x000dc709
   dcb40:	000dc9fb 	.word	0x000dc9fb
   dcb44:	000dc4bb 	.word	0x000dc4bb

000dcb48 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dcb48:	2200      	movs	r2, #0
   dcb4a:	6840      	ldr	r0, [r0, #4]
   dcb4c:	4611      	mov	r1, r2
   dcb4e:	f7ff bc11 	b.w	dc374 <network_listening>

000dcb52 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   dcb52:	2200      	movs	r2, #0
   dcb54:	6840      	ldr	r0, [r0, #4]
   dcb56:	4611      	mov	r1, r2
   dcb58:	f7ff bc1c 	b.w	dc394 <network_get_listen_timeout>

000dcb5c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dcb5c:	6840      	ldr	r0, [r0, #4]
   dcb5e:	2200      	movs	r2, #0
   dcb60:	f7ff bc10 	b.w	dc384 <network_set_listen_timeout>

000dcb64 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   dcb64:	6840      	ldr	r0, [r0, #4]
   dcb66:	2200      	movs	r2, #0
   dcb68:	f081 0101 	eor.w	r1, r1, #1
   dcb6c:	f7ff bbfa 	b.w	dc364 <network_listen>

000dcb70 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   dcb70:	2300      	movs	r3, #0
   dcb72:	6840      	ldr	r0, [r0, #4]
   dcb74:	461a      	mov	r2, r3
   dcb76:	4619      	mov	r1, r3
   dcb78:	f7ff bbec 	b.w	dc354 <network_off>

000dcb7c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   dcb7c:	2300      	movs	r3, #0
   dcb7e:	6840      	ldr	r0, [r0, #4]
   dcb80:	461a      	mov	r2, r3
   dcb82:	4619      	mov	r1, r3
   dcb84:	f7ff bbde 	b.w	dc344 <network_on>

000dcb88 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dcb88:	2200      	movs	r2, #0
   dcb8a:	6840      	ldr	r0, [r0, #4]
   dcb8c:	4611      	mov	r1, r2
   dcb8e:	f7ff bbd1 	b.w	dc334 <network_ready>

000dcb92 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   dcb92:	2200      	movs	r2, #0
   dcb94:	6840      	ldr	r0, [r0, #4]
   dcb96:	4611      	mov	r1, r2
   dcb98:	f7ff bbbc 	b.w	dc314 <network_connecting>

000dcb9c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dcb9c:	6840      	ldr	r0, [r0, #4]
   dcb9e:	2200      	movs	r2, #0
   dcba0:	2102      	movs	r1, #2
   dcba2:	f7ff bbbf 	b.w	dc324 <network_disconnect>

000dcba6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   dcba6:	2300      	movs	r3, #0
   dcba8:	6840      	ldr	r0, [r0, #4]
   dcbaa:	461a      	mov	r2, r3
   dcbac:	f7ff bbaa 	b.w	dc304 <network_connect>

000dcbb0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   dcbb0:	4b02      	ldr	r3, [pc, #8]	; (dcbbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   dcbb2:	2203      	movs	r2, #3
   dcbb4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   dcbb6:	4a02      	ldr	r2, [pc, #8]	; (dcbc0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   dcbb8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   dcbba:	4770      	bx	lr
   dcbbc:	2003e564 	.word	0x2003e564
   dcbc0:	000e2c84 	.word	0x000e2c84

000dcbc4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   dcbc4:	4770      	bx	lr

000dcbc6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   dcbc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcbc8:	4606      	mov	r6, r0
   dcbca:	4615      	mov	r5, r2
   dcbcc:	460c      	mov	r4, r1
   dcbce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dcbd0:	42bc      	cmp	r4, r7
   dcbd2:	d006      	beq.n	dcbe2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   dcbd4:	6833      	ldr	r3, [r6, #0]
   dcbd6:	f814 1b01 	ldrb.w	r1, [r4], #1
   dcbda:	689b      	ldr	r3, [r3, #8]
   dcbdc:	4630      	mov	r0, r6
   dcbde:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   dcbe0:	e7f6      	b.n	dcbd0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   dcbe2:	4628      	mov	r0, r5
   dcbe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dcbe6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   dcbe6:	7c00      	ldrb	r0, [r0, #16]
   dcbe8:	2200      	movs	r2, #0
   dcbea:	f7ff b91b 	b.w	dbe24 <hal_i2c_write>

000dcbee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   dcbee:	7c00      	ldrb	r0, [r0, #16]
   dcbf0:	2100      	movs	r1, #0
   dcbf2:	f7ff b91f 	b.w	dbe34 <hal_i2c_available>

000dcbf6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   dcbf6:	7c00      	ldrb	r0, [r0, #16]
   dcbf8:	2100      	movs	r1, #0
   dcbfa:	f7ff b923 	b.w	dbe44 <hal_i2c_read>

000dcbfe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   dcbfe:	7c00      	ldrb	r0, [r0, #16]
   dcc00:	2100      	movs	r1, #0
   dcc02:	f7ff b927 	b.w	dbe54 <hal_i2c_peek>

000dcc06 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   dcc06:	7c00      	ldrb	r0, [r0, #16]
   dcc08:	2100      	movs	r1, #0
   dcc0a:	f7ff b92b 	b.w	dbe64 <hal_i2c_flush>

000dcc0e <_ZN7TwoWireD0Ev>:
   dcc0e:	b510      	push	{r4, lr}
   dcc10:	2114      	movs	r1, #20
   dcc12:	4604      	mov	r4, r0
   dcc14:	f002 fc26 	bl	df464 <_ZdlPvj>
   dcc18:	4620      	mov	r0, r4
   dcc1a:	bd10      	pop	{r4, pc}

000dcc1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   dcc1c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   dcc1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dcc22:	4604      	mov	r4, r0
   dcc24:	4608      	mov	r0, r1
   dcc26:	2100      	movs	r1, #0
   dcc28:	e9c4 1301 	strd	r1, r3, [r4, #4]
   dcc2c:	4b03      	ldr	r3, [pc, #12]	; (dcc3c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   dcc2e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   dcc30:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   dcc32:	4611      	mov	r1, r2
   dcc34:	f7ff f926 	bl	dbe84 <hal_i2c_init>
}
   dcc38:	4620      	mov	r0, r4
   dcc3a:	bd10      	pop	{r4, pc}
   dcc3c:	000e2cc0 	.word	0x000e2cc0

000dcc40 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   dcc40:	2300      	movs	r3, #0
   dcc42:	7c00      	ldrb	r0, [r0, #16]
   dcc44:	461a      	mov	r2, r3
   dcc46:	4619      	mov	r1, r3
   dcc48:	f7ff b8d4 	b.w	dbdf4 <hal_i2c_begin>

000dcc4c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   dcc4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   dcc4e:	2200      	movs	r2, #0
   dcc50:	2314      	movs	r3, #20
   dcc52:	e9cd 2201 	strd	r2, r2, [sp, #4]
   dcc56:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   dcc5a:	780b      	ldrb	r3, [r1, #0]
   dcc5c:	f88d 3008 	strb.w	r3, [sp, #8]
   dcc60:	684b      	ldr	r3, [r1, #4]
   dcc62:	9303      	str	r3, [sp, #12]
   dcc64:	68cb      	ldr	r3, [r1, #12]
   dcc66:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   dcc68:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   dcc6a:	7a0b      	ldrb	r3, [r1, #8]
   dcc6c:	9305      	str	r3, [sp, #20]
   dcc6e:	a901      	add	r1, sp, #4
   dcc70:	f7ff f920 	bl	dbeb4 <hal_i2c_request_ex>
}
   dcc74:	b007      	add	sp, #28
   dcc76:	f85d fb04 	ldr.w	pc, [sp], #4

000dcc7a <_ZN7TwoWire11requestFromEhjh>:
{
   dcc7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   dcc7c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dcc7e:	f88d 1000 	strb.w	r1, [sp]
   dcc82:	f04f 0164 	mov.w	r1, #100	; 0x64
   dcc86:	9103      	str	r1, [sp, #12]
   dcc88:	bf18      	it	ne
   dcc8a:	2301      	movne	r3, #1
   dcc8c:	4669      	mov	r1, sp
    size_ = size;
   dcc8e:	9201      	str	r2, [sp, #4]
   dcc90:	f88d 3008 	strb.w	r3, [sp, #8]
   dcc94:	f7ff ffda 	bl	dcc4c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   dcc98:	b005      	add	sp, #20
   dcc9a:	f85d fb04 	ldr.w	pc, [sp], #4

000dcc9e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   dcc9e:	7c00      	ldrb	r0, [r0, #16]
   dcca0:	2200      	movs	r2, #0
   dcca2:	f7ff b8af 	b.w	dbe04 <hal_i2c_begin_transmission>

000dcca6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   dcca6:	7c00      	ldrb	r0, [r0, #16]
   dcca8:	2200      	movs	r2, #0
   dccaa:	f7ff b8b3 	b.w	dbe14 <hal_i2c_end_transmission>

000dccae <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   dccae:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   dccb0:	2100      	movs	r1, #0
   dccb2:	7c00      	ldrb	r0, [r0, #16]
   dccb4:	f7ff f8ee 	bl	dbe94 <hal_i2c_lock>
}
   dccb8:	fab0 f080 	clz	r0, r0
   dccbc:	0940      	lsrs	r0, r0, #5
   dccbe:	bd08      	pop	{r3, pc}

000dccc0 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   dccc0:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   dccc2:	2100      	movs	r1, #0
   dccc4:	7c00      	ldrb	r0, [r0, #16]
   dccc6:	f7ff f8ed 	bl	dbea4 <hal_i2c_unlock>
}
   dccca:	fab0 f080 	clz	r0, r0
   dccce:	0940      	lsrs	r0, r0, #5
   dccd0:	bd08      	pop	{r3, pc}

000dccd2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dccd2:	4770      	bx	lr

000dccd4 <_ZN9IPAddressD0Ev>:
   dccd4:	b510      	push	{r4, lr}
   dccd6:	2118      	movs	r1, #24
   dccd8:	4604      	mov	r4, r0
   dccda:	f002 fbc3 	bl	df464 <_ZdlPvj>
   dccde:	4620      	mov	r0, r4
   dcce0:	bd10      	pop	{r4, pc}

000dcce2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dcce2:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dcce4:	7d03      	ldrb	r3, [r0, #20]
   dcce6:	2b06      	cmp	r3, #6
{
   dcce8:	b08d      	sub	sp, #52	; 0x34
   dccea:	460e      	mov	r6, r1
   dccec:	f100 0704 	add.w	r7, r0, #4
   dccf0:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   dccf4:	d012      	beq.n	dcd1c <_ZNK9IPAddress7printToER5Print+0x3a>
   dccf6:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   dccfa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dccfe:	220a      	movs	r2, #10
   dcd00:	4630      	mov	r0, r6
   dcd02:	f001 fd52 	bl	de7aa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dcd06:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dcd08:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   dcd0a:	d019      	beq.n	dcd40 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   dcd0c:	2c00      	cmp	r4, #0
   dcd0e:	d0f4      	beq.n	dccfa <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   dcd10:	212e      	movs	r1, #46	; 0x2e
   dcd12:	4630      	mov	r0, r6
   dcd14:	f001 fd3a 	bl	de78c <_ZN5Print5printEc>
   dcd18:	4404      	add	r4, r0
   dcd1a:	e7ee      	b.n	dccfa <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dcd1c:	232f      	movs	r3, #47	; 0x2f
   dcd1e:	466a      	mov	r2, sp
   dcd20:	4639      	mov	r1, r7
   dcd22:	200a      	movs	r0, #10
		buf[0] = 0;
   dcd24:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dcd28:	f7ff f8cc 	bl	dbec4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   dcd2c:	4668      	mov	r0, sp
   dcd2e:	f003 f9dc 	bl	e00ea <strlen>
   dcd32:	6833      	ldr	r3, [r6, #0]
   dcd34:	4602      	mov	r2, r0
   dcd36:	68db      	ldr	r3, [r3, #12]
   dcd38:	4669      	mov	r1, sp
   dcd3a:	4630      	mov	r0, r6
   dcd3c:	4798      	blx	r3
   dcd3e:	4604      	mov	r4, r0
    }
    return n;
}
   dcd40:	4620      	mov	r0, r4
   dcd42:	b00d      	add	sp, #52	; 0x34
   dcd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dcd48 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   dcd48:	b510      	push	{r4, lr}
   dcd4a:	4b05      	ldr	r3, [pc, #20]	; (dcd60 <_ZN9IPAddressC1Ev+0x18>)
   dcd4c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dcd4e:	2211      	movs	r2, #17
   dcd50:	f840 3b04 	str.w	r3, [r0], #4
   dcd54:	2100      	movs	r1, #0
   dcd56:	f003 f93d 	bl	dffd4 <memset>
}
   dcd5a:	4620      	mov	r0, r4
   dcd5c:	bd10      	pop	{r4, pc}
   dcd5e:	bf00      	nop
   dcd60:	000e2ce8 	.word	0x000e2ce8

000dcd64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   dcd64:	4603      	mov	r3, r0
   dcd66:	4a07      	ldr	r2, [pc, #28]	; (dcd84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dcd68:	b510      	push	{r4, lr}
   dcd6a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   dcd6e:	f101 0210 	add.w	r2, r1, #16
   dcd72:	f851 4b04 	ldr.w	r4, [r1], #4
   dcd76:	f843 4b04 	str.w	r4, [r3], #4
   dcd7a:	4291      	cmp	r1, r2
   dcd7c:	d1f9      	bne.n	dcd72 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dcd7e:	780a      	ldrb	r2, [r1, #0]
   dcd80:	701a      	strb	r2, [r3, #0]
}
   dcd82:	bd10      	pop	{r4, pc}
   dcd84:	000e2ce8 	.word	0x000e2ce8

000dcd88 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   dcd88:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dcd8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dcd8e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dcd92:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dcd96:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   dcd9a:	2304      	movs	r3, #4
   dcd9c:	6041      	str	r1, [r0, #4]
   dcd9e:	7503      	strb	r3, [r0, #20]
}
   dcda0:	bd10      	pop	{r4, pc}

000dcda2 <_ZN9IPAddressaSEPKh>:
{
   dcda2:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dcda4:	78cb      	ldrb	r3, [r1, #3]
   dcda6:	9300      	str	r3, [sp, #0]
   dcda8:	788b      	ldrb	r3, [r1, #2]
   dcdaa:	784a      	ldrb	r2, [r1, #1]
   dcdac:	7809      	ldrb	r1, [r1, #0]
   dcdae:	f7ff ffeb 	bl	dcd88 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   dcdb2:	b002      	add	sp, #8
   dcdb4:	bd10      	pop	{r4, pc}

000dcdb6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   dcdb6:	f100 0310 	add.w	r3, r0, #16
   dcdba:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   dcdbc:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   dcdc0:	2901      	cmp	r1, #1
   dcdc2:	4618      	mov	r0, r3
   dcdc4:	d108      	bne.n	dcdd8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   dcdc6:	f853 1c04 	ldr.w	r1, [r3, #-4]
   dcdca:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   dcdce:	3a01      	subs	r2, #1
   dcdd0:	f103 0310 	add.w	r3, r3, #16
   dcdd4:	d1f2      	bne.n	dcdbc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   dcdd6:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   dcdd8:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   dcdda:	bf04      	itt	eq
   dcddc:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   dcde0:	1852      	addeq	r2, r2, r1
   dcde2:	e7f4      	b.n	dcdce <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000dcde4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dcde4:	4770      	bx	lr

000dcde6 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
   dcde6:	4770      	bx	lr

000dcde8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   dcde8:	2000      	movs	r0, #0
   dcdea:	4770      	bx	lr

000dcdec <_ZN5spark16JSONBufferWriterD0Ev>:
   dcdec:	b510      	push	{r4, lr}
   dcdee:	2114      	movs	r1, #20
   dcdf0:	4604      	mov	r4, r0
   dcdf2:	f002 fb37 	bl	df464 <_ZdlPvj>
   dcdf6:	4620      	mov	r0, r4
   dcdf8:	bd10      	pop	{r4, pc}

000dcdfa <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dcdfa:	b510      	push	{r4, lr}
   dcdfc:	2110      	movs	r1, #16
   dcdfe:	4604      	mov	r4, r0
   dce00:	f002 fb30 	bl	df464 <_ZdlPvj>
   dce04:	4620      	mov	r0, r4
   dce06:	bd10      	pop	{r4, pc}

000dce08 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   dce08:	b508      	push	{r3, lr}
      { delete this; }
   dce0a:	f7ff fff6 	bl	dcdfa <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dce0e:	bd08      	pop	{r3, pc}

000dce10 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   dce10:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   dce12:	68c4      	ldr	r4, [r0, #12]
   dce14:	b17c      	cbz	r4, dce36 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   dce16:	6820      	ldr	r0, [r4, #0]
   dce18:	b108      	cbz	r0, dce1e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   dce1a:	f7f7 f942 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   dce1e:	7a23      	ldrb	r3, [r4, #8]
   dce20:	b11b      	cbz	r3, dce2a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   dce22:	6860      	ldr	r0, [r4, #4]
   dce24:	b108      	cbz	r0, dce2a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   dce26:	f7f7 f93c 	bl	d40a2 <_ZdaPv>
   dce2a:	4620      	mov	r0, r4
   dce2c:	210c      	movs	r1, #12
   dce2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dce32:	f002 bb17 	b.w	df464 <_ZdlPvj>
   dce36:	bd10      	pop	{r4, pc}

000dce38 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   dce38:	b538      	push	{r3, r4, r5, lr}
   dce3a:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   dce3c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   dce40:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   dce42:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   dce44:	d207      	bcs.n	dce56 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   dce46:	1ad2      	subs	r2, r2, r3
   dce48:	6880      	ldr	r0, [r0, #8]
   dce4a:	42aa      	cmp	r2, r5
   dce4c:	bf28      	it	cs
   dce4e:	462a      	movcs	r2, r5
   dce50:	4418      	add	r0, r3
   dce52:	f003 f897 	bl	dff84 <memcpy>
    }
    n_ += size;
   dce56:	6922      	ldr	r2, [r4, #16]
   dce58:	442a      	add	r2, r5
   dce5a:	6122      	str	r2, [r4, #16]
}
   dce5c:	bd38      	pop	{r3, r4, r5, pc}

000dce5e <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   dce5e:	b40e      	push	{r1, r2, r3}
   dce60:	b517      	push	{r0, r1, r2, r4, lr}
   dce62:	ab05      	add	r3, sp, #20
   dce64:	4604      	mov	r4, r0
   dce66:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   dce6a:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   dce6c:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   dce6e:	6903      	ldr	r3, [r0, #16]
   dce70:	6880      	ldr	r0, [r0, #8]
   dce72:	428b      	cmp	r3, r1
   dce74:	bf38      	it	cc
   dce76:	1ac9      	subcc	r1, r1, r3
   dce78:	4418      	add	r0, r3
   dce7a:	bf28      	it	cs
   dce7c:	2100      	movcs	r1, #0
   dce7e:	9b01      	ldr	r3, [sp, #4]
   dce80:	f7ff fad0 	bl	dc424 <vsnprintf>
    va_end(args);
    n_ += n;
   dce84:	6923      	ldr	r3, [r4, #16]
   dce86:	4418      	add	r0, r3
   dce88:	6120      	str	r0, [r4, #16]
}
   dce8a:	b003      	add	sp, #12
   dce8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dce90:	b003      	add	sp, #12
   dce92:	4770      	bx	lr

000dce94 <_ZN5spark10JSONWriter6printfEPKcz>:
void spark::JSONWriter::printf(const char *fmt, ...) {
   dce94:	b40e      	push	{r1, r2, r3}
   dce96:	b5f0      	push	{r4, r5, r6, r7, lr}
   dce98:	b088      	sub	sp, #32
   dce9a:	af00      	add	r7, sp, #0
   dce9c:	f107 0534 	add.w	r5, r7, #52	; 0x34
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dcea0:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   dcea2:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dcea6:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   dcea8:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dceaa:	462b      	mov	r3, r5
   dceac:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   dceae:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dceb0:	f7ff fab8 	bl	dc424 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   dceb4:	280f      	cmp	r0, #15
   dceb6:	687a      	ldr	r2, [r7, #4]
   dceb8:	d91a      	bls.n	dcef0 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   dceba:	f100 0308 	add.w	r3, r0, #8
   dcebe:	f023 0307 	bic.w	r3, r3, #7
        }
   dcec2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   dcec4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dcec8:	1c41      	adds	r1, r0, #1
   dceca:	462b      	mov	r3, r5
   dcecc:	4668      	mov	r0, sp
        va_start(args, fmt);
   dcece:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dced0:	f7ff faa8 	bl	dc424 <vsnprintf>
        if (n > 0) {
   dced4:	1e02      	subs	r2, r0, #0
   dced6:	dd04      	ble.n	dcee2 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   dced8:	6823      	ldr	r3, [r4, #0]
   dceda:	4669      	mov	r1, sp
   dcedc:	689b      	ldr	r3, [r3, #8]
   dcede:	4620      	mov	r0, r4
   dcee0:	4798      	blx	r3
   dcee2:	46b5      	mov	sp, r6
}
   dcee4:	3720      	adds	r7, #32
   dcee6:	46bd      	mov	sp, r7
   dcee8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   dceec:	b003      	add	sp, #12
   dceee:	4770      	bx	lr
    } else if (n > 0) {
   dcef0:	2800      	cmp	r0, #0
   dcef2:	d0f7      	beq.n	dcee4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   dcef4:	6823      	ldr	r3, [r4, #0]
   dcef6:	4602      	mov	r2, r0
   dcef8:	689b      	ldr	r3, [r3, #8]
   dcefa:	f107 0110 	add.w	r1, r7, #16
   dcefe:	4620      	mov	r0, r4
   dcf00:	4798      	blx	r3
}
   dcf02:	e7ef      	b.n	dcee4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000dcf04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dcf04:	b510      	push	{r4, lr}
          _M_dispose();
   dcf06:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dcf08:	4604      	mov	r4, r0
          _M_dispose();
   dcf0a:	689b      	ldr	r3, [r3, #8]
   dcf0c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dcf0e:	68a3      	ldr	r3, [r4, #8]
   dcf10:	3b01      	subs	r3, #1
   dcf12:	60a3      	str	r3, [r4, #8]
   dcf14:	b92b      	cbnz	r3, dcf22 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   dcf16:	6823      	ldr	r3, [r4, #0]
   dcf18:	4620      	mov	r0, r4
   dcf1a:	68db      	ldr	r3, [r3, #12]
    }
   dcf1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   dcf20:	4718      	bx	r3
    }
   dcf22:	bd10      	pop	{r4, pc}

000dcf24 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   dcf24:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   dcf26:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   dcf28:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   dcf2c:	689b      	ldr	r3, [r3, #8]
   dcf2e:	2201      	movs	r2, #1
   dcf30:	f10d 0107 	add.w	r1, sp, #7
   dcf34:	4798      	blx	r3
}
   dcf36:	b003      	add	sp, #12
   dcf38:	f85d fb04 	ldr.w	pc, [sp], #4

000dcf3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   dcf3c:	b538      	push	{r3, r4, r5, lr}
   dcf3e:	680b      	ldr	r3, [r1, #0]
   dcf40:	6003      	str	r3, [r0, #0]
   dcf42:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   dcf44:	6843      	ldr	r3, [r0, #4]
   dcf46:	429d      	cmp	r5, r3
    class __shared_ptr
   dcf48:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   dcf4a:	d00c      	beq.n	dcf66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   dcf4c:	b115      	cbz	r5, dcf54 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   dcf4e:	686b      	ldr	r3, [r5, #4]
   dcf50:	3301      	adds	r3, #1
   dcf52:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   dcf54:	6860      	ldr	r0, [r4, #4]
   dcf56:	b128      	cbz	r0, dcf64 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   dcf58:	6843      	ldr	r3, [r0, #4]
   dcf5a:	3b01      	subs	r3, #1
   dcf5c:	6043      	str	r3, [r0, #4]
   dcf5e:	b90b      	cbnz	r3, dcf64 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   dcf60:	f7ff ffd0 	bl	dcf04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   dcf64:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   dcf66:	4620      	mov	r0, r4
   dcf68:	bd38      	pop	{r3, r4, r5, pc}

000dcf6a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   dcf6a:	460b      	mov	r3, r1
   dcf6c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   dcf6e:	2200      	movs	r2, #0
   dcf70:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   dcf72:	e9c0 2200 	strd	r2, r2, [r0]
   dcf76:	4604      	mov	r4, r0
        t_ = t;
   dcf78:	6083      	str	r3, [r0, #8]
    if (t) {
   dcf7a:	b90b      	cbnz	r3, dcf80 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   dcf7c:	4620      	mov	r0, r4
   dcf7e:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   dcf80:	f7ff ffdc 	bl	dcf3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   dcf84:	e7fa      	b.n	dcf7c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000dcf86 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   dcf86:	6883      	ldr	r3, [r0, #8]
   dcf88:	b1eb      	cbz	r3, dcfc6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   dcf8a:	781a      	ldrb	r2, [r3, #0]
   dcf8c:	2a03      	cmp	r2, #3
   dcf8e:	d81a      	bhi.n	dcfc6 <_ZNK5spark9JSONValue4typeEv+0x40>
   dcf90:	e8df f002 	tbb	[pc, r2]
   dcf94:	1b021704 	.word	0x1b021704
   dcf98:	2005      	movs	r0, #5
   dcf9a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   dcf9c:	6802      	ldr	r2, [r0, #0]
   dcf9e:	685b      	ldr	r3, [r3, #4]
   dcfa0:	6852      	ldr	r2, [r2, #4]
   dcfa2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   dcfa4:	282d      	cmp	r0, #45	; 0x2d
   dcfa6:	d012      	beq.n	dcfce <_ZNK5spark9JSONValue4typeEv+0x48>
   dcfa8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dcfac:	2b09      	cmp	r3, #9
   dcfae:	d90e      	bls.n	dcfce <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   dcfb0:	2874      	cmp	r0, #116	; 0x74
   dcfb2:	d00e      	beq.n	dcfd2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   dcfb4:	2866      	cmp	r0, #102	; 0x66
   dcfb6:	d00c      	beq.n	dcfd2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   dcfb8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   dcfbc:	4258      	negs	r0, r3
   dcfbe:	4158      	adcs	r0, r3
   dcfc0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   dcfc2:	2006      	movs	r0, #6
   dcfc4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   dcfc6:	2000      	movs	r0, #0
   dcfc8:	4770      	bx	lr
        return JSON_TYPE_STRING;
   dcfca:	2004      	movs	r0, #4
   dcfcc:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   dcfce:	2003      	movs	r0, #3
   dcfd0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   dcfd2:	2002      	movs	r0, #2
}
   dcfd4:	4770      	bx	lr
	...

000dcfd8 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   dcfd8:	b510      	push	{r4, lr}
   dcfda:	4604      	mov	r4, r0
    switch (type()) {
   dcfdc:	f7ff ffd3 	bl	dcf86 <_ZNK5spark9JSONValue4typeEv>
   dcfe0:	2803      	cmp	r0, #3
   dcfe2:	d00d      	beq.n	dd000 <_ZNK5spark9JSONValue6toBoolEv+0x28>
   dcfe4:	2804      	cmp	r0, #4
   dcfe6:	d01e      	beq.n	dd026 <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   dcfe8:	2802      	cmp	r0, #2
   dcfea:	d12b      	bne.n	dd044 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   dcfec:	6822      	ldr	r2, [r4, #0]
   dcfee:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   dcff0:	6852      	ldr	r2, [r2, #4]
   dcff2:	685b      	ldr	r3, [r3, #4]
   dcff4:	5cd0      	ldrb	r0, [r2, r3]
   dcff6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   dcffa:	4258      	negs	r0, r3
   dcffc:	4158      	adcs	r0, r3
}
   dcffe:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   dd000:	68a3      	ldr	r3, [r4, #8]
   dd002:	6822      	ldr	r2, [r4, #0]
   dd004:	685b      	ldr	r3, [r3, #4]
   dd006:	6854      	ldr	r4, [r2, #4]
   dd008:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   dd00a:	490f      	ldr	r1, [pc, #60]	; (dd048 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   dd00c:	4620      	mov	r0, r4
   dd00e:	f003 f83d 	bl	e008c <strcmp>
   dd012:	2800      	cmp	r0, #0
   dd014:	d0f3      	beq.n	dcffe <_ZNK5spark9JSONValue6toBoolEv+0x26>
   dd016:	490d      	ldr	r1, [pc, #52]	; (dd04c <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   dd018:	4620      	mov	r0, r4
   dd01a:	f003 f837 	bl	e008c <strcmp>
   dd01e:	3800      	subs	r0, #0
   dd020:	bf18      	it	ne
   dd022:	2001      	movne	r0, #1
   dd024:	e7eb      	b.n	dcffe <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   dd026:	6822      	ldr	r2, [r4, #0]
   dd028:	68a3      	ldr	r3, [r4, #8]
   dd02a:	6852      	ldr	r2, [r2, #4]
   dd02c:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   dd02e:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   dd030:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   dd032:	2800      	cmp	r0, #0
   dd034:	d0e3      	beq.n	dcffe <_ZNK5spark9JSONValue6toBoolEv+0x26>
   dd036:	4906      	ldr	r1, [pc, #24]	; (dd050 <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   dd038:	4620      	mov	r0, r4
   dd03a:	f003 f827 	bl	e008c <strcmp>
   dd03e:	2800      	cmp	r0, #0
   dd040:	d1e3      	bne.n	dd00a <_ZNK5spark9JSONValue6toBoolEv+0x32>
   dd042:	e7dc      	b.n	dcffe <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   dd044:	2000      	movs	r0, #0
   dd046:	e7da      	b.n	dcffe <_ZNK5spark9JSONValue6toBoolEv+0x26>
   dd048:	000e2cf6 	.word	0x000e2cf6
   dd04c:	000e2cf4 	.word	0x000e2cf4
   dd050:	000e2cf8 	.word	0x000e2cf8

000dd054 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   dd054:	b510      	push	{r4, lr}
   dd056:	4604      	mov	r4, r0
    switch (type()) {
   dd058:	f7ff ff95 	bl	dcf86 <_ZNK5spark9JSONValue4typeEv>
   dd05c:	2802      	cmp	r0, #2
   dd05e:	d00e      	beq.n	dd07e <_ZNK5spark9JSONValue5toIntEv+0x2a>
   dd060:	1ec3      	subs	r3, r0, #3
   dd062:	b2db      	uxtb	r3, r3
   dd064:	2b01      	cmp	r3, #1
   dd066:	d814      	bhi.n	dd092 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   dd068:	6822      	ldr	r2, [r4, #0]
   dd06a:	68a3      	ldr	r3, [r4, #8]
   dd06c:	6850      	ldr	r0, [r2, #4]
   dd06e:	685b      	ldr	r3, [r3, #4]
}
   dd070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   dd074:	220a      	movs	r2, #10
   dd076:	2100      	movs	r1, #0
   dd078:	4418      	add	r0, r3
   dd07a:	f003 bf51 	b.w	e0f20 <strtol>
        const char* const s = d_->json + t_->start;
   dd07e:	6822      	ldr	r2, [r4, #0]
   dd080:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   dd082:	6852      	ldr	r2, [r2, #4]
   dd084:	685b      	ldr	r3, [r3, #4]
   dd086:	5cd0      	ldrb	r0, [r2, r3]
   dd088:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   dd08c:	4258      	negs	r0, r3
   dd08e:	4158      	adcs	r0, r3
}
   dd090:	bd10      	pop	{r4, pc}
    switch (type()) {
   dd092:	2000      	movs	r0, #0
   dd094:	e7fc      	b.n	dd090 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000dd098 <_ZNK5spark9JSONValue8toDoubleEv>:
double spark::JSONValue::toDouble() const {
   dd098:	b510      	push	{r4, lr}
   dd09a:	4604      	mov	r4, r0
    switch (type()) {
   dd09c:	f7ff ff73 	bl	dcf86 <_ZNK5spark9JSONValue4typeEv>
   dd0a0:	2802      	cmp	r0, #2
   dd0a2:	d00d      	beq.n	dd0c0 <_ZNK5spark9JSONValue8toDoubleEv+0x28>
   dd0a4:	1ec3      	subs	r3, r0, #3
   dd0a6:	b2db      	uxtb	r3, r3
   dd0a8:	2b01      	cmp	r3, #1
   dd0aa:	d810      	bhi.n	dd0ce <_ZNK5spark9JSONValue8toDoubleEv+0x36>
        const char* const s = d_->json + t_->start;
   dd0ac:	6822      	ldr	r2, [r4, #0]
   dd0ae:	68a3      	ldr	r3, [r4, #8]
   dd0b0:	6850      	ldr	r0, [r2, #4]
   dd0b2:	685b      	ldr	r3, [r3, #4]
}
   dd0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtod(s, nullptr);
   dd0b8:	2100      	movs	r1, #0
   dd0ba:	4418      	add	r0, r3
   dd0bc:	f003 be7e 	b.w	e0dbc <strtod>
        const char* const s = d_->json + t_->start;
   dd0c0:	6822      	ldr	r2, [r4, #0]
   dd0c2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   dd0c4:	6852      	ldr	r2, [r2, #4]
   dd0c6:	685b      	ldr	r3, [r3, #4]
   dd0c8:	5cd3      	ldrb	r3, [r2, r3]
   dd0ca:	2b74      	cmp	r3, #116	; 0x74
   dd0cc:	d002      	beq.n	dd0d4 <_ZNK5spark9JSONValue8toDoubleEv+0x3c>
    switch (type()) {
   dd0ce:	ed9f 0b04 	vldr	d0, [pc, #16]	; dd0e0 <_ZNK5spark9JSONValue8toDoubleEv+0x48>
}
   dd0d2:	bd10      	pop	{r4, pc}
        return *s == 't';
   dd0d4:	ed9f 0b04 	vldr	d0, [pc, #16]	; dd0e8 <_ZNK5spark9JSONValue8toDoubleEv+0x50>
   dd0d8:	e7fb      	b.n	dd0d2 <_ZNK5spark9JSONValue8toDoubleEv+0x3a>
   dd0da:	bf00      	nop
   dd0dc:	f3af 8000 	nop.w
	...
   dd0ec:	3ff00000 	.word	0x3ff00000

000dd0f0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   dd0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd0f4:	4699      	mov	r9, r3
   dd0f6:	b088      	sub	sp, #32
    parser.size = sizeof(jsmn_parser);
   dd0f8:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   dd0fa:	4607      	mov	r7, r0
   dd0fc:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   dd0fe:	eb0d 0003 	add.w	r0, sp, r3
   dd102:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   dd104:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   dd106:	9304      	str	r3, [sp, #16]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   dd108:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr);
   dd10a:	f7ff f803 	bl	dc114 <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   dd10e:	ab03      	add	r3, sp, #12
   dd110:	9301      	str	r3, [sp, #4]
    int nExt = -1;
   dd112:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   dd116:	9400      	str	r4, [sp, #0]
   dd118:	4623      	mov	r3, r4
   dd11a:	4642      	mov	r2, r8
   dd11c:	4639      	mov	r1, r7
   dd11e:	a804      	add	r0, sp, #16
    int nExt = -1;
   dd120:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   dd122:	f7fe ffff 	bl	dc124 <jsmn_parse_deprecated>
    if (n <= 0) {
   dd126:	1e05      	subs	r5, r0, #0
   dd128:	dd27      	ble.n	dd17a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
    if (nExt > n) {
   dd12a:	9803      	ldr	r0, [sp, #12]
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   dd12c:	4914      	ldr	r1, [pc, #80]	; (dd180 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
   dd12e:	4285      	cmp	r5, r0
   dd130:	bfb8      	it	lt
   dd132:	4605      	movlt	r5, r0
   dd134:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
   dd138:	bfac      	ite	ge
   dd13a:	4630      	movge	r0, r6
   dd13c:	0128      	lsllt	r0, r5, #4
   dd13e:	f002 f995 	bl	df46c <_ZnajRKSt9nothrow_t>
    if (!t) {
   dd142:	4606      	mov	r6, r0
   dd144:	b198      	cbz	r0, dd16e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
    jsmn_init(&parser, nullptr); // Reset parser
   dd146:	2100      	movs	r1, #0
   dd148:	a804      	add	r0, sp, #16
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   dd14a:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   dd14c:	f7fe ffe2 	bl	dc114 <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   dd150:	e9cd 5400 	strd	r5, r4, [sp]
   dd154:	4633      	mov	r3, r6
   dd156:	4642      	mov	r2, r8
   dd158:	4639      	mov	r1, r7
   dd15a:	a804      	add	r0, sp, #16
   dd15c:	f7fe ffe2 	bl	dc124 <jsmn_parse_deprecated>
   dd160:	42a0      	cmp	r0, r4
   dd162:	dd07      	ble.n	dd174 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
    *tokens = t.release();
   dd164:	f8ca 6000 	str.w	r6, [sl]
    return true;
   dd168:	2001      	movs	r0, #1
    *count = n;
   dd16a:	f8c9 5000 	str.w	r5, [r9]
}
   dd16e:	b008      	add	sp, #32
   dd170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	delete [] __ptr;
   dd174:	4630      	mov	r0, r6
   dd176:	f7f6 ff94 	bl	d40a2 <_ZdaPv>
      }
   dd17a:	4620      	mov	r0, r4
   dd17c:	e7f7      	b.n	dd16e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
   dd17e:	bf00      	nop
   dd180:	000e2f20 	.word	0x000e2f20

000dd184 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   dd184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   dd188:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   dd18a:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   dd18c:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   dd18e:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   dd190:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   dd192:	4607      	mov	r7, r0
    const char *s = s1;
   dd194:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   dd196:	4619      	mov	r1, r3
                    *str = 0x0d;
   dd198:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   dd19c:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   dd1a0:	42b4      	cmp	r4, r6
   dd1a2:	d063      	beq.n	dd26c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   dd1a4:	4625      	mov	r5, r4
   dd1a6:	f815 2b01 	ldrb.w	r2, [r5], #1
   dd1aa:	2a5c      	cmp	r2, #92	; 0x5c
   dd1ac:	d12b      	bne.n	dd206 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   dd1ae:	42a1      	cmp	r1, r4
   dd1b0:	d007      	beq.n	dd1c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   dd1b2:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   dd1b6:	4618      	mov	r0, r3
   dd1b8:	465a      	mov	r2, fp
   dd1ba:	f002 fef1 	bl	dffa0 <memmove>
   dd1be:	4603      	mov	r3, r0
                str += n;
   dd1c0:	445b      	add	r3, fp
            if (s == end) {
   dd1c2:	42b5      	cmp	r5, r6
   dd1c4:	d039      	beq.n	dd23a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   dd1c6:	7862      	ldrb	r2, [r4, #1]
   dd1c8:	2a75      	cmp	r2, #117	; 0x75
   dd1ca:	d12a      	bne.n	dd222 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   dd1cc:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   dd1ce:	1ab2      	subs	r2, r6, r2
   dd1d0:	2a03      	cmp	r2, #3
   dd1d2:	dd32      	ble.n	dd23a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   dd1d4:	1da0      	adds	r0, r4, #6
   dd1d6:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   dd1da:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   dd1de:	45ae      	cmp	lr, r5
   dd1e0:	d053      	beq.n	dd28a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   dd1e2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   dd1e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   dd1ea:	fa5f fb82 	uxtb.w	fp, r2
   dd1ee:	f1bb 0f09 	cmp.w	fp, #9
   dd1f2:	d905      	bls.n	dd200 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   dd1f4:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   dd1f8:	2a05      	cmp	r2, #5
   dd1fa:	d807      	bhi.n	dd20c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   dd1fc:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   dd200:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   dd204:	e7eb      	b.n	dd1de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   dd206:	4628      	mov	r0, r5
   dd208:	4604      	mov	r4, r0
   dd20a:	e7c9      	b.n	dd1a0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   dd20c:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   dd210:	2a05      	cmp	r2, #5
   dd212:	d812      	bhi.n	dd23a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   dd214:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   dd218:	e7f2      	b.n	dd200 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   dd21a:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   dd21e:	4601      	mov	r1, r0
   dd220:	e7f2      	b.n	dd208 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   dd222:	2a6e      	cmp	r2, #110	; 0x6e
   dd224:	d01c      	beq.n	dd260 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   dd226:	d80e      	bhi.n	dd246 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   dd228:	2a62      	cmp	r2, #98	; 0x62
   dd22a:	d013      	beq.n	dd254 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   dd22c:	d807      	bhi.n	dd23e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   dd22e:	2a2f      	cmp	r2, #47	; 0x2f
   dd230:	d011      	beq.n	dd256 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   dd232:	2a5c      	cmp	r2, #92	; 0x5c
   dd234:	d00f      	beq.n	dd256 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   dd236:	2a22      	cmp	r2, #34	; 0x22
   dd238:	d00d      	beq.n	dd256 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   dd23a:	2000      	movs	r0, #0
   dd23c:	e023      	b.n	dd286 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   dd23e:	2a66      	cmp	r2, #102	; 0x66
   dd240:	d1fb      	bne.n	dd23a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   dd242:	220c      	movs	r2, #12
   dd244:	e007      	b.n	dd256 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   dd246:	2a72      	cmp	r2, #114	; 0x72
   dd248:	d00d      	beq.n	dd266 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   dd24a:	2a74      	cmp	r2, #116	; 0x74
   dd24c:	d1f5      	bne.n	dd23a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   dd24e:	f883 a000 	strb.w	sl, [r3]
                    break;
   dd252:	e001      	b.n	dd258 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   dd254:	2208      	movs	r2, #8
   dd256:	701a      	strb	r2, [r3, #0]
                ++s;
   dd258:	1ca1      	adds	r1, r4, #2
                ++str;
   dd25a:	3301      	adds	r3, #1
                ++s;
   dd25c:	4608      	mov	r0, r1
   dd25e:	e7d3      	b.n	dd208 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   dd260:	f04f 020a 	mov.w	r2, #10
   dd264:	e7f7      	b.n	dd256 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   dd266:	f883 9000 	strb.w	r9, [r3]
                    break;
   dd26a:	e7f5      	b.n	dd258 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
    if (s != s1) {
   dd26c:	42a1      	cmp	r1, r4
   dd26e:	d006      	beq.n	dd27e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   dd270:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   dd272:	4618      	mov	r0, r3
   dd274:	4622      	mov	r2, r4
   dd276:	f002 fe93 	bl	dffa0 <memmove>
   dd27a:	4603      	mov	r3, r0
        str += n;
   dd27c:	4423      	add	r3, r4
    t->end = str - json; // Update string length
   dd27e:	eba3 0308 	sub.w	r3, r3, r8
   dd282:	60bb      	str	r3, [r7, #8]
    return true;
   dd284:	2001      	movs	r0, #1
}
   dd286:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   dd28a:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   dd28e:	d9c4      	bls.n	dd21a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   dd290:	4621      	mov	r1, r4
   dd292:	e7b9      	b.n	dd208 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000dd294 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   dd294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd296:	4604      	mov	r4, r0
   dd298:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   dd29a:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   dd29e:	2700      	movs	r7, #0
    while (t != end) {
   dd2a0:	42b4      	cmp	r4, r6
   dd2a2:	d010      	beq.n	dd2c6 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   dd2a4:	7823      	ldrb	r3, [r4, #0]
   dd2a6:	2b03      	cmp	r3, #3
   dd2a8:	d108      	bne.n	dd2bc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   dd2aa:	4629      	mov	r1, r5
   dd2ac:	4620      	mov	r0, r4
   dd2ae:	f7ff ff69 	bl	dd184 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   dd2b2:	b148      	cbz	r0, dd2c8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   dd2b4:	68a3      	ldr	r3, [r4, #8]
   dd2b6:	54ef      	strb	r7, [r5, r3]
        ++t;
   dd2b8:	3410      	adds	r4, #16
    while (t != end) {
   dd2ba:	e7f1      	b.n	dd2a0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   dd2bc:	2b00      	cmp	r3, #0
   dd2be:	d1fb      	bne.n	dd2b8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   dd2c0:	68a2      	ldr	r2, [r4, #8]
   dd2c2:	54ab      	strb	r3, [r5, r2]
   dd2c4:	e7f8      	b.n	dd2b8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   dd2c6:	2001      	movs	r0, #1
}
   dd2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000dd2cc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   dd2cc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dd2ce:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   dd2d0:	e9c0 3300 	strd	r3, r3, [r0]
   dd2d4:	4604      	mov	r4, r0
        n_(0) {
   dd2d6:	480e      	ldr	r0, [pc, #56]	; (dd310 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   dd2d8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   dd2dc:	b1a9      	cbz	r1, dd30a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   dd2de:	780b      	ldrb	r3, [r1, #0]
   dd2e0:	2b03      	cmp	r3, #3
   dd2e2:	d006      	beq.n	dd2f2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   dd2e4:	b98b      	cbnz	r3, dd30a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   dd2e6:	6813      	ldr	r3, [r2, #0]
   dd2e8:	6858      	ldr	r0, [r3, #4]
   dd2ea:	684b      	ldr	r3, [r1, #4]
   dd2ec:	5cc3      	ldrb	r3, [r0, r3]
   dd2ee:	2b6e      	cmp	r3, #110	; 0x6e
   dd2f0:	d007      	beq.n	dd302 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   dd2f2:	6813      	ldr	r3, [r2, #0]
   dd2f4:	684d      	ldr	r5, [r1, #4]
   dd2f6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   dd2f8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   dd2fa:	4428      	add	r0, r5
            n_ = t->end - t->start;
   dd2fc:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   dd2fe:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   dd300:	60e3      	str	r3, [r4, #12]
   dd302:	4611      	mov	r1, r2
   dd304:	4620      	mov	r0, r4
   dd306:	f7ff fe19 	bl	dcf3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dd30a:	4620      	mov	r0, r4
   dd30c:	bd38      	pop	{r3, r4, r5, pc}
   dd30e:	bf00      	nop
   dd310:	000e296f 	.word	0x000e296f

000dd314 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   dd314:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dd316:	2500      	movs	r5, #0
   dd318:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   dd31a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   dd31e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   dd322:	e9c0 5504 	strd	r5, r5, [r0, #16]
   dd326:	4604      	mov	r4, r0
   dd328:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   dd32a:	b14b      	cbz	r3, dd340 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   dd32c:	781a      	ldrb	r2, [r3, #0]
   dd32e:	2a01      	cmp	r2, #1
   dd330:	d106      	bne.n	dd340 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   dd332:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   dd336:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   dd338:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   dd33a:	6143      	str	r3, [r0, #20]
   dd33c:	f7ff fdfe 	bl	dcf3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dd340:	4620      	mov	r0, r4
   dd342:	bd38      	pop	{r3, r4, r5, pc}

000dd344 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   dd344:	b510      	push	{r4, lr}
    if (!n_) {
   dd346:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   dd348:	4604      	mov	r4, r0
    if (!n_) {
   dd34a:	b163      	cbz	r3, dd366 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   dd34c:	6880      	ldr	r0, [r0, #8]
   dd34e:	60e0      	str	r0, [r4, #12]
    --n_;
   dd350:	3b01      	subs	r3, #1
    ++t_;
   dd352:	3010      	adds	r0, #16
   dd354:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   dd356:	6120      	str	r0, [r4, #16]
    --n_;
   dd358:	6163      	str	r3, [r4, #20]
    if (n_) {
   dd35a:	b113      	cbz	r3, dd362 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   dd35c:	f7ff fd2b 	bl	dcdb6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   dd360:	60a0      	str	r0, [r4, #8]
    return true;
   dd362:	2001      	movs	r0, #1
   dd364:	e000      	b.n	dd368 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   dd366:	4618      	mov	r0, r3
}
   dd368:	bd10      	pop	{r4, pc}

000dd36a <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONArrayIterator::JSONArrayIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   dd36a:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dd36c:	2500      	movs	r5, #0
   dd36e:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   dd370:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   dd374:	e9c0 5502 	strd	r5, r5, [r0, #8]
   dd378:	4604      	mov	r4, r0
   dd37a:	4611      	mov	r1, r2
   dd37c:	6105      	str	r5, [r0, #16]
    if (t && t->type == JSMN_ARRAY) {
   dd37e:	b14b      	cbz	r3, dd394 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
   dd380:	781a      	ldrb	r2, [r3, #0]
   dd382:	2a02      	cmp	r2, #2
   dd384:	d106      	bne.n	dd394 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
        t_ = t + 1; // First element
   dd386:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of elements
   dd38a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First element
   dd38c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of elements
   dd38e:	6103      	str	r3, [r0, #16]
   dd390:	f7ff fdd4 	bl	dcf3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dd394:	4620      	mov	r0, r4
   dd396:	bd38      	pop	{r3, r4, r5, pc}

000dd398 <_ZN5spark17JSONArrayIterator4nextEv>:
bool spark::JSONArrayIterator::next() {
   dd398:	b510      	push	{r4, lr}
    if (!n_) {
   dd39a:	6903      	ldr	r3, [r0, #16]
bool spark::JSONArrayIterator::next() {
   dd39c:	4604      	mov	r4, r0
    if (!n_) {
   dd39e:	b14b      	cbz	r3, dd3b4 <_ZN5spark17JSONArrayIterator4nextEv+0x1c>
    v_ = t_;
   dd3a0:	6880      	ldr	r0, [r0, #8]
   dd3a2:	60e0      	str	r0, [r4, #12]
    --n_;
   dd3a4:	3b01      	subs	r3, #1
   dd3a6:	6123      	str	r3, [r4, #16]
    if (n_) {
   dd3a8:	b113      	cbz	r3, dd3b0 <_ZN5spark17JSONArrayIterator4nextEv+0x18>
        t_ = skipToken(t_);
   dd3aa:	f7ff fd04 	bl	dcdb6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   dd3ae:	60a0      	str	r0, [r4, #8]
    return true;
   dd3b0:	2001      	movs	r0, #1
   dd3b2:	e000      	b.n	dd3b6 <_ZN5spark17JSONArrayIterator4nextEv+0x1e>
        return false;
   dd3b4:	4618      	mov	r0, r3
}
   dd3b6:	bd10      	pop	{r4, pc}

000dd3b8 <_ZN5spark10JSONWriter8endArrayEv>:
spark::JSONWriter& spark::JSONWriter::endArray() {
   dd3b8:	b510      	push	{r4, lr}
    write(']');
   dd3ba:	215d      	movs	r1, #93	; 0x5d
spark::JSONWriter& spark::JSONWriter::endArray() {
   dd3bc:	4604      	mov	r4, r0
    write(']');
   dd3be:	f7ff fdb1 	bl	dcf24 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   dd3c2:	2301      	movs	r3, #1
   dd3c4:	7123      	strb	r3, [r4, #4]
}
   dd3c6:	4620      	mov	r0, r4
   dd3c8:	bd10      	pop	{r4, pc}

000dd3ca <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   dd3ca:	b510      	push	{r4, lr}
    write('}');
   dd3cc:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   dd3ce:	4604      	mov	r4, r0
    write('}');
   dd3d0:	f7ff fda8 	bl	dcf24 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   dd3d4:	2301      	movs	r3, #1
   dd3d6:	7123      	strb	r3, [r4, #4]
}
   dd3d8:	4620      	mov	r0, r4
   dd3da:	bd10      	pop	{r4, pc}

000dd3dc <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   dd3dc:	b508      	push	{r3, lr}
    switch (state_) {
   dd3de:	7903      	ldrb	r3, [r0, #4]
   dd3e0:	2b01      	cmp	r3, #1
   dd3e2:	d002      	beq.n	dd3ea <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   dd3e4:	2b02      	cmp	r3, #2
   dd3e6:	d004      	beq.n	dd3f2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   dd3e8:	bd08      	pop	{r3, pc}
        write(',');
   dd3ea:	212c      	movs	r1, #44	; 0x2c
        write(':');
   dd3ec:	f7ff fd9a 	bl	dcf24 <_ZN5spark10JSONWriter5writeEc>
}
   dd3f0:	e7fa      	b.n	dd3e8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   dd3f2:	213a      	movs	r1, #58	; 0x3a
   dd3f4:	e7fa      	b.n	dd3ec <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000dd3f6 <_ZN5spark10JSONWriter10beginArrayEv>:
spark::JSONWriter& spark::JSONWriter::beginArray() {
   dd3f6:	b510      	push	{r4, lr}
   dd3f8:	4604      	mov	r4, r0
    writeSeparator();
   dd3fa:	f7ff ffef 	bl	dd3dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('[');
   dd3fe:	4620      	mov	r0, r4
   dd400:	215b      	movs	r1, #91	; 0x5b
   dd402:	f7ff fd8f 	bl	dcf24 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   dd406:	2300      	movs	r3, #0
   dd408:	7123      	strb	r3, [r4, #4]
}
   dd40a:	4620      	mov	r0, r4
   dd40c:	bd10      	pop	{r4, pc}

000dd40e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   dd40e:	b510      	push	{r4, lr}
   dd410:	4604      	mov	r4, r0
    writeSeparator();
   dd412:	f7ff ffe3 	bl	dd3dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   dd416:	4620      	mov	r0, r4
   dd418:	217b      	movs	r1, #123	; 0x7b
   dd41a:	f7ff fd83 	bl	dcf24 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   dd41e:	2300      	movs	r3, #0
   dd420:	7123      	strb	r3, [r4, #4]
}
   dd422:	4620      	mov	r0, r4
   dd424:	bd10      	pop	{r4, pc}
	...

000dd428 <_ZN5spark10JSONWriter5valueEb>:
spark::JSONWriter& spark::JSONWriter::value(bool val) {
   dd428:	b538      	push	{r3, r4, r5, lr}
   dd42a:	4604      	mov	r4, r0
   dd42c:	460d      	mov	r5, r1
    writeSeparator();
   dd42e:	f7ff ffd5 	bl	dd3dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    if (val) {
   dd432:	6823      	ldr	r3, [r4, #0]
        write("true", 4);
   dd434:	689b      	ldr	r3, [r3, #8]
    if (val) {
   dd436:	b13d      	cbz	r5, dd448 <_ZN5spark10JSONWriter5valueEb+0x20>
        write("true", 4);
   dd438:	4905      	ldr	r1, [pc, #20]	; (dd450 <_ZN5spark10JSONWriter5valueEb+0x28>)
   dd43a:	2204      	movs	r2, #4
        write("false", 5);
   dd43c:	4620      	mov	r0, r4
   dd43e:	4798      	blx	r3
    state_ = NEXT;
   dd440:	2301      	movs	r3, #1
   dd442:	7123      	strb	r3, [r4, #4]
}
   dd444:	4620      	mov	r0, r4
   dd446:	bd38      	pop	{r3, r4, r5, pc}
        write("false", 5);
   dd448:	4902      	ldr	r1, [pc, #8]	; (dd454 <_ZN5spark10JSONWriter5valueEb+0x2c>)
   dd44a:	2205      	movs	r2, #5
   dd44c:	e7f6      	b.n	dd43c <_ZN5spark10JSONWriter5valueEb+0x14>
   dd44e:	bf00      	nop
   dd450:	000e2cfe 	.word	0x000e2cfe
   dd454:	000e2cf8 	.word	0x000e2cf8

000dd458 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   dd458:	b513      	push	{r0, r1, r4, lr}
   dd45a:	4604      	mov	r4, r0
   dd45c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   dd45e:	f7ff ffbd 	bl	dd3dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   dd462:	6823      	ldr	r3, [r4, #0]
   dd464:	9a01      	ldr	r2, [sp, #4]
   dd466:	68db      	ldr	r3, [r3, #12]
   dd468:	4903      	ldr	r1, [pc, #12]	; (dd478 <_ZN5spark10JSONWriter5valueEi+0x20>)
   dd46a:	4620      	mov	r0, r4
   dd46c:	4798      	blx	r3
    state_ = NEXT;
   dd46e:	2301      	movs	r3, #1
}
   dd470:	4620      	mov	r0, r4
    state_ = NEXT;
   dd472:	7123      	strb	r3, [r4, #4]
}
   dd474:	b002      	add	sp, #8
   dd476:	bd10      	pop	{r4, pc}
   dd478:	000e2379 	.word	0x000e2379

000dd47c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   dd47c:	b513      	push	{r0, r1, r4, lr}
   dd47e:	4604      	mov	r4, r0
   dd480:	9101      	str	r1, [sp, #4]
    writeSeparator();
   dd482:	f7ff ffab 	bl	dd3dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   dd486:	6823      	ldr	r3, [r4, #0]
   dd488:	9a01      	ldr	r2, [sp, #4]
   dd48a:	68db      	ldr	r3, [r3, #12]
   dd48c:	4903      	ldr	r1, [pc, #12]	; (dd49c <_ZN5spark10JSONWriter5valueEj+0x20>)
   dd48e:	4620      	mov	r0, r4
   dd490:	4798      	blx	r3
    state_ = NEXT;
   dd492:	2301      	movs	r3, #1
}
   dd494:	4620      	mov	r0, r4
    state_ = NEXT;
   dd496:	7123      	strb	r3, [r4, #4]
}
   dd498:	b002      	add	sp, #8
   dd49a:	bd10      	pop	{r4, pc}
   dd49c:	000e2636 	.word	0x000e2636

000dd4a0 <_ZN5spark10JSONWriter5valueEdi>:
spark::JSONWriter& spark::JSONWriter::value(double val, int precision) {
   dd4a0:	b510      	push	{r4, lr}
   dd4a2:	ed2d 8b02 	vpush	{d8}
   dd4a6:	eeb0 8a40 	vmov.f32	s16, s0
   dd4aa:	eef0 8a60 	vmov.f32	s17, s1
   dd4ae:	b084      	sub	sp, #16
   dd4b0:	4604      	mov	r4, r0
   dd4b2:	9103      	str	r1, [sp, #12]
    writeSeparator();
   dd4b4:	f7ff ff92 	bl	dd3dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%.*lf", precision, val);
   dd4b8:	ed8d 8b00 	vstr	d8, [sp]
   dd4bc:	6823      	ldr	r3, [r4, #0]
   dd4be:	9a03      	ldr	r2, [sp, #12]
   dd4c0:	68db      	ldr	r3, [r3, #12]
   dd4c2:	4905      	ldr	r1, [pc, #20]	; (dd4d8 <_ZN5spark10JSONWriter5valueEdi+0x38>)
   dd4c4:	4620      	mov	r0, r4
   dd4c6:	4798      	blx	r3
    state_ = NEXT;
   dd4c8:	2301      	movs	r3, #1
}
   dd4ca:	4620      	mov	r0, r4
    state_ = NEXT;
   dd4cc:	7123      	strb	r3, [r4, #4]
}
   dd4ce:	b004      	add	sp, #16
   dd4d0:	ecbd 8b02 	vpop	{d8}
   dd4d4:	bd10      	pop	{r4, pc}
   dd4d6:	bf00      	nop
   dd4d8:	000e2d03 	.word	0x000e2d03

000dd4dc <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   dd4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd4de:	4604      	mov	r4, r0
   dd4e0:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   dd4e4:	f7ff ff7a 	bl	dd3dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   dd4e8:	6823      	ldr	r3, [r4, #0]
   dd4ea:	4905      	ldr	r1, [pc, #20]	; (dd500 <_ZN5spark10JSONWriter5valueEd+0x24>)
   dd4ec:	68dd      	ldr	r5, [r3, #12]
   dd4ee:	4620      	mov	r0, r4
   dd4f0:	463b      	mov	r3, r7
   dd4f2:	4632      	mov	r2, r6
   dd4f4:	47a8      	blx	r5
    state_ = NEXT;
   dd4f6:	2301      	movs	r3, #1
   dd4f8:	7123      	strb	r3, [r4, #4]
}
   dd4fa:	4620      	mov	r0, r4
   dd4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd4fe:	bf00      	nop
   dd500:	000e2d09 	.word	0x000e2d09

000dd504 <_ZN5spark10JSONWriter9nullValueEv>:
spark::JSONWriter& spark::JSONWriter::nullValue() {
   dd504:	b510      	push	{r4, lr}
   dd506:	4604      	mov	r4, r0
    writeSeparator();
   dd508:	f7ff ff68 	bl	dd3dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write("null", 4);
   dd50c:	6823      	ldr	r3, [r4, #0]
   dd50e:	4904      	ldr	r1, [pc, #16]	; (dd520 <_ZN5spark10JSONWriter9nullValueEv+0x1c>)
   dd510:	689b      	ldr	r3, [r3, #8]
   dd512:	4620      	mov	r0, r4
   dd514:	2204      	movs	r2, #4
   dd516:	4798      	blx	r3
    state_ = NEXT;
   dd518:	2301      	movs	r3, #1
   dd51a:	7123      	strb	r3, [r4, #4]
}
   dd51c:	4620      	mov	r0, r4
   dd51e:	bd10      	pop	{r4, pc}
   dd520:	000e2d0c 	.word	0x000e2d0c

000dd524 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   dd524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd528:	460d      	mov	r5, r1
   dd52a:	4617      	mov	r7, r2
    write('"');
   dd52c:	2122      	movs	r1, #34	; 0x22
                printf("u%04x", (unsigned)c);
   dd52e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; dd5d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   dd532:	4604      	mov	r4, r0
    const char* const end = str + size;
   dd534:	442f      	add	r7, r5
    write('"');
   dd536:	f7ff fcf5 	bl	dcf24 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   dd53a:	4629      	mov	r1, r5
    while (s != end) {
   dd53c:	42bd      	cmp	r5, r7
   dd53e:	462a      	mov	r2, r5
   dd540:	d038      	beq.n	dd5b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   dd542:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   dd546:	2e22      	cmp	r6, #34	; 0x22
   dd548:	d003      	beq.n	dd552 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   dd54a:	2e5c      	cmp	r6, #92	; 0x5c
   dd54c:	d001      	beq.n	dd552 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   dd54e:	2e1f      	cmp	r6, #31
   dd550:	d8f4      	bhi.n	dd53c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   dd552:	6823      	ldr	r3, [r4, #0]
   dd554:	1a52      	subs	r2, r2, r1
   dd556:	689b      	ldr	r3, [r3, #8]
   dd558:	4620      	mov	r0, r4
   dd55a:	4798      	blx	r3
            write('\\');
   dd55c:	215c      	movs	r1, #92	; 0x5c
   dd55e:	4620      	mov	r0, r4
   dd560:	f7ff fce0 	bl	dcf24 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   dd564:	2e0d      	cmp	r6, #13
   dd566:	d80a      	bhi.n	dd57e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   dd568:	2e07      	cmp	r6, #7
   dd56a:	d91c      	bls.n	dd5a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   dd56c:	f1a6 0308 	sub.w	r3, r6, #8
   dd570:	2b05      	cmp	r3, #5
   dd572:	d818      	bhi.n	dd5a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   dd574:	e8df f003 	tbb	[pc, r3]
   dd578:	17110f0d 	.word	0x17110f0d
   dd57c:	1513      	.short	0x1513
   dd57e:	2e22      	cmp	r6, #34	; 0x22
   dd580:	d001      	beq.n	dd586 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   dd582:	2e5c      	cmp	r6, #92	; 0x5c
   dd584:	d10f      	bne.n	dd5a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   dd586:	4631      	mov	r1, r6
                write('b');
   dd588:	4620      	mov	r0, r4
   dd58a:	f7ff fccb 	bl	dcf24 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   dd58e:	4629      	mov	r1, r5
    while (s != end) {
   dd590:	e7d4      	b.n	dd53c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   dd592:	2162      	movs	r1, #98	; 0x62
   dd594:	e7f8      	b.n	dd588 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   dd596:	2174      	movs	r1, #116	; 0x74
   dd598:	e7f6      	b.n	dd588 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   dd59a:	216e      	movs	r1, #110	; 0x6e
   dd59c:	e7f4      	b.n	dd588 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   dd59e:	2166      	movs	r1, #102	; 0x66
   dd5a0:	e7f2      	b.n	dd588 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   dd5a2:	2172      	movs	r1, #114	; 0x72
   dd5a4:	e7f0      	b.n	dd588 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   dd5a6:	6823      	ldr	r3, [r4, #0]
   dd5a8:	4632      	mov	r2, r6
   dd5aa:	68db      	ldr	r3, [r3, #12]
   dd5ac:	4641      	mov	r1, r8
   dd5ae:	4620      	mov	r0, r4
   dd5b0:	4798      	blx	r3
                break;
   dd5b2:	e7ec      	b.n	dd58e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
   dd5b4:	428d      	cmp	r5, r1
   dd5b6:	d004      	beq.n	dd5c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   dd5b8:	6823      	ldr	r3, [r4, #0]
   dd5ba:	1a6a      	subs	r2, r5, r1
   dd5bc:	689b      	ldr	r3, [r3, #8]
   dd5be:	4620      	mov	r0, r4
   dd5c0:	4798      	blx	r3
    write('"');
   dd5c2:	2122      	movs	r1, #34	; 0x22
   dd5c4:	4620      	mov	r0, r4
   dd5c6:	f7ff fcad 	bl	dcf24 <_ZN5spark10JSONWriter5writeEc>
}
   dd5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd5ce:	bf00      	nop
   dd5d0:	000e2d11 	.word	0x000e2d11

000dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   dd5d4:	b513      	push	{r0, r1, r4, lr}
   dd5d6:	4604      	mov	r4, r0
   dd5d8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   dd5dc:	f7ff fefe 	bl	dd3dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   dd5e0:	4620      	mov	r0, r4
   dd5e2:	e9dd 2100 	ldrd	r2, r1, [sp]
   dd5e6:	f7ff ff9d 	bl	dd524 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   dd5ea:	2302      	movs	r3, #2
}
   dd5ec:	4620      	mov	r0, r4
    state_ = VALUE;
   dd5ee:	7123      	strb	r3, [r4, #4]
}
   dd5f0:	b002      	add	sp, #8
   dd5f2:	bd10      	pop	{r4, pc}

000dd5f4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   dd5f4:	b513      	push	{r0, r1, r4, lr}
   dd5f6:	4604      	mov	r4, r0
   dd5f8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   dd5fc:	f7ff feee 	bl	dd3dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   dd600:	4620      	mov	r0, r4
   dd602:	e9dd 2100 	ldrd	r2, r1, [sp]
   dd606:	f7ff ff8d 	bl	dd524 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   dd60a:	2301      	movs	r3, #1
}
   dd60c:	4620      	mov	r0, r4
    state_ = NEXT;
   dd60e:	7123      	strb	r3, [r4, #4]
}
   dd610:	b002      	add	sp, #8
   dd612:	bd10      	pop	{r4, pc}

000dd614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   dd614:	b538      	push	{r3, r4, r5, lr}
   dd616:	2300      	movs	r3, #0
   dd618:	4604      	mov	r4, r0
   dd61a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd61c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   dd61e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd620:	f7f6 fd39 	bl	d4096 <_Znwj>
   dd624:	b128      	cbz	r0, dd632 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   dd626:	2301      	movs	r3, #1
   dd628:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   dd62c:	4b02      	ldr	r3, [pc, #8]	; (dd638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   dd62e:	6003      	str	r3, [r0, #0]
   dd630:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd632:	6020      	str	r0, [r4, #0]
	}
   dd634:	4620      	mov	r0, r4
   dd636:	bd38      	pop	{r3, r4, r5, pc}
   dd638:	000e2d20 	.word	0x000e2d20

000dd63c <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   dd63c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd63e:	4604      	mov	r4, r0
   dd640:	b087      	sub	sp, #28
   dd642:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   dd644:	200c      	movs	r0, #12
   dd646:	4927      	ldr	r1, [pc, #156]	; (dd6e4 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   dd648:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   dd64a:	f001 ff0d 	bl	df468 <_ZnwjRKSt9nothrow_t>
   dd64e:	4601      	mov	r1, r0
   dd650:	b118      	cbz	r0, dd65a <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   dd652:	2300      	movs	r3, #0
   dd654:	e9c0 3300 	strd	r3, r3, [r0]
   dd658:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   dd65a:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dd65c:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   dd65e:	f7ff ffd9 	bl	dd614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   dd662:	9a02      	ldr	r2, [sp, #8]
   dd664:	b942      	cbnz	r2, dd678 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   dd666:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   dd66a:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   dd66c:	a803      	add	r0, sp, #12
   dd66e:	f7f7 fde7 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dd672:	4620      	mov	r0, r4
   dd674:	b007      	add	sp, #28
   dd676:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   dd678:	2300      	movs	r3, #0
   dd67a:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   dd67c:	4629      	mov	r1, r5
   dd67e:	ab01      	add	r3, sp, #4
   dd680:	4630      	mov	r0, r6
   dd682:	f7ff fd35 	bl	dd0f0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   dd686:	b918      	cbnz	r0, dd690 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   dd688:	e9c4 0000 	strd	r0, r0, [r4]
   dd68c:	60a0      	str	r0, [r4, #8]
}
   dd68e:	e7ed      	b.n	dd66c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   dd690:	4914      	ldr	r1, [pc, #80]	; (dd6e4 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   dd692:	9f02      	ldr	r7, [sp, #8]
   dd694:	1c68      	adds	r0, r5, #1
   dd696:	f001 fee9 	bl	df46c <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   dd69a:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   dd69c:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   dd69e:	6858      	ldr	r0, [r3, #4]
   dd6a0:	2800      	cmp	r0, #0
   dd6a2:	d0f1      	beq.n	dd688 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   dd6a4:	462a      	mov	r2, r5
   dd6a6:	4631      	mov	r1, r6
   dd6a8:	f002 fc6c 	bl	dff84 <memcpy>
   dd6ac:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   dd6ae:	9901      	ldr	r1, [sp, #4]
   dd6b0:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   dd6b2:	2201      	movs	r2, #1
   dd6b4:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   dd6b6:	685a      	ldr	r2, [r3, #4]
   dd6b8:	f7ff fdec 	bl	dd294 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   dd6bc:	2800      	cmp	r0, #0
   dd6be:	d0e3      	beq.n	dd688 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   dd6c0:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   dd6c2:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dd6c4:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   dd6c6:	9b03      	ldr	r3, [sp, #12]
   dd6c8:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   dd6ca:	b113      	cbz	r3, dd6d2 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   dd6cc:	685a      	ldr	r2, [r3, #4]
   dd6ce:	3201      	adds	r2, #1
   dd6d0:	605a      	str	r2, [r3, #4]
   dd6d2:	aa04      	add	r2, sp, #16
   dd6d4:	4620      	mov	r0, r4
   dd6d6:	f7ff fc48 	bl	dcf6a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   dd6da:	a805      	add	r0, sp, #20
   dd6dc:	f7f7 fdb0 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dd6e0:	e7c4      	b.n	dd66c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   dd6e2:	bf00      	nop
   dd6e4:	000e2f20 	.word	0x000e2f20

000dd6e8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   dd6e8:	6880      	ldr	r0, [r0, #8]
   dd6ea:	6803      	ldr	r3, [r0, #0]
   dd6ec:	68db      	ldr	r3, [r3, #12]
   dd6ee:	4718      	bx	r3

000dd6f0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   dd6f0:	4770      	bx	lr

000dd6f2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   dd6f2:	4608      	mov	r0, r1
   dd6f4:	b111      	cbz	r1, dd6fc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   dd6f6:	680b      	ldr	r3, [r1, #0]
   dd6f8:	685b      	ldr	r3, [r3, #4]
   dd6fa:	4718      	bx	r3
}
   dd6fc:	4770      	bx	lr

000dd6fe <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   dd6fe:	4770      	bx	lr

000dd700 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   dd700:	4770      	bx	lr

000dd702 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   dd702:	4770      	bx	lr

000dd704 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   dd704:	4770      	bx	lr

000dd706 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   dd706:	b538      	push	{r3, r4, r5, lr}
   dd708:	4604      	mov	r4, r0
   dd70a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   dd70c:	6800      	ldr	r0, [r0, #0]
   dd70e:	212e      	movs	r1, #46	; 0x2e
   dd710:	f002 fcb2 	bl	e0078 <strchrnul>
    size = s - category;
   dd714:	6823      	ldr	r3, [r4, #0]
   dd716:	1ac3      	subs	r3, r0, r3
   dd718:	602b      	str	r3, [r5, #0]
    if (size) {
   dd71a:	b123      	cbz	r3, dd726 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   dd71c:	7803      	ldrb	r3, [r0, #0]
   dd71e:	b103      	cbz	r3, dd722 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   dd720:	3001      	adds	r0, #1
   dd722:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dd724:	6020      	str	r0, [r4, #0]
}
   dd726:	4618      	mov	r0, r3
   dd728:	bd38      	pop	{r3, r4, r5, pc}

000dd72a <_ZN5spark16JSONStreamWriterD0Ev>:
   dd72a:	b510      	push	{r4, lr}
   dd72c:	210c      	movs	r1, #12
   dd72e:	4604      	mov	r4, r0
   dd730:	f001 fe98 	bl	df464 <_ZdlPvj>
   dd734:	4620      	mov	r0, r4
   dd736:	bd10      	pop	{r4, pc}

000dd738 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   dd738:	b510      	push	{r4, lr}
   dd73a:	2104      	movs	r1, #4
   dd73c:	4604      	mov	r4, r0
   dd73e:	f001 fe91 	bl	df464 <_ZdlPvj>
   dd742:	4620      	mov	r0, r4
   dd744:	bd10      	pop	{r4, pc}

000dd746 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   dd746:	b510      	push	{r4, lr}
   dd748:	2104      	movs	r1, #4
   dd74a:	4604      	mov	r4, r0
   dd74c:	f001 fe8a 	bl	df464 <_ZdlPvj>
   dd750:	4620      	mov	r0, r4
   dd752:	bd10      	pop	{r4, pc}

000dd754 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   dd754:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   dd756:	f002 fc99 	bl	e008c <strcmp>
}
   dd75a:	fab0 f080 	clz	r0, r0
   dd75e:	0940      	lsrs	r0, r0, #5
   dd760:	bd08      	pop	{r3, pc}

000dd762 <__tcf_1>:
   dd762:	4770      	bx	lr

000dd764 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   dd764:	b510      	push	{r4, lr}
   dd766:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   dd768:	f001 fce4 	bl	df134 <_Z16_fetch_usbserialv>
   dd76c:	4284      	cmp	r4, r0
   dd76e:	d010      	beq.n	dd792 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   dd770:	f001 fc58 	bl	df024 <_Z22__fetch_global_Serial1v>
   dd774:	4284      	cmp	r4, r0
   dd776:	d105      	bne.n	dd784 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   dd778:	f001 fc54 	bl	df024 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   dd77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   dd780:	f001 bc4d 	b.w	df01e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   dd784:	b12c      	cbz	r4, dd792 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   dd786:	6823      	ldr	r3, [r4, #0]
   dd788:	4620      	mov	r0, r4
   dd78a:	685b      	ldr	r3, [r3, #4]
}
   dd78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dd790:	4718      	bx	r3
   dd792:	bd10      	pop	{r4, pc}

000dd794 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   dd794:	b513      	push	{r0, r1, r4, lr}
   dd796:	4604      	mov	r4, r0
    return value(val, strlen(val));
   dd798:	4608      	mov	r0, r1
   dd79a:	9101      	str	r1, [sp, #4]
   dd79c:	f002 fca5 	bl	e00ea <strlen>
   dd7a0:	9901      	ldr	r1, [sp, #4]
   dd7a2:	4602      	mov	r2, r0
   dd7a4:	4620      	mov	r0, r4
}
   dd7a6:	b002      	add	sp, #8
   dd7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   dd7ac:	f7ff bf22 	b.w	dd5f4 <_ZN5spark10JSONWriter5valueEPKcj>

000dd7b0 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   dd7b0:	b513      	push	{r0, r1, r4, lr}
   dd7b2:	4604      	mov	r4, r0
    write(str, strlen(str));
   dd7b4:	4608      	mov	r0, r1
   dd7b6:	9101      	str	r1, [sp, #4]
   dd7b8:	f002 fc97 	bl	e00ea <strlen>
   dd7bc:	6823      	ldr	r3, [r4, #0]
   dd7be:	9901      	ldr	r1, [sp, #4]
   dd7c0:	68db      	ldr	r3, [r3, #12]
   dd7c2:	4602      	mov	r2, r0
   dd7c4:	4620      	mov	r0, r4
}
   dd7c6:	b002      	add	sp, #8
   dd7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   dd7cc:	4718      	bx	r3

000dd7ce <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   dd7ce:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   dd7d0:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   dd7d2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   dd7d6:	68db      	ldr	r3, [r3, #12]
   dd7d8:	2201      	movs	r2, #1
   dd7da:	f10d 0107 	add.w	r1, sp, #7
   dd7de:	4798      	blx	r3
}
   dd7e0:	b003      	add	sp, #12
   dd7e2:	f85d fb04 	ldr.w	pc, [sp], #4

000dd7e6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   dd7e6:	b40e      	push	{r1, r2, r3}
   dd7e8:	b503      	push	{r0, r1, lr}
   dd7ea:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   dd7ec:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   dd7ee:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   dd7f2:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   dd7f4:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   dd7f6:	f000 fff6 	bl	de7e6 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   dd7fa:	b002      	add	sp, #8
   dd7fc:	f85d eb04 	ldr.w	lr, [sp], #4
   dd800:	b003      	add	sp, #12
   dd802:	4770      	bx	lr

000dd804 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   dd804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   dd808:	e9d0 9500 	ldrd	r9, r5, [r0]
   dd80c:	f04f 0814 	mov.w	r8, #20
   dd810:	fb08 f505 	mul.w	r5, r8, r5
   dd814:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   dd816:	10ab      	asrs	r3, r5, #2
   dd818:	4d18      	ldr	r5, [pc, #96]	; (dd87c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   dd81a:	4617      	mov	r7, r2
   dd81c:	435d      	muls	r5, r3
   dd81e:	464c      	mov	r4, r9
      while (__len > 0)
   dd820:	2d00      	cmp	r5, #0
   dd822:	dd23      	ble.n	dd86c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	  _DistanceType __half = __len >> 1;
   dd824:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   dd826:	fb08 f006 	mul.w	r0, r8, r6
   dd82a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   dd82e:	463a      	mov	r2, r7
   dd830:	f8ba b004 	ldrh.w	fp, [sl, #4]
   dd834:	5820      	ldr	r0, [r4, r0]
   dd836:	9101      	str	r1, [sp, #4]
   dd838:	455f      	cmp	r7, fp
   dd83a:	bf28      	it	cs
   dd83c:	465a      	movcs	r2, fp
   dd83e:	f002 fc5c 	bl	e00fa <strncmp>
                if (cmp == 0) {
   dd842:	9901      	ldr	r1, [sp, #4]
   dd844:	2301      	movs	r3, #1
   dd846:	b978      	cbnz	r0, dd868 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   dd848:	455f      	cmp	r7, fp
   dd84a:	d103      	bne.n	dd854 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   dd84c:	9a00      	ldr	r2, [sp, #0]
   dd84e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   dd850:	4635      	mov	r5, r6
   dd852:	e7e5      	b.n	dd820 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   dd854:	bf8c      	ite	hi
   dd856:	2001      	movhi	r0, #1
   dd858:	2000      	movls	r0, #0
	  if (__comp(__middle, __val))
   dd85a:	2800      	cmp	r0, #0
   dd85c:	d0f8      	beq.n	dd850 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	      __len = __len - __half - 1;
   dd85e:	1bae      	subs	r6, r5, r6
	      ++__first;
   dd860:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   dd864:	3e01      	subs	r6, #1
   dd866:	e7f3      	b.n	dd850 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   dd868:	0fc0      	lsrs	r0, r0, #31
   dd86a:	e7f6      	b.n	dd85a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   dd86c:	eba4 0409 	sub.w	r4, r4, r9
}
   dd870:	4802      	ldr	r0, [pc, #8]	; (dd87c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   dd872:	10a4      	asrs	r4, r4, #2
   dd874:	4360      	muls	r0, r4
   dd876:	b003      	add	sp, #12
   dd878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd87c:	cccccccd 	.word	0xcccccccd

000dd880 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   dd880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   dd882:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   dd884:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   dd886:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   dd888:	b30b      	cbz	r3, dd8ce <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   dd88a:	b301      	cbz	r1, dd8ce <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   dd88c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   dd88e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   dd892:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   dd894:	a903      	add	r1, sp, #12
   dd896:	a801      	add	r0, sp, #4
   dd898:	f7ff ff35 	bl	dd706 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   dd89c:	4601      	mov	r1, r0
   dd89e:	b1b0      	cbz	r0, dd8ce <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   dd8a0:	f10d 030b 	add.w	r3, sp, #11
   dd8a4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   dd8a6:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   dd8aa:	4620      	mov	r0, r4
   dd8ac:	f7ff ffaa 	bl	dd804 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   dd8b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   dd8b4:	b15b      	cbz	r3, dd8ce <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   dd8b6:	6824      	ldr	r4, [r4, #0]
   dd8b8:	2314      	movs	r3, #20
   dd8ba:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   dd8be:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   dd8c2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   dd8c6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   dd8c8:	bfa8      	it	ge
   dd8ca:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   dd8cc:	e7e2      	b.n	dd894 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   dd8ce:	4630      	mov	r0, r6
   dd8d0:	b004      	add	sp, #16
   dd8d2:	bd70      	pop	{r4, r5, r6, pc}

000dd8d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   dd8d4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   dd8d6:	4c09      	ldr	r4, [pc, #36]	; (dd8fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   dd8d8:	7823      	ldrb	r3, [r4, #0]
   dd8da:	f3bf 8f5b 	dmb	ish
   dd8de:	07db      	lsls	r3, r3, #31
   dd8e0:	d409      	bmi.n	dd8f6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   dd8e2:	4620      	mov	r0, r4
   dd8e4:	f7f6 fbea 	bl	d40bc <__cxa_guard_acquire>
   dd8e8:	b128      	cbz	r0, dd8f6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   dd8ea:	4620      	mov	r0, r4
   dd8ec:	f7f6 fbeb 	bl	d40c6 <__cxa_guard_release>
   dd8f0:	4803      	ldr	r0, [pc, #12]	; (dd900 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   dd8f2:	f002 fb2f 	bl	dff54 <atexit>
}
   dd8f6:	4803      	ldr	r0, [pc, #12]	; (dd904 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   dd8f8:	bd10      	pop	{r4, pc}
   dd8fa:	bf00      	nop
   dd8fc:	2003e570 	.word	0x2003e570
   dd900:	000dd6ff 	.word	0x000dd6ff
   dd904:	2003e20c 	.word	0x2003e20c

000dd908 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   dd908:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   dd90a:	4c09      	ldr	r4, [pc, #36]	; (dd930 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   dd90c:	7823      	ldrb	r3, [r4, #0]
   dd90e:	f3bf 8f5b 	dmb	ish
   dd912:	07db      	lsls	r3, r3, #31
   dd914:	d409      	bmi.n	dd92a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   dd916:	4620      	mov	r0, r4
   dd918:	f7f6 fbd0 	bl	d40bc <__cxa_guard_acquire>
   dd91c:	b128      	cbz	r0, dd92a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   dd91e:	4620      	mov	r0, r4
   dd920:	f7f6 fbd1 	bl	d40c6 <__cxa_guard_release>
   dd924:	4803      	ldr	r0, [pc, #12]	; (dd934 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   dd926:	f002 fb15 	bl	dff54 <atexit>
    return &factory;
}
   dd92a:	4803      	ldr	r0, [pc, #12]	; (dd938 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   dd92c:	bd10      	pop	{r4, pc}
   dd92e:	bf00      	nop
   dd930:	2003e574 	.word	0x2003e574
   dd934:	000dd763 	.word	0x000dd763
   dd938:	2003e210 	.word	0x2003e210

000dd93c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   dd93c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   dd93e:	2500      	movs	r5, #0
   dd940:	4604      	mov	r4, r0
   dd942:	e9c0 5500 	strd	r5, r5, [r0]
   dd946:	e9c0 5504 	strd	r5, r5, [r0, #16]
   dd94a:	6085      	str	r5, [r0, #8]
   dd94c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   dd94e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   dd952:	f7fe f9af 	bl	dbcb4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   dd956:	f7ff ffbd 	bl	dd8d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   dd95a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dd95c:	f7ff ffd4 	bl	dd908 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   dd960:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dd962:	6220      	str	r0, [r4, #32]
}
   dd964:	4620      	mov	r0, r4
   dd966:	bd38      	pop	{r3, r4, r5, pc}

000dd968 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   dd968:	b510      	push	{r4, lr}
    static LogManager mgr;
   dd96a:	4c0a      	ldr	r4, [pc, #40]	; (dd994 <_ZN5spark10LogManager8instanceEv+0x2c>)
   dd96c:	7823      	ldrb	r3, [r4, #0]
   dd96e:	f3bf 8f5b 	dmb	ish
   dd972:	07db      	lsls	r3, r3, #31
   dd974:	d40c      	bmi.n	dd990 <_ZN5spark10LogManager8instanceEv+0x28>
   dd976:	4620      	mov	r0, r4
   dd978:	f7f6 fba0 	bl	d40bc <__cxa_guard_acquire>
   dd97c:	b140      	cbz	r0, dd990 <_ZN5spark10LogManager8instanceEv+0x28>
   dd97e:	4806      	ldr	r0, [pc, #24]	; (dd998 <_ZN5spark10LogManager8instanceEv+0x30>)
   dd980:	f7ff ffdc 	bl	dd93c <_ZN5spark10LogManagerC1Ev>
   dd984:	4620      	mov	r0, r4
   dd986:	f7f6 fb9e 	bl	d40c6 <__cxa_guard_release>
   dd98a:	4804      	ldr	r0, [pc, #16]	; (dd99c <_ZN5spark10LogManager8instanceEv+0x34>)
   dd98c:	f002 fae2 	bl	dff54 <atexit>
    return &mgr;
}
   dd990:	4801      	ldr	r0, [pc, #4]	; (dd998 <_ZN5spark10LogManager8instanceEv+0x30>)
   dd992:	bd10      	pop	{r4, pc}
   dd994:	2003e56c 	.word	0x2003e56c
   dd998:	2003e57c 	.word	0x2003e57c
   dd99c:	000dddd1 	.word	0x000dddd1

000dd9a0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   dd9a0:	4a02      	ldr	r2, [pc, #8]	; (dd9ac <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   dd9a2:	4903      	ldr	r1, [pc, #12]	; (dd9b0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   dd9a4:	4803      	ldr	r0, [pc, #12]	; (dd9b4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   dd9a6:	2300      	movs	r3, #0
   dd9a8:	f7fe bbe4 	b.w	dc174 <log_set_callbacks>
   dd9ac:	000ddc59 	.word	0x000ddc59
   dd9b0:	000ddbe5 	.word	0x000ddbe5
   dd9b4:	000ddb65 	.word	0x000ddb65

000dd9b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   dd9b8:	2300      	movs	r3, #0
   dd9ba:	461a      	mov	r2, r3
   dd9bc:	4619      	mov	r1, r3
   dd9be:	4618      	mov	r0, r3
   dd9c0:	f7fe bbd8 	b.w	dc174 <log_set_callbacks>

000dd9c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   dd9c4:	b570      	push	{r4, r5, r6, lr}
   dd9c6:	b08a      	sub	sp, #40	; 0x28
   dd9c8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   dd9ca:	4601      	mov	r1, r0
   dd9cc:	a804      	add	r0, sp, #16
   dd9ce:	f7f9 fc01 	bl	d71d4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   dd9d2:	4e14      	ldr	r6, [pc, #80]	; (dda24 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   dd9d4:	a804      	add	r0, sp, #16
   dd9d6:	f7ff fcb5 	bl	dd344 <_ZN5spark18JSONObjectIterator4nextEv>
   dd9da:	b1e8      	cbz	r0, dda18 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   dd9dc:	a904      	add	r1, sp, #16
   dd9de:	4668      	mov	r0, sp
   dd9e0:	f7f9 fc09 	bl	d71f6 <_ZNK5spark18JSONObjectIterator4nameEv>
   dd9e4:	9802      	ldr	r0, [sp, #8]
   dd9e6:	4631      	mov	r1, r6
   dd9e8:	f7ff feb4 	bl	dd754 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   dd9ec:	4604      	mov	r4, r0
   dd9ee:	b110      	cbz	r0, dd9f6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   dd9f0:	1e2c      	subs	r4, r5, #0
   dd9f2:	bf18      	it	ne
   dd9f4:	2401      	movne	r4, #1
   dd9f6:	a801      	add	r0, sp, #4
   dd9f8:	f7f7 fc22 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dd9fc:	2c00      	cmp	r4, #0
   dd9fe:	d0e9      	beq.n	dd9d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   dda00:	a904      	add	r1, sp, #16
   dda02:	4668      	mov	r0, sp
   dda04:	f7f9 fc08 	bl	d7218 <_ZNK5spark18JSONObjectIterator5valueEv>
   dda08:	4668      	mov	r0, sp
   dda0a:	f7ff fb23 	bl	dd054 <_ZNK5spark9JSONValue5toIntEv>
   dda0e:	6028      	str	r0, [r5, #0]
   dda10:	a801      	add	r0, sp, #4
   dda12:	f7f7 fc15 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dda16:	e7dd      	b.n	dd9d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   dda18:	a805      	add	r0, sp, #20
   dda1a:	f7f7 fc11 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dda1e:	b00a      	add	sp, #40	; 0x28
   dda20:	bd70      	pop	{r4, r5, r6, pc}
   dda22:	bf00      	nop
   dda24:	000e2d4c 	.word	0x000e2d4c

000dda28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dda28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dda2a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   dda2c:	4620      	mov	r0, r4
   dda2e:	4912      	ldr	r1, [pc, #72]	; (dda78 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dda30:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   dda32:	f002 fb2b 	bl	e008c <strcmp>
   dda36:	b948      	cbnz	r0, dda4c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   dda38:	f001 fb7c 	bl	df134 <_Z16_fetch_usbserialv>
   dda3c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   dda40:	f001 fb68 	bl	df114 <_ZN9USBSerial5beginEl>
        return &Serial;
   dda44:	f001 fb76 	bl	df134 <_Z16_fetch_usbserialv>
}
   dda48:	b003      	add	sp, #12
   dda4a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   dda4c:	490b      	ldr	r1, [pc, #44]	; (dda7c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   dda4e:	4620      	mov	r0, r4
   dda50:	f002 fb1c 	bl	e008c <strcmp>
   dda54:	b970      	cbnz	r0, dda74 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   dda56:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   dda5a:	a901      	add	r1, sp, #4
   dda5c:	4628      	mov	r0, r5
        int baud = 9600;
   dda5e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   dda60:	f7ff ffb0 	bl	dd9c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   dda64:	f001 fade 	bl	df024 <_Z22__fetch_global_Serial1v>
   dda68:	9901      	ldr	r1, [sp, #4]
   dda6a:	f001 fad5 	bl	df018 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   dda6e:	f001 fad9 	bl	df024 <_Z22__fetch_global_Serial1v>
   dda72:	e7e9      	b.n	dda48 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   dda74:	2000      	movs	r0, #0
   dda76:	e7e7      	b.n	dda48 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   dda78:	000e2d51 	.word	0x000e2d51
   dda7c:	000e2d58 	.word	0x000e2d58

000dda80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   dda80:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   dda82:	e9d0 5300 	ldrd	r5, r3, [r0]
   dda86:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   dda88:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   dda8a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dda8e:	42ae      	cmp	r6, r5
   dda90:	d005      	beq.n	dda9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   dda92:	f105 0008 	add.w	r0, r5, #8
   dda96:	f7ff fff3 	bl	dda80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dda9a:	3514      	adds	r5, #20
   dda9c:	e7f7      	b.n	dda8e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   dda9e:	6820      	ldr	r0, [r4, #0]
   ddaa0:	f7fe fc98 	bl	dc3d4 <free>
}
   ddaa4:	4620      	mov	r0, r4
   ddaa6:	bd70      	pop	{r4, r5, r6, pc}

000ddaa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ddaa8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ddaaa:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ddaae:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ddab0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   ddab4:	42ae      	cmp	r6, r5
   ddab6:	d004      	beq.n	ddac2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   ddab8:	4628      	mov	r0, r5
   ddaba:	f000 fed5 	bl	de868 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   ddabe:	3510      	adds	r5, #16
   ddac0:	e7f8      	b.n	ddab4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ddac2:	6820      	ldr	r0, [r4, #0]
   ddac4:	f7fe fc86 	bl	dc3d4 <free>
}
   ddac8:	4620      	mov	r0, r4
   ddaca:	bd70      	pop	{r4, r5, r6, pc}

000ddacc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   ddacc:	b510      	push	{r4, lr}
   ddace:	4604      	mov	r4, r0
   ddad0:	300c      	adds	r0, #12
   ddad2:	f7ff ffd5 	bl	dda80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ddad6:	4620      	mov	r0, r4
   ddad8:	f7ff ffe6 	bl	ddaa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ddadc:	4620      	mov	r0, r4
   ddade:	bd10      	pop	{r4, pc}

000ddae0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   ddae0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   ddae2:	4b04      	ldr	r3, [pc, #16]	; (ddaf4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   ddae4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   ddae6:	f840 3b04 	str.w	r3, [r0], #4
   ddaea:	f7ff ffef 	bl	ddacc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   ddaee:	4620      	mov	r0, r4
   ddaf0:	bd10      	pop	{r4, pc}
   ddaf2:	bf00      	nop
   ddaf4:	000e2270 	.word	0x000e2270

000ddaf8 <_ZN5spark16StreamLogHandlerD0Ev>:
   ddaf8:	b510      	push	{r4, lr}
   ddafa:	4604      	mov	r4, r0
   ddafc:	f7ff fff0 	bl	ddae0 <_ZN5spark16StreamLogHandlerD1Ev>
   ddb00:	4620      	mov	r0, r4
   ddb02:	2124      	movs	r1, #36	; 0x24
   ddb04:	f001 fcae 	bl	df464 <_ZdlPvj>
   ddb08:	4620      	mov	r0, r4
   ddb0a:	bd10      	pop	{r4, pc}

000ddb0c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   ddb0c:	b510      	push	{r4, lr}
   ddb0e:	4b03      	ldr	r3, [pc, #12]	; (ddb1c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   ddb10:	6003      	str	r3, [r0, #0]
   ddb12:	4604      	mov	r4, r0
   ddb14:	f7ff ffe4 	bl	ddae0 <_ZN5spark16StreamLogHandlerD1Ev>
   ddb18:	4620      	mov	r0, r4
   ddb1a:	bd10      	pop	{r4, pc}
   ddb1c:	000e2dec 	.word	0x000e2dec

000ddb20 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   ddb20:	b510      	push	{r4, lr}
   ddb22:	4604      	mov	r4, r0
   ddb24:	f7ff fff2 	bl	ddb0c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   ddb28:	4620      	mov	r0, r4
   ddb2a:	2124      	movs	r1, #36	; 0x24
   ddb2c:	f001 fc9a 	bl	df464 <_ZdlPvj>
   ddb30:	4620      	mov	r0, r4
   ddb32:	bd10      	pop	{r4, pc}

000ddb34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   ddb34:	2200      	movs	r2, #0
   ddb36:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   ddb3a:	b510      	push	{r4, lr}
        capacity_(0) {
   ddb3c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   ddb3e:	680c      	ldr	r4, [r1, #0]
   ddb40:	6004      	str	r4, [r0, #0]
   ddb42:	684c      	ldr	r4, [r1, #4]
   ddb44:	6044      	str	r4, [r0, #4]
   ddb46:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ddb48:	600a      	str	r2, [r1, #0]
   ddb4a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ddb4c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ddb4e:	608a      	str	r2, [r1, #8]
}
   ddb50:	bd10      	pop	{r4, pc}

000ddb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   ddb52:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   ddb54:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   ddb56:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ddb58:	6818      	ldr	r0, [r3, #0]
   ddb5a:	f7fe f8c3 	bl	dbce4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   ddb5e:	4620      	mov	r0, r4
   ddb60:	bd10      	pop	{r4, pc}
	...

000ddb64 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   ddb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddb68:	b087      	sub	sp, #28
   ddb6a:	4680      	mov	r8, r0
   ddb6c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   ddb6e:	4b1c      	ldr	r3, [pc, #112]	; (ddbe0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   ddb70:	685b      	ldr	r3, [r3, #4]
   ddb72:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ddb76:	4689      	mov	r9, r1
   ddb78:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   ddb7a:	b96b      	cbnz	r3, ddb98 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   ddb7c:	f7ff fef4 	bl	dd968 <_ZN5spark10LogManager8instanceEv>
   ddb80:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ddb82:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   ddb86:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ddb88:	9305      	str	r3, [sp, #20]
   ddb8a:	f7fe f8a3 	bl	dbcd4 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   ddb8e:	7b23      	ldrb	r3, [r4, #12]
   ddb90:	b12b      	cbz	r3, ddb9e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   ddb92:	a805      	add	r0, sp, #20
   ddb94:	f7ff ffdd 	bl	ddb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   ddb98:	b007      	add	sp, #28
   ddb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   ddb9e:	2301      	movs	r3, #1
   ddba0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   ddba2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   ddba6:	fa5f f989 	uxtb.w	r9, r9
   ddbaa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ddbae:	45aa      	cmp	sl, r5
   ddbb0:	d012      	beq.n	ddbd8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   ddbb2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   ddbb6:	4631      	mov	r1, r6
   ddbb8:	1d38      	adds	r0, r7, #4
   ddbba:	f7ff fe61 	bl	dd880 <_ZNK5spark6detail9LogFilter5levelEPKc>
   ddbbe:	4581      	cmp	r9, r0
   ddbc0:	d3f5      	bcc.n	ddbae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   ddbc2:	683b      	ldr	r3, [r7, #0]
   ddbc4:	9a03      	ldr	r2, [sp, #12]
   ddbc6:	9200      	str	r2, [sp, #0]
   ddbc8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   ddbcc:	464a      	mov	r2, r9
   ddbce:	4633      	mov	r3, r6
   ddbd0:	4641      	mov	r1, r8
   ddbd2:	4638      	mov	r0, r7
   ddbd4:	47d8      	blx	fp
   ddbd6:	e7ea      	b.n	ddbae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   ddbd8:	2300      	movs	r3, #0
   ddbda:	7323      	strb	r3, [r4, #12]
   ddbdc:	e7d9      	b.n	ddb92 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   ddbde:	bf00      	nop
   ddbe0:	e000ed00 	.word	0xe000ed00

000ddbe4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   ddbe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddbe8:	469b      	mov	fp, r3
   ddbea:	4b1a      	ldr	r3, [pc, #104]	; (ddc54 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   ddbec:	685b      	ldr	r3, [r3, #4]
   ddbee:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ddbf2:	4680      	mov	r8, r0
   ddbf4:	4689      	mov	r9, r1
   ddbf6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   ddbf8:	b96b      	cbnz	r3, ddc16 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   ddbfa:	f7ff feb5 	bl	dd968 <_ZN5spark10LogManager8instanceEv>
   ddbfe:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ddc00:	f100 0324 	add.w	r3, r0, #36	; 0x24
   ddc04:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ddc06:	9301      	str	r3, [sp, #4]
   ddc08:	f7fe f864 	bl	dbcd4 <os_mutex_recursive_lock>
        if (that->isActive()) {
   ddc0c:	7b23      	ldrb	r3, [r4, #12]
   ddc0e:	b12b      	cbz	r3, ddc1c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   ddc10:	a801      	add	r0, sp, #4
   ddc12:	f7ff ff9e 	bl	ddb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ddc16:	b003      	add	sp, #12
   ddc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   ddc1c:	2301      	movs	r3, #1
   ddc1e:	7323      	strb	r3, [r4, #12]
   ddc20:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   ddc24:	b2f6      	uxtb	r6, r6
   ddc26:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ddc2a:	4555      	cmp	r5, sl
   ddc2c:	d00e      	beq.n	ddc4c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   ddc2e:	f855 7b04 	ldr.w	r7, [r5], #4
   ddc32:	4659      	mov	r1, fp
   ddc34:	1d38      	adds	r0, r7, #4
   ddc36:	f7ff fe23 	bl	dd880 <_ZNK5spark6detail9LogFilter5levelEPKc>
   ddc3a:	4286      	cmp	r6, r0
   ddc3c:	d3f5      	bcc.n	ddc2a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   ddc3e:	683b      	ldr	r3, [r7, #0]
   ddc40:	464a      	mov	r2, r9
   ddc42:	68db      	ldr	r3, [r3, #12]
   ddc44:	4641      	mov	r1, r8
   ddc46:	4638      	mov	r0, r7
   ddc48:	4798      	blx	r3
   ddc4a:	e7ee      	b.n	ddc2a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   ddc4c:	2300      	movs	r3, #0
   ddc4e:	7323      	strb	r3, [r4, #12]
   ddc50:	e7de      	b.n	ddc10 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   ddc52:	bf00      	nop
   ddc54:	e000ed00 	.word	0xe000ed00

000ddc58 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   ddc58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ddc5c:	4b16      	ldr	r3, [pc, #88]	; (ddcb8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   ddc5e:	685b      	ldr	r3, [r3, #4]
   ddc60:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ddc64:	4605      	mov	r5, r0
   ddc66:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   ddc68:	bb1b      	cbnz	r3, ddcb2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   ddc6a:	f7ff fe7d 	bl	dd968 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   ddc6e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   ddc72:	4604      	mov	r4, r0
   ddc74:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ddc76:	9301      	str	r3, [sp, #4]
   ddc78:	f7fe f82c 	bl	dbcd4 <os_mutex_recursive_lock>
   ddc7c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   ddc80:	2446      	movs	r4, #70	; 0x46
   ddc82:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ddc86:	45b0      	cmp	r8, r6
   ddc88:	d109      	bne.n	ddc9e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   ddc8a:	a801      	add	r0, sp, #4
   ddc8c:	f7ff ff61 	bl	ddb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   ddc90:	42a5      	cmp	r5, r4
   ddc92:	bfb4      	ite	lt
   ddc94:	2000      	movlt	r0, #0
   ddc96:	2001      	movge	r0, #1
}
   ddc98:	b002      	add	sp, #8
   ddc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   ddc9e:	f856 0b04 	ldr.w	r0, [r6], #4
   ddca2:	4639      	mov	r1, r7
   ddca4:	3004      	adds	r0, #4
   ddca6:	f7ff fdeb 	bl	dd880 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   ddcaa:	4284      	cmp	r4, r0
   ddcac:	bfa8      	it	ge
   ddcae:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   ddcb0:	e7e9      	b.n	ddc86 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   ddcb2:	2000      	movs	r0, #0
   ddcb4:	e7f0      	b.n	ddc98 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   ddcb6:	bf00      	nop
   ddcb8:	e000ed00 	.word	0xe000ed00

000ddcbc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ddcbc:	b570      	push	{r4, r5, r6, lr}
   ddcbe:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   ddcc0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ddcc4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   ddcc6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   ddcca:	4282      	cmp	r2, r0
   ddccc:	d007      	beq.n	ddcde <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   ddcce:	4601      	mov	r1, r0
            if (*p == value) {
   ddcd0:	681d      	ldr	r5, [r3, #0]
   ddcd2:	f851 6b04 	ldr.w	r6, [r1], #4
   ddcd6:	42ae      	cmp	r6, r5
   ddcd8:	d003      	beq.n	ddce2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   ddcda:	4608      	mov	r0, r1
   ddcdc:	e7f5      	b.n	ddcca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   ddcde:	2000      	movs	r0, #0
}
   ddce0:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   ddce2:	1a52      	subs	r2, r2, r1
   ddce4:	f002 f95c 	bl	dffa0 <memmove>
    --size_;
   ddce8:	6863      	ldr	r3, [r4, #4]
   ddcea:	3b01      	subs	r3, #1
   ddcec:	6063      	str	r3, [r4, #4]
    return true;
   ddcee:	2001      	movs	r0, #1
   ddcf0:	e7f6      	b.n	ddce0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000ddcf2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   ddcf2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   ddcf4:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   ddcf8:	4604      	mov	r4, r0
   ddcfa:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ddcfc:	9101      	str	r1, [sp, #4]
   ddcfe:	9303      	str	r3, [sp, #12]
   ddd00:	f7fd ffe8 	bl	dbcd4 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   ddd04:	a901      	add	r1, sp, #4
   ddd06:	4620      	mov	r0, r4
   ddd08:	f7ff ffd8 	bl	ddcbc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   ddd0c:	b118      	cbz	r0, ddd16 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   ddd0e:	6863      	ldr	r3, [r4, #4]
   ddd10:	b90b      	cbnz	r3, ddd16 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   ddd12:	f7ff fe51 	bl	dd9b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ddd16:	a803      	add	r0, sp, #12
   ddd18:	f7ff ff1b 	bl	ddb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ddd1c:	b004      	add	sp, #16
   ddd1e:	bd10      	pop	{r4, pc}

000ddd20 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   ddd20:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   ddd22:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   ddd26:	2318      	movs	r3, #24
   ddd28:	4604      	mov	r4, r0
   ddd2a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   ddd2e:	42ae      	cmp	r6, r5
   ddd30:	d015      	beq.n	ddd5e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   ddd32:	f105 0110 	add.w	r1, r5, #16
   ddd36:	4620      	mov	r0, r4
   ddd38:	f7ff ffc0 	bl	ddcbc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   ddd3c:	6863      	ldr	r3, [r4, #4]
   ddd3e:	b90b      	cbnz	r3, ddd44 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   ddd40:	f7ff fe3a 	bl	dd9b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   ddd44:	69e0      	ldr	r0, [r4, #28]
   ddd46:	6929      	ldr	r1, [r5, #16]
   ddd48:	6803      	ldr	r3, [r0, #0]
   ddd4a:	68db      	ldr	r3, [r3, #12]
   ddd4c:	4798      	blx	r3
        if (h.stream) {
   ddd4e:	6969      	ldr	r1, [r5, #20]
   ddd50:	b119      	cbz	r1, ddd5a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   ddd52:	6a20      	ldr	r0, [r4, #32]
   ddd54:	6803      	ldr	r3, [r0, #0]
   ddd56:	68db      	ldr	r3, [r3, #12]
   ddd58:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   ddd5a:	3518      	adds	r5, #24
   ddd5c:	e7e7      	b.n	ddd2e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   ddd5e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ddd62:	2618      	movs	r6, #24
   ddd64:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ddd68:	42ae      	cmp	r6, r5
   ddd6a:	d004      	beq.n	ddd76 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   ddd6c:	4628      	mov	r0, r5
   ddd6e:	f000 fd7b 	bl	de868 <_ZN6StringD1Ev>
   ddd72:	3518      	adds	r5, #24
   ddd74:	e7f8      	b.n	ddd68 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   ddd76:	2300      	movs	r3, #0
   ddd78:	6163      	str	r3, [r4, #20]
}
   ddd7a:	bd70      	pop	{r4, r5, r6, pc}

000ddd7c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   ddd7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ddd7e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   ddd80:	f7ff fe1a 	bl	dd9b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ddd84:	f104 0324 	add.w	r3, r4, #36	; 0x24
   ddd88:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ddd8a:	9301      	str	r3, [sp, #4]
   ddd8c:	f7fd ffa2 	bl	dbcd4 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   ddd90:	4620      	mov	r0, r4
   ddd92:	f7ff ffc5 	bl	ddd20 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   ddd96:	a801      	add	r0, sp, #4
   ddd98:	f7ff fedb 	bl	ddb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   ddd9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ddd9e:	b108      	cbz	r0, ddda4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   ddda0:	f7fd ff90 	bl	dbcc4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   ddda4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ddda8:	2618      	movs	r6, #24
   dddaa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dddae:	42ae      	cmp	r6, r5
   dddb0:	d004      	beq.n	dddbc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   dddb2:	4628      	mov	r0, r5
   dddb4:	f000 fd58 	bl	de868 <_ZN6StringD1Ev>
   dddb8:	3518      	adds	r5, #24
   dddba:	e7f8      	b.n	dddae <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   dddbc:	6920      	ldr	r0, [r4, #16]
   dddbe:	f7fe fb09 	bl	dc3d4 <free>
   dddc2:	6820      	ldr	r0, [r4, #0]
   dddc4:	f7fe fb06 	bl	dc3d4 <free>
}
   dddc8:	4620      	mov	r0, r4
   dddca:	b002      	add	sp, #8
   dddcc:	bd70      	pop	{r4, r5, r6, pc}
	...

000dddd0 <__tcf_2>:
    static LogManager mgr;
   dddd0:	4801      	ldr	r0, [pc, #4]	; (dddd8 <__tcf_2+0x8>)
   dddd2:	f7ff bfd3 	b.w	ddd7c <_ZN5spark10LogManagerD1Ev>
   dddd6:	bf00      	nop
   dddd8:	2003e57c 	.word	0x2003e57c

000ddddc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   ddddc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   dddde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ddde0:	4606      	mov	r6, r0
   ddde2:	460c      	mov	r4, r1
   ddde4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   ddde6:	d927      	bls.n	dde38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   ddde8:	4290      	cmp	r0, r2
   dddea:	d226      	bcs.n	dde3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   dddec:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   dddf0:	1a6c      	subs	r4, r5, r1
   dddf2:	f1a1 0714 	sub.w	r7, r1, #20
   dddf6:	4404      	add	r4, r0
        capacity_(0) {
   dddf8:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   dddfa:	42af      	cmp	r7, r5
   dddfc:	d03d      	beq.n	dde7a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   dddfe:	b1a4      	cbz	r4, dde2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   dde00:	682b      	ldr	r3, [r5, #0]
   dde02:	6023      	str	r3, [r4, #0]
   dde04:	88ab      	ldrh	r3, [r5, #4]
   dde06:	80a3      	strh	r3, [r4, #4]
   dde08:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   dde0c:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   dde0e:	e9c4 6602 	strd	r6, r6, [r4, #8]
   dde12:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dde14:	68ab      	ldr	r3, [r5, #8]
   dde16:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dde18:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dde1a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dde1c:	68ea      	ldr	r2, [r5, #12]
   dde1e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dde20:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dde22:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dde24:	692a      	ldr	r2, [r5, #16]
   dde26:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dde28:	612b      	str	r3, [r5, #16]
   dde2a:	f105 0008 	add.w	r0, r5, #8
   dde2e:	f7ff fe27 	bl	dda80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   dde32:	3d14      	subs	r5, #20
   dde34:	3c14      	subs	r4, #20
   dde36:	e7e0      	b.n	dddfa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   dde38:	d01f      	beq.n	dde7a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   dde3a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   dde3c:	42ac      	cmp	r4, r5
   dde3e:	d01c      	beq.n	dde7a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   dde40:	b1a6      	cbz	r6, dde6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   dde42:	6823      	ldr	r3, [r4, #0]
   dde44:	6033      	str	r3, [r6, #0]
   dde46:	88a3      	ldrh	r3, [r4, #4]
   dde48:	80b3      	strh	r3, [r6, #4]
   dde4a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   dde4e:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   dde50:	e9c6 7702 	strd	r7, r7, [r6, #8]
   dde54:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   dde56:	68a3      	ldr	r3, [r4, #8]
   dde58:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dde5a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dde5c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   dde5e:	68e2      	ldr	r2, [r4, #12]
   dde60:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dde62:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dde64:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   dde66:	6922      	ldr	r2, [r4, #16]
   dde68:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dde6a:	6123      	str	r3, [r4, #16]
   dde6c:	f104 0008 	add.w	r0, r4, #8
   dde70:	f7ff fe06 	bl	dda80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   dde74:	3414      	adds	r4, #20
   dde76:	3614      	adds	r6, #20
   dde78:	e7e0      	b.n	dde3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   dde7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dde7c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   dde7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dde7e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   dde82:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   dde84:	4604      	mov	r4, r0
   dde86:	460e      	mov	r6, r1
   dde88:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dde8a:	db0d      	blt.n	ddea8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   dde8c:	3501      	adds	r5, #1
        if (n > 0) {
   dde8e:	2d00      	cmp	r5, #0
   dde90:	6800      	ldr	r0, [r0, #0]
   dde92:	dd04      	ble.n	dde9e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   dde94:	00a9      	lsls	r1, r5, #2
   dde96:	f7fe faa5 	bl	dc3e4 <realloc>
            if (!d) {
   dde9a:	b918      	cbnz	r0, ddea4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   dde9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   dde9e:	f7fe fa99 	bl	dc3d4 <free>
        T* d = nullptr;
   ddea2:	2000      	movs	r0, #0
        data_ = d;
   ddea4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ddea6:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   ddea8:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   ddeaa:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ddeac:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   ddeb0:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   ddeb2:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   ddeb6:	1d08      	adds	r0, r1, #4
   ddeb8:	f002 f872 	bl	dffa0 <memmove>
    new(p) T(std::move(value));
   ddebc:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   ddec0:	6863      	ldr	r3, [r4, #4]
   ddec2:	3301      	adds	r3, #1
   ddec4:	6063      	str	r3, [r4, #4]
    return true;
   ddec6:	2001      	movs	r0, #1
   ddec8:	e7e8      	b.n	dde9c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000ddeca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   ddeca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   ddecc:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   dded0:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   dded2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dded4:	9301      	str	r3, [sp, #4]
   dded6:	460d      	mov	r5, r1
   dded8:	f7fd fefc 	bl	dbcd4 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   ddedc:	e9d4 3100 	ldrd	r3, r1, [r4]
   ddee0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   ddee4:	4283      	cmp	r3, r0
   ddee6:	461a      	mov	r2, r3
   ddee8:	d00b      	beq.n	ddf02 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   ddeea:	6812      	ldr	r2, [r2, #0]
   ddeec:	42aa      	cmp	r2, r5
   ddeee:	f103 0304 	add.w	r3, r3, #4
   ddef2:	d1f7      	bne.n	ddee4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   ddef4:	a801      	add	r0, sp, #4
   ddef6:	f7ff fe2c 	bl	ddb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   ddefa:	2500      	movs	r5, #0
}
   ddefc:	4628      	mov	r0, r5
   ddefe:	b003      	add	sp, #12
   ddf00:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   ddf02:	462a      	mov	r2, r5
   ddf04:	4620      	mov	r0, r4
   ddf06:	f7ff ffb9 	bl	dde7c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   ddf0a:	4605      	mov	r5, r0
   ddf0c:	2800      	cmp	r0, #0
   ddf0e:	d0f1      	beq.n	ddef4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   ddf10:	6863      	ldr	r3, [r4, #4]
   ddf12:	2b01      	cmp	r3, #1
   ddf14:	d101      	bne.n	ddf1a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   ddf16:	f7ff fd43 	bl	dd9a0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ddf1a:	a801      	add	r0, sp, #4
   ddf1c:	f7ff fe19 	bl	ddb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ddf20:	e7ec      	b.n	ddefc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000ddf22 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   ddf22:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ddf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ddf26:	4604      	mov	r4, r0
   ddf28:	460d      	mov	r5, r1
   ddf2a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ddf2c:	d914      	bls.n	ddf58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   ddf2e:	4290      	cmp	r0, r2
   ddf30:	d213      	bcs.n	ddf5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   ddf32:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   ddf36:	1a75      	subs	r5, r6, r1
   ddf38:	f1a1 0710 	sub.w	r7, r1, #16
   ddf3c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ddf3e:	42b7      	cmp	r7, r6
   ddf40:	d018      	beq.n	ddf74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   ddf42:	b11c      	cbz	r4, ddf4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   ddf44:	4631      	mov	r1, r6
   ddf46:	4620      	mov	r0, r4
   ddf48:	f000 fd0a 	bl	de960 <_ZN6StringC1EOS_>
                end->~T();
   ddf4c:	4630      	mov	r0, r6
   ddf4e:	f000 fc8b 	bl	de868 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ddf52:	3e10      	subs	r6, #16
   ddf54:	3c10      	subs	r4, #16
   ddf56:	e7f2      	b.n	ddf3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   ddf58:	d00c      	beq.n	ddf74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   ddf5a:	42b5      	cmp	r5, r6
   ddf5c:	d00a      	beq.n	ddf74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   ddf5e:	b11c      	cbz	r4, ddf68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   ddf60:	4629      	mov	r1, r5
   ddf62:	4620      	mov	r0, r4
   ddf64:	f000 fcfc 	bl	de960 <_ZN6StringC1EOS_>
                p->~T();
   ddf68:	4628      	mov	r0, r5
   ddf6a:	f000 fc7d 	bl	de868 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ddf6e:	3510      	adds	r5, #16
   ddf70:	3410      	adds	r4, #16
   ddf72:	e7f2      	b.n	ddf5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   ddf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ddf76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   ddf76:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ddf78:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ddf7a:	4605      	mov	r5, r0
        if (n > 0) {
   ddf7c:	dd11      	ble.n	ddfa2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   ddf7e:	0130      	lsls	r0, r6, #4
   ddf80:	f7fe fa20 	bl	dc3c4 <malloc>
            if (!d) {
   ddf84:	4604      	mov	r4, r0
   ddf86:	b158      	cbz	r0, ddfa0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ddf88:	e9d5 1200 	ldrd	r1, r2, [r5]
   ddf8c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   ddf90:	f7ff ffc7 	bl	ddf22 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   ddf94:	6828      	ldr	r0, [r5, #0]
   ddf96:	f7fe fa1d 	bl	dc3d4 <free>
        data_ = d;
   ddf9a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ddf9c:	60ae      	str	r6, [r5, #8]
        return true;
   ddf9e:	2001      	movs	r0, #1
    }
   ddfa0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ddfa2:	2400      	movs	r4, #0
   ddfa4:	e7f6      	b.n	ddf94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000ddfa6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ddfa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddfaa:	4691      	mov	r9, r2
   ddfac:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   ddfae:	2300      	movs	r3, #0
   ddfb0:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   ddfb2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   ddfb6:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ddfb8:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   ddfba:	4299      	cmp	r1, r3
        capacity_(0) {
   ddfbc:	e9c0 3300 	strd	r3, r3, [r0]
   ddfc0:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ddfc4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ddfc8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ddfcc:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ddfce:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   ddfd0:	dc23      	bgt.n	de01a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   ddfd2:	e9d9 5700 	ldrd	r5, r7, [r9]
   ddfd6:	2314      	movs	r3, #20
   ddfd8:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   ddfdc:	42af      	cmp	r7, r5
   ddfde:	d03b      	beq.n	de058 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   ddfe0:	4629      	mov	r1, r5
   ddfe2:	a80d      	add	r0, sp, #52	; 0x34
   ddfe4:	f000 fcbc 	bl	de960 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   ddfe8:	a90d      	add	r1, sp, #52	; 0x34
   ddfea:	a811      	add	r0, sp, #68	; 0x44
   ddfec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   ddfee:	f000 fcb7 	bl	de960 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ddff2:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   ddff6:	4299      	cmp	r1, r3
   ddff8:	da1b      	bge.n	de032 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   ddffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   ddffc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   ddffe:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   de002:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   de006:	4631      	mov	r1, r6
   de008:	f106 0010 	add.w	r0, r6, #16
   de00c:	f7ff ff89 	bl	ddf22 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   de010:	b9ee      	cbnz	r6, de04e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   de012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   de014:	3301      	adds	r3, #1
   de016:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   de018:	e011      	b.n	de03e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   de01a:	a80a      	add	r0, sp, #40	; 0x28
   de01c:	f7ff ffab 	bl	ddf76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   de020:	2800      	cmp	r0, #0
   de022:	d1d6      	bne.n	ddfd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   de024:	a80a      	add	r0, sp, #40	; 0x28
   de026:	f7ff fd3f 	bl	ddaa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   de02a:	4620      	mov	r0, r4
   de02c:	b017      	add	sp, #92	; 0x5c
   de02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   de032:	3101      	adds	r1, #1
   de034:	a80a      	add	r0, sp, #40	; 0x28
   de036:	f7ff ff9e 	bl	ddf76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   de03a:	2800      	cmp	r0, #0
   de03c:	d1dd      	bne.n	ddffa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   de03e:	a811      	add	r0, sp, #68	; 0x44
   de040:	f000 fc12 	bl	de868 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   de044:	a80d      	add	r0, sp, #52	; 0x34
   de046:	f000 fc0f 	bl	de868 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   de04a:	3514      	adds	r5, #20
   de04c:	e7c6      	b.n	ddfdc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   de04e:	a911      	add	r1, sp, #68	; 0x44
   de050:	4630      	mov	r0, r6
   de052:	f000 fc85 	bl	de960 <_ZN6StringC1EOS_>
   de056:	e7dc      	b.n	de012 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   de058:	2600      	movs	r6, #0
   de05a:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   de05e:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   de060:	4637      	mov	r7, r6
   de062:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   de066:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   de06a:	429e      	cmp	r6, r3
   de06c:	f280 8097 	bge.w	de19e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   de070:	0133      	lsls	r3, r6, #4
   de072:	58d3      	ldr	r3, [r2, r3]
   de074:	9308      	str	r3, [sp, #32]
        if (!category) {
   de076:	b90b      	cbnz	r3, de07c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   de078:	3601      	adds	r6, #1
   de07a:	e7f4      	b.n	de066 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   de07c:	fb0a f306 	mul.w	r3, sl, r6
   de080:	9709      	str	r7, [sp, #36]	; 0x24
   de082:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   de084:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   de086:	a909      	add	r1, sp, #36	; 0x24
   de088:	a808      	add	r0, sp, #32
   de08a:	f7ff fb3c 	bl	dd706 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   de08e:	4683      	mov	fp, r0
   de090:	2800      	cmp	r0, #0
   de092:	d0f1      	beq.n	de078 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   de094:	4601      	mov	r1, r0
   de096:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   de098:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   de09c:	f10d 031f 	add.w	r3, sp, #31
   de0a0:	4628      	mov	r0, r5
   de0a2:	f7ff fbaf 	bl	dd804 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   de0a6:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   de0aa:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   de0ac:	f1b8 0f00 	cmp.w	r8, #0
   de0b0:	d166      	bne.n	de180 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   de0b2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   de0b6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   de0ba:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   de0be:	f64f 73ff 	movw	r3, #65535	; 0xffff
   de0c2:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   de0c6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   de0ca:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   de0ce:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   de0d2:	4293      	cmp	r3, r2
   de0d4:	db1a      	blt.n	de10c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   de0d6:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   de0da:	f1bb 0f00 	cmp.w	fp, #0
   de0de:	dd4a      	ble.n	de176 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   de0e0:	fb0a f00b 	mul.w	r0, sl, fp
   de0e4:	f7fe f96e 	bl	dc3c4 <malloc>
            if (!d) {
   de0e8:	9004      	str	r0, [sp, #16]
   de0ea:	2800      	cmp	r0, #0
   de0ec:	d045      	beq.n	de17a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   de0ee:	e9d5 1200 	ldrd	r1, r2, [r5]
   de0f2:	fb0a 1202 	mla	r2, sl, r2, r1
   de0f6:	f7ff fe71 	bl	ddddc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   de0fa:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   de0fc:	6828      	ldr	r0, [r5, #0]
   de0fe:	9304      	str	r3, [sp, #16]
   de100:	f7fe f968 	bl	dc3d4 <free>
        data_ = d;
   de104:	9b04      	ldr	r3, [sp, #16]
   de106:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   de108:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   de10c:	9b01      	ldr	r3, [sp, #4]
   de10e:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   de112:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   de114:	fb0a f303 	mul.w	r3, sl, r3
   de118:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   de11c:	f101 0014 	add.w	r0, r1, #20
   de120:	fb0a b202 	mla	r2, sl, r2, fp
   de124:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   de126:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   de128:	f7ff fe58 	bl	ddddc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   de12c:	9904      	ldr	r1, [sp, #16]
   de12e:	b1a9      	cbz	r1, de15c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   de130:	9b05      	ldr	r3, [sp, #20]
   de132:	9a11      	ldr	r2, [sp, #68]	; 0x44
   de134:	f84b 2003 	str.w	r2, [fp, r3]
   de138:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   de13c:	808b      	strh	r3, [r1, #4]
   de13e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   de142:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   de144:	e9c1 7702 	strd	r7, r7, [r1, #8]
   de148:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   de14a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   de14c:	608b      	str	r3, [r1, #8]
   de14e:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   de150:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   de152:	60cb      	str	r3, [r1, #12]
   de154:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   de156:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   de158:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   de15a:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   de15c:	686b      	ldr	r3, [r5, #4]
   de15e:	3301      	adds	r3, #1
   de160:	606b      	str	r3, [r5, #4]
   de162:	a813      	add	r0, sp, #76	; 0x4c
   de164:	f7ff fc8c 	bl	dda80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   de168:	f1b8 0f00 	cmp.w	r8, #0
   de16c:	d008      	beq.n	de180 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   de16e:	a80d      	add	r0, sp, #52	; 0x34
   de170:	f7ff fc86 	bl	dda80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   de174:	e756      	b.n	de024 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   de176:	4643      	mov	r3, r8
   de178:	e7c0      	b.n	de0fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   de17a:	f04f 0801 	mov.w	r8, #1
   de17e:	e7f0      	b.n	de162 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   de180:	9b01      	ldr	r3, [sp, #4]
   de182:	682d      	ldr	r5, [r5, #0]
   de184:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   de188:	9b08      	ldr	r3, [sp, #32]
   de18a:	781b      	ldrb	r3, [r3, #0]
   de18c:	b92b      	cbnz	r3, de19a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   de18e:	f8d9 3000 	ldr.w	r3, [r9]
   de192:	9a02      	ldr	r2, [sp, #8]
   de194:	4413      	add	r3, r2
   de196:	7c1b      	ldrb	r3, [r3, #16]
   de198:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   de19a:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   de19c:	e773      	b.n	de086 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   de19e:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   de1a0:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   de1a2:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   de1a4:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   de1a6:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   de1a8:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   de1aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   de1ac:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   de1ae:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   de1b0:	60a2      	str	r2, [r4, #8]
   de1b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   de1b4:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   de1b6:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   de1b8:	60e2      	str	r2, [r4, #12]
   de1ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   de1bc:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   de1be:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   de1c0:	6122      	str	r2, [r4, #16]
   de1c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   de1c4:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   de1c6:	9b03      	ldr	r3, [sp, #12]
   de1c8:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   de1ca:	6162      	str	r2, [r4, #20]
   de1cc:	7623      	strb	r3, [r4, #24]
   de1ce:	e7ce      	b.n	de16e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000de1d0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   de1d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   de1d2:	4605      	mov	r5, r0
   de1d4:	4b09      	ldr	r3, [pc, #36]	; (de1fc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   de1d6:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   de1da:	4604      	mov	r4, r0
   de1dc:	460e      	mov	r6, r1
        filter_(level, filters) {
   de1de:	a801      	add	r0, sp, #4
   de1e0:	4611      	mov	r1, r2
   de1e2:	f7f6 fa25 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   de1e6:	aa01      	add	r2, sp, #4
   de1e8:	4631      	mov	r1, r6
   de1ea:	4628      	mov	r0, r5
   de1ec:	f7ff fedb 	bl	ddfa6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   de1f0:	a801      	add	r0, sp, #4
   de1f2:	f7f6 f8dd 	bl	d43b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   de1f6:	4620      	mov	r0, r4
   de1f8:	b004      	add	sp, #16
   de1fa:	bd70      	pop	{r4, r5, r6, pc}
   de1fc:	000e2270 	.word	0x000e2270

000de200 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   de200:	b5f0      	push	{r4, r5, r6, r7, lr}
   de202:	460f      	mov	r7, r1
   de204:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   de206:	4926      	ldr	r1, [pc, #152]	; (de2a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   de208:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   de20a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   de20c:	4616      	mov	r6, r2
   de20e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   de210:	f001 ff3c 	bl	e008c <strcmp>
   de214:	bb00      	cbnz	r0, de258 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   de216:	b1e4      	cbz	r4, de252 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   de218:	4629      	mov	r1, r5
   de21a:	4668      	mov	r0, sp
   de21c:	f7ff fc8a 	bl	ddb34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   de220:	4920      	ldr	r1, [pc, #128]	; (de2a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   de222:	2024      	movs	r0, #36	; 0x24
   de224:	f001 f920 	bl	df468 <_ZnwjRKSt9nothrow_t>
   de228:	4605      	mov	r5, r0
   de22a:	b170      	cbz	r0, de24a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   de22c:	4669      	mov	r1, sp
   de22e:	a803      	add	r0, sp, #12
   de230:	f7f6 f9fe 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   de234:	aa03      	add	r2, sp, #12
   de236:	4631      	mov	r1, r6
   de238:	4628      	mov	r0, r5
   de23a:	f7ff ffc9 	bl	de1d0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   de23e:	a803      	add	r0, sp, #12
   de240:	f7f6 f8b6 	bl	d43b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   de244:	4b18      	ldr	r3, [pc, #96]	; (de2a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   de246:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   de248:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   de24a:	4668      	mov	r0, sp
   de24c:	f7f6 f8b0 	bl	d43b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   de250:	462c      	mov	r4, r5
}
   de252:	4620      	mov	r0, r4
   de254:	b007      	add	sp, #28
   de256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   de258:	4914      	ldr	r1, [pc, #80]	; (de2ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   de25a:	4638      	mov	r0, r7
   de25c:	f001 ff16 	bl	e008c <strcmp>
   de260:	b9e0      	cbnz	r0, de29c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   de262:	2c00      	cmp	r4, #0
   de264:	d0f5      	beq.n	de252 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   de266:	4629      	mov	r1, r5
   de268:	4668      	mov	r0, sp
   de26a:	f7ff fc63 	bl	ddb34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   de26e:	490d      	ldr	r1, [pc, #52]	; (de2a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   de270:	2024      	movs	r0, #36	; 0x24
   de272:	f001 f8f9 	bl	df468 <_ZnwjRKSt9nothrow_t>
   de276:	4605      	mov	r5, r0
   de278:	2800      	cmp	r0, #0
   de27a:	d0e6      	beq.n	de24a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   de27c:	4669      	mov	r1, sp
   de27e:	a803      	add	r0, sp, #12
   de280:	f7f6 f9d6 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   de284:	aa03      	add	r2, sp, #12
   de286:	4631      	mov	r1, r6
   de288:	4628      	mov	r0, r5
   de28a:	f7ff ffa1 	bl	de1d0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   de28e:	a803      	add	r0, sp, #12
   de290:	f7f6 f88e 	bl	d43b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   de294:	4b06      	ldr	r3, [pc, #24]	; (de2b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   de296:	602b      	str	r3, [r5, #0]
   de298:	622c      	str	r4, [r5, #32]
}
   de29a:	e7d6      	b.n	de24a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   de29c:	2400      	movs	r4, #0
   de29e:	e7d8      	b.n	de252 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   de2a0:	000e2d60 	.word	0x000e2d60
   de2a4:	000e2f20 	.word	0x000e2f20
   de2a8:	000e2dec 	.word	0x000e2dec
   de2ac:	000e2d64 	.word	0x000e2d64
   de2b0:	000e2dd4 	.word	0x000e2dd4

000de2b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   de2b4:	4b01      	ldr	r3, [pc, #4]	; (de2bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   de2b6:	4a02      	ldr	r2, [pc, #8]	; (de2c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   de2b8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   de2ba:	4770      	bx	lr
   de2bc:	2003e578 	.word	0x2003e578
   de2c0:	000e2d75 	.word	0x000e2d75

000de2c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   de2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de2c8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   de2ca:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   de2ce:	4604      	mov	r4, r0
   de2d0:	460e      	mov	r6, r1
   de2d2:	4617      	mov	r7, r2
   de2d4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   de2d6:	f000 ff2d 	bl	df134 <_Z16_fetch_usbserialv>
   de2da:	4581      	cmp	r9, r0
   de2dc:	d04c      	beq.n	de378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   de2de:	792b      	ldrb	r3, [r5, #4]
   de2e0:	0719      	lsls	r1, r3, #28
   de2e2:	d504      	bpl.n	de2ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   de2e4:	696a      	ldr	r2, [r5, #20]
   de2e6:	4954      	ldr	r1, [pc, #336]	; (de438 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   de2e8:	4620      	mov	r0, r4
   de2ea:	f7ff fa7c 	bl	dd7e6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   de2ee:	f1b8 0f00 	cmp.w	r8, #0
   de2f2:	d00d      	beq.n	de310 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   de2f4:	215b      	movs	r1, #91	; 0x5b
   de2f6:	4620      	mov	r0, r4
   de2f8:	f7ff fa69 	bl	dd7ce <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   de2fc:	4641      	mov	r1, r8
   de2fe:	4620      	mov	r0, r4
   de300:	f7ff fa56 	bl	dd7b0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   de304:	6823      	ldr	r3, [r4, #0]
   de306:	494d      	ldr	r1, [pc, #308]	; (de43c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   de308:	68db      	ldr	r3, [r3, #12]
   de30a:	2202      	movs	r2, #2
   de30c:	4620      	mov	r0, r4
   de30e:	4798      	blx	r3
    if (attr.has_file) {
   de310:	792b      	ldrb	r3, [r5, #4]
   de312:	07da      	lsls	r2, r3, #31
   de314:	d523      	bpl.n	de35e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   de316:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   de31a:	212f      	movs	r1, #47	; 0x2f
   de31c:	4640      	mov	r0, r8
   de31e:	f001 ff11 	bl	e0144 <strrchr>
    if (s1) {
   de322:	b108      	cbz	r0, de328 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   de324:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   de328:	4641      	mov	r1, r8
   de32a:	4620      	mov	r0, r4
   de32c:	f7ff fa40 	bl	dd7b0 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   de330:	792b      	ldrb	r3, [r5, #4]
   de332:	079b      	lsls	r3, r3, #30
   de334:	d508      	bpl.n	de348 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   de336:	213a      	movs	r1, #58	; 0x3a
   de338:	4620      	mov	r0, r4
   de33a:	f7ff fa48 	bl	dd7ce <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   de33e:	68ea      	ldr	r2, [r5, #12]
   de340:	493f      	ldr	r1, [pc, #252]	; (de440 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   de342:	4620      	mov	r0, r4
   de344:	f7ff fa4f 	bl	dd7e6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   de348:	792a      	ldrb	r2, [r5, #4]
   de34a:	6823      	ldr	r3, [r4, #0]
   de34c:	f012 0f04 	tst.w	r2, #4
   de350:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   de352:	bf14      	ite	ne
   de354:	493b      	ldrne	r1, [pc, #236]	; (de444 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   de356:	493c      	ldreq	r1, [pc, #240]	; (de448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   de358:	2202      	movs	r2, #2
            write(": ", 2);
   de35a:	4620      	mov	r0, r4
   de35c:	4798      	blx	r3
    if (attr.has_function) {
   de35e:	792b      	ldrb	r3, [r5, #4]
   de360:	0758      	lsls	r0, r3, #29
   de362:	d51d      	bpl.n	de3a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   de364:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   de366:	460b      	mov	r3, r1
   de368:	461a      	mov	r2, r3
    for (; *s; ++s) {
   de36a:	f813 0b01 	ldrb.w	r0, [r3], #1
   de36e:	b160      	cbz	r0, de38a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   de370:	2820      	cmp	r0, #32
   de372:	d108      	bne.n	de386 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   de374:	4619      	mov	r1, r3
   de376:	e7f7      	b.n	de368 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   de378:	4834      	ldr	r0, [pc, #208]	; (de44c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   de37a:	f000 f966 	bl	de64a <_ZN5spark12NetworkClass9listeningEv>
   de37e:	2800      	cmp	r0, #0
   de380:	d0ad      	beq.n	de2de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   de382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   de386:	2828      	cmp	r0, #40	; 0x28
   de388:	d1ee      	bne.n	de368 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   de38a:	6823      	ldr	r3, [r4, #0]
   de38c:	1a52      	subs	r2, r2, r1
   de38e:	68db      	ldr	r3, [r3, #12]
   de390:	4620      	mov	r0, r4
   de392:	4798      	blx	r3
        write("(): ", 4);
   de394:	6823      	ldr	r3, [r4, #0]
   de396:	492e      	ldr	r1, [pc, #184]	; (de450 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   de398:	68db      	ldr	r3, [r3, #12]
   de39a:	2204      	movs	r2, #4
   de39c:	4620      	mov	r0, r4
   de39e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   de3a0:	2100      	movs	r1, #0
   de3a2:	4638      	mov	r0, r7
   de3a4:	f7fd fede 	bl	dc164 <log_level_name>
   de3a8:	4601      	mov	r1, r0
    write(s);
   de3aa:	4620      	mov	r0, r4
   de3ac:	f7ff fa00 	bl	dd7b0 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   de3b0:	6823      	ldr	r3, [r4, #0]
   de3b2:	4925      	ldr	r1, [pc, #148]	; (de448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   de3b4:	68db      	ldr	r3, [r3, #12]
   de3b6:	2202      	movs	r2, #2
   de3b8:	4620      	mov	r0, r4
   de3ba:	4798      	blx	r3
    if (msg) {
   de3bc:	b11e      	cbz	r6, de3c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   de3be:	4631      	mov	r1, r6
   de3c0:	4620      	mov	r0, r4
   de3c2:	f7ff f9f5 	bl	dd7b0 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   de3c6:	792b      	ldrb	r3, [r5, #4]
   de3c8:	f013 0f30 	tst.w	r3, #48	; 0x30
   de3cc:	d02c      	beq.n	de428 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   de3ce:	6823      	ldr	r3, [r4, #0]
   de3d0:	4920      	ldr	r1, [pc, #128]	; (de454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   de3d2:	68db      	ldr	r3, [r3, #12]
   de3d4:	2202      	movs	r2, #2
   de3d6:	4620      	mov	r0, r4
   de3d8:	4798      	blx	r3
        if (attr.has_code) {
   de3da:	792b      	ldrb	r3, [r5, #4]
   de3dc:	06d9      	lsls	r1, r3, #27
   de3de:	d50a      	bpl.n	de3f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   de3e0:	6823      	ldr	r3, [r4, #0]
   de3e2:	491d      	ldr	r1, [pc, #116]	; (de458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   de3e4:	68db      	ldr	r3, [r3, #12]
   de3e6:	2207      	movs	r2, #7
   de3e8:	4620      	mov	r0, r4
   de3ea:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   de3ec:	69aa      	ldr	r2, [r5, #24]
   de3ee:	491b      	ldr	r1, [pc, #108]	; (de45c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   de3f0:	4620      	mov	r0, r4
   de3f2:	f7ff f9f8 	bl	dd7e6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   de3f6:	792b      	ldrb	r3, [r5, #4]
   de3f8:	069a      	lsls	r2, r3, #26
   de3fa:	d511      	bpl.n	de420 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   de3fc:	06db      	lsls	r3, r3, #27
   de3fe:	d505      	bpl.n	de40c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   de400:	6823      	ldr	r3, [r4, #0]
   de402:	4910      	ldr	r1, [pc, #64]	; (de444 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   de404:	68db      	ldr	r3, [r3, #12]
   de406:	2202      	movs	r2, #2
   de408:	4620      	mov	r0, r4
   de40a:	4798      	blx	r3
            write("details = ", 10);
   de40c:	6823      	ldr	r3, [r4, #0]
   de40e:	4914      	ldr	r1, [pc, #80]	; (de460 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   de410:	68db      	ldr	r3, [r3, #12]
   de412:	4620      	mov	r0, r4
   de414:	220a      	movs	r2, #10
   de416:	4798      	blx	r3
            write(attr.details);
   de418:	69e9      	ldr	r1, [r5, #28]
   de41a:	4620      	mov	r0, r4
   de41c:	f7ff f9c8 	bl	dd7b0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   de420:	215d      	movs	r1, #93	; 0x5d
   de422:	4620      	mov	r0, r4
   de424:	f7ff f9d3 	bl	dd7ce <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   de428:	6823      	ldr	r3, [r4, #0]
   de42a:	490e      	ldr	r1, [pc, #56]	; (de464 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   de42c:	68db      	ldr	r3, [r3, #12]
   de42e:	4620      	mov	r0, r4
   de430:	2202      	movs	r2, #2
}
   de432:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   de436:	4718      	bx	r3
   de438:	000e2d79 	.word	0x000e2d79
   de43c:	000e2d80 	.word	0x000e2d80
   de440:	000e2379 	.word	0x000e2379
   de444:	000e2d83 	.word	0x000e2d83
   de448:	000e2d88 	.word	0x000e2d88
   de44c:	2003e5a4 	.word	0x2003e5a4
   de450:	000e2d86 	.word	0x000e2d86
   de454:	000e2d8b 	.word	0x000e2d8b
   de458:	000e2d8e 	.word	0x000e2d8e
   de45c:	000e22c0 	.word	0x000e22c0
   de460:	000e2d96 	.word	0x000e2d96
   de464:	000e296d 	.word	0x000e296d

000de468 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   de468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de46c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   de46e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   de472:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   de474:	4605      	mov	r5, r0
   de476:	460f      	mov	r7, r1
   de478:	4690      	mov	r8, r2
   de47a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   de47c:	f000 fe5a 	bl	df134 <_Z16_fetch_usbserialv>
   de480:	4581      	cmp	r9, r0
   de482:	d105      	bne.n	de490 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   de484:	4849      	ldr	r0, [pc, #292]	; (de5ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   de486:	f000 f8e0 	bl	de64a <_ZN5spark12NetworkClass9listeningEv>
   de48a:	2800      	cmp	r0, #0
   de48c:	f040 808a 	bne.w	de5a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   de490:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   de492:	4a47      	ldr	r2, [pc, #284]	; (de5b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   de494:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   de496:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   de49a:	a801      	add	r0, sp, #4
        strm_(stream) {
   de49c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   de49e:	f88d 9008 	strb.w	r9, [sp, #8]
   de4a2:	f7fe ffb4 	bl	dd40e <_ZN5spark10JSONWriter11beginObjectEv>
   de4a6:	4649      	mov	r1, r9
   de4a8:	4640      	mov	r0, r8
   de4aa:	f7fd fe5b 	bl	dc164 <log_level_name>
    json.name("l", 1).value(s);
   de4ae:	4941      	ldr	r1, [pc, #260]	; (de5b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   de4b0:	4680      	mov	r8, r0
   de4b2:	2201      	movs	r2, #1
   de4b4:	a801      	add	r0, sp, #4
   de4b6:	f7ff f88d 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
   de4ba:	4641      	mov	r1, r8
   de4bc:	f7ff f96a 	bl	dd794 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   de4c0:	b13f      	cbz	r7, de4d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   de4c2:	493d      	ldr	r1, [pc, #244]	; (de5b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   de4c4:	2201      	movs	r2, #1
   de4c6:	a801      	add	r0, sp, #4
   de4c8:	f7ff f884 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
   de4cc:	4639      	mov	r1, r7
   de4ce:	f7ff f961 	bl	dd794 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   de4d2:	b13e      	cbz	r6, de4e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   de4d4:	4939      	ldr	r1, [pc, #228]	; (de5bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   de4d6:	2201      	movs	r2, #1
   de4d8:	a801      	add	r0, sp, #4
   de4da:	f7ff f87b 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
   de4de:	4631      	mov	r1, r6
   de4e0:	f7ff f958 	bl	dd794 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   de4e4:	7923      	ldrb	r3, [r4, #4]
   de4e6:	07df      	lsls	r7, r3, #31
   de4e8:	d50e      	bpl.n	de508 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   de4ea:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   de4ec:	212f      	movs	r1, #47	; 0x2f
   de4ee:	4630      	mov	r0, r6
   de4f0:	f001 fe28 	bl	e0144 <strrchr>
    if (s1) {
   de4f4:	b100      	cbz	r0, de4f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   de4f6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   de4f8:	4931      	ldr	r1, [pc, #196]	; (de5c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   de4fa:	2201      	movs	r2, #1
   de4fc:	a801      	add	r0, sp, #4
   de4fe:	f7ff f869 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
   de502:	4631      	mov	r1, r6
   de504:	f7ff f946 	bl	dd794 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   de508:	7923      	ldrb	r3, [r4, #4]
   de50a:	079e      	lsls	r6, r3, #30
   de50c:	d507      	bpl.n	de51e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   de50e:	492d      	ldr	r1, [pc, #180]	; (de5c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   de510:	2202      	movs	r2, #2
   de512:	a801      	add	r0, sp, #4
   de514:	f7ff f85e 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
   de518:	68e1      	ldr	r1, [r4, #12]
   de51a:	f7fe ff9d 	bl	dd458 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   de51e:	7923      	ldrb	r3, [r4, #4]
   de520:	0758      	lsls	r0, r3, #29
   de522:	d514      	bpl.n	de54e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   de524:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   de526:	4633      	mov	r3, r6
   de528:	461f      	mov	r7, r3
    for (; *s; ++s) {
   de52a:	f813 2b01 	ldrb.w	r2, [r3], #1
   de52e:	b12a      	cbz	r2, de53c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   de530:	2a20      	cmp	r2, #32
   de532:	d101      	bne.n	de538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   de534:	461e      	mov	r6, r3
   de536:	e7f7      	b.n	de528 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   de538:	2a28      	cmp	r2, #40	; 0x28
   de53a:	d1f5      	bne.n	de528 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   de53c:	4922      	ldr	r1, [pc, #136]	; (de5c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   de53e:	2202      	movs	r2, #2
   de540:	a801      	add	r0, sp, #4
   de542:	f7ff f847 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
   de546:	1bba      	subs	r2, r7, r6
   de548:	4631      	mov	r1, r6
   de54a:	f7ff f853 	bl	dd5f4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   de54e:	7923      	ldrb	r3, [r4, #4]
   de550:	0719      	lsls	r1, r3, #28
   de552:	d507      	bpl.n	de564 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   de554:	491d      	ldr	r1, [pc, #116]	; (de5cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   de556:	2201      	movs	r2, #1
   de558:	a801      	add	r0, sp, #4
   de55a:	f7ff f83b 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
   de55e:	6961      	ldr	r1, [r4, #20]
   de560:	f7fe ff8c 	bl	dd47c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   de564:	7923      	ldrb	r3, [r4, #4]
   de566:	06da      	lsls	r2, r3, #27
   de568:	d508      	bpl.n	de57c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   de56a:	2204      	movs	r2, #4
   de56c:	4918      	ldr	r1, [pc, #96]	; (de5d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   de56e:	eb0d 0002 	add.w	r0, sp, r2
   de572:	f7ff f82f 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
   de576:	69a1      	ldr	r1, [r4, #24]
   de578:	f7fe ff6e 	bl	dd458 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   de57c:	7923      	ldrb	r3, [r4, #4]
   de57e:	069b      	lsls	r3, r3, #26
   de580:	d507      	bpl.n	de592 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   de582:	4914      	ldr	r1, [pc, #80]	; (de5d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   de584:	2206      	movs	r2, #6
   de586:	a801      	add	r0, sp, #4
   de588:	f7ff f824 	bl	dd5d4 <_ZN5spark10JSONWriter4nameEPKcj>
   de58c:	69e1      	ldr	r1, [r4, #28]
   de58e:	f7ff f901 	bl	dd794 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   de592:	a801      	add	r0, sp, #4
   de594:	f7fe ff19 	bl	dd3ca <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   de598:	6a28      	ldr	r0, [r5, #32]
   de59a:	490f      	ldr	r1, [pc, #60]	; (de5d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   de59c:	6803      	ldr	r3, [r0, #0]
   de59e:	2202      	movs	r2, #2
   de5a0:	68db      	ldr	r3, [r3, #12]
   de5a2:	4798      	blx	r3
}
   de5a4:	b005      	add	sp, #20
   de5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de5aa:	bf00      	nop
   de5ac:	2003e5a4 	.word	0x2003e5a4
   de5b0:	000e2dbc 	.word	0x000e2dbc
   de5b4:	000e2d56 	.word	0x000e2d56
   de5b8:	000e2695 	.word	0x000e2695
   de5bc:	000e2ad3 	.word	0x000e2ad3
   de5c0:	000e21b1 	.word	0x000e21b1
   de5c4:	000e2da1 	.word	0x000e2da1
   de5c8:	000e2da4 	.word	0x000e2da4
   de5cc:	000e2954 	.word	0x000e2954
   de5d0:	000e2da7 	.word	0x000e2da7
   de5d4:	000e2dac 	.word	0x000e2dac
   de5d8:	000e296d 	.word	0x000e296d

000de5dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   de5dc:	2300      	movs	r3, #0
   de5de:	6840      	ldr	r0, [r0, #4]
   de5e0:	461a      	mov	r2, r3
   de5e2:	f7fd be8f 	b.w	dc304 <network_connect>

000de5e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   de5e6:	6840      	ldr	r0, [r0, #4]
   de5e8:	2200      	movs	r2, #0
   de5ea:	2102      	movs	r1, #2
   de5ec:	f7fd be9a 	b.w	dc324 <network_disconnect>

000de5f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   de5f0:	2200      	movs	r2, #0
   de5f2:	6840      	ldr	r0, [r0, #4]
   de5f4:	4611      	mov	r1, r2
   de5f6:	f7fd be8d 	b.w	dc314 <network_connecting>

000de5fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   de5fa:	2200      	movs	r2, #0
   de5fc:	6840      	ldr	r0, [r0, #4]
   de5fe:	4611      	mov	r1, r2
   de600:	f7fd be98 	b.w	dc334 <network_ready>

000de604 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   de604:	2300      	movs	r3, #0
   de606:	6840      	ldr	r0, [r0, #4]
   de608:	461a      	mov	r2, r3
   de60a:	4619      	mov	r1, r3
   de60c:	f7fd be9a 	b.w	dc344 <network_on>

000de610 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   de610:	2300      	movs	r3, #0
   de612:	6840      	ldr	r0, [r0, #4]
   de614:	461a      	mov	r2, r3
   de616:	4619      	mov	r1, r3
   de618:	f7fd be9c 	b.w	dc354 <network_off>

000de61c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   de61c:	6840      	ldr	r0, [r0, #4]
   de61e:	2100      	movs	r1, #0
   de620:	f7fd bec0 	b.w	dc3a4 <network_is_on>

000de624 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   de624:	6840      	ldr	r0, [r0, #4]
   de626:	2100      	movs	r1, #0
   de628:	f7fd bec4 	b.w	dc3b4 <network_is_off>

000de62c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   de62c:	6840      	ldr	r0, [r0, #4]
   de62e:	2200      	movs	r2, #0
   de630:	f081 0101 	eor.w	r1, r1, #1
   de634:	f7fd be96 	b.w	dc364 <network_listen>

000de638 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   de638:	6840      	ldr	r0, [r0, #4]
   de63a:	2200      	movs	r2, #0
   de63c:	f7fd bea2 	b.w	dc384 <network_set_listen_timeout>

000de640 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   de640:	2200      	movs	r2, #0
   de642:	6840      	ldr	r0, [r0, #4]
   de644:	4611      	mov	r1, r2
   de646:	f7fd bea5 	b.w	dc394 <network_get_listen_timeout>

000de64a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   de64a:	2200      	movs	r2, #0
   de64c:	6840      	ldr	r0, [r0, #4]
   de64e:	4611      	mov	r1, r2
   de650:	f7fd be90 	b.w	dc374 <network_listening>

000de654 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   de654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   de658:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   de65a:	b095      	sub	sp, #84	; 0x54
   de65c:	4616      	mov	r6, r2
   de65e:	460d      	mov	r5, r1
   de660:	4607      	mov	r7, r0
    IPAddress addr;
   de662:	f7fe fb71 	bl	dcd48 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   de666:	4621      	mov	r1, r4
   de668:	2218      	movs	r2, #24
   de66a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   de66c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   de66e:	f001 fcb1 	bl	dffd4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   de672:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   de674:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   de678:	4621      	mov	r1, r4
   de67a:	466b      	mov	r3, sp
   de67c:	aa0c      	add	r2, sp, #48	; 0x30
   de67e:	4630      	mov	r0, r6
   de680:	f7fd fc30 	bl	dbee4 <netdb_getaddrinfo>
    if (!r) {
   de684:	4604      	mov	r4, r0
   de686:	2800      	cmp	r0, #0
   de688:	d146      	bne.n	de718 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   de68a:	4602      	mov	r2, r0
   de68c:	2101      	movs	r1, #1
   de68e:	6868      	ldr	r0, [r5, #4]
   de690:	f7fd fe50 	bl	dc334 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   de694:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   de696:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   de698:	4622      	mov	r2, r4
   de69a:	6868      	ldr	r0, [r5, #4]
   de69c:	f7fd fe4a 	bl	dc334 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   de6a0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   de6a2:	4681      	mov	r9, r0
        bool ok = false;
   de6a4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   de6a6:	2e00      	cmp	r6, #0
   de6a8:	d036      	beq.n	de718 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   de6aa:	2900      	cmp	r1, #0
   de6ac:	d134      	bne.n	de718 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   de6ae:	6873      	ldr	r3, [r6, #4]
   de6b0:	2b02      	cmp	r3, #2
   de6b2:	d003      	beq.n	de6bc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   de6b4:	2b0a      	cmp	r3, #10
   de6b6:	d00b      	beq.n	de6d0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   de6b8:	69f6      	ldr	r6, [r6, #28]
   de6ba:	e7f4      	b.n	de6a6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   de6bc:	f1b8 0f00 	cmp.w	r8, #0
   de6c0:	d004      	beq.n	de6cc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   de6c2:	6971      	ldr	r1, [r6, #20]
   de6c4:	4638      	mov	r0, r7
   de6c6:	3104      	adds	r1, #4
   de6c8:	f7fe fb6b 	bl	dcda2 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   de6cc:	4641      	mov	r1, r8
   de6ce:	e7f3      	b.n	de6b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   de6d0:	f1b9 0f00 	cmp.w	r9, #0
   de6d4:	d101      	bne.n	de6da <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   de6d6:	4649      	mov	r1, r9
   de6d8:	e7ee      	b.n	de6b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   de6da:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   de6dc:	2210      	movs	r2, #16
   de6de:	a801      	add	r0, sp, #4
   de6e0:	f001 fc78 	bl	dffd4 <memset>
                    a.v = 6;
   de6e4:	2306      	movs	r3, #6
   de6e6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   de6ea:	ad01      	add	r5, sp, #4
   de6ec:	f104 0308 	add.w	r3, r4, #8
   de6f0:	3418      	adds	r4, #24
   de6f2:	6818      	ldr	r0, [r3, #0]
   de6f4:	6859      	ldr	r1, [r3, #4]
   de6f6:	462a      	mov	r2, r5
   de6f8:	c203      	stmia	r2!, {r0, r1}
   de6fa:	3308      	adds	r3, #8
   de6fc:	42a3      	cmp	r3, r4
   de6fe:	4615      	mov	r5, r2
   de700:	d1f7      	bne.n	de6f2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   de702:	a901      	add	r1, sp, #4
   de704:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   de706:	ad07      	add	r5, sp, #28
   de708:	f7fe fb2c 	bl	dcd64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   de70c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   de70e:	1d3c      	adds	r4, r7, #4
   de710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   de712:	682b      	ldr	r3, [r5, #0]
   de714:	7023      	strb	r3, [r4, #0]
   de716:	e7de      	b.n	de6d6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   de718:	9800      	ldr	r0, [sp, #0]
   de71a:	f7fd fbdb 	bl	dbed4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   de71e:	4638      	mov	r0, r7
   de720:	b015      	add	sp, #84	; 0x54
   de722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000de728 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   de728:	4b02      	ldr	r3, [pc, #8]	; (de734 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   de72a:	4a03      	ldr	r2, [pc, #12]	; (de738 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   de72c:	601a      	str	r2, [r3, #0]
   de72e:	2200      	movs	r2, #0
   de730:	605a      	str	r2, [r3, #4]

} // spark
   de732:	4770      	bx	lr
   de734:	2003e5a4 	.word	0x2003e5a4
   de738:	000e2e34 	.word	0x000e2e34

000de73c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   de73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   de73e:	4606      	mov	r6, r0
   de740:	460d      	mov	r5, r1
  size_t n = 0;
   de742:	188f      	adds	r7, r1, r2
   de744:	2400      	movs	r4, #0
  while (size--) {
   de746:	42bd      	cmp	r5, r7
   de748:	d00c      	beq.n	de764 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   de74a:	6833      	ldr	r3, [r6, #0]
   de74c:	f815 1b01 	ldrb.w	r1, [r5], #1
   de750:	689b      	ldr	r3, [r3, #8]
   de752:	4630      	mov	r0, r6
   de754:	4798      	blx	r3
     if (chunk>=0)
   de756:	1e03      	subs	r3, r0, #0
   de758:	db01      	blt.n	de75e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   de75a:	441c      	add	r4, r3
  while (size--) {
   de75c:	e7f3      	b.n	de746 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   de75e:	2c00      	cmp	r4, #0
   de760:	bf08      	it	eq
   de762:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   de764:	4620      	mov	r0, r4
   de766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000de768 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   de768:	b513      	push	{r0, r1, r4, lr}
   de76a:	4604      	mov	r4, r0
    }
   de76c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   de76e:	b159      	cbz	r1, de788 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   de770:	9101      	str	r1, [sp, #4]
   de772:	f001 fcba 	bl	e00ea <strlen>
   de776:	6823      	ldr	r3, [r4, #0]
   de778:	9901      	ldr	r1, [sp, #4]
   de77a:	68db      	ldr	r3, [r3, #12]
   de77c:	4602      	mov	r2, r0
   de77e:	4620      	mov	r0, r4
    }
   de780:	b002      	add	sp, #8
   de782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   de786:	4718      	bx	r3
    }
   de788:	b002      	add	sp, #8
   de78a:	bd10      	pop	{r4, pc}

000de78c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   de78c:	6803      	ldr	r3, [r0, #0]
   de78e:	689b      	ldr	r3, [r3, #8]
   de790:	4718      	bx	r3

000de792 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   de792:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   de794:	210d      	movs	r1, #13
{
   de796:	4605      	mov	r5, r0
  size_t n = print('\r');
   de798:	f7ff fff8 	bl	de78c <_ZN5Print5printEc>
  n += print('\n');
   de79c:	210a      	movs	r1, #10
  size_t n = print('\r');
   de79e:	4604      	mov	r4, r0
  n += print('\n');
   de7a0:	4628      	mov	r0, r5
   de7a2:	f7ff fff3 	bl	de78c <_ZN5Print5printEc>
  return n;
}
   de7a6:	4420      	add	r0, r4
   de7a8:	bd38      	pop	{r3, r4, r5, pc}

000de7aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   de7aa:	b530      	push	{r4, r5, lr}
   de7ac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   de7ae:	2300      	movs	r3, #0
   de7b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   de7b4:	2a01      	cmp	r2, #1
   de7b6:	bf98      	it	ls
   de7b8:	220a      	movls	r2, #10
   de7ba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   de7bc:	460d      	mov	r5, r1
   de7be:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   de7c2:	fb01 5312 	mls	r3, r1, r2, r5
   de7c6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   de7ca:	2b09      	cmp	r3, #9
   de7cc:	bf94      	ite	ls
   de7ce:	3330      	addls	r3, #48	; 0x30
   de7d0:	3337      	addhi	r3, #55	; 0x37
   de7d2:	b2db      	uxtb	r3, r3
  } while(n);
   de7d4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   de7d6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   de7da:	d9ef      	bls.n	de7bc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   de7dc:	4621      	mov	r1, r4
   de7de:	f7ff ffc3 	bl	de768 <_ZN5Print5writeEPKc>
}
   de7e2:	b00b      	add	sp, #44	; 0x2c
   de7e4:	bd30      	pop	{r4, r5, pc}

000de7e6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   de7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de7ea:	b086      	sub	sp, #24
   de7ec:	af00      	add	r7, sp, #0
   de7ee:	4605      	mov	r5, r0
   de7f0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   de7f2:	1d38      	adds	r0, r7, #4
   de7f4:	2114      	movs	r1, #20
{
   de7f6:	4614      	mov	r4, r2
    va_copy(args2, args);
   de7f8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   de7fa:	f7fd fe13 	bl	dc424 <vsnprintf>

    if (n<bufsize)
   de7fe:	2813      	cmp	r0, #19
   de800:	d80e      	bhi.n	de820 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   de802:	1d39      	adds	r1, r7, #4
   de804:	4628      	mov	r0, r5
   de806:	f7ff ffaf 	bl	de768 <_ZN5Print5writeEPKc>
   de80a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   de80c:	b11e      	cbz	r6, de816 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   de80e:	4628      	mov	r0, r5
   de810:	f7ff ffbf 	bl	de792 <_ZN5Print7printlnEv>
   de814:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   de816:	4620      	mov	r0, r4
   de818:	3718      	adds	r7, #24
   de81a:	46bd      	mov	sp, r7
   de81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   de820:	f100 0308 	add.w	r3, r0, #8
   de824:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   de828:	46e8      	mov	r8, sp
        char bigger[n+1];
   de82a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   de82e:	4622      	mov	r2, r4
   de830:	1c41      	adds	r1, r0, #1
   de832:	683b      	ldr	r3, [r7, #0]
   de834:	4668      	mov	r0, sp
   de836:	f7fd fdf5 	bl	dc424 <vsnprintf>
  return write(str);
   de83a:	4669      	mov	r1, sp
   de83c:	4628      	mov	r0, r5
   de83e:	f7ff ff93 	bl	de768 <_ZN5Print5writeEPKc>
   de842:	4604      	mov	r4, r0
   de844:	46c5      	mov	sp, r8
   de846:	e7e1      	b.n	de80c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000de848 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   de848:	4b01      	ldr	r3, [pc, #4]	; (de850 <_GLOBAL__sub_I_RGB+0x8>)
   de84a:	2200      	movs	r2, #0
   de84c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   de84e:	4770      	bx	lr
   de850:	2003e5ac 	.word	0x2003e5ac

000de854 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   de854:	b510      	push	{r4, lr}
   de856:	4604      	mov	r4, r0
   de858:	4608      	mov	r0, r1
{
    _spi = spi;
   de85a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   de85c:	f7fd fb4a 	bl	dbef4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   de860:	2300      	movs	r3, #0
   de862:	6063      	str	r3, [r4, #4]
}
   de864:	4620      	mov	r0, r4
   de866:	bd10      	pop	{r4, pc}

000de868 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   de868:	b510      	push	{r4, lr}
   de86a:	4604      	mov	r4, r0
{
	free(buffer);
   de86c:	6800      	ldr	r0, [r0, #0]
   de86e:	f7fd fdb1 	bl	dc3d4 <free>
}
   de872:	4620      	mov	r0, r4
   de874:	bd10      	pop	{r4, pc}

000de876 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   de876:	b510      	push	{r4, lr}
   de878:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   de87a:	6800      	ldr	r0, [r0, #0]
   de87c:	b108      	cbz	r0, de882 <_ZN6String10invalidateEv+0xc>
   de87e:	f7fd fda9 	bl	dc3d4 <free>
	buffer = NULL;
   de882:	2300      	movs	r3, #0
	capacity = len = 0;
   de884:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   de888:	6023      	str	r3, [r4, #0]
}
   de88a:	bd10      	pop	{r4, pc}

000de88c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   de88c:	b538      	push	{r3, r4, r5, lr}
   de88e:	4604      	mov	r4, r0
   de890:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   de892:	6800      	ldr	r0, [r0, #0]
   de894:	3101      	adds	r1, #1
   de896:	f7fd fda5 	bl	dc3e4 <realloc>
	if (newbuffer) {
   de89a:	b110      	cbz	r0, de8a2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   de89c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   de8a0:	2001      	movs	r0, #1
	}
	return 0;
}
   de8a2:	bd38      	pop	{r3, r4, r5, pc}

000de8a4 <_ZN6String7reserveEj>:
{
   de8a4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   de8a6:	6803      	ldr	r3, [r0, #0]
{
   de8a8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   de8aa:	b123      	cbz	r3, de8b6 <_ZN6String7reserveEj+0x12>
   de8ac:	6843      	ldr	r3, [r0, #4]
   de8ae:	428b      	cmp	r3, r1
   de8b0:	d301      	bcc.n	de8b6 <_ZN6String7reserveEj+0x12>
   de8b2:	2001      	movs	r0, #1
}
   de8b4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   de8b6:	4620      	mov	r0, r4
   de8b8:	f7ff ffe8 	bl	de88c <_ZN6String12changeBufferEj>
   de8bc:	2800      	cmp	r0, #0
   de8be:	d0f9      	beq.n	de8b4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   de8c0:	68a3      	ldr	r3, [r4, #8]
   de8c2:	2b00      	cmp	r3, #0
   de8c4:	d1f5      	bne.n	de8b2 <_ZN6String7reserveEj+0xe>
   de8c6:	6822      	ldr	r2, [r4, #0]
   de8c8:	7013      	strb	r3, [r2, #0]
   de8ca:	e7f2      	b.n	de8b2 <_ZN6String7reserveEj+0xe>

000de8cc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   de8cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   de8ce:	460d      	mov	r5, r1
	if (!reserve(length)) {
   de8d0:	4611      	mov	r1, r2
   de8d2:	9201      	str	r2, [sp, #4]
{
   de8d4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   de8d6:	f7ff ffe5 	bl	de8a4 <_ZN6String7reserveEj>
   de8da:	9a01      	ldr	r2, [sp, #4]
   de8dc:	b928      	cbnz	r0, de8ea <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   de8de:	4620      	mov	r0, r4
   de8e0:	f7ff ffc9 	bl	de876 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   de8e4:	4620      	mov	r0, r4
   de8e6:	b003      	add	sp, #12
   de8e8:	bd30      	pop	{r4, r5, pc}
	len = length;
   de8ea:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   de8ec:	4629      	mov	r1, r5
   de8ee:	6820      	ldr	r0, [r4, #0]
   de8f0:	f001 fb48 	bl	dff84 <memcpy>
	buffer[len] = 0;
   de8f4:	6822      	ldr	r2, [r4, #0]
   de8f6:	68a3      	ldr	r3, [r4, #8]
   de8f8:	2100      	movs	r1, #0
   de8fa:	54d1      	strb	r1, [r2, r3]
	return *this;
   de8fc:	e7f2      	b.n	de8e4 <_ZN6String4copyEPKcj+0x18>

000de8fe <_ZN6StringC1EPKc>:
	buffer = NULL;
   de8fe:	2300      	movs	r3, #0
String::String(const char *cstr)
   de900:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   de902:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   de906:	4604      	mov	r4, r0
	len = 0;
   de908:	6083      	str	r3, [r0, #8]
	flags = 0;
   de90a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   de90c:	b141      	cbz	r1, de920 <_ZN6StringC1EPKc+0x22>
   de90e:	4608      	mov	r0, r1
   de910:	9101      	str	r1, [sp, #4]
   de912:	f001 fbea 	bl	e00ea <strlen>
   de916:	9901      	ldr	r1, [sp, #4]
   de918:	4602      	mov	r2, r0
   de91a:	4620      	mov	r0, r4
   de91c:	f7ff ffd6 	bl	de8cc <_ZN6String4copyEPKcj>
}
   de920:	4620      	mov	r0, r4
   de922:	b002      	add	sp, #8
   de924:	bd10      	pop	{r4, pc}

000de926 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   de926:	b538      	push	{r3, r4, r5, lr}
   de928:	4605      	mov	r5, r0
	if (buffer) {
   de92a:	6800      	ldr	r0, [r0, #0]
{
   de92c:	460c      	mov	r4, r1
	if (buffer) {
   de92e:	b168      	cbz	r0, de94c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   de930:	686a      	ldr	r2, [r5, #4]
   de932:	688b      	ldr	r3, [r1, #8]
   de934:	429a      	cmp	r2, r3
   de936:	d307      	bcc.n	de948 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   de938:	6809      	ldr	r1, [r1, #0]
   de93a:	f001 fbb1 	bl	e00a0 <strcpy>
			len = rhs.len;
   de93e:	68a3      	ldr	r3, [r4, #8]
   de940:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   de942:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   de944:	60a3      	str	r3, [r4, #8]
}
   de946:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   de948:	f7fd fd44 	bl	dc3d4 <free>
	buffer = rhs.buffer;
   de94c:	6823      	ldr	r3, [r4, #0]
   de94e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   de950:	6863      	ldr	r3, [r4, #4]
   de952:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   de954:	68a3      	ldr	r3, [r4, #8]
   de956:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   de958:	2300      	movs	r3, #0
	rhs.capacity = 0;
   de95a:	e9c4 3300 	strd	r3, r3, [r4]
   de95e:	e7f1      	b.n	de944 <_ZN6String4moveERS_+0x1e>

000de960 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   de960:	b510      	push	{r4, lr}
	buffer = NULL;
   de962:	2300      	movs	r3, #0
	capacity = 0;
   de964:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   de968:	4604      	mov	r4, r0
	len = 0;
   de96a:	6083      	str	r3, [r0, #8]
	flags = 0;
   de96c:	7303      	strb	r3, [r0, #12]
	move(rval);
   de96e:	f7ff ffda 	bl	de926 <_ZN6String4moveERS_>
}
   de972:	4620      	mov	r0, r4
   de974:	bd10      	pop	{r4, pc}

000de976 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   de976:	4288      	cmp	r0, r1
{
   de978:	b510      	push	{r4, lr}
   de97a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   de97c:	d005      	beq.n	de98a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   de97e:	680b      	ldr	r3, [r1, #0]
   de980:	b12b      	cbz	r3, de98e <_ZN6StringaSERKS_+0x18>
   de982:	688a      	ldr	r2, [r1, #8]
   de984:	4619      	mov	r1, r3
   de986:	f7ff ffa1 	bl	de8cc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   de98a:	4620      	mov	r0, r4
   de98c:	bd10      	pop	{r4, pc}
	else invalidate();
   de98e:	f7ff ff72 	bl	de876 <_ZN6String10invalidateEv>
   de992:	e7fa      	b.n	de98a <_ZN6StringaSERKS_+0x14>

000de994 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   de994:	b510      	push	{r4, lr}
	buffer = NULL;
   de996:	2300      	movs	r3, #0
String::String(const String &value)
   de998:	4604      	mov	r4, r0
	capacity = 0;
   de99a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   de99e:	6083      	str	r3, [r0, #8]
	flags = 0;
   de9a0:	7303      	strb	r3, [r0, #12]
	*this = value;
   de9a2:	f7ff ffe8 	bl	de976 <_ZN6StringaSERKS_>
}
   de9a6:	4620      	mov	r0, r4
   de9a8:	bd10      	pop	{r4, pc}

000de9aa <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   de9aa:	4288      	cmp	r0, r1
{
   de9ac:	b510      	push	{r4, lr}
   de9ae:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   de9b0:	d001      	beq.n	de9b6 <_ZN6StringaSEOS_+0xc>
   de9b2:	f7ff ffb8 	bl	de926 <_ZN6String4moveERS_>
	return *this;
}
   de9b6:	4620      	mov	r0, r4
   de9b8:	bd10      	pop	{r4, pc}

000de9ba <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   de9ba:	b513      	push	{r0, r1, r4, lr}
   de9bc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   de9be:	b159      	cbz	r1, de9d8 <_ZN6StringaSEPKc+0x1e>
   de9c0:	4608      	mov	r0, r1
   de9c2:	9101      	str	r1, [sp, #4]
   de9c4:	f001 fb91 	bl	e00ea <strlen>
   de9c8:	9901      	ldr	r1, [sp, #4]
   de9ca:	4602      	mov	r2, r0
   de9cc:	4620      	mov	r0, r4
   de9ce:	f7ff ff7d 	bl	de8cc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   de9d2:	4620      	mov	r0, r4
   de9d4:	b002      	add	sp, #8
   de9d6:	bd10      	pop	{r4, pc}
	else invalidate();
   de9d8:	f7ff ff4d 	bl	de876 <_ZN6String10invalidateEv>
   de9dc:	e7f9      	b.n	de9d2 <_ZN6StringaSEPKc+0x18>

000de9de <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   de9de:	b570      	push	{r4, r5, r6, lr}
   de9e0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   de9e2:	460e      	mov	r6, r1
   de9e4:	b909      	cbnz	r1, de9ea <_ZN6String6concatEPKcj+0xc>
   de9e6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   de9e8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   de9ea:	b16a      	cbz	r2, dea08 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   de9ec:	6884      	ldr	r4, [r0, #8]
   de9ee:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   de9f0:	4621      	mov	r1, r4
   de9f2:	f7ff ff57 	bl	de8a4 <_ZN6String7reserveEj>
   de9f6:	2800      	cmp	r0, #0
   de9f8:	d0f5      	beq.n	de9e6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   de9fa:	6828      	ldr	r0, [r5, #0]
   de9fc:	68ab      	ldr	r3, [r5, #8]
   de9fe:	4631      	mov	r1, r6
   dea00:	4418      	add	r0, r3
   dea02:	f001 fb4d 	bl	e00a0 <strcpy>
	len = newlen;
   dea06:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   dea08:	2001      	movs	r0, #1
   dea0a:	e7ed      	b.n	de9e8 <_ZN6String6concatEPKcj+0xa>

000dea0c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   dea0c:	b513      	push	{r0, r1, r4, lr}
   dea0e:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   dea10:	4608      	mov	r0, r1
	if (!cstr) return 0;
   dea12:	b151      	cbz	r1, dea2a <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   dea14:	9101      	str	r1, [sp, #4]
   dea16:	f001 fb68 	bl	e00ea <strlen>
   dea1a:	9901      	ldr	r1, [sp, #4]
   dea1c:	4602      	mov	r2, r0
   dea1e:	4620      	mov	r0, r4
}
   dea20:	b002      	add	sp, #8
   dea22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   dea26:	f7ff bfda 	b.w	de9de <_ZN6String6concatEPKcj>
}
   dea2a:	b002      	add	sp, #8
   dea2c:	bd10      	pop	{r4, pc}

000dea2e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dea2e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dea30:	688a      	ldr	r2, [r1, #8]
   dea32:	6809      	ldr	r1, [r1, #0]
{
   dea34:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dea36:	f7ff ffd2 	bl	de9de <_ZN6String6concatEPKcj>
   dea3a:	b910      	cbnz	r0, dea42 <_ZplRK15StringSumHelperRK6String+0x14>
   dea3c:	4620      	mov	r0, r4
   dea3e:	f7ff ff1a 	bl	de876 <_ZN6String10invalidateEv>
	return a;
}
   dea42:	4620      	mov	r0, r4
   dea44:	bd10      	pop	{r4, pc}

000dea46 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dea46:	b513      	push	{r0, r1, r4, lr}
   dea48:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dea4a:	b929      	cbnz	r1, dea58 <_ZplRK15StringSumHelperPKc+0x12>
   dea4c:	4620      	mov	r0, r4
   dea4e:	f7ff ff12 	bl	de876 <_ZN6String10invalidateEv>
	return a;
}
   dea52:	4620      	mov	r0, r4
   dea54:	b002      	add	sp, #8
   dea56:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dea58:	4608      	mov	r0, r1
   dea5a:	9101      	str	r1, [sp, #4]
   dea5c:	f001 fb45 	bl	e00ea <strlen>
   dea60:	9901      	ldr	r1, [sp, #4]
   dea62:	4602      	mov	r2, r0
   dea64:	4620      	mov	r0, r4
   dea66:	f7ff ffba 	bl	de9de <_ZN6String6concatEPKcj>
   dea6a:	2800      	cmp	r0, #0
   dea6c:	d0ee      	beq.n	dea4c <_ZplRK15StringSumHelperPKc+0x6>
   dea6e:	e7f0      	b.n	dea52 <_ZplRK15StringSumHelperPKc+0xc>

000dea70 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   dea70:	6802      	ldr	r2, [r0, #0]
{
   dea72:	460b      	mov	r3, r1
   dea74:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
   dea76:	b162      	cbz	r2, dea92 <_ZNK6String9compareToERKS_+0x22>
   dea78:	b941      	cbnz	r1, dea8c <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   dea7a:	6880      	ldr	r0, [r0, #8]
   dea7c:	b160      	cbz	r0, dea98 <_ZNK6String9compareToERKS_+0x28>
   dea7e:	7810      	ldrb	r0, [r2, #0]
   dea80:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   dea82:	6898      	ldr	r0, [r3, #8]
   dea84:	b140      	cbz	r0, dea98 <_ZNK6String9compareToERKS_+0x28>
   dea86:	7809      	ldrb	r1, [r1, #0]
   dea88:	4248      	negs	r0, r1
   dea8a:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   dea8c:	4610      	mov	r0, r2
   dea8e:	f001 bafd 	b.w	e008c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   dea92:	2900      	cmp	r1, #0
   dea94:	d1f5      	bne.n	dea82 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   dea96:	4608      	mov	r0, r1
}
   dea98:	4770      	bx	lr

000dea9a <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   dea9a:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   dea9c:	6882      	ldr	r2, [r0, #8]
   dea9e:	688b      	ldr	r3, [r1, #8]
   deaa0:	429a      	cmp	r2, r3
   deaa2:	d105      	bne.n	deab0 <_ZNK6String6equalsERKS_+0x16>
   deaa4:	f7ff ffe4 	bl	dea70 <_ZNK6String9compareToERKS_>
   deaa8:	fab0 f080 	clz	r0, r0
   deaac:	0940      	lsrs	r0, r0, #5
}
   deaae:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   deab0:	2000      	movs	r0, #0
   deab2:	e7fc      	b.n	deaae <_ZNK6String6equalsERKS_+0x14>

000deab4 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   deab4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   deab6:	6882      	ldr	r2, [r0, #8]
   deab8:	b93a      	cbnz	r2, deaca <_ZNK6String6equalsEPKc+0x16>
   deaba:	b121      	cbz	r1, deac6 <_ZNK6String6equalsEPKc+0x12>
   deabc:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   deabe:	fab0 f080 	clz	r0, r0
   deac2:	0940      	lsrs	r0, r0, #5
   deac4:	e000      	b.n	deac8 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   deac6:	2001      	movs	r0, #1
}
   deac8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   deaca:	6800      	ldr	r0, [r0, #0]
   deacc:	b909      	cbnz	r1, dead2 <_ZNK6String6equalsEPKc+0x1e>
   deace:	7800      	ldrb	r0, [r0, #0]
   dead0:	e7f5      	b.n	deabe <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   dead2:	f001 fadb 	bl	e008c <strcmp>
   dead6:	e7f2      	b.n	deabe <_ZNK6String6equalsEPKc+0xa>

000dead8 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   dead8:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   deada:	6883      	ldr	r3, [r0, #8]
   deadc:	688a      	ldr	r2, [r1, #8]
   deade:	4293      	cmp	r3, r2
   deae0:	d30b      	bcc.n	deafa <_ZNK6String8endsWithERKS_+0x22>
   deae2:	6800      	ldr	r0, [r0, #0]
   deae4:	b140      	cbz	r0, deaf8 <_ZNK6String8endsWithERKS_+0x20>
   deae6:	6809      	ldr	r1, [r1, #0]
   deae8:	b149      	cbz	r1, deafe <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   deaea:	1a9b      	subs	r3, r3, r2
   deaec:	4418      	add	r0, r3
   deaee:	f001 facd 	bl	e008c <strcmp>
   deaf2:	fab0 f080 	clz	r0, r0
   deaf6:	0940      	lsrs	r0, r0, #5
}
   deaf8:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   deafa:	2000      	movs	r0, #0
   deafc:	e7fc      	b.n	deaf8 <_ZNK6String8endsWithERKS_+0x20>
   deafe:	4608      	mov	r0, r1
   deb00:	e7fa      	b.n	deaf8 <_ZNK6String8endsWithERKS_+0x20>
	...

000deb04 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   deb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   deb06:	429a      	cmp	r2, r3
{
   deb08:	460f      	mov	r7, r1
   deb0a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   deb0c:	490c      	ldr	r1, [pc, #48]	; (deb40 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   deb0e:	bf88      	it	hi
   deb10:	4613      	movhi	r3, r2
{
   deb12:	4614      	mov	r4, r2
   deb14:	4606      	mov	r6, r0
	if (left > right) {
   deb16:	bf84      	itt	hi
   deb18:	462c      	movhi	r4, r5
   deb1a:	461d      	movhi	r5, r3
	String out;
   deb1c:	f7ff feef 	bl	de8fe <_ZN6StringC1EPKc>
	if (left > len) return out;
   deb20:	68ba      	ldr	r2, [r7, #8]
   deb22:	42a2      	cmp	r2, r4
   deb24:	d30a      	bcc.n	deb3c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   deb26:	6839      	ldr	r1, [r7, #0]
   deb28:	42aa      	cmp	r2, r5
   deb2a:	bf94      	ite	ls
   deb2c:	ebc4 0202 	rsbls	r2, r4, r2
   deb30:	ebc4 0205 	rsbhi	r2, r4, r5
   deb34:	4421      	add	r1, r4
   deb36:	4630      	mov	r0, r6
   deb38:	f7ff fec8 	bl	de8cc <_ZN6String4copyEPKcj>
	return out;
}
   deb3c:	4630      	mov	r0, r6
   deb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   deb40:	000e296f 	.word	0x000e296f

000deb44 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   deb44:	b40e      	push	{r1, r2, r3}
   deb46:	b570      	push	{r4, r5, r6, lr}
   deb48:	b087      	sub	sp, #28
   deb4a:	ad0b      	add	r5, sp, #44	; 0x2c
   deb4c:	4604      	mov	r4, r0
   deb4e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   deb52:	9201      	str	r2, [sp, #4]
   deb54:	462b      	mov	r3, r5
   deb56:	2105      	movs	r1, #5
   deb58:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   deb5a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   deb5c:	f7fd fc62 	bl	dc424 <vsnprintf>
    va_end(marker);

    String result;
   deb60:	490b      	ldr	r1, [pc, #44]	; (deb90 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   deb62:	4606      	mov	r6, r0
    String result;
   deb64:	4620      	mov	r0, r4
   deb66:	f7ff feca 	bl	de8fe <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   deb6a:	4631      	mov	r1, r6
   deb6c:	4620      	mov	r0, r4
   deb6e:	f7ff fe99 	bl	de8a4 <_ZN6String7reserveEj>
    if (result.buffer) {
   deb72:	6820      	ldr	r0, [r4, #0]
   deb74:	b130      	cbz	r0, deb84 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   deb76:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   deb78:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   deb7a:	462b      	mov	r3, r5
   deb7c:	1c71      	adds	r1, r6, #1
   deb7e:	f7fd fc51 	bl	dc424 <vsnprintf>
        va_end(marker);
        result.len = n;
   deb82:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   deb84:	4620      	mov	r0, r4
   deb86:	b007      	add	sp, #28
   deb88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   deb8c:	b003      	add	sp, #12
   deb8e:	4770      	bx	lr
   deb90:	000e296f 	.word	0x000e296f

000deb94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   deb94:	b510      	push	{r4, lr}
   deb96:	4604      	mov	r4, r0
        if (wakeupSource_) {
   deb98:	6800      	ldr	r0, [r0, #0]
   deb9a:	b118      	cbz	r0, deba4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   deb9c:	f7fd fc1a 	bl	dc3d4 <free>
            wakeupSource_ = nullptr;
   deba0:	2300      	movs	r3, #0
   deba2:	6023      	str	r3, [r4, #0]
        }
    }
   deba4:	bd10      	pop	{r4, pc}

000deba6 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   deba6:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   deba8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   debac:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   debae:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   debb0:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   debb2:	f853 2f06 	ldr.w	r2, [r3, #6]!
   debb6:	f8c0 2006 	str.w	r2, [r0, #6]
   debba:	889b      	ldrh	r3, [r3, #4]
   debbc:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   debbe:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   debc0:	f7ff ffe8 	bl	deb94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   debc4:	682b      	ldr	r3, [r5, #0]
   debc6:	b113      	cbz	r3, debce <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   debc8:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   debca:	2300      	movs	r3, #0
   debcc:	602b      	str	r3, [r5, #0]
    }
   debce:	4620      	mov	r0, r4
   debd0:	bd38      	pop	{r3, r4, r5, pc}
	...

000debd4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   debd4:	b538      	push	{r3, r4, r5, lr}
   debd6:	460c      	mov	r4, r1
   debd8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   debda:	f7ff ffdb 	bl	deb94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   debde:	b144      	cbz	r4, debf2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   debe0:	8820      	ldrh	r0, [r4, #0]
   debe2:	f7fd fbef 	bl	dc3c4 <malloc>
   debe6:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   debe8:	b128      	cbz	r0, debf6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   debea:	8822      	ldrh	r2, [r4, #0]
   debec:	4621      	mov	r1, r4
   debee:	f001 f9c9 	bl	dff84 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   debf2:	2000      	movs	r0, #0
    }
   debf4:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   debf6:	4801      	ldr	r0, [pc, #4]	; (debfc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   debf8:	e7fc      	b.n	debf4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   debfa:	bf00      	nop
   debfc:	fffffefc 	.word	0xfffffefc

000dec00 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   dec00:	b5f0      	push	{r4, r5, r6, r7, lr}
   dec02:	4d2d      	ldr	r5, [pc, #180]	; (decb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   dec04:	7d0b      	ldrb	r3, [r1, #20]
   dec06:	4604      	mov	r4, r0
   dec08:	b08b      	sub	sp, #44	; 0x2c
   dec0a:	4608      	mov	r0, r1
   dec0c:	1daf      	adds	r7, r5, #6
   dec0e:	2b00      	cmp	r3, #0
   dec10:	d038      	beq.n	dec84 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   dec12:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   dec14:	791b      	ldrb	r3, [r3, #4]
   dec16:	2b00      	cmp	r3, #0
   dec18:	d034      	beq.n	dec84 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   dec1a:	2200      	movs	r2, #0
    SleepResult() {}
   dec1c:	4b27      	ldr	r3, [pc, #156]	; (decbc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dec1e:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   dec20:	a902      	add	r1, sp, #8
   dec22:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   dec24:	9202      	str	r2, [sp, #8]
   dec26:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   dec2a:	f88d 200e 	strb.w	r2, [sp, #14]
   dec2e:	f7fd fb0f 	bl	dc250 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   dec32:	f8dd 300e 	ldr.w	r3, [sp, #14]
   dec36:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   dec3a:	b200      	sxth	r0, r0
   dec3c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   dec40:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   dec44:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   dec46:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dec48:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dec4a:	4628      	mov	r0, r5
   dec4c:	f7ff ffc2 	bl	debd4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dec50:	a802      	add	r0, sp, #8
   dec52:	f7ff ff9f 	bl	deb94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dec56:	2300      	movs	r3, #0
   dec58:	6023      	str	r3, [r4, #0]
   dec5a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dec5c:	71a3      	strb	r3, [r4, #6]
   dec5e:	8123      	strh	r3, [r4, #8]
   dec60:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dec64:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dec66:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dec6a:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dec6c:	683b      	ldr	r3, [r7, #0]
   dec6e:	f8c4 3006 	str.w	r3, [r4, #6]
   dec72:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dec74:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dec76:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dec78:	4620      	mov	r0, r4
   dec7a:	f7ff ffab 	bl	debd4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dec7e:	4620      	mov	r0, r4
   dec80:	b00b      	add	sp, #44	; 0x2c
   dec82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dec84:	2600      	movs	r6, #0
   dec86:	2320      	movs	r3, #32
   dec88:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dec8c:	4b0c      	ldr	r3, [pc, #48]	; (decc0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dec8e:	9300      	str	r3, [sp, #0]
   dec90:	490c      	ldr	r1, [pc, #48]	; (decc4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dec92:	4633      	mov	r3, r6
   dec94:	aa02      	add	r2, sp, #8
   dec96:	2032      	movs	r0, #50	; 0x32
   dec98:	f7fd fa4c 	bl	dc134 <log_message>
    SleepResult() {}
   dec9c:	4b07      	ldr	r3, [pc, #28]	; (decbc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dec9e:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   deca0:	a902      	add	r1, sp, #8
        error_ = error;
   deca2:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   deca6:	4804      	ldr	r0, [pc, #16]	; (decb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   deca8:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   decaa:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   decae:	f8ad 300c 	strh.w	r3, [sp, #12]
   decb2:	f7ff ff78 	bl	deba6 <_ZN17SystemSleepResultaSEOS_>
   decb6:	e7cb      	b.n	dec50 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   decb8:	2003e5bc 	.word	0x2003e5bc
   decbc:	ffff0000 	.word	0xffff0000
   decc0:	000e2e6f 	.word	0x000e2e6f
   decc4:	000e2e68 	.word	0x000e2e68

000decc8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   decc8:	4b05      	ldr	r3, [pc, #20]	; (dece0 <_GLOBAL__sub_I_System+0x18>)
   decca:	2202      	movs	r2, #2
   deccc:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   decce:	4b05      	ldr	r3, [pc, #20]	; (dece4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   decd0:	4a05      	ldr	r2, [pc, #20]	; (dece8 <_GLOBAL__sub_I_System+0x20>)
   decd2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   decd4:	2000      	movs	r0, #0
   decd6:	6018      	str	r0, [r3, #0]
   decd8:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   decda:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   decdc:	f7fd ba64 	b.w	dc1a8 <set_system_mode>
   dece0:	2003e5c8 	.word	0x2003e5c8
   dece4:	2003e5bc 	.word	0x2003e5bc
   dece8:	ffff0000 	.word	0xffff0000

000decec <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   decec:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   decee:	2000      	movs	r0, #0
   decf0:	f7fd fae8 	bl	dc2c4 <spark_sync_time_pending>
   decf4:	b128      	cbz	r0, ded02 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   decf6:	f7fd fad5 	bl	dc2a4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   decfa:	f080 0001 	eor.w	r0, r0, #1
   decfe:	b2c0      	uxtb	r0, r0
    }
   ded00:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ded02:	2001      	movs	r0, #1
   ded04:	e7fc      	b.n	ded00 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000ded06 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   ded06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ded08:	4602      	mov	r2, r0
   ded0a:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   ded0c:	4668      	mov	r0, sp
    struct timeval tv = {
   ded0e:	2100      	movs	r1, #0
    };
   ded10:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   ded14:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   ded18:	f7fd f83c 	bl	dbd94 <hal_rtc_set_time>
   ded1c:	4602      	mov	r2, r0
   ded1e:	b910      	cbnz	r0, ded26 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   ded20:	4601      	mov	r1, r0
   ded22:	f7fd fa79 	bl	dc218 <system_notify_time_changed>
    }
}
   ded26:	b005      	add	sp, #20
   ded28:	f85d fb04 	ldr.w	pc, [sp], #4

000ded2c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   ded2c:	b530      	push	{r4, r5, lr}
   ded2e:	4604      	mov	r4, r0
    t += time_zone_cache;
   ded30:	4818      	ldr	r0, [pc, #96]	; (ded94 <_ZN9TimeClass7timeStrEx+0x68>)
   ded32:	e9d0 1000 	ldrd	r1, r0, [r0]
   ded36:	1852      	adds	r2, r2, r1
   ded38:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   ded3c:	4816      	ldr	r0, [pc, #88]	; (ded98 <_ZN9TimeClass7timeStrEx+0x6c>)
   ded3e:	e9d0 1000 	ldrd	r1, r0, [r0]
   ded42:	1852      	adds	r2, r2, r1
{
   ded44:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   ded46:	eb40 0303 	adc.w	r3, r0, r3
   ded4a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   ded4e:	2224      	movs	r2, #36	; 0x24
   ded50:	eb0d 0002 	add.w	r0, sp, r2
   ded54:	2100      	movs	r1, #0
   ded56:	f001 f93d 	bl	dffd4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   ded5a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   ded5c:	a909      	add	r1, sp, #36	; 0x24
   ded5e:	4668      	mov	r0, sp
   ded60:	f7fd fb90 	bl	dc484 <localtime_r>
    char ascstr[26] = {};
   ded64:	2216      	movs	r2, #22
   ded66:	4629      	mov	r1, r5
   ded68:	a803      	add	r0, sp, #12
   ded6a:	9502      	str	r5, [sp, #8]
   ded6c:	f001 f932 	bl	dffd4 <memset>
    asctime_r(&calendar_time, ascstr);
   ded70:	a902      	add	r1, sp, #8
   ded72:	a809      	add	r0, sp, #36	; 0x24
   ded74:	f001 f8c8 	bl	dff08 <asctime_r>
    int len = strlen(ascstr);
   ded78:	a802      	add	r0, sp, #8
   ded7a:	f001 f9b6 	bl	e00ea <strlen>
    ascstr[len-1] = 0; // remove final newline
   ded7e:	ab12      	add	r3, sp, #72	; 0x48
   ded80:	4418      	add	r0, r3
    return String(ascstr);
   ded82:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   ded84:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   ded88:	4620      	mov	r0, r4
   ded8a:	f7ff fdb8 	bl	de8fe <_ZN6StringC1EPKc>
}
   ded8e:	4620      	mov	r0, r4
   ded90:	b013      	add	sp, #76	; 0x4c
   ded92:	bd30      	pop	{r4, r5, pc}
   ded94:	2003e5e0 	.word	0x2003e5e0
   ded98:	2003e5d8 	.word	0x2003e5d8

000ded9c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   ded9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   deda0:	b0a5      	sub	sp, #148	; 0x94
   deda2:	4607      	mov	r7, r0
   deda4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   deda6:	a814      	add	r0, sp, #80	; 0x50
{
   deda8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dedaa:	223f      	movs	r2, #63	; 0x3f
{
   dedac:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dedae:	f001 f9b6 	bl	e011e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dedb2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dedb4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dedb6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dedba:	f001 f996 	bl	e00ea <strlen>
   dedbe:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dedc0:	bb5d      	cbnz	r5, dee1a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dedc2:	492a      	ldr	r1, [pc, #168]	; (dee6c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dedc4:	a803      	add	r0, sp, #12
   dedc6:	f001 f96b 	bl	e00a0 <strcpy>
   dedca:	ae14      	add	r6, sp, #80	; 0x50
{
   dedcc:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dedce:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dedd2:	45ab      	cmp	fp, r5
   dedd4:	d936      	bls.n	dee44 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dedd6:	46b1      	mov	r9, r6
   dedd8:	f105 0a01 	add.w	sl, r5, #1
   deddc:	f819 3b01 	ldrb.w	r3, [r9], #1
   dede0:	2b25      	cmp	r3, #37	; 0x25
   dede2:	d117      	bne.n	dee14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dede4:	7873      	ldrb	r3, [r6, #1]
   dede6:	2b7a      	cmp	r3, #122	; 0x7a
   dede8:	d114      	bne.n	dee14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dedea:	a803      	add	r0, sp, #12
   dedec:	f001 f97d 	bl	e00ea <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dedf0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dedf2:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dedf4:	1828      	adds	r0, r5, r0
   dedf6:	4418      	add	r0, r3
   dedf8:	ebab 0205 	sub.w	r2, fp, r5
   dedfc:	1cb1      	adds	r1, r6, #2
   dedfe:	f001 f8c1 	bl	dff84 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dee02:	4622      	mov	r2, r4
   dee04:	a903      	add	r1, sp, #12
   dee06:	4630      	mov	r0, r6
   dee08:	f001 f8bc 	bl	dff84 <memcpy>
            len = strlen(format_str);
   dee0c:	a814      	add	r0, sp, #80	; 0x50
   dee0e:	f001 f96c 	bl	e00ea <strlen>
   dee12:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   dee14:	464e      	mov	r6, r9
   dee16:	4655      	mov	r5, sl
   dee18:	e7d9      	b.n	dedce <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dee1a:	213c      	movs	r1, #60	; 0x3c
   dee1c:	fb95 f3f1 	sdiv	r3, r5, r1
   dee20:	2b00      	cmp	r3, #0
   dee22:	bfb8      	it	lt
   dee24:	425b      	neglt	r3, r3
   dee26:	fbb3 f2f1 	udiv	r2, r3, r1
   dee2a:	fb01 3312 	mls	r3, r1, r2, r3
   dee2e:	9300      	str	r3, [sp, #0]
   dee30:	4a0f      	ldr	r2, [pc, #60]	; (dee70 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   dee32:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dee36:	2110      	movs	r1, #16
   dee38:	a803      	add	r0, sp, #12
   dee3a:	fb95 f3f3 	sdiv	r3, r5, r3
   dee3e:	f7fd fae9 	bl	dc414 <snprintf>
   dee42:	e7c2      	b.n	dedca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   dee44:	2100      	movs	r1, #0
   dee46:	222e      	movs	r2, #46	; 0x2e
   dee48:	a808      	add	r0, sp, #32
   dee4a:	9107      	str	r1, [sp, #28]
   dee4c:	f001 f8c2 	bl	dffd4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   dee50:	4643      	mov	r3, r8
   dee52:	aa14      	add	r2, sp, #80	; 0x50
   dee54:	2132      	movs	r1, #50	; 0x32
   dee56:	a807      	add	r0, sp, #28
   dee58:	f7fd fb0c 	bl	dc474 <strftime>
    return String(buf);
   dee5c:	a907      	add	r1, sp, #28
   dee5e:	4638      	mov	r0, r7
   dee60:	f7ff fd4d 	bl	de8fe <_ZN6StringC1EPKc>
}
   dee64:	4638      	mov	r0, r7
   dee66:	b025      	add	sp, #148	; 0x94
   dee68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dee6c:	000e2e96 	.word	0x000e2e96
   dee70:	000e2e98 	.word	0x000e2e98

000dee74 <_ZN9TimeClass6formatExPKc>:
{
   dee74:	b5f0      	push	{r4, r5, r6, r7, lr}
   dee76:	b08d      	sub	sp, #52	; 0x34
   dee78:	e9cd 2300 	strd	r2, r3, [sp]
   dee7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   dee7e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   dee80:	b915      	cbnz	r5, dee88 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   dee82:	4b19      	ldr	r3, [pc, #100]	; (deee8 <_ZN9TimeClass6formatExPKc+0x74>)
   dee84:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   dee86:	b12d      	cbz	r5, dee94 <_ZN9TimeClass6formatExPKc+0x20>
   dee88:	4b18      	ldr	r3, [pc, #96]	; (deeec <_ZN9TimeClass6formatExPKc+0x78>)
   dee8a:	4628      	mov	r0, r5
   dee8c:	6819      	ldr	r1, [r3, #0]
   dee8e:	f001 f8fd 	bl	e008c <strcmp>
   dee92:	b938      	cbnz	r0, deea4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   dee94:	e9dd 2300 	ldrd	r2, r3, [sp]
   dee98:	4620      	mov	r0, r4
   dee9a:	f7ff ff47 	bl	ded2c <_ZN9TimeClass7timeStrEx>
}
   dee9e:	4620      	mov	r0, r4
   deea0:	b00d      	add	sp, #52	; 0x34
   deea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   deea4:	4e12      	ldr	r6, [pc, #72]	; (deef0 <_ZN9TimeClass6formatExPKc+0x7c>)
   deea6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   deea8:	4f12      	ldr	r7, [pc, #72]	; (deef4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   deeaa:	e9d6 3200 	ldrd	r3, r2, [r6]
   deeae:	185b      	adds	r3, r3, r1
   deeb0:	9901      	ldr	r1, [sp, #4]
   deeb2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   deeb6:	e9d7 0100 	ldrd	r0, r1, [r7]
   deeba:	181b      	adds	r3, r3, r0
   deebc:	eb41 0202 	adc.w	r2, r1, r2
   deec0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   deec4:	2100      	movs	r1, #0
   deec6:	2224      	movs	r2, #36	; 0x24
   deec8:	a803      	add	r0, sp, #12
   deeca:	f001 f883 	bl	dffd4 <memset>
    localtime_r(&t, &calendar_time);
   deece:	a903      	add	r1, sp, #12
   deed0:	4668      	mov	r0, sp
   deed2:	f7fd fad7 	bl	dc484 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   deed6:	6832      	ldr	r2, [r6, #0]
   deed8:	683b      	ldr	r3, [r7, #0]
   deeda:	a903      	add	r1, sp, #12
   deedc:	4413      	add	r3, r2
   deede:	4620      	mov	r0, r4
   deee0:	462a      	mov	r2, r5
   deee2:	f7ff ff5b 	bl	ded9c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   deee6:	e7da      	b.n	dee9e <_ZN9TimeClass6formatExPKc+0x2a>
   deee8:	2003e5d0 	.word	0x2003e5d0
   deeec:	2003e214 	.word	0x2003e214
   deef0:	2003e5e0 	.word	0x2003e5e0
   deef4:	2003e5d8 	.word	0x2003e5d8

000deef8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   deef8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   deefa:	2000      	movs	r0, #0
   deefc:	f7fc ff32 	bl	dbd64 <hal_rtc_time_is_valid>
    if (rtcstate)
   def00:	4604      	mov	r4, r0
   def02:	b9a0      	cbnz	r0, def2e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   def04:	f7fd f948 	bl	dc198 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   def08:	2801      	cmp	r0, #1
   def0a:	d110      	bne.n	def2e <_ZN9TimeClass7isValidEv+0x36>
   def0c:	4620      	mov	r0, r4
   def0e:	f7fd f97b 	bl	dc208 <system_thread_get_state>
   def12:	b960      	cbnz	r0, def2e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   def14:	f7ff feea 	bl	decec <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   def18:	b910      	cbnz	r0, def20 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   def1a:	f7fd f9b3 	bl	dc284 <spark_process>
        while (_while() && !_condition()) {
   def1e:	e7f9      	b.n	def14 <_ZN9TimeClass7isValidEv+0x1c>
   def20:	f7ff fee4 	bl	decec <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   def24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   def28:	2000      	movs	r0, #0
   def2a:	f7fc bf1b 	b.w	dbd64 <hal_rtc_time_is_valid>
}
   def2e:	4620      	mov	r0, r4
   def30:	bd10      	pop	{r4, pc}

000def32 <_ZN9TimeClass3nowEv>:
{
   def32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   def34:	f7ff ffe0 	bl	deef8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   def38:	2210      	movs	r2, #16
   def3a:	2100      	movs	r1, #0
   def3c:	4668      	mov	r0, sp
   def3e:	f001 f849 	bl	dffd4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   def42:	2100      	movs	r1, #0
   def44:	4668      	mov	r0, sp
   def46:	f7fc ff1d 	bl	dbd84 <hal_rtc_get_time>
}
   def4a:	9800      	ldr	r0, [sp, #0]
   def4c:	b005      	add	sp, #20
   def4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000def54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   def54:	4b02      	ldr	r3, [pc, #8]	; (def60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   def56:	681a      	ldr	r2, [r3, #0]
   def58:	4b02      	ldr	r3, [pc, #8]	; (def64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   def5a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   def5c:	4770      	bx	lr
   def5e:	bf00      	nop
   def60:	2003e214 	.word	0x2003e214
   def64:	2003e5d0 	.word	0x2003e5d0

000def68 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   def68:	4770      	bx	lr

000def6a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   def6a:	7441      	strb	r1, [r0, #17]
}
   def6c:	4770      	bx	lr

000def6e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   def6e:	4770      	bx	lr

000def70 <_ZN11USARTSerial17availableForWriteEv>:
{
   def70:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   def72:	7c00      	ldrb	r0, [r0, #16]
   def74:	f7fd f876 	bl	dc064 <hal_usart_available_data_for_write>
}
   def78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   def7c:	bd08      	pop	{r3, pc}

000def7e <_ZN11USARTSerial9availableEv>:
{
   def7e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   def80:	7c00      	ldrb	r0, [r0, #16]
   def82:	f7fd f847 	bl	dc014 <hal_usart_available>
}
   def86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   def8a:	bd08      	pop	{r3, pc}

000def8c <_ZN11USARTSerial4peekEv>:
{
   def8c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   def8e:	7c00      	ldrb	r0, [r0, #16]
   def90:	f7fd f850 	bl	dc034 <hal_usart_peek>
}
   def94:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   def98:	bd08      	pop	{r3, pc}

000def9a <_ZN11USARTSerial4readEv>:
{
   def9a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   def9c:	7c00      	ldrb	r0, [r0, #16]
   def9e:	f7fd f841 	bl	dc024 <hal_usart_read>
}
   defa2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   defa6:	bd08      	pop	{r3, pc}

000defa8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   defa8:	7c00      	ldrb	r0, [r0, #16]
   defaa:	f7fd b84b 	b.w	dc044 <hal_usart_flush>

000defae <_ZN11USARTSerial5writeEh>:
{
   defae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   defb0:	7c45      	ldrb	r5, [r0, #17]
{
   defb2:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   defb4:	b12d      	cbz	r5, defc2 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   defb6:	7c20      	ldrb	r0, [r4, #16]
}
   defb8:	b003      	add	sp, #12
   defba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   defbe:	f7fd b821 	b.w	dc004 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   defc2:	7c00      	ldrb	r0, [r0, #16]
   defc4:	9101      	str	r1, [sp, #4]
   defc6:	f7fd f84d 	bl	dc064 <hal_usart_available_data_for_write>
   defca:	2800      	cmp	r0, #0
   defcc:	9901      	ldr	r1, [sp, #4]
   defce:	dcf2      	bgt.n	defb6 <_ZN11USARTSerial5writeEh+0x8>
}
   defd0:	4628      	mov	r0, r5
   defd2:	b003      	add	sp, #12
   defd4:	bd30      	pop	{r4, r5, pc}

000defd6 <_ZN11USARTSerialD0Ev>:
   defd6:	b510      	push	{r4, lr}
   defd8:	2114      	movs	r1, #20
   defda:	4604      	mov	r4, r0
   defdc:	f000 fa42 	bl	df464 <_ZdlPvj>
   defe0:	4620      	mov	r0, r4
   defe2:	bd10      	pop	{r4, pc}

000defe4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   defe4:	b510      	push	{r4, lr}
   defe6:	f04f 0c00 	mov.w	ip, #0
   defea:	4604      	mov	r4, r0
   defec:	4608      	mov	r0, r1
   defee:	4611      	mov	r1, r2
   deff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   deff4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   deff8:	4a04      	ldr	r2, [pc, #16]	; (df00c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   deffa:	6022      	str	r2, [r4, #0]
  _blocking = true;
   deffc:	2201      	movs	r2, #1
  _serial = serial;
   deffe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   df000:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   df002:	461a      	mov	r2, r3
   df004:	f7fc ffee 	bl	dbfe4 <hal_usart_init>
}
   df008:	4620      	mov	r0, r4
   df00a:	bd10      	pop	{r4, pc}
   df00c:	000e2ec8 	.word	0x000e2ec8

000df010 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   df010:	7c00      	ldrb	r0, [r0, #16]
   df012:	2300      	movs	r3, #0
   df014:	f7fd b82e 	b.w	dc074 <hal_usart_begin_config>

000df018 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   df018:	2200      	movs	r2, #0
   df01a:	f7ff bff9 	b.w	df010 <_ZN11USARTSerial5beginEmm>

000df01e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   df01e:	7c00      	ldrb	r0, [r0, #16]
   df020:	f7fc bfe8 	b.w	dbff4 <hal_usart_end>

000df024 <_Z22__fetch_global_Serial1v>:
{
   df024:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   df026:	4c0d      	ldr	r4, [pc, #52]	; (df05c <_Z22__fetch_global_Serial1v+0x38>)
   df028:	7821      	ldrb	r1, [r4, #0]
   df02a:	f3bf 8f5b 	dmb	ish
   df02e:	f011 0101 	ands.w	r1, r1, #1
   df032:	d110      	bne.n	df056 <_Z22__fetch_global_Serial1v+0x32>
   df034:	4620      	mov	r0, r4
   df036:	9101      	str	r1, [sp, #4]
   df038:	f7f5 f840 	bl	d40bc <__cxa_guard_acquire>
   df03c:	9901      	ldr	r1, [sp, #4]
   df03e:	b150      	cbz	r0, df056 <_Z22__fetch_global_Serial1v+0x32>
   df040:	4b07      	ldr	r3, [pc, #28]	; (df060 <_Z22__fetch_global_Serial1v+0x3c>)
   df042:	4a08      	ldr	r2, [pc, #32]	; (df064 <_Z22__fetch_global_Serial1v+0x40>)
   df044:	4808      	ldr	r0, [pc, #32]	; (df068 <_Z22__fetch_global_Serial1v+0x44>)
   df046:	f7ff ffcd 	bl	defe4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   df04a:	4620      	mov	r0, r4
   df04c:	f7f5 f83b 	bl	d40c6 <__cxa_guard_release>
   df050:	4806      	ldr	r0, [pc, #24]	; (df06c <_Z22__fetch_global_Serial1v+0x48>)
   df052:	f000 ff7f 	bl	dff54 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   df056:	4804      	ldr	r0, [pc, #16]	; (df068 <_Z22__fetch_global_Serial1v+0x44>)
   df058:	b002      	add	sp, #8
   df05a:	bd10      	pop	{r4, pc}
   df05c:	2003e5e8 	.word	0x2003e5e8
   df060:	2003e670 	.word	0x2003e670
   df064:	2003e5ec 	.word	0x2003e5ec
   df068:	2003e6f4 	.word	0x2003e6f4
   df06c:	000def6f 	.word	0x000def6f

000df070 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   df070:	7441      	strb	r1, [r0, #17]
}
   df072:	4770      	bx	lr

000df074 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   df074:	4770      	bx	lr

000df076 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   df076:	4770      	bx	lr

000df078 <_ZN9USBSerial4readEv>:
{
   df078:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   df07a:	2100      	movs	r1, #0
   df07c:	7c00      	ldrb	r0, [r0, #16]
   df07e:	f7fd f829 	bl	dc0d4 <HAL_USB_USART_Receive_Data>
}
   df082:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   df086:	bd08      	pop	{r3, pc}

000df088 <_ZN9USBSerial4peekEv>:
{
   df088:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   df08a:	2101      	movs	r1, #1
   df08c:	7c00      	ldrb	r0, [r0, #16]
   df08e:	f7fd f821 	bl	dc0d4 <HAL_USB_USART_Receive_Data>
}
   df092:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   df096:	bd08      	pop	{r3, pc}

000df098 <_ZN9USBSerial17availableForWriteEv>:
{
   df098:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   df09a:	7c00      	ldrb	r0, [r0, #16]
   df09c:	f7fd f812 	bl	dc0c4 <HAL_USB_USART_Available_Data_For_Write>
}
   df0a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   df0a4:	bd08      	pop	{r3, pc}

000df0a6 <_ZN9USBSerial9availableEv>:
{
   df0a6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   df0a8:	7c00      	ldrb	r0, [r0, #16]
   df0aa:	f7fd f803 	bl	dc0b4 <HAL_USB_USART_Available_Data>
}
   df0ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   df0b2:	bd08      	pop	{r3, pc}

000df0b4 <_ZN9USBSerial5writeEh>:
{
   df0b4:	b513      	push	{r0, r1, r4, lr}
   df0b6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   df0b8:	7c00      	ldrb	r0, [r0, #16]
{
   df0ba:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   df0bc:	f7fd f802 	bl	dc0c4 <HAL_USB_USART_Available_Data_For_Write>
   df0c0:	2800      	cmp	r0, #0
   df0c2:	9901      	ldr	r1, [sp, #4]
   df0c4:	dc01      	bgt.n	df0ca <_ZN9USBSerial5writeEh+0x16>
   df0c6:	7c60      	ldrb	r0, [r4, #17]
   df0c8:	b120      	cbz	r0, df0d4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   df0ca:	7c20      	ldrb	r0, [r4, #16]
   df0cc:	f7fd f80a 	bl	dc0e4 <HAL_USB_USART_Send_Data>
   df0d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   df0d4:	b002      	add	sp, #8
   df0d6:	bd10      	pop	{r4, pc}

000df0d8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   df0d8:	7c00      	ldrb	r0, [r0, #16]
   df0da:	f7fd b80b 	b.w	dc0f4 <HAL_USB_USART_Flush_Data>

000df0de <_ZN9USBSerialD0Ev>:
   df0de:	b510      	push	{r4, lr}
   df0e0:	2114      	movs	r1, #20
   df0e2:	4604      	mov	r4, r0
   df0e4:	f000 f9be 	bl	df464 <_ZdlPvj>
   df0e8:	4620      	mov	r0, r4
   df0ea:	bd10      	pop	{r4, pc}

000df0ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   df0ec:	b510      	push	{r4, lr}
   df0ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   df0f2:	4604      	mov	r4, r0
   df0f4:	4608      	mov	r0, r1
   df0f6:	2100      	movs	r1, #0
   df0f8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   df0fc:	4b04      	ldr	r3, [pc, #16]	; (df110 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   df0fe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   df100:	2301      	movs	r3, #1
  _serial = serial;
   df102:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   df104:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   df106:	4611      	mov	r1, r2
   df108:	f7fc ffbc 	bl	dc084 <HAL_USB_USART_Init>
}
   df10c:	4620      	mov	r0, r4
   df10e:	bd10      	pop	{r4, pc}
   df110:	000e2ef8 	.word	0x000e2ef8

000df114 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   df114:	7c00      	ldrb	r0, [r0, #16]
   df116:	2200      	movs	r2, #0
   df118:	f7fc bfbc 	b.w	dc094 <HAL_USB_USART_Begin>

000df11c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   df11c:	7c00      	ldrb	r0, [r0, #16]
   df11e:	f7fc bfc1 	b.w	dc0a4 <HAL_USB_USART_End>

000df122 <_Z19acquireSerialBufferv>:
{
   df122:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   df124:	2214      	movs	r2, #20
{
   df126:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   df128:	2100      	movs	r1, #0
   df12a:	f000 ff53 	bl	dffd4 <memset>
}
   df12e:	4620      	mov	r0, r4
   df130:	bd10      	pop	{r4, pc}
	...

000df134 <_Z16_fetch_usbserialv>:
{
   df134:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   df136:	4c0f      	ldr	r4, [pc, #60]	; (df174 <_Z16_fetch_usbserialv+0x40>)
{
   df138:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   df13a:	a803      	add	r0, sp, #12
   df13c:	f7ff fff1 	bl	df122 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   df140:	7821      	ldrb	r1, [r4, #0]
   df142:	f3bf 8f5b 	dmb	ish
   df146:	f011 0101 	ands.w	r1, r1, #1
   df14a:	d10f      	bne.n	df16c <_Z16_fetch_usbserialv+0x38>
   df14c:	4620      	mov	r0, r4
   df14e:	9101      	str	r1, [sp, #4]
   df150:	f7f4 ffb4 	bl	d40bc <__cxa_guard_acquire>
   df154:	9901      	ldr	r1, [sp, #4]
   df156:	b148      	cbz	r0, df16c <_Z16_fetch_usbserialv+0x38>
   df158:	aa03      	add	r2, sp, #12
   df15a:	4807      	ldr	r0, [pc, #28]	; (df178 <_Z16_fetch_usbserialv+0x44>)
   df15c:	f7ff ffc6 	bl	df0ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   df160:	4620      	mov	r0, r4
   df162:	f7f4 ffb0 	bl	d40c6 <__cxa_guard_release>
   df166:	4805      	ldr	r0, [pc, #20]	; (df17c <_Z16_fetch_usbserialv+0x48>)
   df168:	f000 fef4 	bl	dff54 <atexit>
	return _usbserial;
}
   df16c:	4802      	ldr	r0, [pc, #8]	; (df178 <_Z16_fetch_usbserialv+0x44>)
   df16e:	b008      	add	sp, #32
   df170:	bd10      	pop	{r4, pc}
   df172:	bf00      	nop
   df174:	2003e708 	.word	0x2003e708
   df178:	2003e70c 	.word	0x2003e70c
   df17c:	000df075 	.word	0x000df075

000df180 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   df180:	4b01      	ldr	r3, [pc, #4]	; (df188 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   df182:	6018      	str	r0, [r3, #0]
    }, nullptr);
   df184:	4770      	bx	lr
   df186:	bf00      	nop
   df188:	2003e218 	.word	0x2003e218

000df18c <serialEventRun>:
{
   df18c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   df18e:	4b0b      	ldr	r3, [pc, #44]	; (df1bc <serialEventRun+0x30>)
   df190:	b143      	cbz	r3, df1a4 <serialEventRun+0x18>
   df192:	f7ff ffcf 	bl	df134 <_Z16_fetch_usbserialv>
   df196:	6803      	ldr	r3, [r0, #0]
   df198:	691b      	ldr	r3, [r3, #16]
   df19a:	4798      	blx	r3
   df19c:	2800      	cmp	r0, #0
   df19e:	dd01      	ble.n	df1a4 <serialEventRun+0x18>
        serialEvent();
   df1a0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   df1a4:	4b06      	ldr	r3, [pc, #24]	; (df1c0 <serialEventRun+0x34>)
   df1a6:	b143      	cbz	r3, df1ba <serialEventRun+0x2e>
   df1a8:	f7ff ff3c 	bl	df024 <_Z22__fetch_global_Serial1v>
   df1ac:	6803      	ldr	r3, [r0, #0]
   df1ae:	691b      	ldr	r3, [r3, #16]
   df1b0:	4798      	blx	r3
   df1b2:	2800      	cmp	r0, #0
   df1b4:	dd01      	ble.n	df1ba <serialEventRun+0x2e>
        serialEvent1();
   df1b6:	f3af 8000 	nop.w
}
   df1ba:	bd08      	pop	{r3, pc}
	...

000df1c4 <_post_loop>:
{
   df1c4:	b508      	push	{r3, lr}
	serialEventRun();
   df1c6:	f7ff ffe1 	bl	df18c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   df1ca:	f7fc fdc3 	bl	dbd54 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   df1ce:	4b01      	ldr	r3, [pc, #4]	; (df1d4 <_post_loop+0x10>)
   df1d0:	6018      	str	r0, [r3, #0]
}
   df1d2:	bd08      	pop	{r3, pc}
   df1d4:	2003e734 	.word	0x2003e734

000df1d8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   df1d8:	4805      	ldr	r0, [pc, #20]	; (df1f0 <_Z33system_initialize_user_backup_ramv+0x18>)
   df1da:	4a06      	ldr	r2, [pc, #24]	; (df1f4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   df1dc:	4906      	ldr	r1, [pc, #24]	; (df1f8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   df1de:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   df1e0:	1a12      	subs	r2, r2, r0
   df1e2:	f000 fecf 	bl	dff84 <memcpy>
    __backup_sram_signature = signature;
   df1e6:	4b05      	ldr	r3, [pc, #20]	; (df1fc <_Z33system_initialize_user_backup_ramv+0x24>)
   df1e8:	4a05      	ldr	r2, [pc, #20]	; (df200 <_Z33system_initialize_user_backup_ramv+0x28>)
   df1ea:	601a      	str	r2, [r3, #0]
}
   df1ec:	bd08      	pop	{r3, pc}
   df1ee:	bf00      	nop
   df1f0:	2003f400 	.word	0x2003f400
   df1f4:	2003f404 	.word	0x2003f404
   df1f8:	000e3230 	.word	0x000e3230
   df1fc:	2003f400 	.word	0x2003f400
   df200:	9a271c1e 	.word	0x9a271c1e

000df204 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   df204:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   df206:	2300      	movs	r3, #0
   df208:	9300      	str	r3, [sp, #0]
   df20a:	461a      	mov	r2, r3
   df20c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   df210:	f7fd f814 	bl	dc23c <system_ctrl_set_result>
}
   df214:	b003      	add	sp, #12
   df216:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000df21c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   df21c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   df21e:	8843      	ldrh	r3, [r0, #2]
   df220:	2b0a      	cmp	r3, #10
   df222:	d008      	beq.n	df236 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   df224:	2b50      	cmp	r3, #80	; 0x50
   df226:	d10b      	bne.n	df240 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   df228:	4b09      	ldr	r3, [pc, #36]	; (df250 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   df22a:	681b      	ldr	r3, [r3, #0]
   df22c:	b14b      	cbz	r3, df242 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   df22e:	b003      	add	sp, #12
   df230:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   df234:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   df236:	f7ff ffe5 	bl	df204 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   df23a:	b003      	add	sp, #12
   df23c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   df240:	2300      	movs	r3, #0
   df242:	9300      	str	r3, [sp, #0]
   df244:	461a      	mov	r2, r3
   df246:	f06f 0177 	mvn.w	r1, #119	; 0x77
   df24a:	f7fc fff7 	bl	dc23c <system_ctrl_set_result>
}
   df24e:	e7f4      	b.n	df23a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   df250:	2003e724 	.word	0x2003e724

000df254 <module_user_init_hook>:
{
   df254:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   df256:	4812      	ldr	r0, [pc, #72]	; (df2a0 <module_user_init_hook+0x4c>)
   df258:	2100      	movs	r1, #0
   df25a:	f7fd f903 	bl	dc464 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   df25e:	4b11      	ldr	r3, [pc, #68]	; (df2a4 <module_user_init_hook+0x50>)
   df260:	681a      	ldr	r2, [r3, #0]
   df262:	4b11      	ldr	r3, [pc, #68]	; (df2a8 <module_user_init_hook+0x54>)
   df264:	429a      	cmp	r2, r3
   df266:	4b11      	ldr	r3, [pc, #68]	; (df2ac <module_user_init_hook+0x58>)
   df268:	bf0c      	ite	eq
   df26a:	2201      	moveq	r2, #1
   df26c:	2200      	movne	r2, #0
   df26e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   df270:	d001      	beq.n	df276 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   df272:	f7ff ffb1 	bl	df1d8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   df276:	f7fc fd55 	bl	dbd24 <HAL_RNG_GetRandomNumber>
   df27a:	4604      	mov	r4, r0
    srand(seed);
   df27c:	f000 feb2 	bl	dffe4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   df280:	4b0b      	ldr	r3, [pc, #44]	; (df2b0 <module_user_init_hook+0x5c>)
   df282:	b113      	cbz	r3, df28a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   df284:	4620      	mov	r0, r4
   df286:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   df28a:	2100      	movs	r1, #0
   df28c:	4808      	ldr	r0, [pc, #32]	; (df2b0 <module_user_init_hook+0x5c>)
   df28e:	f7fd f829 	bl	dc2e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   df292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   df296:	4807      	ldr	r0, [pc, #28]	; (df2b4 <module_user_init_hook+0x60>)
   df298:	2100      	movs	r1, #0
   df29a:	f7fc bfc5 	b.w	dc228 <system_ctrl_set_app_request_handler>
   df29e:	bf00      	nop
   df2a0:	000df181 	.word	0x000df181
   df2a4:	2003f400 	.word	0x2003f400
   df2a8:	9a271c1e 	.word	0x9a271c1e
   df2ac:	2003e720 	.word	0x2003e720
   df2b0:	00000000 	.word	0x00000000
   df2b4:	000df21d 	.word	0x000df21d

000df2b8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   df2b8:	b508      	push	{r3, lr}
   df2ba:	4b02      	ldr	r3, [pc, #8]	; (df2c4 <spark_protocol_instance+0xc>)
   df2bc:	681b      	ldr	r3, [r3, #0]
   df2be:	681b      	ldr	r3, [r3, #0]
   df2c0:	9301      	str	r3, [sp, #4]
   df2c2:	bd08      	pop	{r3, pc}
   df2c4:	0003025c 	.word	0x0003025c

000df2c8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   df2c8:	b508      	push	{r3, lr}
   df2ca:	4b02      	ldr	r3, [pc, #8]	; (df2d4 <spark_protocol_set_product_id+0xc>)
   df2cc:	681b      	ldr	r3, [r3, #0]
   df2ce:	685b      	ldr	r3, [r3, #4]
   df2d0:	9301      	str	r3, [sp, #4]
   df2d2:	bd08      	pop	{r3, pc}
   df2d4:	0003025c 	.word	0x0003025c

000df2d8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   df2d8:	b508      	push	{r3, lr}
   df2da:	4b02      	ldr	r3, [pc, #8]	; (df2e4 <spark_protocol_set_product_firmware_version+0xc>)
   df2dc:	681b      	ldr	r3, [r3, #0]
   df2de:	689b      	ldr	r3, [r3, #8]
   df2e0:	9301      	str	r3, [sp, #4]
   df2e2:	bd08      	pop	{r3, pc}
   df2e4:	0003025c 	.word	0x0003025c

000df2e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   df2e8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   df2ea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   df2ec:	d902      	bls.n	df2f4 <pinAvailable+0xc>
    return false;
   df2ee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   df2f0:	b002      	add	sp, #8
   df2f2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   df2f4:	f1a0 030b 	sub.w	r3, r0, #11
   df2f8:	2b02      	cmp	r3, #2
   df2fa:	d81a      	bhi.n	df332 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   df2fc:	4c17      	ldr	r4, [pc, #92]	; (df35c <pinAvailable+0x74>)
   df2fe:	7821      	ldrb	r1, [r4, #0]
   df300:	f3bf 8f5b 	dmb	ish
   df304:	f011 0101 	ands.w	r1, r1, #1
   df308:	d10b      	bne.n	df322 <pinAvailable+0x3a>
   df30a:	4620      	mov	r0, r4
   df30c:	9101      	str	r1, [sp, #4]
   df30e:	f7f4 fed5 	bl	d40bc <__cxa_guard_acquire>
   df312:	9901      	ldr	r1, [sp, #4]
   df314:	b128      	cbz	r0, df322 <pinAvailable+0x3a>
   df316:	4812      	ldr	r0, [pc, #72]	; (df360 <pinAvailable+0x78>)
   df318:	f7ff fa9c 	bl	de854 <_ZN8SPIClassC1E19hal_spi_interface_t>
   df31c:	4620      	mov	r0, r4
   df31e:	f7f4 fed2 	bl	d40c6 <__cxa_guard_release>
   df322:	4b0f      	ldr	r3, [pc, #60]	; (df360 <pinAvailable+0x78>)
   df324:	7818      	ldrb	r0, [r3, #0]
   df326:	f7fc fded 	bl	dbf04 <hal_spi_is_enabled>
   df32a:	2800      	cmp	r0, #0
   df32c:	d1df      	bne.n	df2ee <pinAvailable+0x6>
  return true; // 'pin' is available
   df32e:	2001      	movs	r0, #1
   df330:	e7de      	b.n	df2f0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   df332:	2801      	cmp	r0, #1
   df334:	d809      	bhi.n	df34a <pinAvailable+0x62>
   df336:	f000 f871 	bl	df41c <_Z19__fetch_global_Wirev>
   df33a:	2100      	movs	r1, #0
   df33c:	7c00      	ldrb	r0, [r0, #16]
   df33e:	f7fc fd99 	bl	dbe74 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   df342:	f080 0001 	eor.w	r0, r0, #1
   df346:	b2c0      	uxtb	r0, r0
   df348:	e7d2      	b.n	df2f0 <pinAvailable+0x8>
   df34a:	3809      	subs	r0, #9
   df34c:	2801      	cmp	r0, #1
   df34e:	d8ee      	bhi.n	df32e <pinAvailable+0x46>
   df350:	f7ff fe68 	bl	df024 <_Z22__fetch_global_Serial1v>
   df354:	7c00      	ldrb	r0, [r0, #16]
   df356:	f7fc fe7d 	bl	dc054 <hal_usart_is_enabled>
   df35a:	e7f2      	b.n	df342 <pinAvailable+0x5a>
   df35c:	2003e728 	.word	0x2003e728
   df360:	2003e72c 	.word	0x2003e72c

000df364 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   df364:	b538      	push	{r3, r4, r5, lr}
   df366:	4604      	mov	r4, r0
   df368:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   df36a:	f7fc fd23 	bl	dbdb4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   df36e:	28ff      	cmp	r0, #255	; 0xff
   df370:	d010      	beq.n	df394 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   df372:	2806      	cmp	r0, #6
   df374:	d804      	bhi.n	df380 <digitalWrite+0x1c>
   df376:	234d      	movs	r3, #77	; 0x4d
   df378:	fa23 f000 	lsr.w	r0, r3, r0
   df37c:	07c3      	lsls	r3, r0, #31
   df37e:	d409      	bmi.n	df394 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   df380:	4620      	mov	r0, r4
   df382:	f7ff ffb1 	bl	df2e8 <pinAvailable>
   df386:	b128      	cbz	r0, df394 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   df388:	4629      	mov	r1, r5
   df38a:	4620      	mov	r0, r4
}
   df38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   df390:	f7fc bd18 	b.w	dbdc4 <HAL_GPIO_Write>
}
   df394:	bd38      	pop	{r3, r4, r5, pc}

000df396 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   df396:	b510      	push	{r4, lr}
   df398:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   df39a:	f7fc fd0b 	bl	dbdb4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   df39e:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   df3a0:	b2db      	uxtb	r3, r3
   df3a2:	2b01      	cmp	r3, #1
   df3a4:	d908      	bls.n	df3b8 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   df3a6:	4620      	mov	r0, r4
   df3a8:	f7ff ff9e 	bl	df2e8 <pinAvailable>
   df3ac:	b120      	cbz	r0, df3b8 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   df3ae:	4620      	mov	r0, r4
}
   df3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   df3b4:	f7fc bd0e 	b.w	dbdd4 <HAL_GPIO_Read>
}
   df3b8:	2000      	movs	r0, #0
   df3ba:	bd10      	pop	{r4, pc}

000df3bc <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   df3bc:	280d      	cmp	r0, #13
{
   df3be:	b510      	push	{r4, lr}
   df3c0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   df3c2:	bf9c      	itt	ls
   df3c4:	340e      	addls	r4, #14
   df3c6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   df3c8:	4620      	mov	r0, r4
   df3ca:	f7ff ff8d 	bl	df2e8 <pinAvailable>
   df3ce:	b150      	cbz	r0, df3e6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   df3d0:	2103      	movs	r1, #3
   df3d2:	4620      	mov	r0, r4
   df3d4:	f7fc fce6 	bl	dbda4 <HAL_Validate_Pin_Function>
   df3d8:	2803      	cmp	r0, #3
   df3da:	d104      	bne.n	df3e6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   df3dc:	4620      	mov	r0, r4
}
   df3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   df3e2:	f7fc bcff 	b.w	dbde4 <hal_adc_read>
}
   df3e6:	2000      	movs	r0, #0
   df3e8:	bd10      	pop	{r4, pc}

000df3ea <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   df3ea:	4770      	bx	lr

000df3ec <_Z17acquireWireBufferv>:
{
   df3ec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   df3ee:	2300      	movs	r3, #0
   df3f0:	2520      	movs	r5, #32
   df3f2:	8043      	strh	r3, [r0, #2]
   df3f4:	2314      	movs	r3, #20
{
   df3f6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   df3f8:	8003      	strh	r3, [r0, #0]
   df3fa:	6085      	str	r5, [r0, #8]
   df3fc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   df3fe:	4906      	ldr	r1, [pc, #24]	; (df418 <_Z17acquireWireBufferv+0x2c>)
   df400:	4628      	mov	r0, r5
   df402:	f000 f833 	bl	df46c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   df406:	4904      	ldr	r1, [pc, #16]	; (df418 <_Z17acquireWireBufferv+0x2c>)
	};
   df408:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   df40a:	4628      	mov	r0, r5
   df40c:	f000 f82e 	bl	df46c <_ZnajRKSt9nothrow_t>
	};
   df410:	60e0      	str	r0, [r4, #12]
}
   df412:	4620      	mov	r0, r4
   df414:	bd38      	pop	{r3, r4, r5, pc}
   df416:	bf00      	nop
   df418:	000e2f20 	.word	0x000e2f20

000df41c <_Z19__fetch_global_Wirev>:
{
   df41c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   df41e:	4d0e      	ldr	r5, [pc, #56]	; (df458 <_Z19__fetch_global_Wirev+0x3c>)
   df420:	7829      	ldrb	r1, [r5, #0]
   df422:	f3bf 8f5b 	dmb	ish
   df426:	f011 0401 	ands.w	r4, r1, #1
{
   df42a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   df42c:	d111      	bne.n	df452 <_Z19__fetch_global_Wirev+0x36>
   df42e:	4628      	mov	r0, r5
   df430:	f7f4 fe44 	bl	d40bc <__cxa_guard_acquire>
   df434:	b168      	cbz	r0, df452 <_Z19__fetch_global_Wirev+0x36>
   df436:	a801      	add	r0, sp, #4
   df438:	f7ff ffd8 	bl	df3ec <_Z17acquireWireBufferv>
   df43c:	aa01      	add	r2, sp, #4
   df43e:	4621      	mov	r1, r4
   df440:	4806      	ldr	r0, [pc, #24]	; (df45c <_Z19__fetch_global_Wirev+0x40>)
   df442:	f7fd fbeb 	bl	dcc1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   df446:	4628      	mov	r0, r5
   df448:	f7f4 fe3d 	bl	d40c6 <__cxa_guard_release>
   df44c:	4804      	ldr	r0, [pc, #16]	; (df460 <_Z19__fetch_global_Wirev+0x44>)
   df44e:	f000 fd81 	bl	dff54 <atexit>
	return wire;
}
   df452:	4802      	ldr	r0, [pc, #8]	; (df45c <_Z19__fetch_global_Wirev+0x40>)
   df454:	b007      	add	sp, #28
   df456:	bd30      	pop	{r4, r5, pc}
   df458:	2003e738 	.word	0x2003e738
   df45c:	2003e73c 	.word	0x2003e73c
   df460:	000df3eb 	.word	0x000df3eb

000df464 <_ZdlPvj>:
   df464:	f7f4 be1b 	b.w	d409e <_ZdlPv>

000df468 <_ZnwjRKSt9nothrow_t>:
   df468:	f7f4 be15 	b.w	d4096 <_Znwj>

000df46c <_ZnajRKSt9nothrow_t>:
   df46c:	f7f4 be15 	b.w	d409a <_Znaj>

000df470 <_ZSt17__throw_bad_allocv>:
   df470:	b508      	push	{r3, lr}
   df472:	f7fc ffdf 	bl	dc434 <abort>

000df476 <_ZSt20__throw_length_errorPKc>:
   df476:	b508      	push	{r3, lr}
   df478:	f7fc ffdc 	bl	dc434 <abort>

000df47c <_ZSt25__throw_bad_function_callv>:
   df47c:	b508      	push	{r3, lr}
   df47e:	f7fc ffd9 	bl	dc434 <abort>
   df482:	0000      	movs	r0, r0
   df484:	0000      	movs	r0, r0
	...

000df488 <floor>:
   df488:	ec51 0b10 	vmov	r0, r1, d0
   df48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df48e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   df492:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   df496:	2d13      	cmp	r5, #19
   df498:	ee10 6a10 	vmov	r6, s0
   df49c:	460c      	mov	r4, r1
   df49e:	dc20      	bgt.n	df4e2 <floor+0x5a>
   df4a0:	2d00      	cmp	r5, #0
   df4a2:	db3d      	blt.n	df520 <floor+0x98>
   df4a4:	4f38      	ldr	r7, [pc, #224]	; (df588 <floor+0x100>)
   df4a6:	412f      	asrs	r7, r5
   df4a8:	ea01 0307 	and.w	r3, r1, r7
   df4ac:	4303      	orrs	r3, r0
   df4ae:	d01d      	beq.n	df4ec <floor+0x64>
   df4b0:	a333      	add	r3, pc, #204	; (adr r3, df580 <floor+0xf8>)
   df4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df4b6:	f000 f871 	bl	df59c <__adddf3>
   df4ba:	2200      	movs	r2, #0
   df4bc:	2300      	movs	r3, #0
   df4be:	f000 fcb3 	bl	dfe28 <__aeabi_dcmpgt>
   df4c2:	b148      	cbz	r0, df4d8 <floor+0x50>
   df4c4:	2c00      	cmp	r4, #0
   df4c6:	da04      	bge.n	df4d2 <floor+0x4a>
   df4c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   df4cc:	fa43 f505 	asr.w	r5, r3, r5
   df4d0:	442c      	add	r4, r5
   df4d2:	ea24 0407 	bic.w	r4, r4, r7
   df4d6:	2600      	movs	r6, #0
   df4d8:	4623      	mov	r3, r4
   df4da:	4632      	mov	r2, r6
   df4dc:	ec43 2b10 	vmov	d0, r2, r3
   df4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   df4e2:	2d33      	cmp	r5, #51	; 0x33
   df4e4:	dd05      	ble.n	df4f2 <floor+0x6a>
   df4e6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   df4ea:	d029      	beq.n	df540 <floor+0xb8>
   df4ec:	ec41 0b10 	vmov	d0, r0, r1
   df4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   df4f2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   df4f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   df4fa:	40df      	lsrs	r7, r3
   df4fc:	4207      	tst	r7, r0
   df4fe:	d0f5      	beq.n	df4ec <floor+0x64>
   df500:	a31f      	add	r3, pc, #124	; (adr r3, df580 <floor+0xf8>)
   df502:	e9d3 2300 	ldrd	r2, r3, [r3]
   df506:	f000 f849 	bl	df59c <__adddf3>
   df50a:	2200      	movs	r2, #0
   df50c:	2300      	movs	r3, #0
   df50e:	f000 fc8b 	bl	dfe28 <__aeabi_dcmpgt>
   df512:	2800      	cmp	r0, #0
   df514:	d0e0      	beq.n	df4d8 <floor+0x50>
   df516:	2c00      	cmp	r4, #0
   df518:	db23      	blt.n	df562 <floor+0xda>
   df51a:	ea26 0607 	bic.w	r6, r6, r7
   df51e:	e7db      	b.n	df4d8 <floor+0x50>
   df520:	a317      	add	r3, pc, #92	; (adr r3, df580 <floor+0xf8>)
   df522:	e9d3 2300 	ldrd	r2, r3, [r3]
   df526:	f000 f839 	bl	df59c <__adddf3>
   df52a:	2200      	movs	r2, #0
   df52c:	2300      	movs	r3, #0
   df52e:	f000 fc7b 	bl	dfe28 <__aeabi_dcmpgt>
   df532:	2800      	cmp	r0, #0
   df534:	d0d0      	beq.n	df4d8 <floor+0x50>
   df536:	2c00      	cmp	r4, #0
   df538:	db0a      	blt.n	df550 <floor+0xc8>
   df53a:	2600      	movs	r6, #0
   df53c:	4634      	mov	r4, r6
   df53e:	e7cb      	b.n	df4d8 <floor+0x50>
   df540:	ee10 2a10 	vmov	r2, s0
   df544:	460b      	mov	r3, r1
   df546:	f000 f829 	bl	df59c <__adddf3>
   df54a:	ec41 0b10 	vmov	d0, r0, r1
   df54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   df550:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   df554:	4a0d      	ldr	r2, [pc, #52]	; (df58c <floor+0x104>)
   df556:	431e      	orrs	r6, r3
   df558:	2e00      	cmp	r6, #0
   df55a:	bf18      	it	ne
   df55c:	4614      	movne	r4, r2
   df55e:	2600      	movs	r6, #0
   df560:	e7ba      	b.n	df4d8 <floor+0x50>
   df562:	2d14      	cmp	r5, #20
   df564:	d008      	beq.n	df578 <floor+0xf0>
   df566:	2301      	movs	r3, #1
   df568:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   df56c:	fa03 f505 	lsl.w	r5, r3, r5
   df570:	19ae      	adds	r6, r5, r6
   df572:	bf28      	it	cs
   df574:	18e4      	addcs	r4, r4, r3
   df576:	e7d0      	b.n	df51a <floor+0x92>
   df578:	3401      	adds	r4, #1
   df57a:	e7ce      	b.n	df51a <floor+0x92>
   df57c:	f3af 8000 	nop.w
   df580:	8800759c 	.word	0x8800759c
   df584:	7e37e43c 	.word	0x7e37e43c
   df588:	000fffff 	.word	0x000fffff
   df58c:	bff00000 	.word	0xbff00000

000df590 <__aeabi_drsub>:
   df590:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   df594:	e002      	b.n	df59c <__adddf3>
   df596:	bf00      	nop

000df598 <__aeabi_dsub>:
   df598:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000df59c <__adddf3>:
   df59c:	b530      	push	{r4, r5, lr}
   df59e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   df5a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   df5a6:	ea94 0f05 	teq	r4, r5
   df5aa:	bf08      	it	eq
   df5ac:	ea90 0f02 	teqeq	r0, r2
   df5b0:	bf1f      	itttt	ne
   df5b2:	ea54 0c00 	orrsne.w	ip, r4, r0
   df5b6:	ea55 0c02 	orrsne.w	ip, r5, r2
   df5ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   df5be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   df5c2:	f000 80e2 	beq.w	df78a <__adddf3+0x1ee>
   df5c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   df5ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   df5ce:	bfb8      	it	lt
   df5d0:	426d      	neglt	r5, r5
   df5d2:	dd0c      	ble.n	df5ee <__adddf3+0x52>
   df5d4:	442c      	add	r4, r5
   df5d6:	ea80 0202 	eor.w	r2, r0, r2
   df5da:	ea81 0303 	eor.w	r3, r1, r3
   df5de:	ea82 0000 	eor.w	r0, r2, r0
   df5e2:	ea83 0101 	eor.w	r1, r3, r1
   df5e6:	ea80 0202 	eor.w	r2, r0, r2
   df5ea:	ea81 0303 	eor.w	r3, r1, r3
   df5ee:	2d36      	cmp	r5, #54	; 0x36
   df5f0:	bf88      	it	hi
   df5f2:	bd30      	pophi	{r4, r5, pc}
   df5f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   df5f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   df5fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   df600:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   df604:	d002      	beq.n	df60c <__adddf3+0x70>
   df606:	4240      	negs	r0, r0
   df608:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df60c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   df610:	ea4f 3303 	mov.w	r3, r3, lsl #12
   df614:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   df618:	d002      	beq.n	df620 <__adddf3+0x84>
   df61a:	4252      	negs	r2, r2
   df61c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   df620:	ea94 0f05 	teq	r4, r5
   df624:	f000 80a7 	beq.w	df776 <__adddf3+0x1da>
   df628:	f1a4 0401 	sub.w	r4, r4, #1
   df62c:	f1d5 0e20 	rsbs	lr, r5, #32
   df630:	db0d      	blt.n	df64e <__adddf3+0xb2>
   df632:	fa02 fc0e 	lsl.w	ip, r2, lr
   df636:	fa22 f205 	lsr.w	r2, r2, r5
   df63a:	1880      	adds	r0, r0, r2
   df63c:	f141 0100 	adc.w	r1, r1, #0
   df640:	fa03 f20e 	lsl.w	r2, r3, lr
   df644:	1880      	adds	r0, r0, r2
   df646:	fa43 f305 	asr.w	r3, r3, r5
   df64a:	4159      	adcs	r1, r3
   df64c:	e00e      	b.n	df66c <__adddf3+0xd0>
   df64e:	f1a5 0520 	sub.w	r5, r5, #32
   df652:	f10e 0e20 	add.w	lr, lr, #32
   df656:	2a01      	cmp	r2, #1
   df658:	fa03 fc0e 	lsl.w	ip, r3, lr
   df65c:	bf28      	it	cs
   df65e:	f04c 0c02 	orrcs.w	ip, ip, #2
   df662:	fa43 f305 	asr.w	r3, r3, r5
   df666:	18c0      	adds	r0, r0, r3
   df668:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   df66c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   df670:	d507      	bpl.n	df682 <__adddf3+0xe6>
   df672:	f04f 0e00 	mov.w	lr, #0
   df676:	f1dc 0c00 	rsbs	ip, ip, #0
   df67a:	eb7e 0000 	sbcs.w	r0, lr, r0
   df67e:	eb6e 0101 	sbc.w	r1, lr, r1
   df682:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   df686:	d31b      	bcc.n	df6c0 <__adddf3+0x124>
   df688:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   df68c:	d30c      	bcc.n	df6a8 <__adddf3+0x10c>
   df68e:	0849      	lsrs	r1, r1, #1
   df690:	ea5f 0030 	movs.w	r0, r0, rrx
   df694:	ea4f 0c3c 	mov.w	ip, ip, rrx
   df698:	f104 0401 	add.w	r4, r4, #1
   df69c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   df6a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   df6a4:	f080 809a 	bcs.w	df7dc <__adddf3+0x240>
   df6a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   df6ac:	bf08      	it	eq
   df6ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   df6b2:	f150 0000 	adcs.w	r0, r0, #0
   df6b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   df6ba:	ea41 0105 	orr.w	r1, r1, r5
   df6be:	bd30      	pop	{r4, r5, pc}
   df6c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   df6c4:	4140      	adcs	r0, r0
   df6c6:	eb41 0101 	adc.w	r1, r1, r1
   df6ca:	3c01      	subs	r4, #1
   df6cc:	bf28      	it	cs
   df6ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   df6d2:	d2e9      	bcs.n	df6a8 <__adddf3+0x10c>
   df6d4:	f091 0f00 	teq	r1, #0
   df6d8:	bf04      	itt	eq
   df6da:	4601      	moveq	r1, r0
   df6dc:	2000      	moveq	r0, #0
   df6de:	fab1 f381 	clz	r3, r1
   df6e2:	bf08      	it	eq
   df6e4:	3320      	addeq	r3, #32
   df6e6:	f1a3 030b 	sub.w	r3, r3, #11
   df6ea:	f1b3 0220 	subs.w	r2, r3, #32
   df6ee:	da0c      	bge.n	df70a <__adddf3+0x16e>
   df6f0:	320c      	adds	r2, #12
   df6f2:	dd08      	ble.n	df706 <__adddf3+0x16a>
   df6f4:	f102 0c14 	add.w	ip, r2, #20
   df6f8:	f1c2 020c 	rsb	r2, r2, #12
   df6fc:	fa01 f00c 	lsl.w	r0, r1, ip
   df700:	fa21 f102 	lsr.w	r1, r1, r2
   df704:	e00c      	b.n	df720 <__adddf3+0x184>
   df706:	f102 0214 	add.w	r2, r2, #20
   df70a:	bfd8      	it	le
   df70c:	f1c2 0c20 	rsble	ip, r2, #32
   df710:	fa01 f102 	lsl.w	r1, r1, r2
   df714:	fa20 fc0c 	lsr.w	ip, r0, ip
   df718:	bfdc      	itt	le
   df71a:	ea41 010c 	orrle.w	r1, r1, ip
   df71e:	4090      	lslle	r0, r2
   df720:	1ae4      	subs	r4, r4, r3
   df722:	bfa2      	ittt	ge
   df724:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   df728:	4329      	orrge	r1, r5
   df72a:	bd30      	popge	{r4, r5, pc}
   df72c:	ea6f 0404 	mvn.w	r4, r4
   df730:	3c1f      	subs	r4, #31
   df732:	da1c      	bge.n	df76e <__adddf3+0x1d2>
   df734:	340c      	adds	r4, #12
   df736:	dc0e      	bgt.n	df756 <__adddf3+0x1ba>
   df738:	f104 0414 	add.w	r4, r4, #20
   df73c:	f1c4 0220 	rsb	r2, r4, #32
   df740:	fa20 f004 	lsr.w	r0, r0, r4
   df744:	fa01 f302 	lsl.w	r3, r1, r2
   df748:	ea40 0003 	orr.w	r0, r0, r3
   df74c:	fa21 f304 	lsr.w	r3, r1, r4
   df750:	ea45 0103 	orr.w	r1, r5, r3
   df754:	bd30      	pop	{r4, r5, pc}
   df756:	f1c4 040c 	rsb	r4, r4, #12
   df75a:	f1c4 0220 	rsb	r2, r4, #32
   df75e:	fa20 f002 	lsr.w	r0, r0, r2
   df762:	fa01 f304 	lsl.w	r3, r1, r4
   df766:	ea40 0003 	orr.w	r0, r0, r3
   df76a:	4629      	mov	r1, r5
   df76c:	bd30      	pop	{r4, r5, pc}
   df76e:	fa21 f004 	lsr.w	r0, r1, r4
   df772:	4629      	mov	r1, r5
   df774:	bd30      	pop	{r4, r5, pc}
   df776:	f094 0f00 	teq	r4, #0
   df77a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   df77e:	bf06      	itte	eq
   df780:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   df784:	3401      	addeq	r4, #1
   df786:	3d01      	subne	r5, #1
   df788:	e74e      	b.n	df628 <__adddf3+0x8c>
   df78a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   df78e:	bf18      	it	ne
   df790:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   df794:	d029      	beq.n	df7ea <__adddf3+0x24e>
   df796:	ea94 0f05 	teq	r4, r5
   df79a:	bf08      	it	eq
   df79c:	ea90 0f02 	teqeq	r0, r2
   df7a0:	d005      	beq.n	df7ae <__adddf3+0x212>
   df7a2:	ea54 0c00 	orrs.w	ip, r4, r0
   df7a6:	bf04      	itt	eq
   df7a8:	4619      	moveq	r1, r3
   df7aa:	4610      	moveq	r0, r2
   df7ac:	bd30      	pop	{r4, r5, pc}
   df7ae:	ea91 0f03 	teq	r1, r3
   df7b2:	bf1e      	ittt	ne
   df7b4:	2100      	movne	r1, #0
   df7b6:	2000      	movne	r0, #0
   df7b8:	bd30      	popne	{r4, r5, pc}
   df7ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   df7be:	d105      	bne.n	df7cc <__adddf3+0x230>
   df7c0:	0040      	lsls	r0, r0, #1
   df7c2:	4149      	adcs	r1, r1
   df7c4:	bf28      	it	cs
   df7c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   df7ca:	bd30      	pop	{r4, r5, pc}
   df7cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   df7d0:	bf3c      	itt	cc
   df7d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   df7d6:	bd30      	popcc	{r4, r5, pc}
   df7d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   df7dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   df7e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   df7e4:	f04f 0000 	mov.w	r0, #0
   df7e8:	bd30      	pop	{r4, r5, pc}
   df7ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   df7ee:	bf1a      	itte	ne
   df7f0:	4619      	movne	r1, r3
   df7f2:	4610      	movne	r0, r2
   df7f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   df7f8:	bf1c      	itt	ne
   df7fa:	460b      	movne	r3, r1
   df7fc:	4602      	movne	r2, r0
   df7fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   df802:	bf06      	itte	eq
   df804:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   df808:	ea91 0f03 	teqeq	r1, r3
   df80c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   df810:	bd30      	pop	{r4, r5, pc}
   df812:	bf00      	nop

000df814 <__aeabi_ui2d>:
   df814:	f090 0f00 	teq	r0, #0
   df818:	bf04      	itt	eq
   df81a:	2100      	moveq	r1, #0
   df81c:	4770      	bxeq	lr
   df81e:	b530      	push	{r4, r5, lr}
   df820:	f44f 6480 	mov.w	r4, #1024	; 0x400
   df824:	f104 0432 	add.w	r4, r4, #50	; 0x32
   df828:	f04f 0500 	mov.w	r5, #0
   df82c:	f04f 0100 	mov.w	r1, #0
   df830:	e750      	b.n	df6d4 <__adddf3+0x138>
   df832:	bf00      	nop

000df834 <__aeabi_i2d>:
   df834:	f090 0f00 	teq	r0, #0
   df838:	bf04      	itt	eq
   df83a:	2100      	moveq	r1, #0
   df83c:	4770      	bxeq	lr
   df83e:	b530      	push	{r4, r5, lr}
   df840:	f44f 6480 	mov.w	r4, #1024	; 0x400
   df844:	f104 0432 	add.w	r4, r4, #50	; 0x32
   df848:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   df84c:	bf48      	it	mi
   df84e:	4240      	negmi	r0, r0
   df850:	f04f 0100 	mov.w	r1, #0
   df854:	e73e      	b.n	df6d4 <__adddf3+0x138>
   df856:	bf00      	nop

000df858 <__aeabi_f2d>:
   df858:	0042      	lsls	r2, r0, #1
   df85a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   df85e:	ea4f 0131 	mov.w	r1, r1, rrx
   df862:	ea4f 7002 	mov.w	r0, r2, lsl #28
   df866:	bf1f      	itttt	ne
   df868:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   df86c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   df870:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   df874:	4770      	bxne	lr
   df876:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   df87a:	bf08      	it	eq
   df87c:	4770      	bxeq	lr
   df87e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   df882:	bf04      	itt	eq
   df884:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   df888:	4770      	bxeq	lr
   df88a:	b530      	push	{r4, r5, lr}
   df88c:	f44f 7460 	mov.w	r4, #896	; 0x380
   df890:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   df894:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   df898:	e71c      	b.n	df6d4 <__adddf3+0x138>
   df89a:	bf00      	nop

000df89c <__aeabi_ul2d>:
   df89c:	ea50 0201 	orrs.w	r2, r0, r1
   df8a0:	bf08      	it	eq
   df8a2:	4770      	bxeq	lr
   df8a4:	b530      	push	{r4, r5, lr}
   df8a6:	f04f 0500 	mov.w	r5, #0
   df8aa:	e00a      	b.n	df8c2 <__aeabi_l2d+0x16>

000df8ac <__aeabi_l2d>:
   df8ac:	ea50 0201 	orrs.w	r2, r0, r1
   df8b0:	bf08      	it	eq
   df8b2:	4770      	bxeq	lr
   df8b4:	b530      	push	{r4, r5, lr}
   df8b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   df8ba:	d502      	bpl.n	df8c2 <__aeabi_l2d+0x16>
   df8bc:	4240      	negs	r0, r0
   df8be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df8c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   df8c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   df8ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   df8ce:	f43f aed8 	beq.w	df682 <__adddf3+0xe6>
   df8d2:	f04f 0203 	mov.w	r2, #3
   df8d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   df8da:	bf18      	it	ne
   df8dc:	3203      	addne	r2, #3
   df8de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   df8e2:	bf18      	it	ne
   df8e4:	3203      	addne	r2, #3
   df8e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   df8ea:	f1c2 0320 	rsb	r3, r2, #32
   df8ee:	fa00 fc03 	lsl.w	ip, r0, r3
   df8f2:	fa20 f002 	lsr.w	r0, r0, r2
   df8f6:	fa01 fe03 	lsl.w	lr, r1, r3
   df8fa:	ea40 000e 	orr.w	r0, r0, lr
   df8fe:	fa21 f102 	lsr.w	r1, r1, r2
   df902:	4414      	add	r4, r2
   df904:	e6bd      	b.n	df682 <__adddf3+0xe6>
   df906:	bf00      	nop

000df908 <__aeabi_dmul>:
   df908:	b570      	push	{r4, r5, r6, lr}
   df90a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   df90e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   df912:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   df916:	bf1d      	ittte	ne
   df918:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   df91c:	ea94 0f0c 	teqne	r4, ip
   df920:	ea95 0f0c 	teqne	r5, ip
   df924:	f000 f8de 	bleq	dfae4 <__aeabi_dmul+0x1dc>
   df928:	442c      	add	r4, r5
   df92a:	ea81 0603 	eor.w	r6, r1, r3
   df92e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   df932:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   df936:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   df93a:	bf18      	it	ne
   df93c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   df940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   df944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   df948:	d038      	beq.n	df9bc <__aeabi_dmul+0xb4>
   df94a:	fba0 ce02 	umull	ip, lr, r0, r2
   df94e:	f04f 0500 	mov.w	r5, #0
   df952:	fbe1 e502 	umlal	lr, r5, r1, r2
   df956:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   df95a:	fbe0 e503 	umlal	lr, r5, r0, r3
   df95e:	f04f 0600 	mov.w	r6, #0
   df962:	fbe1 5603 	umlal	r5, r6, r1, r3
   df966:	f09c 0f00 	teq	ip, #0
   df96a:	bf18      	it	ne
   df96c:	f04e 0e01 	orrne.w	lr, lr, #1
   df970:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   df974:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   df978:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   df97c:	d204      	bcs.n	df988 <__aeabi_dmul+0x80>
   df97e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   df982:	416d      	adcs	r5, r5
   df984:	eb46 0606 	adc.w	r6, r6, r6
   df988:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   df98c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   df990:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   df994:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   df998:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   df99c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   df9a0:	bf88      	it	hi
   df9a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   df9a6:	d81e      	bhi.n	df9e6 <__aeabi_dmul+0xde>
   df9a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   df9ac:	bf08      	it	eq
   df9ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   df9b2:	f150 0000 	adcs.w	r0, r0, #0
   df9b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   df9ba:	bd70      	pop	{r4, r5, r6, pc}
   df9bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   df9c0:	ea46 0101 	orr.w	r1, r6, r1
   df9c4:	ea40 0002 	orr.w	r0, r0, r2
   df9c8:	ea81 0103 	eor.w	r1, r1, r3
   df9cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   df9d0:	bfc2      	ittt	gt
   df9d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   df9d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   df9da:	bd70      	popgt	{r4, r5, r6, pc}
   df9dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   df9e0:	f04f 0e00 	mov.w	lr, #0
   df9e4:	3c01      	subs	r4, #1
   df9e6:	f300 80ab 	bgt.w	dfb40 <__aeabi_dmul+0x238>
   df9ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
   df9ee:	bfde      	ittt	le
   df9f0:	2000      	movle	r0, #0
   df9f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   df9f6:	bd70      	pople	{r4, r5, r6, pc}
   df9f8:	f1c4 0400 	rsb	r4, r4, #0
   df9fc:	3c20      	subs	r4, #32
   df9fe:	da35      	bge.n	dfa6c <__aeabi_dmul+0x164>
   dfa00:	340c      	adds	r4, #12
   dfa02:	dc1b      	bgt.n	dfa3c <__aeabi_dmul+0x134>
   dfa04:	f104 0414 	add.w	r4, r4, #20
   dfa08:	f1c4 0520 	rsb	r5, r4, #32
   dfa0c:	fa00 f305 	lsl.w	r3, r0, r5
   dfa10:	fa20 f004 	lsr.w	r0, r0, r4
   dfa14:	fa01 f205 	lsl.w	r2, r1, r5
   dfa18:	ea40 0002 	orr.w	r0, r0, r2
   dfa1c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dfa20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dfa24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dfa28:	fa21 f604 	lsr.w	r6, r1, r4
   dfa2c:	eb42 0106 	adc.w	r1, r2, r6
   dfa30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dfa34:	bf08      	it	eq
   dfa36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dfa3a:	bd70      	pop	{r4, r5, r6, pc}
   dfa3c:	f1c4 040c 	rsb	r4, r4, #12
   dfa40:	f1c4 0520 	rsb	r5, r4, #32
   dfa44:	fa00 f304 	lsl.w	r3, r0, r4
   dfa48:	fa20 f005 	lsr.w	r0, r0, r5
   dfa4c:	fa01 f204 	lsl.w	r2, r1, r4
   dfa50:	ea40 0002 	orr.w	r0, r0, r2
   dfa54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dfa58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dfa5c:	f141 0100 	adc.w	r1, r1, #0
   dfa60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dfa64:	bf08      	it	eq
   dfa66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dfa6a:	bd70      	pop	{r4, r5, r6, pc}
   dfa6c:	f1c4 0520 	rsb	r5, r4, #32
   dfa70:	fa00 f205 	lsl.w	r2, r0, r5
   dfa74:	ea4e 0e02 	orr.w	lr, lr, r2
   dfa78:	fa20 f304 	lsr.w	r3, r0, r4
   dfa7c:	fa01 f205 	lsl.w	r2, r1, r5
   dfa80:	ea43 0302 	orr.w	r3, r3, r2
   dfa84:	fa21 f004 	lsr.w	r0, r1, r4
   dfa88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dfa8c:	fa21 f204 	lsr.w	r2, r1, r4
   dfa90:	ea20 0002 	bic.w	r0, r0, r2
   dfa94:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dfa98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dfa9c:	bf08      	it	eq
   dfa9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dfaa2:	bd70      	pop	{r4, r5, r6, pc}
   dfaa4:	f094 0f00 	teq	r4, #0
   dfaa8:	d10f      	bne.n	dfaca <__aeabi_dmul+0x1c2>
   dfaaa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dfaae:	0040      	lsls	r0, r0, #1
   dfab0:	eb41 0101 	adc.w	r1, r1, r1
   dfab4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dfab8:	bf08      	it	eq
   dfaba:	3c01      	subeq	r4, #1
   dfabc:	d0f7      	beq.n	dfaae <__aeabi_dmul+0x1a6>
   dfabe:	ea41 0106 	orr.w	r1, r1, r6
   dfac2:	f095 0f00 	teq	r5, #0
   dfac6:	bf18      	it	ne
   dfac8:	4770      	bxne	lr
   dfaca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dface:	0052      	lsls	r2, r2, #1
   dfad0:	eb43 0303 	adc.w	r3, r3, r3
   dfad4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dfad8:	bf08      	it	eq
   dfada:	3d01      	subeq	r5, #1
   dfadc:	d0f7      	beq.n	dface <__aeabi_dmul+0x1c6>
   dfade:	ea43 0306 	orr.w	r3, r3, r6
   dfae2:	4770      	bx	lr
   dfae4:	ea94 0f0c 	teq	r4, ip
   dfae8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dfaec:	bf18      	it	ne
   dfaee:	ea95 0f0c 	teqne	r5, ip
   dfaf2:	d00c      	beq.n	dfb0e <__aeabi_dmul+0x206>
   dfaf4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dfaf8:	bf18      	it	ne
   dfafa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dfafe:	d1d1      	bne.n	dfaa4 <__aeabi_dmul+0x19c>
   dfb00:	ea81 0103 	eor.w	r1, r1, r3
   dfb04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dfb08:	f04f 0000 	mov.w	r0, #0
   dfb0c:	bd70      	pop	{r4, r5, r6, pc}
   dfb0e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dfb12:	bf06      	itte	eq
   dfb14:	4610      	moveq	r0, r2
   dfb16:	4619      	moveq	r1, r3
   dfb18:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dfb1c:	d019      	beq.n	dfb52 <__aeabi_dmul+0x24a>
   dfb1e:	ea94 0f0c 	teq	r4, ip
   dfb22:	d102      	bne.n	dfb2a <__aeabi_dmul+0x222>
   dfb24:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dfb28:	d113      	bne.n	dfb52 <__aeabi_dmul+0x24a>
   dfb2a:	ea95 0f0c 	teq	r5, ip
   dfb2e:	d105      	bne.n	dfb3c <__aeabi_dmul+0x234>
   dfb30:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dfb34:	bf1c      	itt	ne
   dfb36:	4610      	movne	r0, r2
   dfb38:	4619      	movne	r1, r3
   dfb3a:	d10a      	bne.n	dfb52 <__aeabi_dmul+0x24a>
   dfb3c:	ea81 0103 	eor.w	r1, r1, r3
   dfb40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dfb44:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dfb48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dfb4c:	f04f 0000 	mov.w	r0, #0
   dfb50:	bd70      	pop	{r4, r5, r6, pc}
   dfb52:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dfb56:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dfb5a:	bd70      	pop	{r4, r5, r6, pc}

000dfb5c <__aeabi_ddiv>:
   dfb5c:	b570      	push	{r4, r5, r6, lr}
   dfb5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dfb62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dfb66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dfb6a:	bf1d      	ittte	ne
   dfb6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dfb70:	ea94 0f0c 	teqne	r4, ip
   dfb74:	ea95 0f0c 	teqne	r5, ip
   dfb78:	f000 f8a7 	bleq	dfcca <__aeabi_ddiv+0x16e>
   dfb7c:	eba4 0405 	sub.w	r4, r4, r5
   dfb80:	ea81 0e03 	eor.w	lr, r1, r3
   dfb84:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dfb88:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dfb8c:	f000 8088 	beq.w	dfca0 <__aeabi_ddiv+0x144>
   dfb90:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dfb94:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dfb98:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dfb9c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dfba0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dfba4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dfba8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dfbac:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dfbb0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dfbb4:	429d      	cmp	r5, r3
   dfbb6:	bf08      	it	eq
   dfbb8:	4296      	cmpeq	r6, r2
   dfbba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dfbbe:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dfbc2:	d202      	bcs.n	dfbca <__aeabi_ddiv+0x6e>
   dfbc4:	085b      	lsrs	r3, r3, #1
   dfbc6:	ea4f 0232 	mov.w	r2, r2, rrx
   dfbca:	1ab6      	subs	r6, r6, r2
   dfbcc:	eb65 0503 	sbc.w	r5, r5, r3
   dfbd0:	085b      	lsrs	r3, r3, #1
   dfbd2:	ea4f 0232 	mov.w	r2, r2, rrx
   dfbd6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dfbda:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dfbde:	ebb6 0e02 	subs.w	lr, r6, r2
   dfbe2:	eb75 0e03 	sbcs.w	lr, r5, r3
   dfbe6:	bf22      	ittt	cs
   dfbe8:	1ab6      	subcs	r6, r6, r2
   dfbea:	4675      	movcs	r5, lr
   dfbec:	ea40 000c 	orrcs.w	r0, r0, ip
   dfbf0:	085b      	lsrs	r3, r3, #1
   dfbf2:	ea4f 0232 	mov.w	r2, r2, rrx
   dfbf6:	ebb6 0e02 	subs.w	lr, r6, r2
   dfbfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   dfbfe:	bf22      	ittt	cs
   dfc00:	1ab6      	subcs	r6, r6, r2
   dfc02:	4675      	movcs	r5, lr
   dfc04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dfc08:	085b      	lsrs	r3, r3, #1
   dfc0a:	ea4f 0232 	mov.w	r2, r2, rrx
   dfc0e:	ebb6 0e02 	subs.w	lr, r6, r2
   dfc12:	eb75 0e03 	sbcs.w	lr, r5, r3
   dfc16:	bf22      	ittt	cs
   dfc18:	1ab6      	subcs	r6, r6, r2
   dfc1a:	4675      	movcs	r5, lr
   dfc1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dfc20:	085b      	lsrs	r3, r3, #1
   dfc22:	ea4f 0232 	mov.w	r2, r2, rrx
   dfc26:	ebb6 0e02 	subs.w	lr, r6, r2
   dfc2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dfc2e:	bf22      	ittt	cs
   dfc30:	1ab6      	subcs	r6, r6, r2
   dfc32:	4675      	movcs	r5, lr
   dfc34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dfc38:	ea55 0e06 	orrs.w	lr, r5, r6
   dfc3c:	d018      	beq.n	dfc70 <__aeabi_ddiv+0x114>
   dfc3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dfc42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dfc46:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dfc4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dfc4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dfc52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dfc56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dfc5a:	d1c0      	bne.n	dfbde <__aeabi_ddiv+0x82>
   dfc5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dfc60:	d10b      	bne.n	dfc7a <__aeabi_ddiv+0x11e>
   dfc62:	ea41 0100 	orr.w	r1, r1, r0
   dfc66:	f04f 0000 	mov.w	r0, #0
   dfc6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dfc6e:	e7b6      	b.n	dfbde <__aeabi_ddiv+0x82>
   dfc70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dfc74:	bf04      	itt	eq
   dfc76:	4301      	orreq	r1, r0
   dfc78:	2000      	moveq	r0, #0
   dfc7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dfc7e:	bf88      	it	hi
   dfc80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dfc84:	f63f aeaf 	bhi.w	df9e6 <__aeabi_dmul+0xde>
   dfc88:	ebb5 0c03 	subs.w	ip, r5, r3
   dfc8c:	bf04      	itt	eq
   dfc8e:	ebb6 0c02 	subseq.w	ip, r6, r2
   dfc92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dfc96:	f150 0000 	adcs.w	r0, r0, #0
   dfc9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dfc9e:	bd70      	pop	{r4, r5, r6, pc}
   dfca0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dfca4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dfca8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dfcac:	bfc2      	ittt	gt
   dfcae:	ebd4 050c 	rsbsgt	r5, r4, ip
   dfcb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dfcb6:	bd70      	popgt	{r4, r5, r6, pc}
   dfcb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dfcbc:	f04f 0e00 	mov.w	lr, #0
   dfcc0:	3c01      	subs	r4, #1
   dfcc2:	e690      	b.n	df9e6 <__aeabi_dmul+0xde>
   dfcc4:	ea45 0e06 	orr.w	lr, r5, r6
   dfcc8:	e68d      	b.n	df9e6 <__aeabi_dmul+0xde>
   dfcca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dfcce:	ea94 0f0c 	teq	r4, ip
   dfcd2:	bf08      	it	eq
   dfcd4:	ea95 0f0c 	teqeq	r5, ip
   dfcd8:	f43f af3b 	beq.w	dfb52 <__aeabi_dmul+0x24a>
   dfcdc:	ea94 0f0c 	teq	r4, ip
   dfce0:	d10a      	bne.n	dfcf8 <__aeabi_ddiv+0x19c>
   dfce2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dfce6:	f47f af34 	bne.w	dfb52 <__aeabi_dmul+0x24a>
   dfcea:	ea95 0f0c 	teq	r5, ip
   dfcee:	f47f af25 	bne.w	dfb3c <__aeabi_dmul+0x234>
   dfcf2:	4610      	mov	r0, r2
   dfcf4:	4619      	mov	r1, r3
   dfcf6:	e72c      	b.n	dfb52 <__aeabi_dmul+0x24a>
   dfcf8:	ea95 0f0c 	teq	r5, ip
   dfcfc:	d106      	bne.n	dfd0c <__aeabi_ddiv+0x1b0>
   dfcfe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dfd02:	f43f aefd 	beq.w	dfb00 <__aeabi_dmul+0x1f8>
   dfd06:	4610      	mov	r0, r2
   dfd08:	4619      	mov	r1, r3
   dfd0a:	e722      	b.n	dfb52 <__aeabi_dmul+0x24a>
   dfd0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dfd10:	bf18      	it	ne
   dfd12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dfd16:	f47f aec5 	bne.w	dfaa4 <__aeabi_dmul+0x19c>
   dfd1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dfd1e:	f47f af0d 	bne.w	dfb3c <__aeabi_dmul+0x234>
   dfd22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dfd26:	f47f aeeb 	bne.w	dfb00 <__aeabi_dmul+0x1f8>
   dfd2a:	e712      	b.n	dfb52 <__aeabi_dmul+0x24a>

000dfd2c <__gedf2>:
   dfd2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dfd30:	e006      	b.n	dfd40 <__cmpdf2+0x4>
   dfd32:	bf00      	nop

000dfd34 <__ledf2>:
   dfd34:	f04f 0c01 	mov.w	ip, #1
   dfd38:	e002      	b.n	dfd40 <__cmpdf2+0x4>
   dfd3a:	bf00      	nop

000dfd3c <__cmpdf2>:
   dfd3c:	f04f 0c01 	mov.w	ip, #1
   dfd40:	f84d cd04 	str.w	ip, [sp, #-4]!
   dfd44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dfd48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dfd4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dfd50:	bf18      	it	ne
   dfd52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dfd56:	d01b      	beq.n	dfd90 <__cmpdf2+0x54>
   dfd58:	b001      	add	sp, #4
   dfd5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dfd5e:	bf0c      	ite	eq
   dfd60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dfd64:	ea91 0f03 	teqne	r1, r3
   dfd68:	bf02      	ittt	eq
   dfd6a:	ea90 0f02 	teqeq	r0, r2
   dfd6e:	2000      	moveq	r0, #0
   dfd70:	4770      	bxeq	lr
   dfd72:	f110 0f00 	cmn.w	r0, #0
   dfd76:	ea91 0f03 	teq	r1, r3
   dfd7a:	bf58      	it	pl
   dfd7c:	4299      	cmppl	r1, r3
   dfd7e:	bf08      	it	eq
   dfd80:	4290      	cmpeq	r0, r2
   dfd82:	bf2c      	ite	cs
   dfd84:	17d8      	asrcs	r0, r3, #31
   dfd86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dfd8a:	f040 0001 	orr.w	r0, r0, #1
   dfd8e:	4770      	bx	lr
   dfd90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dfd94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dfd98:	d102      	bne.n	dfda0 <__cmpdf2+0x64>
   dfd9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dfd9e:	d107      	bne.n	dfdb0 <__cmpdf2+0x74>
   dfda0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dfda4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dfda8:	d1d6      	bne.n	dfd58 <__cmpdf2+0x1c>
   dfdaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dfdae:	d0d3      	beq.n	dfd58 <__cmpdf2+0x1c>
   dfdb0:	f85d 0b04 	ldr.w	r0, [sp], #4
   dfdb4:	4770      	bx	lr
   dfdb6:	bf00      	nop

000dfdb8 <__aeabi_cdrcmple>:
   dfdb8:	4684      	mov	ip, r0
   dfdba:	4610      	mov	r0, r2
   dfdbc:	4662      	mov	r2, ip
   dfdbe:	468c      	mov	ip, r1
   dfdc0:	4619      	mov	r1, r3
   dfdc2:	4663      	mov	r3, ip
   dfdc4:	e000      	b.n	dfdc8 <__aeabi_cdcmpeq>
   dfdc6:	bf00      	nop

000dfdc8 <__aeabi_cdcmpeq>:
   dfdc8:	b501      	push	{r0, lr}
   dfdca:	f7ff ffb7 	bl	dfd3c <__cmpdf2>
   dfdce:	2800      	cmp	r0, #0
   dfdd0:	bf48      	it	mi
   dfdd2:	f110 0f00 	cmnmi.w	r0, #0
   dfdd6:	bd01      	pop	{r0, pc}

000dfdd8 <__aeabi_dcmpeq>:
   dfdd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   dfddc:	f7ff fff4 	bl	dfdc8 <__aeabi_cdcmpeq>
   dfde0:	bf0c      	ite	eq
   dfde2:	2001      	moveq	r0, #1
   dfde4:	2000      	movne	r0, #0
   dfde6:	f85d fb08 	ldr.w	pc, [sp], #8
   dfdea:	bf00      	nop

000dfdec <__aeabi_dcmplt>:
   dfdec:	f84d ed08 	str.w	lr, [sp, #-8]!
   dfdf0:	f7ff ffea 	bl	dfdc8 <__aeabi_cdcmpeq>
   dfdf4:	bf34      	ite	cc
   dfdf6:	2001      	movcc	r0, #1
   dfdf8:	2000      	movcs	r0, #0
   dfdfa:	f85d fb08 	ldr.w	pc, [sp], #8
   dfdfe:	bf00      	nop

000dfe00 <__aeabi_dcmple>:
   dfe00:	f84d ed08 	str.w	lr, [sp, #-8]!
   dfe04:	f7ff ffe0 	bl	dfdc8 <__aeabi_cdcmpeq>
   dfe08:	bf94      	ite	ls
   dfe0a:	2001      	movls	r0, #1
   dfe0c:	2000      	movhi	r0, #0
   dfe0e:	f85d fb08 	ldr.w	pc, [sp], #8
   dfe12:	bf00      	nop

000dfe14 <__aeabi_dcmpge>:
   dfe14:	f84d ed08 	str.w	lr, [sp, #-8]!
   dfe18:	f7ff ffce 	bl	dfdb8 <__aeabi_cdrcmple>
   dfe1c:	bf94      	ite	ls
   dfe1e:	2001      	movls	r0, #1
   dfe20:	2000      	movhi	r0, #0
   dfe22:	f85d fb08 	ldr.w	pc, [sp], #8
   dfe26:	bf00      	nop

000dfe28 <__aeabi_dcmpgt>:
   dfe28:	f84d ed08 	str.w	lr, [sp, #-8]!
   dfe2c:	f7ff ffc4 	bl	dfdb8 <__aeabi_cdrcmple>
   dfe30:	bf34      	ite	cc
   dfe32:	2001      	movcc	r0, #1
   dfe34:	2000      	movcs	r0, #0
   dfe36:	f85d fb08 	ldr.w	pc, [sp], #8
   dfe3a:	bf00      	nop

000dfe3c <__aeabi_d2iz>:
   dfe3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dfe40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dfe44:	d215      	bcs.n	dfe72 <__aeabi_d2iz+0x36>
   dfe46:	d511      	bpl.n	dfe6c <__aeabi_d2iz+0x30>
   dfe48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dfe4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dfe50:	d912      	bls.n	dfe78 <__aeabi_d2iz+0x3c>
   dfe52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dfe56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dfe5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dfe5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dfe62:	fa23 f002 	lsr.w	r0, r3, r2
   dfe66:	bf18      	it	ne
   dfe68:	4240      	negne	r0, r0
   dfe6a:	4770      	bx	lr
   dfe6c:	f04f 0000 	mov.w	r0, #0
   dfe70:	4770      	bx	lr
   dfe72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dfe76:	d105      	bne.n	dfe84 <__aeabi_d2iz+0x48>
   dfe78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dfe7c:	bf08      	it	eq
   dfe7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dfe82:	4770      	bx	lr
   dfe84:	f04f 0000 	mov.w	r0, #0
   dfe88:	4770      	bx	lr
   dfe8a:	bf00      	nop

000dfe8c <__aeabi_d2uiz>:
   dfe8c:	004a      	lsls	r2, r1, #1
   dfe8e:	d211      	bcs.n	dfeb4 <__aeabi_d2uiz+0x28>
   dfe90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dfe94:	d211      	bcs.n	dfeba <__aeabi_d2uiz+0x2e>
   dfe96:	d50d      	bpl.n	dfeb4 <__aeabi_d2uiz+0x28>
   dfe98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dfe9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dfea0:	d40e      	bmi.n	dfec0 <__aeabi_d2uiz+0x34>
   dfea2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dfea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dfeaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dfeae:	fa23 f002 	lsr.w	r0, r3, r2
   dfeb2:	4770      	bx	lr
   dfeb4:	f04f 0000 	mov.w	r0, #0
   dfeb8:	4770      	bx	lr
   dfeba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dfebe:	d102      	bne.n	dfec6 <__aeabi_d2uiz+0x3a>
   dfec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dfec4:	4770      	bx	lr
   dfec6:	f04f 0000 	mov.w	r0, #0
   dfeca:	4770      	bx	lr

000dfecc <__aeabi_d2ulz>:
   dfecc:	b5d0      	push	{r4, r6, r7, lr}
   dfece:	4b0c      	ldr	r3, [pc, #48]	; (dff00 <__aeabi_d2ulz+0x34>)
   dfed0:	2200      	movs	r2, #0
   dfed2:	4606      	mov	r6, r0
   dfed4:	460f      	mov	r7, r1
   dfed6:	f7ff fd17 	bl	df908 <__aeabi_dmul>
   dfeda:	f7ff ffd7 	bl	dfe8c <__aeabi_d2uiz>
   dfede:	4604      	mov	r4, r0
   dfee0:	f7ff fc98 	bl	df814 <__aeabi_ui2d>
   dfee4:	4b07      	ldr	r3, [pc, #28]	; (dff04 <__aeabi_d2ulz+0x38>)
   dfee6:	2200      	movs	r2, #0
   dfee8:	f7ff fd0e 	bl	df908 <__aeabi_dmul>
   dfeec:	4602      	mov	r2, r0
   dfeee:	460b      	mov	r3, r1
   dfef0:	4630      	mov	r0, r6
   dfef2:	4639      	mov	r1, r7
   dfef4:	f7ff fb50 	bl	df598 <__aeabi_dsub>
   dfef8:	f7ff ffc8 	bl	dfe8c <__aeabi_d2uiz>
   dfefc:	4621      	mov	r1, r4
   dfefe:	bdd0      	pop	{r4, r6, r7, pc}
   dff00:	3df00000 	.word	0x3df00000
   dff04:	41f00000 	.word	0x41f00000

000dff08 <asctime_r>:
   dff08:	b510      	push	{r4, lr}
   dff0a:	460c      	mov	r4, r1
   dff0c:	6941      	ldr	r1, [r0, #20]
   dff0e:	6903      	ldr	r3, [r0, #16]
   dff10:	6982      	ldr	r2, [r0, #24]
   dff12:	b086      	sub	sp, #24
   dff14:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dff18:	9104      	str	r1, [sp, #16]
   dff1a:	6801      	ldr	r1, [r0, #0]
   dff1c:	9103      	str	r1, [sp, #12]
   dff1e:	6841      	ldr	r1, [r0, #4]
   dff20:	9102      	str	r1, [sp, #8]
   dff22:	6881      	ldr	r1, [r0, #8]
   dff24:	9101      	str	r1, [sp, #4]
   dff26:	68c1      	ldr	r1, [r0, #12]
   dff28:	9100      	str	r1, [sp, #0]
   dff2a:	4907      	ldr	r1, [pc, #28]	; (dff48 <asctime_r+0x40>)
   dff2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dff30:	440b      	add	r3, r1
   dff32:	4906      	ldr	r1, [pc, #24]	; (dff4c <asctime_r+0x44>)
   dff34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dff38:	440a      	add	r2, r1
   dff3a:	4620      	mov	r0, r4
   dff3c:	4904      	ldr	r1, [pc, #16]	; (dff50 <asctime_r+0x48>)
   dff3e:	f7fc fa59 	bl	dc3f4 <siprintf>
   dff42:	4620      	mov	r0, r4
   dff44:	b006      	add	sp, #24
   dff46:	bd10      	pop	{r4, pc}
   dff48:	000e2f56 	.word	0x000e2f56
   dff4c:	000e2f41 	.word	0x000e2f41
   dff50:	000e2f21 	.word	0x000e2f21

000dff54 <atexit>:
   dff54:	2300      	movs	r3, #0
   dff56:	4601      	mov	r1, r0
   dff58:	461a      	mov	r2, r3
   dff5a:	4618      	mov	r0, r3
   dff5c:	f001 b856 	b.w	e100c <__register_exitproc>

000dff60 <gmtime>:
   dff60:	b538      	push	{r3, r4, r5, lr}
   dff62:	4b07      	ldr	r3, [pc, #28]	; (dff80 <gmtime+0x20>)
   dff64:	681d      	ldr	r5, [r3, #0]
   dff66:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dff68:	4604      	mov	r4, r0
   dff6a:	b91b      	cbnz	r3, dff74 <gmtime+0x14>
   dff6c:	2024      	movs	r0, #36	; 0x24
   dff6e:	f7fc fa29 	bl	dc3c4 <malloc>
   dff72:	63e8      	str	r0, [r5, #60]	; 0x3c
   dff74:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dff76:	4620      	mov	r0, r4
   dff78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dff7c:	f7fc ba8a 	b.w	dc494 <gmtime_r>
   dff80:	2003e218 	.word	0x2003e218

000dff84 <memcpy>:
   dff84:	440a      	add	r2, r1
   dff86:	4291      	cmp	r1, r2
   dff88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dff8c:	d100      	bne.n	dff90 <memcpy+0xc>
   dff8e:	4770      	bx	lr
   dff90:	b510      	push	{r4, lr}
   dff92:	f811 4b01 	ldrb.w	r4, [r1], #1
   dff96:	f803 4f01 	strb.w	r4, [r3, #1]!
   dff9a:	4291      	cmp	r1, r2
   dff9c:	d1f9      	bne.n	dff92 <memcpy+0xe>
   dff9e:	bd10      	pop	{r4, pc}

000dffa0 <memmove>:
   dffa0:	4288      	cmp	r0, r1
   dffa2:	b510      	push	{r4, lr}
   dffa4:	eb01 0402 	add.w	r4, r1, r2
   dffa8:	d902      	bls.n	dffb0 <memmove+0x10>
   dffaa:	4284      	cmp	r4, r0
   dffac:	4623      	mov	r3, r4
   dffae:	d807      	bhi.n	dffc0 <memmove+0x20>
   dffb0:	1e43      	subs	r3, r0, #1
   dffb2:	42a1      	cmp	r1, r4
   dffb4:	d008      	beq.n	dffc8 <memmove+0x28>
   dffb6:	f811 2b01 	ldrb.w	r2, [r1], #1
   dffba:	f803 2f01 	strb.w	r2, [r3, #1]!
   dffbe:	e7f8      	b.n	dffb2 <memmove+0x12>
   dffc0:	4402      	add	r2, r0
   dffc2:	4601      	mov	r1, r0
   dffc4:	428a      	cmp	r2, r1
   dffc6:	d100      	bne.n	dffca <memmove+0x2a>
   dffc8:	bd10      	pop	{r4, pc}
   dffca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dffce:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dffd2:	e7f7      	b.n	dffc4 <memmove+0x24>

000dffd4 <memset>:
   dffd4:	4402      	add	r2, r0
   dffd6:	4603      	mov	r3, r0
   dffd8:	4293      	cmp	r3, r2
   dffda:	d100      	bne.n	dffde <memset+0xa>
   dffdc:	4770      	bx	lr
   dffde:	f803 1b01 	strb.w	r1, [r3], #1
   dffe2:	e7f9      	b.n	dffd8 <memset+0x4>

000dffe4 <srand>:
   dffe4:	b538      	push	{r3, r4, r5, lr}
   dffe6:	4b0d      	ldr	r3, [pc, #52]	; (e001c <srand+0x38>)
   dffe8:	681d      	ldr	r5, [r3, #0]
   dffea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dffec:	4604      	mov	r4, r0
   dffee:	b97b      	cbnz	r3, e0010 <srand+0x2c>
   dfff0:	2018      	movs	r0, #24
   dfff2:	f7fc f9e7 	bl	dc3c4 <malloc>
   dfff6:	4a0a      	ldr	r2, [pc, #40]	; (e0020 <srand+0x3c>)
   dfff8:	4b0a      	ldr	r3, [pc, #40]	; (e0024 <srand+0x40>)
   dfffa:	63a8      	str	r0, [r5, #56]	; 0x38
   dfffc:	e9c0 2300 	strd	r2, r3, [r0]
   e0000:	4b09      	ldr	r3, [pc, #36]	; (e0028 <srand+0x44>)
   e0002:	6083      	str	r3, [r0, #8]
   e0004:	230b      	movs	r3, #11
   e0006:	8183      	strh	r3, [r0, #12]
   e0008:	2201      	movs	r2, #1
   e000a:	2300      	movs	r3, #0
   e000c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e0010:	6bab      	ldr	r3, [r5, #56]	; 0x38
   e0012:	2200      	movs	r2, #0
   e0014:	611c      	str	r4, [r3, #16]
   e0016:	615a      	str	r2, [r3, #20]
   e0018:	bd38      	pop	{r3, r4, r5, pc}
   e001a:	bf00      	nop
   e001c:	2003e218 	.word	0x2003e218
   e0020:	abcd330e 	.word	0xabcd330e
   e0024:	e66d1234 	.word	0xe66d1234
   e0028:	0005deec 	.word	0x0005deec

000e002c <rename>:
   e002c:	4b02      	ldr	r3, [pc, #8]	; (e0038 <rename+0xc>)
   e002e:	460a      	mov	r2, r1
   e0030:	4601      	mov	r1, r0
   e0032:	6818      	ldr	r0, [r3, #0]
   e0034:	f000 b802 	b.w	e003c <_rename_r>
   e0038:	2003e218 	.word	0x2003e218

000e003c <_rename_r>:
   e003c:	b538      	push	{r3, r4, r5, lr}
   e003e:	4604      	mov	r4, r0
   e0040:	460d      	mov	r5, r1
   e0042:	f001 fbc5 	bl	e17d0 <_link_r>
   e0046:	1c43      	adds	r3, r0, #1
   e0048:	d008      	beq.n	e005c <_rename_r+0x20>
   e004a:	4629      	mov	r1, r5
   e004c:	4620      	mov	r0, r4
   e004e:	f000 ffbb 	bl	e0fc8 <_unlink_r>
   e0052:	3001      	adds	r0, #1
   e0054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e0058:	bf18      	it	ne
   e005a:	2000      	movne	r0, #0
   e005c:	bd38      	pop	{r3, r4, r5, pc}

000e005e <strchr>:
   e005e:	b2c9      	uxtb	r1, r1
   e0060:	4603      	mov	r3, r0
   e0062:	f810 2b01 	ldrb.w	r2, [r0], #1
   e0066:	b11a      	cbz	r2, e0070 <strchr+0x12>
   e0068:	428a      	cmp	r2, r1
   e006a:	d1f9      	bne.n	e0060 <strchr+0x2>
   e006c:	4618      	mov	r0, r3
   e006e:	4770      	bx	lr
   e0070:	2900      	cmp	r1, #0
   e0072:	bf18      	it	ne
   e0074:	2300      	movne	r3, #0
   e0076:	e7f9      	b.n	e006c <strchr+0xe>

000e0078 <strchrnul>:
   e0078:	b510      	push	{r4, lr}
   e007a:	4604      	mov	r4, r0
   e007c:	f7ff ffef 	bl	e005e <strchr>
   e0080:	b918      	cbnz	r0, e008a <strchrnul+0x12>
   e0082:	4620      	mov	r0, r4
   e0084:	f000 f831 	bl	e00ea <strlen>
   e0088:	4420      	add	r0, r4
   e008a:	bd10      	pop	{r4, pc}

000e008c <strcmp>:
   e008c:	f810 2b01 	ldrb.w	r2, [r0], #1
   e0090:	f811 3b01 	ldrb.w	r3, [r1], #1
   e0094:	2a01      	cmp	r2, #1
   e0096:	bf28      	it	cs
   e0098:	429a      	cmpcs	r2, r3
   e009a:	d0f7      	beq.n	e008c <strcmp>
   e009c:	1ad0      	subs	r0, r2, r3
   e009e:	4770      	bx	lr

000e00a0 <strcpy>:
   e00a0:	4603      	mov	r3, r0
   e00a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   e00a6:	f803 2b01 	strb.w	r2, [r3], #1
   e00aa:	2a00      	cmp	r2, #0
   e00ac:	d1f9      	bne.n	e00a2 <strcpy+0x2>
   e00ae:	4770      	bx	lr

000e00b0 <strdup>:
   e00b0:	4b02      	ldr	r3, [pc, #8]	; (e00bc <strdup+0xc>)
   e00b2:	4601      	mov	r1, r0
   e00b4:	6818      	ldr	r0, [r3, #0]
   e00b6:	f000 b803 	b.w	e00c0 <_strdup_r>
   e00ba:	bf00      	nop
   e00bc:	2003e218 	.word	0x2003e218

000e00c0 <_strdup_r>:
   e00c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e00c2:	4604      	mov	r4, r0
   e00c4:	4608      	mov	r0, r1
   e00c6:	460d      	mov	r5, r1
   e00c8:	f000 f80f 	bl	e00ea <strlen>
   e00cc:	1c42      	adds	r2, r0, #1
   e00ce:	4611      	mov	r1, r2
   e00d0:	4620      	mov	r0, r4
   e00d2:	9201      	str	r2, [sp, #4]
   e00d4:	f7fc f9b6 	bl	dc444 <_malloc_r>
   e00d8:	4604      	mov	r4, r0
   e00da:	b118      	cbz	r0, e00e4 <_strdup_r+0x24>
   e00dc:	9a01      	ldr	r2, [sp, #4]
   e00de:	4629      	mov	r1, r5
   e00e0:	f7ff ff50 	bl	dff84 <memcpy>
   e00e4:	4620      	mov	r0, r4
   e00e6:	b003      	add	sp, #12
   e00e8:	bd30      	pop	{r4, r5, pc}

000e00ea <strlen>:
   e00ea:	4603      	mov	r3, r0
   e00ec:	f813 2b01 	ldrb.w	r2, [r3], #1
   e00f0:	2a00      	cmp	r2, #0
   e00f2:	d1fb      	bne.n	e00ec <strlen+0x2>
   e00f4:	1a18      	subs	r0, r3, r0
   e00f6:	3801      	subs	r0, #1
   e00f8:	4770      	bx	lr

000e00fa <strncmp>:
   e00fa:	b510      	push	{r4, lr}
   e00fc:	b16a      	cbz	r2, e011a <strncmp+0x20>
   e00fe:	3901      	subs	r1, #1
   e0100:	1884      	adds	r4, r0, r2
   e0102:	f810 3b01 	ldrb.w	r3, [r0], #1
   e0106:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   e010a:	4293      	cmp	r3, r2
   e010c:	d103      	bne.n	e0116 <strncmp+0x1c>
   e010e:	42a0      	cmp	r0, r4
   e0110:	d001      	beq.n	e0116 <strncmp+0x1c>
   e0112:	2b00      	cmp	r3, #0
   e0114:	d1f5      	bne.n	e0102 <strncmp+0x8>
   e0116:	1a98      	subs	r0, r3, r2
   e0118:	bd10      	pop	{r4, pc}
   e011a:	4610      	mov	r0, r2
   e011c:	e7fc      	b.n	e0118 <strncmp+0x1e>

000e011e <strncpy>:
   e011e:	b510      	push	{r4, lr}
   e0120:	3901      	subs	r1, #1
   e0122:	4603      	mov	r3, r0
   e0124:	b132      	cbz	r2, e0134 <strncpy+0x16>
   e0126:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e012a:	f803 4b01 	strb.w	r4, [r3], #1
   e012e:	3a01      	subs	r2, #1
   e0130:	2c00      	cmp	r4, #0
   e0132:	d1f7      	bne.n	e0124 <strncpy+0x6>
   e0134:	441a      	add	r2, r3
   e0136:	2100      	movs	r1, #0
   e0138:	4293      	cmp	r3, r2
   e013a:	d100      	bne.n	e013e <strncpy+0x20>
   e013c:	bd10      	pop	{r4, pc}
   e013e:	f803 1b01 	strb.w	r1, [r3], #1
   e0142:	e7f9      	b.n	e0138 <strncpy+0x1a>

000e0144 <strrchr>:
   e0144:	b538      	push	{r3, r4, r5, lr}
   e0146:	4603      	mov	r3, r0
   e0148:	460c      	mov	r4, r1
   e014a:	b969      	cbnz	r1, e0168 <strrchr+0x24>
   e014c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e0150:	f7ff bf85 	b.w	e005e <strchr>
   e0154:	1c43      	adds	r3, r0, #1
   e0156:	4605      	mov	r5, r0
   e0158:	4621      	mov	r1, r4
   e015a:	4618      	mov	r0, r3
   e015c:	f7ff ff7f 	bl	e005e <strchr>
   e0160:	2800      	cmp	r0, #0
   e0162:	d1f7      	bne.n	e0154 <strrchr+0x10>
   e0164:	4628      	mov	r0, r5
   e0166:	bd38      	pop	{r3, r4, r5, pc}
   e0168:	2500      	movs	r5, #0
   e016a:	e7f5      	b.n	e0158 <strrchr+0x14>

000e016c <sulp>:
   e016c:	b570      	push	{r4, r5, r6, lr}
   e016e:	4604      	mov	r4, r0
   e0170:	460d      	mov	r5, r1
   e0172:	ec45 4b10 	vmov	d0, r4, r5
   e0176:	4616      	mov	r6, r2
   e0178:	f001 fe60 	bl	e1e3c <__ulp>
   e017c:	ec51 0b10 	vmov	r0, r1, d0
   e0180:	b17e      	cbz	r6, e01a2 <sulp+0x36>
   e0182:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e0186:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e018a:	2b00      	cmp	r3, #0
   e018c:	dd09      	ble.n	e01a2 <sulp+0x36>
   e018e:	051b      	lsls	r3, r3, #20
   e0190:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e0194:	2400      	movs	r4, #0
   e0196:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e019a:	4622      	mov	r2, r4
   e019c:	462b      	mov	r3, r5
   e019e:	f7ff fbb3 	bl	df908 <__aeabi_dmul>
   e01a2:	bd70      	pop	{r4, r5, r6, pc}
   e01a4:	0000      	movs	r0, r0
	...

000e01a8 <_strtod_l>:
   e01a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e01ac:	b0a3      	sub	sp, #140	; 0x8c
   e01ae:	461f      	mov	r7, r3
   e01b0:	2300      	movs	r3, #0
   e01b2:	931e      	str	r3, [sp, #120]	; 0x78
   e01b4:	4ba4      	ldr	r3, [pc, #656]	; (e0448 <_strtod_l+0x2a0>)
   e01b6:	9219      	str	r2, [sp, #100]	; 0x64
   e01b8:	681b      	ldr	r3, [r3, #0]
   e01ba:	9307      	str	r3, [sp, #28]
   e01bc:	4604      	mov	r4, r0
   e01be:	4618      	mov	r0, r3
   e01c0:	4688      	mov	r8, r1
   e01c2:	f7ff ff92 	bl	e00ea <strlen>
   e01c6:	f04f 0a00 	mov.w	sl, #0
   e01ca:	4605      	mov	r5, r0
   e01cc:	f04f 0b00 	mov.w	fp, #0
   e01d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e01d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e01d6:	781a      	ldrb	r2, [r3, #0]
   e01d8:	2a2b      	cmp	r2, #43	; 0x2b
   e01da:	d04c      	beq.n	e0276 <_strtod_l+0xce>
   e01dc:	d839      	bhi.n	e0252 <_strtod_l+0xaa>
   e01de:	2a0d      	cmp	r2, #13
   e01e0:	d832      	bhi.n	e0248 <_strtod_l+0xa0>
   e01e2:	2a08      	cmp	r2, #8
   e01e4:	d832      	bhi.n	e024c <_strtod_l+0xa4>
   e01e6:	2a00      	cmp	r2, #0
   e01e8:	d03c      	beq.n	e0264 <_strtod_l+0xbc>
   e01ea:	2300      	movs	r3, #0
   e01ec:	930e      	str	r3, [sp, #56]	; 0x38
   e01ee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   e01f0:	7833      	ldrb	r3, [r6, #0]
   e01f2:	2b30      	cmp	r3, #48	; 0x30
   e01f4:	f040 80b4 	bne.w	e0360 <_strtod_l+0x1b8>
   e01f8:	7873      	ldrb	r3, [r6, #1]
   e01fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   e01fe:	2b58      	cmp	r3, #88	; 0x58
   e0200:	d16c      	bne.n	e02dc <_strtod_l+0x134>
   e0202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e0204:	9301      	str	r3, [sp, #4]
   e0206:	ab1e      	add	r3, sp, #120	; 0x78
   e0208:	9702      	str	r7, [sp, #8]
   e020a:	9300      	str	r3, [sp, #0]
   e020c:	4a8f      	ldr	r2, [pc, #572]	; (e044c <_strtod_l+0x2a4>)
   e020e:	ab1f      	add	r3, sp, #124	; 0x7c
   e0210:	a91d      	add	r1, sp, #116	; 0x74
   e0212:	4620      	mov	r0, r4
   e0214:	f000 ffe6 	bl	e11e4 <__gethex>
   e0218:	f010 0707 	ands.w	r7, r0, #7
   e021c:	4605      	mov	r5, r0
   e021e:	d005      	beq.n	e022c <_strtod_l+0x84>
   e0220:	2f06      	cmp	r7, #6
   e0222:	d12a      	bne.n	e027a <_strtod_l+0xd2>
   e0224:	3601      	adds	r6, #1
   e0226:	2300      	movs	r3, #0
   e0228:	961d      	str	r6, [sp, #116]	; 0x74
   e022a:	930e      	str	r3, [sp, #56]	; 0x38
   e022c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e022e:	2b00      	cmp	r3, #0
   e0230:	f040 8596 	bne.w	e0d60 <_strtod_l+0xbb8>
   e0234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e0236:	b1db      	cbz	r3, e0270 <_strtod_l+0xc8>
   e0238:	4652      	mov	r2, sl
   e023a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e023e:	ec43 2b10 	vmov	d0, r2, r3
   e0242:	b023      	add	sp, #140	; 0x8c
   e0244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0248:	2a20      	cmp	r2, #32
   e024a:	d1ce      	bne.n	e01ea <_strtod_l+0x42>
   e024c:	3301      	adds	r3, #1
   e024e:	931d      	str	r3, [sp, #116]	; 0x74
   e0250:	e7c0      	b.n	e01d4 <_strtod_l+0x2c>
   e0252:	2a2d      	cmp	r2, #45	; 0x2d
   e0254:	d1c9      	bne.n	e01ea <_strtod_l+0x42>
   e0256:	2201      	movs	r2, #1
   e0258:	920e      	str	r2, [sp, #56]	; 0x38
   e025a:	1c5a      	adds	r2, r3, #1
   e025c:	921d      	str	r2, [sp, #116]	; 0x74
   e025e:	785b      	ldrb	r3, [r3, #1]
   e0260:	2b00      	cmp	r3, #0
   e0262:	d1c4      	bne.n	e01ee <_strtod_l+0x46>
   e0264:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e0266:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e026a:	2b00      	cmp	r3, #0
   e026c:	f040 8576 	bne.w	e0d5c <_strtod_l+0xbb4>
   e0270:	4652      	mov	r2, sl
   e0272:	465b      	mov	r3, fp
   e0274:	e7e3      	b.n	e023e <_strtod_l+0x96>
   e0276:	2200      	movs	r2, #0
   e0278:	e7ee      	b.n	e0258 <_strtod_l+0xb0>
   e027a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   e027c:	b13a      	cbz	r2, e028e <_strtod_l+0xe6>
   e027e:	2135      	movs	r1, #53	; 0x35
   e0280:	a820      	add	r0, sp, #128	; 0x80
   e0282:	f001 feda 	bl	e203a <__copybits>
   e0286:	991e      	ldr	r1, [sp, #120]	; 0x78
   e0288:	4620      	mov	r0, r4
   e028a:	f001 fb0f 	bl	e18ac <_Bfree>
   e028e:	3f01      	subs	r7, #1
   e0290:	2f05      	cmp	r7, #5
   e0292:	d807      	bhi.n	e02a4 <_strtod_l+0xfc>
   e0294:	e8df f007 	tbb	[pc, r7]
   e0298:	1d180b0e 	.word	0x1d180b0e
   e029c:	030e      	.short	0x030e
   e029e:	f04f 0b00 	mov.w	fp, #0
   e02a2:	46da      	mov	sl, fp
   e02a4:	0728      	lsls	r0, r5, #28
   e02a6:	d5c1      	bpl.n	e022c <_strtod_l+0x84>
   e02a8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e02ac:	e7be      	b.n	e022c <_strtod_l+0x84>
   e02ae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   e02b2:	e7f7      	b.n	e02a4 <_strtod_l+0xfc>
   e02b4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   e02b8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   e02ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e02be:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e02c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e02c6:	e7ed      	b.n	e02a4 <_strtod_l+0xfc>
   e02c8:	f8df b184 	ldr.w	fp, [pc, #388]	; e0450 <_strtod_l+0x2a8>
   e02cc:	f04f 0a00 	mov.w	sl, #0
   e02d0:	e7e8      	b.n	e02a4 <_strtod_l+0xfc>
   e02d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e02d6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   e02da:	e7e3      	b.n	e02a4 <_strtod_l+0xfc>
   e02dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e02de:	1c5a      	adds	r2, r3, #1
   e02e0:	921d      	str	r2, [sp, #116]	; 0x74
   e02e2:	785b      	ldrb	r3, [r3, #1]
   e02e4:	2b30      	cmp	r3, #48	; 0x30
   e02e6:	d0f9      	beq.n	e02dc <_strtod_l+0x134>
   e02e8:	2b00      	cmp	r3, #0
   e02ea:	d09f      	beq.n	e022c <_strtod_l+0x84>
   e02ec:	2301      	movs	r3, #1
   e02ee:	f04f 0900 	mov.w	r9, #0
   e02f2:	9304      	str	r3, [sp, #16]
   e02f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e02f6:	930a      	str	r3, [sp, #40]	; 0x28
   e02f8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   e02fc:	464f      	mov	r7, r9
   e02fe:	220a      	movs	r2, #10
   e0300:	981d      	ldr	r0, [sp, #116]	; 0x74
   e0302:	7806      	ldrb	r6, [r0, #0]
   e0304:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e0308:	b2d9      	uxtb	r1, r3
   e030a:	2909      	cmp	r1, #9
   e030c:	d92a      	bls.n	e0364 <_strtod_l+0x1bc>
   e030e:	9907      	ldr	r1, [sp, #28]
   e0310:	462a      	mov	r2, r5
   e0312:	f7ff fef2 	bl	e00fa <strncmp>
   e0316:	b398      	cbz	r0, e0380 <_strtod_l+0x1d8>
   e0318:	2000      	movs	r0, #0
   e031a:	4633      	mov	r3, r6
   e031c:	463d      	mov	r5, r7
   e031e:	9007      	str	r0, [sp, #28]
   e0320:	4602      	mov	r2, r0
   e0322:	2b65      	cmp	r3, #101	; 0x65
   e0324:	d001      	beq.n	e032a <_strtod_l+0x182>
   e0326:	2b45      	cmp	r3, #69	; 0x45
   e0328:	d118      	bne.n	e035c <_strtod_l+0x1b4>
   e032a:	b91d      	cbnz	r5, e0334 <_strtod_l+0x18c>
   e032c:	9b04      	ldr	r3, [sp, #16]
   e032e:	4303      	orrs	r3, r0
   e0330:	d098      	beq.n	e0264 <_strtod_l+0xbc>
   e0332:	2500      	movs	r5, #0
   e0334:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   e0338:	f108 0301 	add.w	r3, r8, #1
   e033c:	931d      	str	r3, [sp, #116]	; 0x74
   e033e:	f898 3001 	ldrb.w	r3, [r8, #1]
   e0342:	2b2b      	cmp	r3, #43	; 0x2b
   e0344:	d075      	beq.n	e0432 <_strtod_l+0x28a>
   e0346:	2b2d      	cmp	r3, #45	; 0x2d
   e0348:	d07b      	beq.n	e0442 <_strtod_l+0x29a>
   e034a:	f04f 0c00 	mov.w	ip, #0
   e034e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e0352:	2909      	cmp	r1, #9
   e0354:	f240 8082 	bls.w	e045c <_strtod_l+0x2b4>
   e0358:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e035c:	2600      	movs	r6, #0
   e035e:	e09d      	b.n	e049c <_strtod_l+0x2f4>
   e0360:	2300      	movs	r3, #0
   e0362:	e7c4      	b.n	e02ee <_strtod_l+0x146>
   e0364:	2f08      	cmp	r7, #8
   e0366:	bfd8      	it	le
   e0368:	9909      	ldrle	r1, [sp, #36]	; 0x24
   e036a:	f100 0001 	add.w	r0, r0, #1
   e036e:	bfda      	itte	le
   e0370:	fb02 3301 	mlale	r3, r2, r1, r3
   e0374:	9309      	strle	r3, [sp, #36]	; 0x24
   e0376:	fb02 3909 	mlagt	r9, r2, r9, r3
   e037a:	3701      	adds	r7, #1
   e037c:	901d      	str	r0, [sp, #116]	; 0x74
   e037e:	e7bf      	b.n	e0300 <_strtod_l+0x158>
   e0380:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0382:	195a      	adds	r2, r3, r5
   e0384:	921d      	str	r2, [sp, #116]	; 0x74
   e0386:	5d5b      	ldrb	r3, [r3, r5]
   e0388:	2f00      	cmp	r7, #0
   e038a:	d037      	beq.n	e03fc <_strtod_l+0x254>
   e038c:	9007      	str	r0, [sp, #28]
   e038e:	463d      	mov	r5, r7
   e0390:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   e0394:	2a09      	cmp	r2, #9
   e0396:	d912      	bls.n	e03be <_strtod_l+0x216>
   e0398:	2201      	movs	r2, #1
   e039a:	e7c2      	b.n	e0322 <_strtod_l+0x17a>
   e039c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e039e:	1c5a      	adds	r2, r3, #1
   e03a0:	921d      	str	r2, [sp, #116]	; 0x74
   e03a2:	785b      	ldrb	r3, [r3, #1]
   e03a4:	3001      	adds	r0, #1
   e03a6:	2b30      	cmp	r3, #48	; 0x30
   e03a8:	d0f8      	beq.n	e039c <_strtod_l+0x1f4>
   e03aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e03ae:	2a08      	cmp	r2, #8
   e03b0:	f200 84db 	bhi.w	e0d6a <_strtod_l+0xbc2>
   e03b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   e03b6:	9007      	str	r0, [sp, #28]
   e03b8:	2000      	movs	r0, #0
   e03ba:	920a      	str	r2, [sp, #40]	; 0x28
   e03bc:	4605      	mov	r5, r0
   e03be:	3b30      	subs	r3, #48	; 0x30
   e03c0:	f100 0201 	add.w	r2, r0, #1
   e03c4:	d014      	beq.n	e03f0 <_strtod_l+0x248>
   e03c6:	9907      	ldr	r1, [sp, #28]
   e03c8:	4411      	add	r1, r2
   e03ca:	9107      	str	r1, [sp, #28]
   e03cc:	462a      	mov	r2, r5
   e03ce:	eb00 0e05 	add.w	lr, r0, r5
   e03d2:	210a      	movs	r1, #10
   e03d4:	4572      	cmp	r2, lr
   e03d6:	d113      	bne.n	e0400 <_strtod_l+0x258>
   e03d8:	182a      	adds	r2, r5, r0
   e03da:	2a08      	cmp	r2, #8
   e03dc:	f105 0501 	add.w	r5, r5, #1
   e03e0:	4405      	add	r5, r0
   e03e2:	dc1c      	bgt.n	e041e <_strtod_l+0x276>
   e03e4:	9909      	ldr	r1, [sp, #36]	; 0x24
   e03e6:	220a      	movs	r2, #10
   e03e8:	fb02 3301 	mla	r3, r2, r1, r3
   e03ec:	9309      	str	r3, [sp, #36]	; 0x24
   e03ee:	2200      	movs	r2, #0
   e03f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e03f2:	1c59      	adds	r1, r3, #1
   e03f4:	911d      	str	r1, [sp, #116]	; 0x74
   e03f6:	785b      	ldrb	r3, [r3, #1]
   e03f8:	4610      	mov	r0, r2
   e03fa:	e7c9      	b.n	e0390 <_strtod_l+0x1e8>
   e03fc:	4638      	mov	r0, r7
   e03fe:	e7d2      	b.n	e03a6 <_strtod_l+0x1fe>
   e0400:	2a08      	cmp	r2, #8
   e0402:	dc04      	bgt.n	e040e <_strtod_l+0x266>
   e0404:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e0406:	434e      	muls	r6, r1
   e0408:	9609      	str	r6, [sp, #36]	; 0x24
   e040a:	3201      	adds	r2, #1
   e040c:	e7e2      	b.n	e03d4 <_strtod_l+0x22c>
   e040e:	f102 0c01 	add.w	ip, r2, #1
   e0412:	f1bc 0f10 	cmp.w	ip, #16
   e0416:	bfd8      	it	le
   e0418:	fb01 f909 	mulle.w	r9, r1, r9
   e041c:	e7f5      	b.n	e040a <_strtod_l+0x262>
   e041e:	2d10      	cmp	r5, #16
   e0420:	bfdc      	itt	le
   e0422:	220a      	movle	r2, #10
   e0424:	fb02 3909 	mlale	r9, r2, r9, r3
   e0428:	e7e1      	b.n	e03ee <_strtod_l+0x246>
   e042a:	2300      	movs	r3, #0
   e042c:	9307      	str	r3, [sp, #28]
   e042e:	2201      	movs	r2, #1
   e0430:	e77c      	b.n	e032c <_strtod_l+0x184>
   e0432:	f04f 0c00 	mov.w	ip, #0
   e0436:	f108 0302 	add.w	r3, r8, #2
   e043a:	931d      	str	r3, [sp, #116]	; 0x74
   e043c:	f898 3002 	ldrb.w	r3, [r8, #2]
   e0440:	e785      	b.n	e034e <_strtod_l+0x1a6>
   e0442:	f04f 0c01 	mov.w	ip, #1
   e0446:	e7f6      	b.n	e0436 <_strtod_l+0x28e>
   e0448:	000e30dc 	.word	0x000e30dc
   e044c:	000e2f88 	.word	0x000e2f88
   e0450:	7ff00000 	.word	0x7ff00000
   e0454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0456:	1c59      	adds	r1, r3, #1
   e0458:	911d      	str	r1, [sp, #116]	; 0x74
   e045a:	785b      	ldrb	r3, [r3, #1]
   e045c:	2b30      	cmp	r3, #48	; 0x30
   e045e:	d0f9      	beq.n	e0454 <_strtod_l+0x2ac>
   e0460:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   e0464:	2908      	cmp	r1, #8
   e0466:	f63f af79 	bhi.w	e035c <_strtod_l+0x1b4>
   e046a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e046e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0470:	9308      	str	r3, [sp, #32]
   e0472:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0474:	1c59      	adds	r1, r3, #1
   e0476:	911d      	str	r1, [sp, #116]	; 0x74
   e0478:	785b      	ldrb	r3, [r3, #1]
   e047a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e047e:	2e09      	cmp	r6, #9
   e0480:	d937      	bls.n	e04f2 <_strtod_l+0x34a>
   e0482:	9e08      	ldr	r6, [sp, #32]
   e0484:	1b89      	subs	r1, r1, r6
   e0486:	2908      	cmp	r1, #8
   e0488:	f644 661f 	movw	r6, #19999	; 0x4e1f
   e048c:	dc02      	bgt.n	e0494 <_strtod_l+0x2ec>
   e048e:	4576      	cmp	r6, lr
   e0490:	bfa8      	it	ge
   e0492:	4676      	movge	r6, lr
   e0494:	f1bc 0f00 	cmp.w	ip, #0
   e0498:	d000      	beq.n	e049c <_strtod_l+0x2f4>
   e049a:	4276      	negs	r6, r6
   e049c:	2d00      	cmp	r5, #0
   e049e:	d14f      	bne.n	e0540 <_strtod_l+0x398>
   e04a0:	9904      	ldr	r1, [sp, #16]
   e04a2:	4301      	orrs	r1, r0
   e04a4:	f47f aec2 	bne.w	e022c <_strtod_l+0x84>
   e04a8:	2a00      	cmp	r2, #0
   e04aa:	f47f aedb 	bne.w	e0264 <_strtod_l+0xbc>
   e04ae:	2b69      	cmp	r3, #105	; 0x69
   e04b0:	d027      	beq.n	e0502 <_strtod_l+0x35a>
   e04b2:	dc24      	bgt.n	e04fe <_strtod_l+0x356>
   e04b4:	2b49      	cmp	r3, #73	; 0x49
   e04b6:	d024      	beq.n	e0502 <_strtod_l+0x35a>
   e04b8:	2b4e      	cmp	r3, #78	; 0x4e
   e04ba:	f47f aed3 	bne.w	e0264 <_strtod_l+0xbc>
   e04be:	499e      	ldr	r1, [pc, #632]	; (e0738 <_strtod_l+0x590>)
   e04c0:	a81d      	add	r0, sp, #116	; 0x74
   e04c2:	f001 f8d5 	bl	e1670 <__match>
   e04c6:	2800      	cmp	r0, #0
   e04c8:	f43f aecc 	beq.w	e0264 <_strtod_l+0xbc>
   e04cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e04ce:	781b      	ldrb	r3, [r3, #0]
   e04d0:	2b28      	cmp	r3, #40	; 0x28
   e04d2:	d12d      	bne.n	e0530 <_strtod_l+0x388>
   e04d4:	4999      	ldr	r1, [pc, #612]	; (e073c <_strtod_l+0x594>)
   e04d6:	aa20      	add	r2, sp, #128	; 0x80
   e04d8:	a81d      	add	r0, sp, #116	; 0x74
   e04da:	f001 f8dd 	bl	e1698 <__hexnan>
   e04de:	2805      	cmp	r0, #5
   e04e0:	d126      	bne.n	e0530 <_strtod_l+0x388>
   e04e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   e04e4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   e04e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e04ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e04f0:	e69c      	b.n	e022c <_strtod_l+0x84>
   e04f2:	210a      	movs	r1, #10
   e04f4:	fb01 3e0e 	mla	lr, r1, lr, r3
   e04f8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e04fc:	e7b9      	b.n	e0472 <_strtod_l+0x2ca>
   e04fe:	2b6e      	cmp	r3, #110	; 0x6e
   e0500:	e7db      	b.n	e04ba <_strtod_l+0x312>
   e0502:	498f      	ldr	r1, [pc, #572]	; (e0740 <_strtod_l+0x598>)
   e0504:	a81d      	add	r0, sp, #116	; 0x74
   e0506:	f001 f8b3 	bl	e1670 <__match>
   e050a:	2800      	cmp	r0, #0
   e050c:	f43f aeaa 	beq.w	e0264 <_strtod_l+0xbc>
   e0510:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0512:	498c      	ldr	r1, [pc, #560]	; (e0744 <_strtod_l+0x59c>)
   e0514:	3b01      	subs	r3, #1
   e0516:	a81d      	add	r0, sp, #116	; 0x74
   e0518:	931d      	str	r3, [sp, #116]	; 0x74
   e051a:	f001 f8a9 	bl	e1670 <__match>
   e051e:	b910      	cbnz	r0, e0526 <_strtod_l+0x37e>
   e0520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0522:	3301      	adds	r3, #1
   e0524:	931d      	str	r3, [sp, #116]	; 0x74
   e0526:	f8df b22c 	ldr.w	fp, [pc, #556]	; e0754 <_strtod_l+0x5ac>
   e052a:	f04f 0a00 	mov.w	sl, #0
   e052e:	e67d      	b.n	e022c <_strtod_l+0x84>
   e0530:	4885      	ldr	r0, [pc, #532]	; (e0748 <_strtod_l+0x5a0>)
   e0532:	f001 fdf9 	bl	e2128 <nan>
   e0536:	ed8d 0b04 	vstr	d0, [sp, #16]
   e053a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e053e:	e675      	b.n	e022c <_strtod_l+0x84>
   e0540:	9b07      	ldr	r3, [sp, #28]
   e0542:	9809      	ldr	r0, [sp, #36]	; 0x24
   e0544:	1af3      	subs	r3, r6, r3
   e0546:	2f00      	cmp	r7, #0
   e0548:	bf08      	it	eq
   e054a:	462f      	moveq	r7, r5
   e054c:	2d10      	cmp	r5, #16
   e054e:	9308      	str	r3, [sp, #32]
   e0550:	46a8      	mov	r8, r5
   e0552:	bfa8      	it	ge
   e0554:	f04f 0810 	movge.w	r8, #16
   e0558:	f7ff f95c 	bl	df814 <__aeabi_ui2d>
   e055c:	2d09      	cmp	r5, #9
   e055e:	4682      	mov	sl, r0
   e0560:	468b      	mov	fp, r1
   e0562:	dd13      	ble.n	e058c <_strtod_l+0x3e4>
   e0564:	4b79      	ldr	r3, [pc, #484]	; (e074c <_strtod_l+0x5a4>)
   e0566:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   e056a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e056e:	f7ff f9cb 	bl	df908 <__aeabi_dmul>
   e0572:	4682      	mov	sl, r0
   e0574:	4648      	mov	r0, r9
   e0576:	468b      	mov	fp, r1
   e0578:	f7ff f94c 	bl	df814 <__aeabi_ui2d>
   e057c:	4602      	mov	r2, r0
   e057e:	460b      	mov	r3, r1
   e0580:	4650      	mov	r0, sl
   e0582:	4659      	mov	r1, fp
   e0584:	f7ff f80a 	bl	df59c <__adddf3>
   e0588:	4682      	mov	sl, r0
   e058a:	468b      	mov	fp, r1
   e058c:	2d0f      	cmp	r5, #15
   e058e:	dc38      	bgt.n	e0602 <_strtod_l+0x45a>
   e0590:	9b08      	ldr	r3, [sp, #32]
   e0592:	2b00      	cmp	r3, #0
   e0594:	f43f ae4a 	beq.w	e022c <_strtod_l+0x84>
   e0598:	dd24      	ble.n	e05e4 <_strtod_l+0x43c>
   e059a:	2b16      	cmp	r3, #22
   e059c:	dc0b      	bgt.n	e05b6 <_strtod_l+0x40e>
   e059e:	4d6b      	ldr	r5, [pc, #428]	; (e074c <_strtod_l+0x5a4>)
   e05a0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   e05a4:	e9d5 0100 	ldrd	r0, r1, [r5]
   e05a8:	4652      	mov	r2, sl
   e05aa:	465b      	mov	r3, fp
   e05ac:	f7ff f9ac 	bl	df908 <__aeabi_dmul>
   e05b0:	4682      	mov	sl, r0
   e05b2:	468b      	mov	fp, r1
   e05b4:	e63a      	b.n	e022c <_strtod_l+0x84>
   e05b6:	9a08      	ldr	r2, [sp, #32]
   e05b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e05bc:	4293      	cmp	r3, r2
   e05be:	db20      	blt.n	e0602 <_strtod_l+0x45a>
   e05c0:	4c62      	ldr	r4, [pc, #392]	; (e074c <_strtod_l+0x5a4>)
   e05c2:	f1c5 050f 	rsb	r5, r5, #15
   e05c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e05ca:	4652      	mov	r2, sl
   e05cc:	465b      	mov	r3, fp
   e05ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   e05d2:	f7ff f999 	bl	df908 <__aeabi_dmul>
   e05d6:	9b08      	ldr	r3, [sp, #32]
   e05d8:	1b5d      	subs	r5, r3, r5
   e05da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e05de:	e9d4 2300 	ldrd	r2, r3, [r4]
   e05e2:	e7e3      	b.n	e05ac <_strtod_l+0x404>
   e05e4:	9b08      	ldr	r3, [sp, #32]
   e05e6:	3316      	adds	r3, #22
   e05e8:	db0b      	blt.n	e0602 <_strtod_l+0x45a>
   e05ea:	9b07      	ldr	r3, [sp, #28]
   e05ec:	4a57      	ldr	r2, [pc, #348]	; (e074c <_strtod_l+0x5a4>)
   e05ee:	1b9e      	subs	r6, r3, r6
   e05f0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   e05f4:	e9d6 2300 	ldrd	r2, r3, [r6]
   e05f8:	4650      	mov	r0, sl
   e05fa:	4659      	mov	r1, fp
   e05fc:	f7ff faae 	bl	dfb5c <__aeabi_ddiv>
   e0600:	e7d6      	b.n	e05b0 <_strtod_l+0x408>
   e0602:	9b08      	ldr	r3, [sp, #32]
   e0604:	eba5 0808 	sub.w	r8, r5, r8
   e0608:	4498      	add	r8, r3
   e060a:	f1b8 0f00 	cmp.w	r8, #0
   e060e:	dd71      	ble.n	e06f4 <_strtod_l+0x54c>
   e0610:	f018 030f 	ands.w	r3, r8, #15
   e0614:	d00a      	beq.n	e062c <_strtod_l+0x484>
   e0616:	494d      	ldr	r1, [pc, #308]	; (e074c <_strtod_l+0x5a4>)
   e0618:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   e061c:	4652      	mov	r2, sl
   e061e:	465b      	mov	r3, fp
   e0620:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0624:	f7ff f970 	bl	df908 <__aeabi_dmul>
   e0628:	4682      	mov	sl, r0
   e062a:	468b      	mov	fp, r1
   e062c:	f038 080f 	bics.w	r8, r8, #15
   e0630:	d04d      	beq.n	e06ce <_strtod_l+0x526>
   e0632:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   e0636:	dd22      	ble.n	e067e <_strtod_l+0x4d6>
   e0638:	2500      	movs	r5, #0
   e063a:	462e      	mov	r6, r5
   e063c:	9509      	str	r5, [sp, #36]	; 0x24
   e063e:	9507      	str	r5, [sp, #28]
   e0640:	2322      	movs	r3, #34	; 0x22
   e0642:	f8df b110 	ldr.w	fp, [pc, #272]	; e0754 <_strtod_l+0x5ac>
   e0646:	6023      	str	r3, [r4, #0]
   e0648:	f04f 0a00 	mov.w	sl, #0
   e064c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e064e:	2b00      	cmp	r3, #0
   e0650:	f43f adec 	beq.w	e022c <_strtod_l+0x84>
   e0654:	991e      	ldr	r1, [sp, #120]	; 0x78
   e0656:	4620      	mov	r0, r4
   e0658:	f001 f928 	bl	e18ac <_Bfree>
   e065c:	9907      	ldr	r1, [sp, #28]
   e065e:	4620      	mov	r0, r4
   e0660:	f001 f924 	bl	e18ac <_Bfree>
   e0664:	4631      	mov	r1, r6
   e0666:	4620      	mov	r0, r4
   e0668:	f001 f920 	bl	e18ac <_Bfree>
   e066c:	9909      	ldr	r1, [sp, #36]	; 0x24
   e066e:	4620      	mov	r0, r4
   e0670:	f001 f91c 	bl	e18ac <_Bfree>
   e0674:	4629      	mov	r1, r5
   e0676:	4620      	mov	r0, r4
   e0678:	f001 f918 	bl	e18ac <_Bfree>
   e067c:	e5d6      	b.n	e022c <_strtod_l+0x84>
   e067e:	2300      	movs	r3, #0
   e0680:	ea4f 1828 	mov.w	r8, r8, asr #4
   e0684:	4650      	mov	r0, sl
   e0686:	4659      	mov	r1, fp
   e0688:	4699      	mov	r9, r3
   e068a:	f1b8 0f01 	cmp.w	r8, #1
   e068e:	dc21      	bgt.n	e06d4 <_strtod_l+0x52c>
   e0690:	b10b      	cbz	r3, e0696 <_strtod_l+0x4ee>
   e0692:	4682      	mov	sl, r0
   e0694:	468b      	mov	fp, r1
   e0696:	4b2e      	ldr	r3, [pc, #184]	; (e0750 <_strtod_l+0x5a8>)
   e0698:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e069c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   e06a0:	4652      	mov	r2, sl
   e06a2:	465b      	mov	r3, fp
   e06a4:	e9d9 0100 	ldrd	r0, r1, [r9]
   e06a8:	f7ff f92e 	bl	df908 <__aeabi_dmul>
   e06ac:	4b29      	ldr	r3, [pc, #164]	; (e0754 <_strtod_l+0x5ac>)
   e06ae:	460a      	mov	r2, r1
   e06b0:	400b      	ands	r3, r1
   e06b2:	4929      	ldr	r1, [pc, #164]	; (e0758 <_strtod_l+0x5b0>)
   e06b4:	428b      	cmp	r3, r1
   e06b6:	4682      	mov	sl, r0
   e06b8:	d8be      	bhi.n	e0638 <_strtod_l+0x490>
   e06ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e06be:	428b      	cmp	r3, r1
   e06c0:	bf86      	itte	hi
   e06c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; e075c <_strtod_l+0x5b4>
   e06c6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   e06ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e06ce:	2300      	movs	r3, #0
   e06d0:	9304      	str	r3, [sp, #16]
   e06d2:	e081      	b.n	e07d8 <_strtod_l+0x630>
   e06d4:	f018 0f01 	tst.w	r8, #1
   e06d8:	d007      	beq.n	e06ea <_strtod_l+0x542>
   e06da:	4b1d      	ldr	r3, [pc, #116]	; (e0750 <_strtod_l+0x5a8>)
   e06dc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   e06e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e06e4:	f7ff f910 	bl	df908 <__aeabi_dmul>
   e06e8:	2301      	movs	r3, #1
   e06ea:	f109 0901 	add.w	r9, r9, #1
   e06ee:	ea4f 0868 	mov.w	r8, r8, asr #1
   e06f2:	e7ca      	b.n	e068a <_strtod_l+0x4e2>
   e06f4:	d0eb      	beq.n	e06ce <_strtod_l+0x526>
   e06f6:	f1c8 0800 	rsb	r8, r8, #0
   e06fa:	f018 020f 	ands.w	r2, r8, #15
   e06fe:	d00a      	beq.n	e0716 <_strtod_l+0x56e>
   e0700:	4b12      	ldr	r3, [pc, #72]	; (e074c <_strtod_l+0x5a4>)
   e0702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e0706:	4650      	mov	r0, sl
   e0708:	4659      	mov	r1, fp
   e070a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e070e:	f7ff fa25 	bl	dfb5c <__aeabi_ddiv>
   e0712:	4682      	mov	sl, r0
   e0714:	468b      	mov	fp, r1
   e0716:	ea5f 1828 	movs.w	r8, r8, asr #4
   e071a:	d0d8      	beq.n	e06ce <_strtod_l+0x526>
   e071c:	f1b8 0f1f 	cmp.w	r8, #31
   e0720:	dd1e      	ble.n	e0760 <_strtod_l+0x5b8>
   e0722:	2500      	movs	r5, #0
   e0724:	462e      	mov	r6, r5
   e0726:	9509      	str	r5, [sp, #36]	; 0x24
   e0728:	9507      	str	r5, [sp, #28]
   e072a:	2322      	movs	r3, #34	; 0x22
   e072c:	f04f 0a00 	mov.w	sl, #0
   e0730:	f04f 0b00 	mov.w	fp, #0
   e0734:	6023      	str	r3, [r4, #0]
   e0736:	e789      	b.n	e064c <_strtod_l+0x4a4>
   e0738:	000e2f83 	.word	0x000e2f83
   e073c:	000e2f9c 	.word	0x000e2f9c
   e0740:	000e2f7a 	.word	0x000e2f7a
   e0744:	000e2f7d 	.word	0x000e2f7d
   e0748:	000e296f 	.word	0x000e296f
   e074c:	000e3118 	.word	0x000e3118
   e0750:	000e30f0 	.word	0x000e30f0
   e0754:	7ff00000 	.word	0x7ff00000
   e0758:	7ca00000 	.word	0x7ca00000
   e075c:	7fefffff 	.word	0x7fefffff
   e0760:	f018 0310 	ands.w	r3, r8, #16
   e0764:	bf18      	it	ne
   e0766:	236a      	movne	r3, #106	; 0x6a
   e0768:	f8df 93b4 	ldr.w	r9, [pc, #948]	; e0b20 <_strtod_l+0x978>
   e076c:	9304      	str	r3, [sp, #16]
   e076e:	4650      	mov	r0, sl
   e0770:	4659      	mov	r1, fp
   e0772:	2300      	movs	r3, #0
   e0774:	f018 0f01 	tst.w	r8, #1
   e0778:	d004      	beq.n	e0784 <_strtod_l+0x5dc>
   e077a:	e9d9 2300 	ldrd	r2, r3, [r9]
   e077e:	f7ff f8c3 	bl	df908 <__aeabi_dmul>
   e0782:	2301      	movs	r3, #1
   e0784:	ea5f 0868 	movs.w	r8, r8, asr #1
   e0788:	f109 0908 	add.w	r9, r9, #8
   e078c:	d1f2      	bne.n	e0774 <_strtod_l+0x5cc>
   e078e:	b10b      	cbz	r3, e0794 <_strtod_l+0x5ec>
   e0790:	4682      	mov	sl, r0
   e0792:	468b      	mov	fp, r1
   e0794:	9b04      	ldr	r3, [sp, #16]
   e0796:	b1bb      	cbz	r3, e07c8 <_strtod_l+0x620>
   e0798:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e079c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e07a0:	2b00      	cmp	r3, #0
   e07a2:	4659      	mov	r1, fp
   e07a4:	dd10      	ble.n	e07c8 <_strtod_l+0x620>
   e07a6:	2b1f      	cmp	r3, #31
   e07a8:	f340 8128 	ble.w	e09fc <_strtod_l+0x854>
   e07ac:	2b34      	cmp	r3, #52	; 0x34
   e07ae:	bfde      	ittt	le
   e07b0:	3b20      	suble	r3, #32
   e07b2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   e07b6:	fa02 f303 	lslle.w	r3, r2, r3
   e07ba:	f04f 0a00 	mov.w	sl, #0
   e07be:	bfcc      	ite	gt
   e07c0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e07c4:	ea03 0b01 	andle.w	fp, r3, r1
   e07c8:	2200      	movs	r2, #0
   e07ca:	2300      	movs	r3, #0
   e07cc:	4650      	mov	r0, sl
   e07ce:	4659      	mov	r1, fp
   e07d0:	f7ff fb02 	bl	dfdd8 <__aeabi_dcmpeq>
   e07d4:	2800      	cmp	r0, #0
   e07d6:	d1a4      	bne.n	e0722 <_strtod_l+0x57a>
   e07d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e07da:	9300      	str	r3, [sp, #0]
   e07dc:	990a      	ldr	r1, [sp, #40]	; 0x28
   e07de:	462b      	mov	r3, r5
   e07e0:	463a      	mov	r2, r7
   e07e2:	4620      	mov	r0, r4
   e07e4:	f001 f8b7 	bl	e1956 <__s2b>
   e07e8:	9009      	str	r0, [sp, #36]	; 0x24
   e07ea:	2800      	cmp	r0, #0
   e07ec:	f43f af24 	beq.w	e0638 <_strtod_l+0x490>
   e07f0:	9b07      	ldr	r3, [sp, #28]
   e07f2:	1b9e      	subs	r6, r3, r6
   e07f4:	9b08      	ldr	r3, [sp, #32]
   e07f6:	2b00      	cmp	r3, #0
   e07f8:	bfb4      	ite	lt
   e07fa:	4633      	movlt	r3, r6
   e07fc:	2300      	movge	r3, #0
   e07fe:	9310      	str	r3, [sp, #64]	; 0x40
   e0800:	9b08      	ldr	r3, [sp, #32]
   e0802:	2500      	movs	r5, #0
   e0804:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   e0808:	9318      	str	r3, [sp, #96]	; 0x60
   e080a:	462e      	mov	r6, r5
   e080c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e080e:	4620      	mov	r0, r4
   e0810:	6859      	ldr	r1, [r3, #4]
   e0812:	f001 f817 	bl	e1844 <_Balloc>
   e0816:	9007      	str	r0, [sp, #28]
   e0818:	2800      	cmp	r0, #0
   e081a:	f43f af11 	beq.w	e0640 <_strtod_l+0x498>
   e081e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e0820:	691a      	ldr	r2, [r3, #16]
   e0822:	3202      	adds	r2, #2
   e0824:	f103 010c 	add.w	r1, r3, #12
   e0828:	0092      	lsls	r2, r2, #2
   e082a:	300c      	adds	r0, #12
   e082c:	f7ff fbaa 	bl	dff84 <memcpy>
   e0830:	ec4b ab10 	vmov	d0, sl, fp
   e0834:	aa20      	add	r2, sp, #128	; 0x80
   e0836:	a91f      	add	r1, sp, #124	; 0x7c
   e0838:	4620      	mov	r0, r4
   e083a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   e083e:	f001 fb79 	bl	e1f34 <__d2b>
   e0842:	901e      	str	r0, [sp, #120]	; 0x78
   e0844:	2800      	cmp	r0, #0
   e0846:	f43f aefb 	beq.w	e0640 <_strtod_l+0x498>
   e084a:	2101      	movs	r1, #1
   e084c:	4620      	mov	r0, r4
   e084e:	f001 f910 	bl	e1a72 <__i2b>
   e0852:	4606      	mov	r6, r0
   e0854:	2800      	cmp	r0, #0
   e0856:	f43f aef3 	beq.w	e0640 <_strtod_l+0x498>
   e085a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   e085c:	9904      	ldr	r1, [sp, #16]
   e085e:	2b00      	cmp	r3, #0
   e0860:	bfab      	itete	ge
   e0862:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   e0864:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   e0866:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   e0868:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   e086c:	bfac      	ite	ge
   e086e:	eb03 0902 	addge.w	r9, r3, r2
   e0872:	1ad7      	sublt	r7, r2, r3
   e0874:	9a20      	ldr	r2, [sp, #128]	; 0x80
   e0876:	eba3 0801 	sub.w	r8, r3, r1
   e087a:	4490      	add	r8, r2
   e087c:	4ba3      	ldr	r3, [pc, #652]	; (e0b0c <_strtod_l+0x964>)
   e087e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   e0882:	4598      	cmp	r8, r3
   e0884:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   e0888:	f280 80cc 	bge.w	e0a24 <_strtod_l+0x87c>
   e088c:	eba3 0308 	sub.w	r3, r3, r8
   e0890:	2b1f      	cmp	r3, #31
   e0892:	eba2 0203 	sub.w	r2, r2, r3
   e0896:	f04f 0101 	mov.w	r1, #1
   e089a:	f300 80b6 	bgt.w	e0a0a <_strtod_l+0x862>
   e089e:	fa01 f303 	lsl.w	r3, r1, r3
   e08a2:	9311      	str	r3, [sp, #68]	; 0x44
   e08a4:	2300      	movs	r3, #0
   e08a6:	930c      	str	r3, [sp, #48]	; 0x30
   e08a8:	eb09 0802 	add.w	r8, r9, r2
   e08ac:	9b04      	ldr	r3, [sp, #16]
   e08ae:	45c1      	cmp	r9, r8
   e08b0:	4417      	add	r7, r2
   e08b2:	441f      	add	r7, r3
   e08b4:	464b      	mov	r3, r9
   e08b6:	bfa8      	it	ge
   e08b8:	4643      	movge	r3, r8
   e08ba:	42bb      	cmp	r3, r7
   e08bc:	bfa8      	it	ge
   e08be:	463b      	movge	r3, r7
   e08c0:	2b00      	cmp	r3, #0
   e08c2:	bfc2      	ittt	gt
   e08c4:	eba8 0803 	subgt.w	r8, r8, r3
   e08c8:	1aff      	subgt	r7, r7, r3
   e08ca:	eba9 0903 	subgt.w	r9, r9, r3
   e08ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e08d0:	2b00      	cmp	r3, #0
   e08d2:	dd17      	ble.n	e0904 <_strtod_l+0x75c>
   e08d4:	4631      	mov	r1, r6
   e08d6:	461a      	mov	r2, r3
   e08d8:	4620      	mov	r0, r4
   e08da:	f001 f96f 	bl	e1bbc <__pow5mult>
   e08de:	4606      	mov	r6, r0
   e08e0:	2800      	cmp	r0, #0
   e08e2:	f43f aead 	beq.w	e0640 <_strtod_l+0x498>
   e08e6:	4601      	mov	r1, r0
   e08e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   e08ea:	4620      	mov	r0, r4
   e08ec:	f001 f8ca 	bl	e1a84 <__multiply>
   e08f0:	900f      	str	r0, [sp, #60]	; 0x3c
   e08f2:	2800      	cmp	r0, #0
   e08f4:	f43f aea4 	beq.w	e0640 <_strtod_l+0x498>
   e08f8:	991e      	ldr	r1, [sp, #120]	; 0x78
   e08fa:	4620      	mov	r0, r4
   e08fc:	f000 ffd6 	bl	e18ac <_Bfree>
   e0900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e0902:	931e      	str	r3, [sp, #120]	; 0x78
   e0904:	f1b8 0f00 	cmp.w	r8, #0
   e0908:	f300 8091 	bgt.w	e0a2e <_strtod_l+0x886>
   e090c:	9b08      	ldr	r3, [sp, #32]
   e090e:	2b00      	cmp	r3, #0
   e0910:	dd08      	ble.n	e0924 <_strtod_l+0x77c>
   e0912:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e0914:	9907      	ldr	r1, [sp, #28]
   e0916:	4620      	mov	r0, r4
   e0918:	f001 f950 	bl	e1bbc <__pow5mult>
   e091c:	9007      	str	r0, [sp, #28]
   e091e:	2800      	cmp	r0, #0
   e0920:	f43f ae8e 	beq.w	e0640 <_strtod_l+0x498>
   e0924:	2f00      	cmp	r7, #0
   e0926:	dd08      	ble.n	e093a <_strtod_l+0x792>
   e0928:	9907      	ldr	r1, [sp, #28]
   e092a:	463a      	mov	r2, r7
   e092c:	4620      	mov	r0, r4
   e092e:	f001 f993 	bl	e1c58 <__lshift>
   e0932:	9007      	str	r0, [sp, #28]
   e0934:	2800      	cmp	r0, #0
   e0936:	f43f ae83 	beq.w	e0640 <_strtod_l+0x498>
   e093a:	f1b9 0f00 	cmp.w	r9, #0
   e093e:	dd08      	ble.n	e0952 <_strtod_l+0x7aa>
   e0940:	4631      	mov	r1, r6
   e0942:	464a      	mov	r2, r9
   e0944:	4620      	mov	r0, r4
   e0946:	f001 f987 	bl	e1c58 <__lshift>
   e094a:	4606      	mov	r6, r0
   e094c:	2800      	cmp	r0, #0
   e094e:	f43f ae77 	beq.w	e0640 <_strtod_l+0x498>
   e0952:	9a07      	ldr	r2, [sp, #28]
   e0954:	991e      	ldr	r1, [sp, #120]	; 0x78
   e0956:	4620      	mov	r0, r4
   e0958:	f001 f9f9 	bl	e1d4e <__mdiff>
   e095c:	4605      	mov	r5, r0
   e095e:	2800      	cmp	r0, #0
   e0960:	f43f ae6e 	beq.w	e0640 <_strtod_l+0x498>
   e0964:	68c3      	ldr	r3, [r0, #12]
   e0966:	930f      	str	r3, [sp, #60]	; 0x3c
   e0968:	2300      	movs	r3, #0
   e096a:	60c3      	str	r3, [r0, #12]
   e096c:	4631      	mov	r1, r6
   e096e:	f001 f9d2 	bl	e1d16 <__mcmp>
   e0972:	2800      	cmp	r0, #0
   e0974:	da65      	bge.n	e0a42 <_strtod_l+0x89a>
   e0976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e0978:	ea53 030a 	orrs.w	r3, r3, sl
   e097c:	f040 8087 	bne.w	e0a8e <_strtod_l+0x8e6>
   e0980:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e0984:	2b00      	cmp	r3, #0
   e0986:	f040 8082 	bne.w	e0a8e <_strtod_l+0x8e6>
   e098a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e098e:	0d1b      	lsrs	r3, r3, #20
   e0990:	051b      	lsls	r3, r3, #20
   e0992:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e0996:	d97a      	bls.n	e0a8e <_strtod_l+0x8e6>
   e0998:	696b      	ldr	r3, [r5, #20]
   e099a:	b913      	cbnz	r3, e09a2 <_strtod_l+0x7fa>
   e099c:	692b      	ldr	r3, [r5, #16]
   e099e:	2b01      	cmp	r3, #1
   e09a0:	dd75      	ble.n	e0a8e <_strtod_l+0x8e6>
   e09a2:	4629      	mov	r1, r5
   e09a4:	2201      	movs	r2, #1
   e09a6:	4620      	mov	r0, r4
   e09a8:	f001 f956 	bl	e1c58 <__lshift>
   e09ac:	4631      	mov	r1, r6
   e09ae:	4605      	mov	r5, r0
   e09b0:	f001 f9b1 	bl	e1d16 <__mcmp>
   e09b4:	2800      	cmp	r0, #0
   e09b6:	dd6a      	ble.n	e0a8e <_strtod_l+0x8e6>
   e09b8:	9904      	ldr	r1, [sp, #16]
   e09ba:	4a55      	ldr	r2, [pc, #340]	; (e0b10 <_strtod_l+0x968>)
   e09bc:	465b      	mov	r3, fp
   e09be:	2900      	cmp	r1, #0
   e09c0:	f000 8085 	beq.w	e0ace <_strtod_l+0x926>
   e09c4:	ea02 010b 	and.w	r1, r2, fp
   e09c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   e09cc:	dc7f      	bgt.n	e0ace <_strtod_l+0x926>
   e09ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   e09d2:	f77f aeaa 	ble.w	e072a <_strtod_l+0x582>
   e09d6:	4a4f      	ldr	r2, [pc, #316]	; (e0b14 <_strtod_l+0x96c>)
   e09d8:	2300      	movs	r3, #0
   e09da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   e09de:	4650      	mov	r0, sl
   e09e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   e09e4:	4659      	mov	r1, fp
   e09e6:	f7fe ff8f 	bl	df908 <__aeabi_dmul>
   e09ea:	460b      	mov	r3, r1
   e09ec:	4303      	orrs	r3, r0
   e09ee:	bf08      	it	eq
   e09f0:	2322      	moveq	r3, #34	; 0x22
   e09f2:	4682      	mov	sl, r0
   e09f4:	468b      	mov	fp, r1
   e09f6:	bf08      	it	eq
   e09f8:	6023      	streq	r3, [r4, #0]
   e09fa:	e62b      	b.n	e0654 <_strtod_l+0x4ac>
   e09fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e0a00:	fa02 f303 	lsl.w	r3, r2, r3
   e0a04:	ea03 0a0a 	and.w	sl, r3, sl
   e0a08:	e6de      	b.n	e07c8 <_strtod_l+0x620>
   e0a0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   e0a0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   e0a12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   e0a16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   e0a1a:	fa01 f308 	lsl.w	r3, r1, r8
   e0a1e:	930c      	str	r3, [sp, #48]	; 0x30
   e0a20:	9111      	str	r1, [sp, #68]	; 0x44
   e0a22:	e741      	b.n	e08a8 <_strtod_l+0x700>
   e0a24:	2300      	movs	r3, #0
   e0a26:	930c      	str	r3, [sp, #48]	; 0x30
   e0a28:	2301      	movs	r3, #1
   e0a2a:	9311      	str	r3, [sp, #68]	; 0x44
   e0a2c:	e73c      	b.n	e08a8 <_strtod_l+0x700>
   e0a2e:	991e      	ldr	r1, [sp, #120]	; 0x78
   e0a30:	4642      	mov	r2, r8
   e0a32:	4620      	mov	r0, r4
   e0a34:	f001 f910 	bl	e1c58 <__lshift>
   e0a38:	901e      	str	r0, [sp, #120]	; 0x78
   e0a3a:	2800      	cmp	r0, #0
   e0a3c:	f47f af66 	bne.w	e090c <_strtod_l+0x764>
   e0a40:	e5fe      	b.n	e0640 <_strtod_l+0x498>
   e0a42:	465f      	mov	r7, fp
   e0a44:	d16e      	bne.n	e0b24 <_strtod_l+0x97c>
   e0a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e0a48:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e0a4c:	b342      	cbz	r2, e0aa0 <_strtod_l+0x8f8>
   e0a4e:	4a32      	ldr	r2, [pc, #200]	; (e0b18 <_strtod_l+0x970>)
   e0a50:	4293      	cmp	r3, r2
   e0a52:	d128      	bne.n	e0aa6 <_strtod_l+0x8fe>
   e0a54:	9b04      	ldr	r3, [sp, #16]
   e0a56:	4650      	mov	r0, sl
   e0a58:	b1eb      	cbz	r3, e0a96 <_strtod_l+0x8ee>
   e0a5a:	4a2d      	ldr	r2, [pc, #180]	; (e0b10 <_strtod_l+0x968>)
   e0a5c:	403a      	ands	r2, r7
   e0a5e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   e0a62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   e0a66:	d819      	bhi.n	e0a9c <_strtod_l+0x8f4>
   e0a68:	0d12      	lsrs	r2, r2, #20
   e0a6a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   e0a6e:	fa01 f303 	lsl.w	r3, r1, r3
   e0a72:	4298      	cmp	r0, r3
   e0a74:	d117      	bne.n	e0aa6 <_strtod_l+0x8fe>
   e0a76:	4b29      	ldr	r3, [pc, #164]	; (e0b1c <_strtod_l+0x974>)
   e0a78:	429f      	cmp	r7, r3
   e0a7a:	d102      	bne.n	e0a82 <_strtod_l+0x8da>
   e0a7c:	3001      	adds	r0, #1
   e0a7e:	f43f addf 	beq.w	e0640 <_strtod_l+0x498>
   e0a82:	4b23      	ldr	r3, [pc, #140]	; (e0b10 <_strtod_l+0x968>)
   e0a84:	403b      	ands	r3, r7
   e0a86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e0a8a:	f04f 0a00 	mov.w	sl, #0
   e0a8e:	9b04      	ldr	r3, [sp, #16]
   e0a90:	2b00      	cmp	r3, #0
   e0a92:	d1a0      	bne.n	e09d6 <_strtod_l+0x82e>
   e0a94:	e5de      	b.n	e0654 <_strtod_l+0x4ac>
   e0a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   e0a9a:	e7ea      	b.n	e0a72 <_strtod_l+0x8ca>
   e0a9c:	460b      	mov	r3, r1
   e0a9e:	e7e8      	b.n	e0a72 <_strtod_l+0x8ca>
   e0aa0:	ea53 030a 	orrs.w	r3, r3, sl
   e0aa4:	d088      	beq.n	e09b8 <_strtod_l+0x810>
   e0aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e0aa8:	b1db      	cbz	r3, e0ae2 <_strtod_l+0x93a>
   e0aaa:	423b      	tst	r3, r7
   e0aac:	d0ef      	beq.n	e0a8e <_strtod_l+0x8e6>
   e0aae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e0ab0:	9a04      	ldr	r2, [sp, #16]
   e0ab2:	4650      	mov	r0, sl
   e0ab4:	4659      	mov	r1, fp
   e0ab6:	b1c3      	cbz	r3, e0aea <_strtod_l+0x942>
   e0ab8:	f7ff fb58 	bl	e016c <sulp>
   e0abc:	4602      	mov	r2, r0
   e0abe:	460b      	mov	r3, r1
   e0ac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e0ac4:	f7fe fd6a 	bl	df59c <__adddf3>
   e0ac8:	4682      	mov	sl, r0
   e0aca:	468b      	mov	fp, r1
   e0acc:	e7df      	b.n	e0a8e <_strtod_l+0x8e6>
   e0ace:	4013      	ands	r3, r2
   e0ad0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e0ad4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e0ad8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e0adc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   e0ae0:	e7d5      	b.n	e0a8e <_strtod_l+0x8e6>
   e0ae2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e0ae4:	ea13 0f0a 	tst.w	r3, sl
   e0ae8:	e7e0      	b.n	e0aac <_strtod_l+0x904>
   e0aea:	f7ff fb3f 	bl	e016c <sulp>
   e0aee:	4602      	mov	r2, r0
   e0af0:	460b      	mov	r3, r1
   e0af2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e0af6:	f7fe fd4f 	bl	df598 <__aeabi_dsub>
   e0afa:	2200      	movs	r2, #0
   e0afc:	2300      	movs	r3, #0
   e0afe:	4682      	mov	sl, r0
   e0b00:	468b      	mov	fp, r1
   e0b02:	f7ff f969 	bl	dfdd8 <__aeabi_dcmpeq>
   e0b06:	2800      	cmp	r0, #0
   e0b08:	d0c1      	beq.n	e0a8e <_strtod_l+0x8e6>
   e0b0a:	e60e      	b.n	e072a <_strtod_l+0x582>
   e0b0c:	fffffc02 	.word	0xfffffc02
   e0b10:	7ff00000 	.word	0x7ff00000
   e0b14:	39500000 	.word	0x39500000
   e0b18:	000fffff 	.word	0x000fffff
   e0b1c:	7fefffff 	.word	0x7fefffff
   e0b20:	000e2fb0 	.word	0x000e2fb0
   e0b24:	4631      	mov	r1, r6
   e0b26:	4628      	mov	r0, r5
   e0b28:	f001 fa54 	bl	e1fd4 <__ratio>
   e0b2c:	ec59 8b10 	vmov	r8, r9, d0
   e0b30:	ee10 0a10 	vmov	r0, s0
   e0b34:	2200      	movs	r2, #0
   e0b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e0b3a:	4649      	mov	r1, r9
   e0b3c:	f7ff f960 	bl	dfe00 <__aeabi_dcmple>
   e0b40:	2800      	cmp	r0, #0
   e0b42:	d07c      	beq.n	e0c3e <_strtod_l+0xa96>
   e0b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e0b46:	2b00      	cmp	r3, #0
   e0b48:	d04c      	beq.n	e0be4 <_strtod_l+0xa3c>
   e0b4a:	4b95      	ldr	r3, [pc, #596]	; (e0da0 <_strtod_l+0xbf8>)
   e0b4c:	2200      	movs	r2, #0
   e0b4e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e0b52:	f8df 924c 	ldr.w	r9, [pc, #588]	; e0da0 <_strtod_l+0xbf8>
   e0b56:	f04f 0800 	mov.w	r8, #0
   e0b5a:	4b92      	ldr	r3, [pc, #584]	; (e0da4 <_strtod_l+0xbfc>)
   e0b5c:	403b      	ands	r3, r7
   e0b5e:	9311      	str	r3, [sp, #68]	; 0x44
   e0b60:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e0b62:	4b91      	ldr	r3, [pc, #580]	; (e0da8 <_strtod_l+0xc00>)
   e0b64:	429a      	cmp	r2, r3
   e0b66:	f040 80b2 	bne.w	e0cce <_strtod_l+0xb26>
   e0b6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e0b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e0b72:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   e0b76:	ec4b ab10 	vmov	d0, sl, fp
   e0b7a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   e0b7e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e0b82:	f001 f95b 	bl	e1e3c <__ulp>
   e0b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e0b8a:	ec53 2b10 	vmov	r2, r3, d0
   e0b8e:	f7fe febb 	bl	df908 <__aeabi_dmul>
   e0b92:	4652      	mov	r2, sl
   e0b94:	465b      	mov	r3, fp
   e0b96:	f7fe fd01 	bl	df59c <__adddf3>
   e0b9a:	460b      	mov	r3, r1
   e0b9c:	4981      	ldr	r1, [pc, #516]	; (e0da4 <_strtod_l+0xbfc>)
   e0b9e:	4a83      	ldr	r2, [pc, #524]	; (e0dac <_strtod_l+0xc04>)
   e0ba0:	4019      	ands	r1, r3
   e0ba2:	4291      	cmp	r1, r2
   e0ba4:	4682      	mov	sl, r0
   e0ba6:	d95e      	bls.n	e0c66 <_strtod_l+0xabe>
   e0ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e0baa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   e0bae:	4293      	cmp	r3, r2
   e0bb0:	d103      	bne.n	e0bba <_strtod_l+0xa12>
   e0bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e0bb4:	3301      	adds	r3, #1
   e0bb6:	f43f ad43 	beq.w	e0640 <_strtod_l+0x498>
   e0bba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; e0db8 <_strtod_l+0xc10>
   e0bbe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   e0bc2:	991e      	ldr	r1, [sp, #120]	; 0x78
   e0bc4:	4620      	mov	r0, r4
   e0bc6:	f000 fe71 	bl	e18ac <_Bfree>
   e0bca:	9907      	ldr	r1, [sp, #28]
   e0bcc:	4620      	mov	r0, r4
   e0bce:	f000 fe6d 	bl	e18ac <_Bfree>
   e0bd2:	4631      	mov	r1, r6
   e0bd4:	4620      	mov	r0, r4
   e0bd6:	f000 fe69 	bl	e18ac <_Bfree>
   e0bda:	4629      	mov	r1, r5
   e0bdc:	4620      	mov	r0, r4
   e0bde:	f000 fe65 	bl	e18ac <_Bfree>
   e0be2:	e613      	b.n	e080c <_strtod_l+0x664>
   e0be4:	f1ba 0f00 	cmp.w	sl, #0
   e0be8:	d11b      	bne.n	e0c22 <_strtod_l+0xa7a>
   e0bea:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e0bee:	b9f3      	cbnz	r3, e0c2e <_strtod_l+0xa86>
   e0bf0:	4b6b      	ldr	r3, [pc, #428]	; (e0da0 <_strtod_l+0xbf8>)
   e0bf2:	2200      	movs	r2, #0
   e0bf4:	4640      	mov	r0, r8
   e0bf6:	4649      	mov	r1, r9
   e0bf8:	f7ff f8f8 	bl	dfdec <__aeabi_dcmplt>
   e0bfc:	b9d0      	cbnz	r0, e0c34 <_strtod_l+0xa8c>
   e0bfe:	4640      	mov	r0, r8
   e0c00:	4649      	mov	r1, r9
   e0c02:	4b6b      	ldr	r3, [pc, #428]	; (e0db0 <_strtod_l+0xc08>)
   e0c04:	2200      	movs	r2, #0
   e0c06:	f7fe fe7f 	bl	df908 <__aeabi_dmul>
   e0c0a:	4680      	mov	r8, r0
   e0c0c:	4689      	mov	r9, r1
   e0c0e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   e0c12:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   e0c16:	931b      	str	r3, [sp, #108]	; 0x6c
   e0c18:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   e0c1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e0c20:	e79b      	b.n	e0b5a <_strtod_l+0x9b2>
   e0c22:	f1ba 0f01 	cmp.w	sl, #1
   e0c26:	d102      	bne.n	e0c2e <_strtod_l+0xa86>
   e0c28:	2f00      	cmp	r7, #0
   e0c2a:	f43f ad7e 	beq.w	e072a <_strtod_l+0x582>
   e0c2e:	4b61      	ldr	r3, [pc, #388]	; (e0db4 <_strtod_l+0xc0c>)
   e0c30:	2200      	movs	r2, #0
   e0c32:	e78c      	b.n	e0b4e <_strtod_l+0x9a6>
   e0c34:	f8df 9178 	ldr.w	r9, [pc, #376]	; e0db0 <_strtod_l+0xc08>
   e0c38:	f04f 0800 	mov.w	r8, #0
   e0c3c:	e7e7      	b.n	e0c0e <_strtod_l+0xa66>
   e0c3e:	4b5c      	ldr	r3, [pc, #368]	; (e0db0 <_strtod_l+0xc08>)
   e0c40:	4640      	mov	r0, r8
   e0c42:	4649      	mov	r1, r9
   e0c44:	2200      	movs	r2, #0
   e0c46:	f7fe fe5f 	bl	df908 <__aeabi_dmul>
   e0c4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e0c4c:	4680      	mov	r8, r0
   e0c4e:	4689      	mov	r9, r1
   e0c50:	b933      	cbnz	r3, e0c60 <_strtod_l+0xab8>
   e0c52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0c56:	9012      	str	r0, [sp, #72]	; 0x48
   e0c58:	9313      	str	r3, [sp, #76]	; 0x4c
   e0c5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   e0c5e:	e7dd      	b.n	e0c1c <_strtod_l+0xa74>
   e0c60:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   e0c64:	e7f9      	b.n	e0c5a <_strtod_l+0xab2>
   e0c66:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   e0c6a:	9b04      	ldr	r3, [sp, #16]
   e0c6c:	2b00      	cmp	r3, #0
   e0c6e:	d1a8      	bne.n	e0bc2 <_strtod_l+0xa1a>
   e0c70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e0c74:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e0c76:	0d1b      	lsrs	r3, r3, #20
   e0c78:	051b      	lsls	r3, r3, #20
   e0c7a:	429a      	cmp	r2, r3
   e0c7c:	d1a1      	bne.n	e0bc2 <_strtod_l+0xa1a>
   e0c7e:	4640      	mov	r0, r8
   e0c80:	4649      	mov	r1, r9
   e0c82:	f001 fa67 	bl	e2154 <__aeabi_d2lz>
   e0c86:	f7fe fe11 	bl	df8ac <__aeabi_l2d>
   e0c8a:	4602      	mov	r2, r0
   e0c8c:	460b      	mov	r3, r1
   e0c8e:	4640      	mov	r0, r8
   e0c90:	4649      	mov	r1, r9
   e0c92:	f7fe fc81 	bl	df598 <__aeabi_dsub>
   e0c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e0c98:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e0c9c:	ea43 030a 	orr.w	r3, r3, sl
   e0ca0:	4313      	orrs	r3, r2
   e0ca2:	4680      	mov	r8, r0
   e0ca4:	4689      	mov	r9, r1
   e0ca6:	d053      	beq.n	e0d50 <_strtod_l+0xba8>
   e0ca8:	a335      	add	r3, pc, #212	; (adr r3, e0d80 <_strtod_l+0xbd8>)
   e0caa:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0cae:	f7ff f89d 	bl	dfdec <__aeabi_dcmplt>
   e0cb2:	2800      	cmp	r0, #0
   e0cb4:	f47f acce 	bne.w	e0654 <_strtod_l+0x4ac>
   e0cb8:	a333      	add	r3, pc, #204	; (adr r3, e0d88 <_strtod_l+0xbe0>)
   e0cba:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0cbe:	4640      	mov	r0, r8
   e0cc0:	4649      	mov	r1, r9
   e0cc2:	f7ff f8b1 	bl	dfe28 <__aeabi_dcmpgt>
   e0cc6:	2800      	cmp	r0, #0
   e0cc8:	f43f af7b 	beq.w	e0bc2 <_strtod_l+0xa1a>
   e0ccc:	e4c2      	b.n	e0654 <_strtod_l+0x4ac>
   e0cce:	9b04      	ldr	r3, [sp, #16]
   e0cd0:	b333      	cbz	r3, e0d20 <_strtod_l+0xb78>
   e0cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e0cd4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e0cd8:	d822      	bhi.n	e0d20 <_strtod_l+0xb78>
   e0cda:	a32d      	add	r3, pc, #180	; (adr r3, e0d90 <_strtod_l+0xbe8>)
   e0cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0ce0:	4640      	mov	r0, r8
   e0ce2:	4649      	mov	r1, r9
   e0ce4:	f7ff f88c 	bl	dfe00 <__aeabi_dcmple>
   e0ce8:	b1a0      	cbz	r0, e0d14 <_strtod_l+0xb6c>
   e0cea:	4649      	mov	r1, r9
   e0cec:	4640      	mov	r0, r8
   e0cee:	f7ff f8cd 	bl	dfe8c <__aeabi_d2uiz>
   e0cf2:	2801      	cmp	r0, #1
   e0cf4:	bf38      	it	cc
   e0cf6:	2001      	movcc	r0, #1
   e0cf8:	f7fe fd8c 	bl	df814 <__aeabi_ui2d>
   e0cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e0cfe:	4680      	mov	r8, r0
   e0d00:	4689      	mov	r9, r1
   e0d02:	bb13      	cbnz	r3, e0d4a <_strtod_l+0xba2>
   e0d04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0d08:	9014      	str	r0, [sp, #80]	; 0x50
   e0d0a:	9315      	str	r3, [sp, #84]	; 0x54
   e0d0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   e0d10:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e0d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e0d16:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e0d18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   e0d1c:	1a9b      	subs	r3, r3, r2
   e0d1e:	930d      	str	r3, [sp, #52]	; 0x34
   e0d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e0d24:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   e0d28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e0d2c:	f001 f886 	bl	e1e3c <__ulp>
   e0d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e0d34:	ec53 2b10 	vmov	r2, r3, d0
   e0d38:	f7fe fde6 	bl	df908 <__aeabi_dmul>
   e0d3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e0d40:	f7fe fc2c 	bl	df59c <__adddf3>
   e0d44:	4682      	mov	sl, r0
   e0d46:	468b      	mov	fp, r1
   e0d48:	e78f      	b.n	e0c6a <_strtod_l+0xac2>
   e0d4a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   e0d4e:	e7dd      	b.n	e0d0c <_strtod_l+0xb64>
   e0d50:	a311      	add	r3, pc, #68	; (adr r3, e0d98 <_strtod_l+0xbf0>)
   e0d52:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d56:	f7ff f849 	bl	dfdec <__aeabi_dcmplt>
   e0d5a:	e7b4      	b.n	e0cc6 <_strtod_l+0xb1e>
   e0d5c:	2300      	movs	r3, #0
   e0d5e:	930e      	str	r3, [sp, #56]	; 0x38
   e0d60:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e0d62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0d64:	6013      	str	r3, [r2, #0]
   e0d66:	f7ff ba65 	b.w	e0234 <_strtod_l+0x8c>
   e0d6a:	2b65      	cmp	r3, #101	; 0x65
   e0d6c:	f43f ab5d 	beq.w	e042a <_strtod_l+0x282>
   e0d70:	2b45      	cmp	r3, #69	; 0x45
   e0d72:	f43f ab5a 	beq.w	e042a <_strtod_l+0x282>
   e0d76:	2201      	movs	r2, #1
   e0d78:	f7ff bb92 	b.w	e04a0 <_strtod_l+0x2f8>
   e0d7c:	f3af 8000 	nop.w
   e0d80:	94a03595 	.word	0x94a03595
   e0d84:	3fdfffff 	.word	0x3fdfffff
   e0d88:	35afe535 	.word	0x35afe535
   e0d8c:	3fe00000 	.word	0x3fe00000
   e0d90:	ffc00000 	.word	0xffc00000
   e0d94:	41dfffff 	.word	0x41dfffff
   e0d98:	94a03595 	.word	0x94a03595
   e0d9c:	3fcfffff 	.word	0x3fcfffff
   e0da0:	3ff00000 	.word	0x3ff00000
   e0da4:	7ff00000 	.word	0x7ff00000
   e0da8:	7fe00000 	.word	0x7fe00000
   e0dac:	7c9fffff 	.word	0x7c9fffff
   e0db0:	3fe00000 	.word	0x3fe00000
   e0db4:	bff00000 	.word	0xbff00000
   e0db8:	7fefffff 	.word	0x7fefffff

000e0dbc <strtod>:
   e0dbc:	460a      	mov	r2, r1
   e0dbe:	4601      	mov	r1, r0
   e0dc0:	4802      	ldr	r0, [pc, #8]	; (e0dcc <strtod+0x10>)
   e0dc2:	4b03      	ldr	r3, [pc, #12]	; (e0dd0 <strtod+0x14>)
   e0dc4:	6800      	ldr	r0, [r0, #0]
   e0dc6:	f7ff b9ef 	b.w	e01a8 <_strtod_l>
   e0dca:	bf00      	nop
   e0dcc:	2003e218 	.word	0x2003e218
   e0dd0:	2003e284 	.word	0x2003e284

000e0dd4 <__strtok_r>:
   e0dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   e0dd6:	b908      	cbnz	r0, e0ddc <__strtok_r+0x8>
   e0dd8:	6810      	ldr	r0, [r2, #0]
   e0dda:	b188      	cbz	r0, e0e00 <__strtok_r+0x2c>
   e0ddc:	4604      	mov	r4, r0
   e0dde:	4620      	mov	r0, r4
   e0de0:	f814 5b01 	ldrb.w	r5, [r4], #1
   e0de4:	460f      	mov	r7, r1
   e0de6:	f817 6b01 	ldrb.w	r6, [r7], #1
   e0dea:	b91e      	cbnz	r6, e0df4 <__strtok_r+0x20>
   e0dec:	b965      	cbnz	r5, e0e08 <__strtok_r+0x34>
   e0dee:	6015      	str	r5, [r2, #0]
   e0df0:	4628      	mov	r0, r5
   e0df2:	e005      	b.n	e0e00 <__strtok_r+0x2c>
   e0df4:	42b5      	cmp	r5, r6
   e0df6:	d1f6      	bne.n	e0de6 <__strtok_r+0x12>
   e0df8:	2b00      	cmp	r3, #0
   e0dfa:	d1f0      	bne.n	e0dde <__strtok_r+0xa>
   e0dfc:	6014      	str	r4, [r2, #0]
   e0dfe:	7003      	strb	r3, [r0, #0]
   e0e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e0e02:	461c      	mov	r4, r3
   e0e04:	e00c      	b.n	e0e20 <__strtok_r+0x4c>
   e0e06:	b915      	cbnz	r5, e0e0e <__strtok_r+0x3a>
   e0e08:	f814 3b01 	ldrb.w	r3, [r4], #1
   e0e0c:	460e      	mov	r6, r1
   e0e0e:	f816 5b01 	ldrb.w	r5, [r6], #1
   e0e12:	42ab      	cmp	r3, r5
   e0e14:	d1f7      	bne.n	e0e06 <__strtok_r+0x32>
   e0e16:	2b00      	cmp	r3, #0
   e0e18:	d0f3      	beq.n	e0e02 <__strtok_r+0x2e>
   e0e1a:	2300      	movs	r3, #0
   e0e1c:	f804 3c01 	strb.w	r3, [r4, #-1]
   e0e20:	6014      	str	r4, [r2, #0]
   e0e22:	e7ed      	b.n	e0e00 <__strtok_r+0x2c>

000e0e24 <strtok_r>:
   e0e24:	2301      	movs	r3, #1
   e0e26:	f7ff bfd5 	b.w	e0dd4 <__strtok_r>
	...

000e0e2c <_strtol_l.isra.0>:
   e0e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e0e30:	4e3a      	ldr	r6, [pc, #232]	; (e0f1c <_strtol_l.isra.0+0xf0>)
   e0e32:	4686      	mov	lr, r0
   e0e34:	468c      	mov	ip, r1
   e0e36:	4660      	mov	r0, ip
   e0e38:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e0e3c:	5da5      	ldrb	r5, [r4, r6]
   e0e3e:	f015 0508 	ands.w	r5, r5, #8
   e0e42:	d1f8      	bne.n	e0e36 <_strtol_l.isra.0+0xa>
   e0e44:	2c2d      	cmp	r4, #45	; 0x2d
   e0e46:	d133      	bne.n	e0eb0 <_strtol_l.isra.0+0x84>
   e0e48:	f89c 4000 	ldrb.w	r4, [ip]
   e0e4c:	f04f 0801 	mov.w	r8, #1
   e0e50:	f100 0c02 	add.w	ip, r0, #2
   e0e54:	2b00      	cmp	r3, #0
   e0e56:	d05c      	beq.n	e0f12 <_strtol_l.isra.0+0xe6>
   e0e58:	2b10      	cmp	r3, #16
   e0e5a:	d10c      	bne.n	e0e76 <_strtol_l.isra.0+0x4a>
   e0e5c:	2c30      	cmp	r4, #48	; 0x30
   e0e5e:	d10a      	bne.n	e0e76 <_strtol_l.isra.0+0x4a>
   e0e60:	f89c 0000 	ldrb.w	r0, [ip]
   e0e64:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e0e68:	2858      	cmp	r0, #88	; 0x58
   e0e6a:	d14d      	bne.n	e0f08 <_strtol_l.isra.0+0xdc>
   e0e6c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   e0e70:	2310      	movs	r3, #16
   e0e72:	f10c 0c02 	add.w	ip, ip, #2
   e0e76:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   e0e7a:	3f01      	subs	r7, #1
   e0e7c:	2600      	movs	r6, #0
   e0e7e:	fbb7 f9f3 	udiv	r9, r7, r3
   e0e82:	4630      	mov	r0, r6
   e0e84:	fb03 7a19 	mls	sl, r3, r9, r7
   e0e88:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   e0e8c:	2d09      	cmp	r5, #9
   e0e8e:	d818      	bhi.n	e0ec2 <_strtol_l.isra.0+0x96>
   e0e90:	462c      	mov	r4, r5
   e0e92:	42a3      	cmp	r3, r4
   e0e94:	dd24      	ble.n	e0ee0 <_strtol_l.isra.0+0xb4>
   e0e96:	1c75      	adds	r5, r6, #1
   e0e98:	d007      	beq.n	e0eaa <_strtol_l.isra.0+0x7e>
   e0e9a:	4581      	cmp	r9, r0
   e0e9c:	d31d      	bcc.n	e0eda <_strtol_l.isra.0+0xae>
   e0e9e:	d101      	bne.n	e0ea4 <_strtol_l.isra.0+0x78>
   e0ea0:	45a2      	cmp	sl, r4
   e0ea2:	db1a      	blt.n	e0eda <_strtol_l.isra.0+0xae>
   e0ea4:	fb00 4003 	mla	r0, r0, r3, r4
   e0ea8:	2601      	movs	r6, #1
   e0eaa:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e0eae:	e7eb      	b.n	e0e88 <_strtol_l.isra.0+0x5c>
   e0eb0:	2c2b      	cmp	r4, #43	; 0x2b
   e0eb2:	bf08      	it	eq
   e0eb4:	f89c 4000 	ldrbeq.w	r4, [ip]
   e0eb8:	46a8      	mov	r8, r5
   e0eba:	bf08      	it	eq
   e0ebc:	f100 0c02 	addeq.w	ip, r0, #2
   e0ec0:	e7c8      	b.n	e0e54 <_strtol_l.isra.0+0x28>
   e0ec2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   e0ec6:	2d19      	cmp	r5, #25
   e0ec8:	d801      	bhi.n	e0ece <_strtol_l.isra.0+0xa2>
   e0eca:	3c37      	subs	r4, #55	; 0x37
   e0ecc:	e7e1      	b.n	e0e92 <_strtol_l.isra.0+0x66>
   e0ece:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   e0ed2:	2d19      	cmp	r5, #25
   e0ed4:	d804      	bhi.n	e0ee0 <_strtol_l.isra.0+0xb4>
   e0ed6:	3c57      	subs	r4, #87	; 0x57
   e0ed8:	e7db      	b.n	e0e92 <_strtol_l.isra.0+0x66>
   e0eda:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   e0ede:	e7e4      	b.n	e0eaa <_strtol_l.isra.0+0x7e>
   e0ee0:	1c73      	adds	r3, r6, #1
   e0ee2:	d106      	bne.n	e0ef2 <_strtol_l.isra.0+0xc6>
   e0ee4:	2322      	movs	r3, #34	; 0x22
   e0ee6:	f8ce 3000 	str.w	r3, [lr]
   e0eea:	4638      	mov	r0, r7
   e0eec:	b942      	cbnz	r2, e0f00 <_strtol_l.isra.0+0xd4>
   e0eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e0ef2:	f1b8 0f00 	cmp.w	r8, #0
   e0ef6:	d000      	beq.n	e0efa <_strtol_l.isra.0+0xce>
   e0ef8:	4240      	negs	r0, r0
   e0efa:	2a00      	cmp	r2, #0
   e0efc:	d0f7      	beq.n	e0eee <_strtol_l.isra.0+0xc2>
   e0efe:	b10e      	cbz	r6, e0f04 <_strtol_l.isra.0+0xd8>
   e0f00:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   e0f04:	6011      	str	r1, [r2, #0]
   e0f06:	e7f2      	b.n	e0eee <_strtol_l.isra.0+0xc2>
   e0f08:	2430      	movs	r4, #48	; 0x30
   e0f0a:	2b00      	cmp	r3, #0
   e0f0c:	d1b3      	bne.n	e0e76 <_strtol_l.isra.0+0x4a>
   e0f0e:	2308      	movs	r3, #8
   e0f10:	e7b1      	b.n	e0e76 <_strtol_l.isra.0+0x4a>
   e0f12:	2c30      	cmp	r4, #48	; 0x30
   e0f14:	d0a4      	beq.n	e0e60 <_strtol_l.isra.0+0x34>
   e0f16:	230a      	movs	r3, #10
   e0f18:	e7ad      	b.n	e0e76 <_strtol_l.isra.0+0x4a>
   e0f1a:	bf00      	nop
   e0f1c:	000e2fd9 	.word	0x000e2fd9

000e0f20 <strtol>:
   e0f20:	4613      	mov	r3, r2
   e0f22:	460a      	mov	r2, r1
   e0f24:	4601      	mov	r1, r0
   e0f26:	4802      	ldr	r0, [pc, #8]	; (e0f30 <strtol+0x10>)
   e0f28:	6800      	ldr	r0, [r0, #0]
   e0f2a:	f7ff bf7f 	b.w	e0e2c <_strtol_l.isra.0>
   e0f2e:	bf00      	nop
   e0f30:	2003e218 	.word	0x2003e218

000e0f34 <close>:
   e0f34:	4b02      	ldr	r3, [pc, #8]	; (e0f40 <close+0xc>)
   e0f36:	4601      	mov	r1, r0
   e0f38:	6818      	ldr	r0, [r3, #0]
   e0f3a:	f000 b8c9 	b.w	e10d0 <_close_r>
   e0f3e:	bf00      	nop
   e0f40:	2003e218 	.word	0x2003e218

000e0f44 <fstat>:
   e0f44:	4b02      	ldr	r3, [pc, #8]	; (e0f50 <fstat+0xc>)
   e0f46:	460a      	mov	r2, r1
   e0f48:	4601      	mov	r1, r0
   e0f4a:	6818      	ldr	r0, [r3, #0]
   e0f4c:	f000 b8d0 	b.w	e10f0 <_fstat_r>
   e0f50:	2003e218 	.word	0x2003e218

000e0f54 <lseek>:
   e0f54:	4613      	mov	r3, r2
   e0f56:	460a      	mov	r2, r1
   e0f58:	4601      	mov	r1, r0
   e0f5a:	4802      	ldr	r0, [pc, #8]	; (e0f64 <lseek+0x10>)
   e0f5c:	6800      	ldr	r0, [r0, #0]
   e0f5e:	f000 bc4d 	b.w	e17fc <_lseek_r>
   e0f62:	bf00      	nop
   e0f64:	2003e218 	.word	0x2003e218

000e0f68 <open>:
   e0f68:	b40e      	push	{r1, r2, r3}
   e0f6a:	b503      	push	{r0, r1, lr}
   e0f6c:	ab03      	add	r3, sp, #12
   e0f6e:	4601      	mov	r1, r0
   e0f70:	4806      	ldr	r0, [pc, #24]	; (e0f8c <open+0x24>)
   e0f72:	f853 2b04 	ldr.w	r2, [r3], #4
   e0f76:	9301      	str	r3, [sp, #4]
   e0f78:	6800      	ldr	r0, [r0, #0]
   e0f7a:	9b04      	ldr	r3, [sp, #16]
   e0f7c:	f001 f8b0 	bl	e20e0 <_open_r>
   e0f80:	b002      	add	sp, #8
   e0f82:	f85d eb04 	ldr.w	lr, [sp], #4
   e0f86:	b003      	add	sp, #12
   e0f88:	4770      	bx	lr
   e0f8a:	bf00      	nop
   e0f8c:	2003e218 	.word	0x2003e218

000e0f90 <read>:
   e0f90:	4613      	mov	r3, r2
   e0f92:	460a      	mov	r2, r1
   e0f94:	4601      	mov	r1, r0
   e0f96:	4802      	ldr	r0, [pc, #8]	; (e0fa0 <read+0x10>)
   e0f98:	6800      	ldr	r0, [r0, #0]
   e0f9a:	f001 b8b3 	b.w	e2104 <_read_r>
   e0f9e:	bf00      	nop
   e0fa0:	2003e218 	.word	0x2003e218

000e0fa4 <unlink>:
   e0fa4:	4b02      	ldr	r3, [pc, #8]	; (e0fb0 <unlink+0xc>)
   e0fa6:	4601      	mov	r1, r0
   e0fa8:	6818      	ldr	r0, [r3, #0]
   e0faa:	f000 b80d 	b.w	e0fc8 <_unlink_r>
   e0fae:	bf00      	nop
   e0fb0:	2003e218 	.word	0x2003e218

000e0fb4 <write>:
   e0fb4:	4613      	mov	r3, r2
   e0fb6:	460a      	mov	r2, r1
   e0fb8:	4601      	mov	r1, r0
   e0fba:	4802      	ldr	r0, [pc, #8]	; (e0fc4 <write+0x10>)
   e0fbc:	6800      	ldr	r0, [r0, #0]
   e0fbe:	f000 b813 	b.w	e0fe8 <_write_r>
   e0fc2:	bf00      	nop
   e0fc4:	2003e218 	.word	0x2003e218

000e0fc8 <_unlink_r>:
   e0fc8:	b538      	push	{r3, r4, r5, lr}
   e0fca:	4d06      	ldr	r5, [pc, #24]	; (e0fe4 <_unlink_r+0x1c>)
   e0fcc:	2300      	movs	r3, #0
   e0fce:	4604      	mov	r4, r0
   e0fd0:	4608      	mov	r0, r1
   e0fd2:	602b      	str	r3, [r5, #0]
   e0fd4:	f7fa ffde 	bl	dbf94 <_unlink>
   e0fd8:	1c43      	adds	r3, r0, #1
   e0fda:	d102      	bne.n	e0fe2 <_unlink_r+0x1a>
   e0fdc:	682b      	ldr	r3, [r5, #0]
   e0fde:	b103      	cbz	r3, e0fe2 <_unlink_r+0x1a>
   e0fe0:	6023      	str	r3, [r4, #0]
   e0fe2:	bd38      	pop	{r3, r4, r5, pc}
   e0fe4:	2003e7ec 	.word	0x2003e7ec

000e0fe8 <_write_r>:
   e0fe8:	b538      	push	{r3, r4, r5, lr}
   e0fea:	4d07      	ldr	r5, [pc, #28]	; (e1008 <_write_r+0x20>)
   e0fec:	4604      	mov	r4, r0
   e0fee:	4608      	mov	r0, r1
   e0ff0:	4611      	mov	r1, r2
   e0ff2:	2200      	movs	r2, #0
   e0ff4:	602a      	str	r2, [r5, #0]
   e0ff6:	461a      	mov	r2, r3
   e0ff8:	f7fa ff94 	bl	dbf24 <_write>
   e0ffc:	1c43      	adds	r3, r0, #1
   e0ffe:	d102      	bne.n	e1006 <_write_r+0x1e>
   e1000:	682b      	ldr	r3, [r5, #0]
   e1002:	b103      	cbz	r3, e1006 <_write_r+0x1e>
   e1004:	6023      	str	r3, [r4, #0]
   e1006:	bd38      	pop	{r3, r4, r5, pc}
   e1008:	2003e7ec 	.word	0x2003e7ec

000e100c <__register_exitproc>:
   e100c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e1010:	f8df 80b8 	ldr.w	r8, [pc, #184]	; e10cc <__register_exitproc+0xc0>
   e1014:	4606      	mov	r6, r0
   e1016:	f8d8 0000 	ldr.w	r0, [r8]
   e101a:	461f      	mov	r7, r3
   e101c:	460d      	mov	r5, r1
   e101e:	4691      	mov	r9, r2
   e1020:	f000 fbe8 	bl	e17f4 <__retarget_lock_acquire_recursive>
   e1024:	4b25      	ldr	r3, [pc, #148]	; (e10bc <__register_exitproc+0xb0>)
   e1026:	681c      	ldr	r4, [r3, #0]
   e1028:	b934      	cbnz	r4, e1038 <__register_exitproc+0x2c>
   e102a:	4c25      	ldr	r4, [pc, #148]	; (e10c0 <__register_exitproc+0xb4>)
   e102c:	601c      	str	r4, [r3, #0]
   e102e:	4b25      	ldr	r3, [pc, #148]	; (e10c4 <__register_exitproc+0xb8>)
   e1030:	b113      	cbz	r3, e1038 <__register_exitproc+0x2c>
   e1032:	681b      	ldr	r3, [r3, #0]
   e1034:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   e1038:	6863      	ldr	r3, [r4, #4]
   e103a:	2b1f      	cmp	r3, #31
   e103c:	dd07      	ble.n	e104e <__register_exitproc+0x42>
   e103e:	f8d8 0000 	ldr.w	r0, [r8]
   e1042:	f000 fbd9 	bl	e17f8 <__retarget_lock_release_recursive>
   e1046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e104a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e104e:	b34e      	cbz	r6, e10a4 <__register_exitproc+0x98>
   e1050:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   e1054:	b988      	cbnz	r0, e107a <__register_exitproc+0x6e>
   e1056:	4b1c      	ldr	r3, [pc, #112]	; (e10c8 <__register_exitproc+0xbc>)
   e1058:	b923      	cbnz	r3, e1064 <__register_exitproc+0x58>
   e105a:	f8d8 0000 	ldr.w	r0, [r8]
   e105e:	f000 fbca 	bl	e17f6 <__retarget_lock_release>
   e1062:	e7f0      	b.n	e1046 <__register_exitproc+0x3a>
   e1064:	f44f 7084 	mov.w	r0, #264	; 0x108
   e1068:	f7fb f9ac 	bl	dc3c4 <malloc>
   e106c:	2800      	cmp	r0, #0
   e106e:	d0f4      	beq.n	e105a <__register_exitproc+0x4e>
   e1070:	2300      	movs	r3, #0
   e1072:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   e1076:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   e107a:	6863      	ldr	r3, [r4, #4]
   e107c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   e1080:	2201      	movs	r2, #1
   e1082:	409a      	lsls	r2, r3
   e1084:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   e1088:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   e108c:	4313      	orrs	r3, r2
   e108e:	2e02      	cmp	r6, #2
   e1090:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   e1094:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   e1098:	bf02      	ittt	eq
   e109a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   e109e:	431a      	orreq	r2, r3
   e10a0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   e10a4:	6863      	ldr	r3, [r4, #4]
   e10a6:	f8d8 0000 	ldr.w	r0, [r8]
   e10aa:	1c5a      	adds	r2, r3, #1
   e10ac:	3302      	adds	r3, #2
   e10ae:	6062      	str	r2, [r4, #4]
   e10b0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   e10b4:	f000 fba0 	bl	e17f8 <__retarget_lock_release_recursive>
   e10b8:	2000      	movs	r0, #0
   e10ba:	e7c6      	b.n	e104a <__register_exitproc+0x3e>
   e10bc:	2003e7dc 	.word	0x2003e7dc
   e10c0:	2003e750 	.word	0x2003e750
   e10c4:	00000000 	.word	0x00000000
   e10c8:	000dc3c5 	.word	0x000dc3c5
   e10cc:	2003e27c 	.word	0x2003e27c

000e10d0 <_close_r>:
   e10d0:	b538      	push	{r3, r4, r5, lr}
   e10d2:	4d06      	ldr	r5, [pc, #24]	; (e10ec <_close_r+0x1c>)
   e10d4:	2300      	movs	r3, #0
   e10d6:	4604      	mov	r4, r0
   e10d8:	4608      	mov	r0, r1
   e10da:	602b      	str	r3, [r5, #0]
   e10dc:	f7fa ff32 	bl	dbf44 <_close>
   e10e0:	1c43      	adds	r3, r0, #1
   e10e2:	d102      	bne.n	e10ea <_close_r+0x1a>
   e10e4:	682b      	ldr	r3, [r5, #0]
   e10e6:	b103      	cbz	r3, e10ea <_close_r+0x1a>
   e10e8:	6023      	str	r3, [r4, #0]
   e10ea:	bd38      	pop	{r3, r4, r5, pc}
   e10ec:	2003e7ec 	.word	0x2003e7ec

000e10f0 <_fstat_r>:
   e10f0:	b538      	push	{r3, r4, r5, lr}
   e10f2:	4d07      	ldr	r5, [pc, #28]	; (e1110 <_fstat_r+0x20>)
   e10f4:	2300      	movs	r3, #0
   e10f6:	4604      	mov	r4, r0
   e10f8:	4608      	mov	r0, r1
   e10fa:	4611      	mov	r1, r2
   e10fc:	602b      	str	r3, [r5, #0]
   e10fe:	f7fa ff29 	bl	dbf54 <_fstat>
   e1102:	1c43      	adds	r3, r0, #1
   e1104:	d102      	bne.n	e110c <_fstat_r+0x1c>
   e1106:	682b      	ldr	r3, [r5, #0]
   e1108:	b103      	cbz	r3, e110c <_fstat_r+0x1c>
   e110a:	6023      	str	r3, [r4, #0]
   e110c:	bd38      	pop	{r3, r4, r5, pc}
   e110e:	bf00      	nop
   e1110:	2003e7ec 	.word	0x2003e7ec

000e1114 <rshift>:
   e1114:	6903      	ldr	r3, [r0, #16]
   e1116:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   e111a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e111e:	ea4f 1261 	mov.w	r2, r1, asr #5
   e1122:	f100 0414 	add.w	r4, r0, #20
   e1126:	dd45      	ble.n	e11b4 <rshift+0xa0>
   e1128:	f011 011f 	ands.w	r1, r1, #31
   e112c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   e1130:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   e1134:	d10c      	bne.n	e1150 <rshift+0x3c>
   e1136:	f100 0710 	add.w	r7, r0, #16
   e113a:	4629      	mov	r1, r5
   e113c:	42b1      	cmp	r1, r6
   e113e:	d334      	bcc.n	e11aa <rshift+0x96>
   e1140:	1a9b      	subs	r3, r3, r2
   e1142:	009b      	lsls	r3, r3, #2
   e1144:	1eea      	subs	r2, r5, #3
   e1146:	4296      	cmp	r6, r2
   e1148:	bf38      	it	cc
   e114a:	2300      	movcc	r3, #0
   e114c:	4423      	add	r3, r4
   e114e:	e015      	b.n	e117c <rshift+0x68>
   e1150:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   e1154:	f1c1 0820 	rsb	r8, r1, #32
   e1158:	40cf      	lsrs	r7, r1
   e115a:	f105 0e04 	add.w	lr, r5, #4
   e115e:	46a1      	mov	r9, r4
   e1160:	4576      	cmp	r6, lr
   e1162:	46f4      	mov	ip, lr
   e1164:	d815      	bhi.n	e1192 <rshift+0x7e>
   e1166:	1a9b      	subs	r3, r3, r2
   e1168:	009a      	lsls	r2, r3, #2
   e116a:	3a04      	subs	r2, #4
   e116c:	3501      	adds	r5, #1
   e116e:	42ae      	cmp	r6, r5
   e1170:	bf38      	it	cc
   e1172:	2200      	movcc	r2, #0
   e1174:	18a3      	adds	r3, r4, r2
   e1176:	50a7      	str	r7, [r4, r2]
   e1178:	b107      	cbz	r7, e117c <rshift+0x68>
   e117a:	3304      	adds	r3, #4
   e117c:	1b1a      	subs	r2, r3, r4
   e117e:	42a3      	cmp	r3, r4
   e1180:	ea4f 02a2 	mov.w	r2, r2, asr #2
   e1184:	bf08      	it	eq
   e1186:	2300      	moveq	r3, #0
   e1188:	6102      	str	r2, [r0, #16]
   e118a:	bf08      	it	eq
   e118c:	6143      	streq	r3, [r0, #20]
   e118e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e1192:	f8dc c000 	ldr.w	ip, [ip]
   e1196:	fa0c fc08 	lsl.w	ip, ip, r8
   e119a:	ea4c 0707 	orr.w	r7, ip, r7
   e119e:	f849 7b04 	str.w	r7, [r9], #4
   e11a2:	f85e 7b04 	ldr.w	r7, [lr], #4
   e11a6:	40cf      	lsrs	r7, r1
   e11a8:	e7da      	b.n	e1160 <rshift+0x4c>
   e11aa:	f851 cb04 	ldr.w	ip, [r1], #4
   e11ae:	f847 cf04 	str.w	ip, [r7, #4]!
   e11b2:	e7c3      	b.n	e113c <rshift+0x28>
   e11b4:	4623      	mov	r3, r4
   e11b6:	e7e1      	b.n	e117c <rshift+0x68>

000e11b8 <__hexdig_fun>:
   e11b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e11bc:	2b09      	cmp	r3, #9
   e11be:	d802      	bhi.n	e11c6 <__hexdig_fun+0xe>
   e11c0:	3820      	subs	r0, #32
   e11c2:	b2c0      	uxtb	r0, r0
   e11c4:	4770      	bx	lr
   e11c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e11ca:	2b05      	cmp	r3, #5
   e11cc:	d801      	bhi.n	e11d2 <__hexdig_fun+0x1a>
   e11ce:	3847      	subs	r0, #71	; 0x47
   e11d0:	e7f7      	b.n	e11c2 <__hexdig_fun+0xa>
   e11d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e11d6:	2b05      	cmp	r3, #5
   e11d8:	d801      	bhi.n	e11de <__hexdig_fun+0x26>
   e11da:	3827      	subs	r0, #39	; 0x27
   e11dc:	e7f1      	b.n	e11c2 <__hexdig_fun+0xa>
   e11de:	2000      	movs	r0, #0
   e11e0:	4770      	bx	lr
	...

000e11e4 <__gethex>:
   e11e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e11e8:	ed2d 8b02 	vpush	{d8}
   e11ec:	b089      	sub	sp, #36	; 0x24
   e11ee:	ee08 0a10 	vmov	s16, r0
   e11f2:	9304      	str	r3, [sp, #16]
   e11f4:	4bbc      	ldr	r3, [pc, #752]	; (e14e8 <__gethex+0x304>)
   e11f6:	681b      	ldr	r3, [r3, #0]
   e11f8:	9301      	str	r3, [sp, #4]
   e11fa:	4618      	mov	r0, r3
   e11fc:	468b      	mov	fp, r1
   e11fe:	4690      	mov	r8, r2
   e1200:	f7fe ff73 	bl	e00ea <strlen>
   e1204:	9b01      	ldr	r3, [sp, #4]
   e1206:	f8db 2000 	ldr.w	r2, [fp]
   e120a:	4403      	add	r3, r0
   e120c:	4682      	mov	sl, r0
   e120e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e1212:	9305      	str	r3, [sp, #20]
   e1214:	1c93      	adds	r3, r2, #2
   e1216:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   e121a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   e121e:	32fe      	adds	r2, #254	; 0xfe
   e1220:	18d1      	adds	r1, r2, r3
   e1222:	461f      	mov	r7, r3
   e1224:	f813 0b01 	ldrb.w	r0, [r3], #1
   e1228:	9100      	str	r1, [sp, #0]
   e122a:	2830      	cmp	r0, #48	; 0x30
   e122c:	d0f8      	beq.n	e1220 <__gethex+0x3c>
   e122e:	f7ff ffc3 	bl	e11b8 <__hexdig_fun>
   e1232:	4604      	mov	r4, r0
   e1234:	2800      	cmp	r0, #0
   e1236:	d13a      	bne.n	e12ae <__gethex+0xca>
   e1238:	9901      	ldr	r1, [sp, #4]
   e123a:	4652      	mov	r2, sl
   e123c:	4638      	mov	r0, r7
   e123e:	f7fe ff5c 	bl	e00fa <strncmp>
   e1242:	4605      	mov	r5, r0
   e1244:	2800      	cmp	r0, #0
   e1246:	d168      	bne.n	e131a <__gethex+0x136>
   e1248:	f817 000a 	ldrb.w	r0, [r7, sl]
   e124c:	eb07 060a 	add.w	r6, r7, sl
   e1250:	f7ff ffb2 	bl	e11b8 <__hexdig_fun>
   e1254:	2800      	cmp	r0, #0
   e1256:	d062      	beq.n	e131e <__gethex+0x13a>
   e1258:	4633      	mov	r3, r6
   e125a:	7818      	ldrb	r0, [r3, #0]
   e125c:	2830      	cmp	r0, #48	; 0x30
   e125e:	461f      	mov	r7, r3
   e1260:	f103 0301 	add.w	r3, r3, #1
   e1264:	d0f9      	beq.n	e125a <__gethex+0x76>
   e1266:	f7ff ffa7 	bl	e11b8 <__hexdig_fun>
   e126a:	2301      	movs	r3, #1
   e126c:	fab0 f480 	clz	r4, r0
   e1270:	0964      	lsrs	r4, r4, #5
   e1272:	4635      	mov	r5, r6
   e1274:	9300      	str	r3, [sp, #0]
   e1276:	463a      	mov	r2, r7
   e1278:	4616      	mov	r6, r2
   e127a:	3201      	adds	r2, #1
   e127c:	7830      	ldrb	r0, [r6, #0]
   e127e:	f7ff ff9b 	bl	e11b8 <__hexdig_fun>
   e1282:	2800      	cmp	r0, #0
   e1284:	d1f8      	bne.n	e1278 <__gethex+0x94>
   e1286:	9901      	ldr	r1, [sp, #4]
   e1288:	4652      	mov	r2, sl
   e128a:	4630      	mov	r0, r6
   e128c:	f7fe ff35 	bl	e00fa <strncmp>
   e1290:	b980      	cbnz	r0, e12b4 <__gethex+0xd0>
   e1292:	b94d      	cbnz	r5, e12a8 <__gethex+0xc4>
   e1294:	eb06 050a 	add.w	r5, r6, sl
   e1298:	462a      	mov	r2, r5
   e129a:	4616      	mov	r6, r2
   e129c:	3201      	adds	r2, #1
   e129e:	7830      	ldrb	r0, [r6, #0]
   e12a0:	f7ff ff8a 	bl	e11b8 <__hexdig_fun>
   e12a4:	2800      	cmp	r0, #0
   e12a6:	d1f8      	bne.n	e129a <__gethex+0xb6>
   e12a8:	1bad      	subs	r5, r5, r6
   e12aa:	00ad      	lsls	r5, r5, #2
   e12ac:	e004      	b.n	e12b8 <__gethex+0xd4>
   e12ae:	2400      	movs	r4, #0
   e12b0:	4625      	mov	r5, r4
   e12b2:	e7e0      	b.n	e1276 <__gethex+0x92>
   e12b4:	2d00      	cmp	r5, #0
   e12b6:	d1f7      	bne.n	e12a8 <__gethex+0xc4>
   e12b8:	7833      	ldrb	r3, [r6, #0]
   e12ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   e12be:	2b50      	cmp	r3, #80	; 0x50
   e12c0:	d13b      	bne.n	e133a <__gethex+0x156>
   e12c2:	7873      	ldrb	r3, [r6, #1]
   e12c4:	2b2b      	cmp	r3, #43	; 0x2b
   e12c6:	d02c      	beq.n	e1322 <__gethex+0x13e>
   e12c8:	2b2d      	cmp	r3, #45	; 0x2d
   e12ca:	d02e      	beq.n	e132a <__gethex+0x146>
   e12cc:	1c71      	adds	r1, r6, #1
   e12ce:	f04f 0900 	mov.w	r9, #0
   e12d2:	7808      	ldrb	r0, [r1, #0]
   e12d4:	f7ff ff70 	bl	e11b8 <__hexdig_fun>
   e12d8:	1e43      	subs	r3, r0, #1
   e12da:	b2db      	uxtb	r3, r3
   e12dc:	2b18      	cmp	r3, #24
   e12de:	d82c      	bhi.n	e133a <__gethex+0x156>
   e12e0:	f1a0 0210 	sub.w	r2, r0, #16
   e12e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e12e8:	f7ff ff66 	bl	e11b8 <__hexdig_fun>
   e12ec:	1e43      	subs	r3, r0, #1
   e12ee:	b2db      	uxtb	r3, r3
   e12f0:	2b18      	cmp	r3, #24
   e12f2:	d91d      	bls.n	e1330 <__gethex+0x14c>
   e12f4:	f1b9 0f00 	cmp.w	r9, #0
   e12f8:	d000      	beq.n	e12fc <__gethex+0x118>
   e12fa:	4252      	negs	r2, r2
   e12fc:	4415      	add	r5, r2
   e12fe:	f8cb 1000 	str.w	r1, [fp]
   e1302:	b1e4      	cbz	r4, e133e <__gethex+0x15a>
   e1304:	9b00      	ldr	r3, [sp, #0]
   e1306:	2b00      	cmp	r3, #0
   e1308:	bf14      	ite	ne
   e130a:	2700      	movne	r7, #0
   e130c:	2706      	moveq	r7, #6
   e130e:	4638      	mov	r0, r7
   e1310:	b009      	add	sp, #36	; 0x24
   e1312:	ecbd 8b02 	vpop	{d8}
   e1316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e131a:	463e      	mov	r6, r7
   e131c:	4625      	mov	r5, r4
   e131e:	2401      	movs	r4, #1
   e1320:	e7ca      	b.n	e12b8 <__gethex+0xd4>
   e1322:	f04f 0900 	mov.w	r9, #0
   e1326:	1cb1      	adds	r1, r6, #2
   e1328:	e7d3      	b.n	e12d2 <__gethex+0xee>
   e132a:	f04f 0901 	mov.w	r9, #1
   e132e:	e7fa      	b.n	e1326 <__gethex+0x142>
   e1330:	230a      	movs	r3, #10
   e1332:	fb03 0202 	mla	r2, r3, r2, r0
   e1336:	3a10      	subs	r2, #16
   e1338:	e7d4      	b.n	e12e4 <__gethex+0x100>
   e133a:	4631      	mov	r1, r6
   e133c:	e7df      	b.n	e12fe <__gethex+0x11a>
   e133e:	1bf3      	subs	r3, r6, r7
   e1340:	3b01      	subs	r3, #1
   e1342:	4621      	mov	r1, r4
   e1344:	2b07      	cmp	r3, #7
   e1346:	dc52      	bgt.n	e13ee <__gethex+0x20a>
   e1348:	ee18 0a10 	vmov	r0, s16
   e134c:	f000 fa7a 	bl	e1844 <_Balloc>
   e1350:	f04f 0b00 	mov.w	fp, #0
   e1354:	f100 0914 	add.w	r9, r0, #20
   e1358:	f1ca 0301 	rsb	r3, sl, #1
   e135c:	4604      	mov	r4, r0
   e135e:	f8cd 9008 	str.w	r9, [sp, #8]
   e1362:	f8cd b000 	str.w	fp, [sp]
   e1366:	9306      	str	r3, [sp, #24]
   e1368:	42b7      	cmp	r7, r6
   e136a:	d343      	bcc.n	e13f4 <__gethex+0x210>
   e136c:	9802      	ldr	r0, [sp, #8]
   e136e:	9b00      	ldr	r3, [sp, #0]
   e1370:	f840 3b04 	str.w	r3, [r0], #4
   e1374:	eba0 0009 	sub.w	r0, r0, r9
   e1378:	1080      	asrs	r0, r0, #2
   e137a:	0146      	lsls	r6, r0, #5
   e137c:	6120      	str	r0, [r4, #16]
   e137e:	4618      	mov	r0, r3
   e1380:	f000 fb27 	bl	e19d2 <__hi0bits>
   e1384:	1a30      	subs	r0, r6, r0
   e1386:	f8d8 6000 	ldr.w	r6, [r8]
   e138a:	42b0      	cmp	r0, r6
   e138c:	dd66      	ble.n	e145c <__gethex+0x278>
   e138e:	1b87      	subs	r7, r0, r6
   e1390:	4639      	mov	r1, r7
   e1392:	4620      	mov	r0, r4
   e1394:	f000 fe74 	bl	e2080 <__any_on>
   e1398:	4682      	mov	sl, r0
   e139a:	b1a8      	cbz	r0, e13c8 <__gethex+0x1e4>
   e139c:	1e7b      	subs	r3, r7, #1
   e139e:	1159      	asrs	r1, r3, #5
   e13a0:	f003 021f 	and.w	r2, r3, #31
   e13a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   e13a8:	f04f 0a01 	mov.w	sl, #1
   e13ac:	fa0a f202 	lsl.w	r2, sl, r2
   e13b0:	420a      	tst	r2, r1
   e13b2:	d009      	beq.n	e13c8 <__gethex+0x1e4>
   e13b4:	4553      	cmp	r3, sl
   e13b6:	dd05      	ble.n	e13c4 <__gethex+0x1e0>
   e13b8:	1eb9      	subs	r1, r7, #2
   e13ba:	4620      	mov	r0, r4
   e13bc:	f000 fe60 	bl	e2080 <__any_on>
   e13c0:	2800      	cmp	r0, #0
   e13c2:	d148      	bne.n	e1456 <__gethex+0x272>
   e13c4:	f04f 0a02 	mov.w	sl, #2
   e13c8:	4639      	mov	r1, r7
   e13ca:	4620      	mov	r0, r4
   e13cc:	f7ff fea2 	bl	e1114 <rshift>
   e13d0:	443d      	add	r5, r7
   e13d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e13d6:	42ab      	cmp	r3, r5
   e13d8:	da4f      	bge.n	e147a <__gethex+0x296>
   e13da:	ee18 0a10 	vmov	r0, s16
   e13de:	4621      	mov	r1, r4
   e13e0:	f000 fa64 	bl	e18ac <_Bfree>
   e13e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e13e6:	2300      	movs	r3, #0
   e13e8:	6013      	str	r3, [r2, #0]
   e13ea:	27a3      	movs	r7, #163	; 0xa3
   e13ec:	e78f      	b.n	e130e <__gethex+0x12a>
   e13ee:	3101      	adds	r1, #1
   e13f0:	105b      	asrs	r3, r3, #1
   e13f2:	e7a7      	b.n	e1344 <__gethex+0x160>
   e13f4:	1e73      	subs	r3, r6, #1
   e13f6:	9a05      	ldr	r2, [sp, #20]
   e13f8:	9303      	str	r3, [sp, #12]
   e13fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e13fe:	4293      	cmp	r3, r2
   e1400:	d019      	beq.n	e1436 <__gethex+0x252>
   e1402:	f1bb 0f20 	cmp.w	fp, #32
   e1406:	d107      	bne.n	e1418 <__gethex+0x234>
   e1408:	9b02      	ldr	r3, [sp, #8]
   e140a:	9a00      	ldr	r2, [sp, #0]
   e140c:	f843 2b04 	str.w	r2, [r3], #4
   e1410:	9302      	str	r3, [sp, #8]
   e1412:	2300      	movs	r3, #0
   e1414:	9300      	str	r3, [sp, #0]
   e1416:	469b      	mov	fp, r3
   e1418:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e141c:	f7ff fecc 	bl	e11b8 <__hexdig_fun>
   e1420:	9b00      	ldr	r3, [sp, #0]
   e1422:	f000 000f 	and.w	r0, r0, #15
   e1426:	fa00 f00b 	lsl.w	r0, r0, fp
   e142a:	4303      	orrs	r3, r0
   e142c:	9300      	str	r3, [sp, #0]
   e142e:	f10b 0b04 	add.w	fp, fp, #4
   e1432:	9b03      	ldr	r3, [sp, #12]
   e1434:	e00d      	b.n	e1452 <__gethex+0x26e>
   e1436:	9b03      	ldr	r3, [sp, #12]
   e1438:	9a06      	ldr	r2, [sp, #24]
   e143a:	4413      	add	r3, r2
   e143c:	42bb      	cmp	r3, r7
   e143e:	d3e0      	bcc.n	e1402 <__gethex+0x21e>
   e1440:	4618      	mov	r0, r3
   e1442:	9901      	ldr	r1, [sp, #4]
   e1444:	9307      	str	r3, [sp, #28]
   e1446:	4652      	mov	r2, sl
   e1448:	f7fe fe57 	bl	e00fa <strncmp>
   e144c:	9b07      	ldr	r3, [sp, #28]
   e144e:	2800      	cmp	r0, #0
   e1450:	d1d7      	bne.n	e1402 <__gethex+0x21e>
   e1452:	461e      	mov	r6, r3
   e1454:	e788      	b.n	e1368 <__gethex+0x184>
   e1456:	f04f 0a03 	mov.w	sl, #3
   e145a:	e7b5      	b.n	e13c8 <__gethex+0x1e4>
   e145c:	da0a      	bge.n	e1474 <__gethex+0x290>
   e145e:	1a37      	subs	r7, r6, r0
   e1460:	4621      	mov	r1, r4
   e1462:	ee18 0a10 	vmov	r0, s16
   e1466:	463a      	mov	r2, r7
   e1468:	f000 fbf6 	bl	e1c58 <__lshift>
   e146c:	1bed      	subs	r5, r5, r7
   e146e:	4604      	mov	r4, r0
   e1470:	f100 0914 	add.w	r9, r0, #20
   e1474:	f04f 0a00 	mov.w	sl, #0
   e1478:	e7ab      	b.n	e13d2 <__gethex+0x1ee>
   e147a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e147e:	42a8      	cmp	r0, r5
   e1480:	dd6d      	ble.n	e155e <__gethex+0x37a>
   e1482:	1b45      	subs	r5, r0, r5
   e1484:	42ae      	cmp	r6, r5
   e1486:	dc31      	bgt.n	e14ec <__gethex+0x308>
   e1488:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e148c:	2b02      	cmp	r3, #2
   e148e:	d023      	beq.n	e14d8 <__gethex+0x2f4>
   e1490:	2b03      	cmp	r3, #3
   e1492:	d025      	beq.n	e14e0 <__gethex+0x2fc>
   e1494:	2b01      	cmp	r3, #1
   e1496:	d115      	bne.n	e14c4 <__gethex+0x2e0>
   e1498:	42ae      	cmp	r6, r5
   e149a:	d113      	bne.n	e14c4 <__gethex+0x2e0>
   e149c:	2e01      	cmp	r6, #1
   e149e:	d10b      	bne.n	e14b8 <__gethex+0x2d4>
   e14a0:	9a04      	ldr	r2, [sp, #16]
   e14a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e14a6:	6013      	str	r3, [r2, #0]
   e14a8:	2301      	movs	r3, #1
   e14aa:	6123      	str	r3, [r4, #16]
   e14ac:	f8c9 3000 	str.w	r3, [r9]
   e14b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e14b2:	2762      	movs	r7, #98	; 0x62
   e14b4:	601c      	str	r4, [r3, #0]
   e14b6:	e72a      	b.n	e130e <__gethex+0x12a>
   e14b8:	1e71      	subs	r1, r6, #1
   e14ba:	4620      	mov	r0, r4
   e14bc:	f000 fde0 	bl	e2080 <__any_on>
   e14c0:	2800      	cmp	r0, #0
   e14c2:	d1ed      	bne.n	e14a0 <__gethex+0x2bc>
   e14c4:	ee18 0a10 	vmov	r0, s16
   e14c8:	4621      	mov	r1, r4
   e14ca:	f000 f9ef 	bl	e18ac <_Bfree>
   e14ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e14d0:	2300      	movs	r3, #0
   e14d2:	6013      	str	r3, [r2, #0]
   e14d4:	2750      	movs	r7, #80	; 0x50
   e14d6:	e71a      	b.n	e130e <__gethex+0x12a>
   e14d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e14da:	2b00      	cmp	r3, #0
   e14dc:	d1f2      	bne.n	e14c4 <__gethex+0x2e0>
   e14de:	e7df      	b.n	e14a0 <__gethex+0x2bc>
   e14e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e14e2:	2b00      	cmp	r3, #0
   e14e4:	d1dc      	bne.n	e14a0 <__gethex+0x2bc>
   e14e6:	e7ed      	b.n	e14c4 <__gethex+0x2e0>
   e14e8:	000e30dc 	.word	0x000e30dc
   e14ec:	1e6f      	subs	r7, r5, #1
   e14ee:	f1ba 0f00 	cmp.w	sl, #0
   e14f2:	d131      	bne.n	e1558 <__gethex+0x374>
   e14f4:	b127      	cbz	r7, e1500 <__gethex+0x31c>
   e14f6:	4639      	mov	r1, r7
   e14f8:	4620      	mov	r0, r4
   e14fa:	f000 fdc1 	bl	e2080 <__any_on>
   e14fe:	4682      	mov	sl, r0
   e1500:	117b      	asrs	r3, r7, #5
   e1502:	2101      	movs	r1, #1
   e1504:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   e1508:	f007 071f 	and.w	r7, r7, #31
   e150c:	fa01 f707 	lsl.w	r7, r1, r7
   e1510:	421f      	tst	r7, r3
   e1512:	4629      	mov	r1, r5
   e1514:	4620      	mov	r0, r4
   e1516:	bf18      	it	ne
   e1518:	f04a 0a02 	orrne.w	sl, sl, #2
   e151c:	1b76      	subs	r6, r6, r5
   e151e:	f7ff fdf9 	bl	e1114 <rshift>
   e1522:	f8d8 5004 	ldr.w	r5, [r8, #4]
   e1526:	2702      	movs	r7, #2
   e1528:	f1ba 0f00 	cmp.w	sl, #0
   e152c:	d048      	beq.n	e15c0 <__gethex+0x3dc>
   e152e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e1532:	2b02      	cmp	r3, #2
   e1534:	d015      	beq.n	e1562 <__gethex+0x37e>
   e1536:	2b03      	cmp	r3, #3
   e1538:	d017      	beq.n	e156a <__gethex+0x386>
   e153a:	2b01      	cmp	r3, #1
   e153c:	d109      	bne.n	e1552 <__gethex+0x36e>
   e153e:	f01a 0f02 	tst.w	sl, #2
   e1542:	d006      	beq.n	e1552 <__gethex+0x36e>
   e1544:	f8d9 0000 	ldr.w	r0, [r9]
   e1548:	ea4a 0a00 	orr.w	sl, sl, r0
   e154c:	f01a 0f01 	tst.w	sl, #1
   e1550:	d10e      	bne.n	e1570 <__gethex+0x38c>
   e1552:	f047 0710 	orr.w	r7, r7, #16
   e1556:	e033      	b.n	e15c0 <__gethex+0x3dc>
   e1558:	f04f 0a01 	mov.w	sl, #1
   e155c:	e7d0      	b.n	e1500 <__gethex+0x31c>
   e155e:	2701      	movs	r7, #1
   e1560:	e7e2      	b.n	e1528 <__gethex+0x344>
   e1562:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e1564:	f1c3 0301 	rsb	r3, r3, #1
   e1568:	9315      	str	r3, [sp, #84]	; 0x54
   e156a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e156c:	2b00      	cmp	r3, #0
   e156e:	d0f0      	beq.n	e1552 <__gethex+0x36e>
   e1570:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e1574:	f104 0314 	add.w	r3, r4, #20
   e1578:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   e157c:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   e1580:	f04f 0c00 	mov.w	ip, #0
   e1584:	4618      	mov	r0, r3
   e1586:	f853 2b04 	ldr.w	r2, [r3], #4
   e158a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   e158e:	d01c      	beq.n	e15ca <__gethex+0x3e6>
   e1590:	3201      	adds	r2, #1
   e1592:	6002      	str	r2, [r0, #0]
   e1594:	2f02      	cmp	r7, #2
   e1596:	f104 0314 	add.w	r3, r4, #20
   e159a:	d13a      	bne.n	e1612 <__gethex+0x42e>
   e159c:	f8d8 2000 	ldr.w	r2, [r8]
   e15a0:	3a01      	subs	r2, #1
   e15a2:	42b2      	cmp	r2, r6
   e15a4:	d10a      	bne.n	e15bc <__gethex+0x3d8>
   e15a6:	1171      	asrs	r1, r6, #5
   e15a8:	2201      	movs	r2, #1
   e15aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   e15ae:	f006 061f 	and.w	r6, r6, #31
   e15b2:	fa02 f606 	lsl.w	r6, r2, r6
   e15b6:	421e      	tst	r6, r3
   e15b8:	bf18      	it	ne
   e15ba:	4617      	movne	r7, r2
   e15bc:	f047 0720 	orr.w	r7, r7, #32
   e15c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e15c2:	601c      	str	r4, [r3, #0]
   e15c4:	9b04      	ldr	r3, [sp, #16]
   e15c6:	601d      	str	r5, [r3, #0]
   e15c8:	e6a1      	b.n	e130e <__gethex+0x12a>
   e15ca:	4299      	cmp	r1, r3
   e15cc:	f843 cc04 	str.w	ip, [r3, #-4]
   e15d0:	d8d8      	bhi.n	e1584 <__gethex+0x3a0>
   e15d2:	68a3      	ldr	r3, [r4, #8]
   e15d4:	4599      	cmp	r9, r3
   e15d6:	db14      	blt.n	e1602 <__gethex+0x41e>
   e15d8:	6861      	ldr	r1, [r4, #4]
   e15da:	ee18 0a10 	vmov	r0, s16
   e15de:	3101      	adds	r1, #1
   e15e0:	f000 f930 	bl	e1844 <_Balloc>
   e15e4:	6922      	ldr	r2, [r4, #16]
   e15e6:	3202      	adds	r2, #2
   e15e8:	f104 010c 	add.w	r1, r4, #12
   e15ec:	4682      	mov	sl, r0
   e15ee:	0092      	lsls	r2, r2, #2
   e15f0:	300c      	adds	r0, #12
   e15f2:	f7fe fcc7 	bl	dff84 <memcpy>
   e15f6:	4621      	mov	r1, r4
   e15f8:	ee18 0a10 	vmov	r0, s16
   e15fc:	f000 f956 	bl	e18ac <_Bfree>
   e1600:	4654      	mov	r4, sl
   e1602:	6923      	ldr	r3, [r4, #16]
   e1604:	1c5a      	adds	r2, r3, #1
   e1606:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   e160a:	6122      	str	r2, [r4, #16]
   e160c:	2201      	movs	r2, #1
   e160e:	615a      	str	r2, [r3, #20]
   e1610:	e7c0      	b.n	e1594 <__gethex+0x3b0>
   e1612:	6922      	ldr	r2, [r4, #16]
   e1614:	454a      	cmp	r2, r9
   e1616:	dd0b      	ble.n	e1630 <__gethex+0x44c>
   e1618:	2101      	movs	r1, #1
   e161a:	4620      	mov	r0, r4
   e161c:	f7ff fd7a 	bl	e1114 <rshift>
   e1620:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e1624:	3501      	adds	r5, #1
   e1626:	42ab      	cmp	r3, r5
   e1628:	f6ff aed7 	blt.w	e13da <__gethex+0x1f6>
   e162c:	2701      	movs	r7, #1
   e162e:	e7c5      	b.n	e15bc <__gethex+0x3d8>
   e1630:	f016 061f 	ands.w	r6, r6, #31
   e1634:	d0fa      	beq.n	e162c <__gethex+0x448>
   e1636:	449b      	add	fp, r3
   e1638:	f1c6 0620 	rsb	r6, r6, #32
   e163c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   e1640:	f000 f9c7 	bl	e19d2 <__hi0bits>
   e1644:	42b0      	cmp	r0, r6
   e1646:	dbe7      	blt.n	e1618 <__gethex+0x434>
   e1648:	e7f0      	b.n	e162c <__gethex+0x448>
   e164a:	bf00      	nop

000e164c <L_shift>:
   e164c:	f1c2 0208 	rsb	r2, r2, #8
   e1650:	0092      	lsls	r2, r2, #2
   e1652:	b570      	push	{r4, r5, r6, lr}
   e1654:	f1c2 0620 	rsb	r6, r2, #32
   e1658:	6843      	ldr	r3, [r0, #4]
   e165a:	6804      	ldr	r4, [r0, #0]
   e165c:	fa03 f506 	lsl.w	r5, r3, r6
   e1660:	432c      	orrs	r4, r5
   e1662:	40d3      	lsrs	r3, r2
   e1664:	6004      	str	r4, [r0, #0]
   e1666:	f840 3f04 	str.w	r3, [r0, #4]!
   e166a:	4288      	cmp	r0, r1
   e166c:	d3f4      	bcc.n	e1658 <L_shift+0xc>
   e166e:	bd70      	pop	{r4, r5, r6, pc}

000e1670 <__match>:
   e1670:	b530      	push	{r4, r5, lr}
   e1672:	6803      	ldr	r3, [r0, #0]
   e1674:	3301      	adds	r3, #1
   e1676:	f811 4b01 	ldrb.w	r4, [r1], #1
   e167a:	b914      	cbnz	r4, e1682 <__match+0x12>
   e167c:	6003      	str	r3, [r0, #0]
   e167e:	2001      	movs	r0, #1
   e1680:	bd30      	pop	{r4, r5, pc}
   e1682:	f813 2b01 	ldrb.w	r2, [r3], #1
   e1686:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e168a:	2d19      	cmp	r5, #25
   e168c:	bf98      	it	ls
   e168e:	3220      	addls	r2, #32
   e1690:	42a2      	cmp	r2, r4
   e1692:	d0f0      	beq.n	e1676 <__match+0x6>
   e1694:	2000      	movs	r0, #0
   e1696:	e7f3      	b.n	e1680 <__match+0x10>

000e1698 <__hexnan>:
   e1698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e169c:	680b      	ldr	r3, [r1, #0]
   e169e:	6801      	ldr	r1, [r0, #0]
   e16a0:	115e      	asrs	r6, r3, #5
   e16a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e16a6:	f013 031f 	ands.w	r3, r3, #31
   e16aa:	b087      	sub	sp, #28
   e16ac:	bf18      	it	ne
   e16ae:	3604      	addne	r6, #4
   e16b0:	2500      	movs	r5, #0
   e16b2:	1f37      	subs	r7, r6, #4
   e16b4:	4682      	mov	sl, r0
   e16b6:	4690      	mov	r8, r2
   e16b8:	9301      	str	r3, [sp, #4]
   e16ba:	f846 5c04 	str.w	r5, [r6, #-4]
   e16be:	46b9      	mov	r9, r7
   e16c0:	463c      	mov	r4, r7
   e16c2:	9502      	str	r5, [sp, #8]
   e16c4:	46ab      	mov	fp, r5
   e16c6:	784a      	ldrb	r2, [r1, #1]
   e16c8:	1c4b      	adds	r3, r1, #1
   e16ca:	9303      	str	r3, [sp, #12]
   e16cc:	b342      	cbz	r2, e1720 <__hexnan+0x88>
   e16ce:	4610      	mov	r0, r2
   e16d0:	9105      	str	r1, [sp, #20]
   e16d2:	9204      	str	r2, [sp, #16]
   e16d4:	f7ff fd70 	bl	e11b8 <__hexdig_fun>
   e16d8:	2800      	cmp	r0, #0
   e16da:	d14f      	bne.n	e177c <__hexnan+0xe4>
   e16dc:	9a04      	ldr	r2, [sp, #16]
   e16de:	9905      	ldr	r1, [sp, #20]
   e16e0:	2a20      	cmp	r2, #32
   e16e2:	d818      	bhi.n	e1716 <__hexnan+0x7e>
   e16e4:	9b02      	ldr	r3, [sp, #8]
   e16e6:	459b      	cmp	fp, r3
   e16e8:	dd13      	ble.n	e1712 <__hexnan+0x7a>
   e16ea:	454c      	cmp	r4, r9
   e16ec:	d206      	bcs.n	e16fc <__hexnan+0x64>
   e16ee:	2d07      	cmp	r5, #7
   e16f0:	dc04      	bgt.n	e16fc <__hexnan+0x64>
   e16f2:	462a      	mov	r2, r5
   e16f4:	4649      	mov	r1, r9
   e16f6:	4620      	mov	r0, r4
   e16f8:	f7ff ffa8 	bl	e164c <L_shift>
   e16fc:	4544      	cmp	r4, r8
   e16fe:	d950      	bls.n	e17a2 <__hexnan+0x10a>
   e1700:	2300      	movs	r3, #0
   e1702:	f1a4 0904 	sub.w	r9, r4, #4
   e1706:	f844 3c04 	str.w	r3, [r4, #-4]
   e170a:	f8cd b008 	str.w	fp, [sp, #8]
   e170e:	464c      	mov	r4, r9
   e1710:	461d      	mov	r5, r3
   e1712:	9903      	ldr	r1, [sp, #12]
   e1714:	e7d7      	b.n	e16c6 <__hexnan+0x2e>
   e1716:	2a29      	cmp	r2, #41	; 0x29
   e1718:	d156      	bne.n	e17c8 <__hexnan+0x130>
   e171a:	3102      	adds	r1, #2
   e171c:	f8ca 1000 	str.w	r1, [sl]
   e1720:	f1bb 0f00 	cmp.w	fp, #0
   e1724:	d050      	beq.n	e17c8 <__hexnan+0x130>
   e1726:	454c      	cmp	r4, r9
   e1728:	d206      	bcs.n	e1738 <__hexnan+0xa0>
   e172a:	2d07      	cmp	r5, #7
   e172c:	dc04      	bgt.n	e1738 <__hexnan+0xa0>
   e172e:	462a      	mov	r2, r5
   e1730:	4649      	mov	r1, r9
   e1732:	4620      	mov	r0, r4
   e1734:	f7ff ff8a 	bl	e164c <L_shift>
   e1738:	4544      	cmp	r4, r8
   e173a:	d934      	bls.n	e17a6 <__hexnan+0x10e>
   e173c:	f1a8 0204 	sub.w	r2, r8, #4
   e1740:	4623      	mov	r3, r4
   e1742:	f853 1b04 	ldr.w	r1, [r3], #4
   e1746:	f842 1f04 	str.w	r1, [r2, #4]!
   e174a:	429f      	cmp	r7, r3
   e174c:	d2f9      	bcs.n	e1742 <__hexnan+0xaa>
   e174e:	1b3b      	subs	r3, r7, r4
   e1750:	f023 0303 	bic.w	r3, r3, #3
   e1754:	3304      	adds	r3, #4
   e1756:	3401      	adds	r4, #1
   e1758:	3e03      	subs	r6, #3
   e175a:	42b4      	cmp	r4, r6
   e175c:	bf88      	it	hi
   e175e:	2304      	movhi	r3, #4
   e1760:	4443      	add	r3, r8
   e1762:	2200      	movs	r2, #0
   e1764:	f843 2b04 	str.w	r2, [r3], #4
   e1768:	429f      	cmp	r7, r3
   e176a:	d2fb      	bcs.n	e1764 <__hexnan+0xcc>
   e176c:	683b      	ldr	r3, [r7, #0]
   e176e:	b91b      	cbnz	r3, e1778 <__hexnan+0xe0>
   e1770:	4547      	cmp	r7, r8
   e1772:	d127      	bne.n	e17c4 <__hexnan+0x12c>
   e1774:	2301      	movs	r3, #1
   e1776:	603b      	str	r3, [r7, #0]
   e1778:	2005      	movs	r0, #5
   e177a:	e026      	b.n	e17ca <__hexnan+0x132>
   e177c:	3501      	adds	r5, #1
   e177e:	2d08      	cmp	r5, #8
   e1780:	f10b 0b01 	add.w	fp, fp, #1
   e1784:	dd06      	ble.n	e1794 <__hexnan+0xfc>
   e1786:	4544      	cmp	r4, r8
   e1788:	d9c3      	bls.n	e1712 <__hexnan+0x7a>
   e178a:	2300      	movs	r3, #0
   e178c:	f844 3c04 	str.w	r3, [r4, #-4]
   e1790:	2501      	movs	r5, #1
   e1792:	3c04      	subs	r4, #4
   e1794:	6822      	ldr	r2, [r4, #0]
   e1796:	f000 000f 	and.w	r0, r0, #15
   e179a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   e179e:	6022      	str	r2, [r4, #0]
   e17a0:	e7b7      	b.n	e1712 <__hexnan+0x7a>
   e17a2:	2508      	movs	r5, #8
   e17a4:	e7b5      	b.n	e1712 <__hexnan+0x7a>
   e17a6:	9b01      	ldr	r3, [sp, #4]
   e17a8:	2b00      	cmp	r3, #0
   e17aa:	d0df      	beq.n	e176c <__hexnan+0xd4>
   e17ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e17b0:	f1c3 0320 	rsb	r3, r3, #32
   e17b4:	fa22 f303 	lsr.w	r3, r2, r3
   e17b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e17bc:	401a      	ands	r2, r3
   e17be:	f846 2c04 	str.w	r2, [r6, #-4]
   e17c2:	e7d3      	b.n	e176c <__hexnan+0xd4>
   e17c4:	3f04      	subs	r7, #4
   e17c6:	e7d1      	b.n	e176c <__hexnan+0xd4>
   e17c8:	2004      	movs	r0, #4
   e17ca:	b007      	add	sp, #28
   e17cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e17d0 <_link_r>:
   e17d0:	b538      	push	{r3, r4, r5, lr}
   e17d2:	4d07      	ldr	r5, [pc, #28]	; (e17f0 <_link_r+0x20>)
   e17d4:	2300      	movs	r3, #0
   e17d6:	4604      	mov	r4, r0
   e17d8:	4608      	mov	r0, r1
   e17da:	4611      	mov	r1, r2
   e17dc:	602b      	str	r3, [r5, #0]
   e17de:	f7fa fbe1 	bl	dbfa4 <_link>
   e17e2:	1c43      	adds	r3, r0, #1
   e17e4:	d102      	bne.n	e17ec <_link_r+0x1c>
   e17e6:	682b      	ldr	r3, [r5, #0]
   e17e8:	b103      	cbz	r3, e17ec <_link_r+0x1c>
   e17ea:	6023      	str	r3, [r4, #0]
   e17ec:	bd38      	pop	{r3, r4, r5, pc}
   e17ee:	bf00      	nop
   e17f0:	2003e7ec 	.word	0x2003e7ec

000e17f4 <__retarget_lock_acquire_recursive>:
   e17f4:	4770      	bx	lr

000e17f6 <__retarget_lock_release>:
   e17f6:	4770      	bx	lr

000e17f8 <__retarget_lock_release_recursive>:
   e17f8:	4770      	bx	lr
	...

000e17fc <_lseek_r>:
   e17fc:	b538      	push	{r3, r4, r5, lr}
   e17fe:	4d07      	ldr	r5, [pc, #28]	; (e181c <_lseek_r+0x20>)
   e1800:	4604      	mov	r4, r0
   e1802:	4608      	mov	r0, r1
   e1804:	4611      	mov	r1, r2
   e1806:	2200      	movs	r2, #0
   e1808:	602a      	str	r2, [r5, #0]
   e180a:	461a      	mov	r2, r3
   e180c:	f7fa fbaa 	bl	dbf64 <_lseek>
   e1810:	1c43      	adds	r3, r0, #1
   e1812:	d102      	bne.n	e181a <_lseek_r+0x1e>
   e1814:	682b      	ldr	r3, [r5, #0]
   e1816:	b103      	cbz	r3, e181a <_lseek_r+0x1e>
   e1818:	6023      	str	r3, [r4, #0]
   e181a:	bd38      	pop	{r3, r4, r5, pc}
   e181c:	2003e7ec 	.word	0x2003e7ec

000e1820 <__ascii_mbtowc>:
   e1820:	b082      	sub	sp, #8
   e1822:	b901      	cbnz	r1, e1826 <__ascii_mbtowc+0x6>
   e1824:	a901      	add	r1, sp, #4
   e1826:	b142      	cbz	r2, e183a <__ascii_mbtowc+0x1a>
   e1828:	b14b      	cbz	r3, e183e <__ascii_mbtowc+0x1e>
   e182a:	7813      	ldrb	r3, [r2, #0]
   e182c:	600b      	str	r3, [r1, #0]
   e182e:	7812      	ldrb	r2, [r2, #0]
   e1830:	1e10      	subs	r0, r2, #0
   e1832:	bf18      	it	ne
   e1834:	2001      	movne	r0, #1
   e1836:	b002      	add	sp, #8
   e1838:	4770      	bx	lr
   e183a:	4610      	mov	r0, r2
   e183c:	e7fb      	b.n	e1836 <__ascii_mbtowc+0x16>
   e183e:	f06f 0001 	mvn.w	r0, #1
   e1842:	e7f8      	b.n	e1836 <__ascii_mbtowc+0x16>

000e1844 <_Balloc>:
   e1844:	b570      	push	{r4, r5, r6, lr}
   e1846:	6a46      	ldr	r6, [r0, #36]	; 0x24
   e1848:	4604      	mov	r4, r0
   e184a:	460d      	mov	r5, r1
   e184c:	b93e      	cbnz	r6, e185e <_Balloc+0x1a>
   e184e:	2010      	movs	r0, #16
   e1850:	f7fa fdb8 	bl	dc3c4 <malloc>
   e1854:	e9c0 6601 	strd	r6, r6, [r0, #4]
   e1858:	6260      	str	r0, [r4, #36]	; 0x24
   e185a:	6006      	str	r6, [r0, #0]
   e185c:	60c6      	str	r6, [r0, #12]
   e185e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   e1860:	68f3      	ldr	r3, [r6, #12]
   e1862:	b183      	cbz	r3, e1886 <_Balloc+0x42>
   e1864:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e1866:	68db      	ldr	r3, [r3, #12]
   e1868:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   e186c:	b9b8      	cbnz	r0, e189e <_Balloc+0x5a>
   e186e:	2101      	movs	r1, #1
   e1870:	fa01 f605 	lsl.w	r6, r1, r5
   e1874:	1d72      	adds	r2, r6, #5
   e1876:	0092      	lsls	r2, r2, #2
   e1878:	4620      	mov	r0, r4
   e187a:	f000 fc22 	bl	e20c2 <_calloc_r>
   e187e:	b160      	cbz	r0, e189a <_Balloc+0x56>
   e1880:	e9c0 5601 	strd	r5, r6, [r0, #4]
   e1884:	e00e      	b.n	e18a4 <_Balloc+0x60>
   e1886:	2221      	movs	r2, #33	; 0x21
   e1888:	2104      	movs	r1, #4
   e188a:	4620      	mov	r0, r4
   e188c:	f000 fc19 	bl	e20c2 <_calloc_r>
   e1890:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e1892:	60f0      	str	r0, [r6, #12]
   e1894:	68db      	ldr	r3, [r3, #12]
   e1896:	2b00      	cmp	r3, #0
   e1898:	d1e4      	bne.n	e1864 <_Balloc+0x20>
   e189a:	2000      	movs	r0, #0
   e189c:	bd70      	pop	{r4, r5, r6, pc}
   e189e:	6802      	ldr	r2, [r0, #0]
   e18a0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   e18a4:	2300      	movs	r3, #0
   e18a6:	e9c0 3303 	strd	r3, r3, [r0, #12]
   e18aa:	e7f7      	b.n	e189c <_Balloc+0x58>

000e18ac <_Bfree>:
   e18ac:	b570      	push	{r4, r5, r6, lr}
   e18ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
   e18b0:	4605      	mov	r5, r0
   e18b2:	460c      	mov	r4, r1
   e18b4:	b93e      	cbnz	r6, e18c6 <_Bfree+0x1a>
   e18b6:	2010      	movs	r0, #16
   e18b8:	f7fa fd84 	bl	dc3c4 <malloc>
   e18bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   e18c0:	6268      	str	r0, [r5, #36]	; 0x24
   e18c2:	6006      	str	r6, [r0, #0]
   e18c4:	60c6      	str	r6, [r0, #12]
   e18c6:	b13c      	cbz	r4, e18d8 <_Bfree+0x2c>
   e18c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   e18ca:	6862      	ldr	r2, [r4, #4]
   e18cc:	68db      	ldr	r3, [r3, #12]
   e18ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e18d2:	6021      	str	r1, [r4, #0]
   e18d4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   e18d8:	bd70      	pop	{r4, r5, r6, pc}

000e18da <__multadd>:
   e18da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e18de:	690e      	ldr	r6, [r1, #16]
   e18e0:	4607      	mov	r7, r0
   e18e2:	4698      	mov	r8, r3
   e18e4:	460c      	mov	r4, r1
   e18e6:	f101 0014 	add.w	r0, r1, #20
   e18ea:	2300      	movs	r3, #0
   e18ec:	6805      	ldr	r5, [r0, #0]
   e18ee:	b2a9      	uxth	r1, r5
   e18f0:	fb02 8101 	mla	r1, r2, r1, r8
   e18f4:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   e18f8:	0c2d      	lsrs	r5, r5, #16
   e18fa:	fb02 c505 	mla	r5, r2, r5, ip
   e18fe:	b289      	uxth	r1, r1
   e1900:	3301      	adds	r3, #1
   e1902:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   e1906:	429e      	cmp	r6, r3
   e1908:	f840 1b04 	str.w	r1, [r0], #4
   e190c:	ea4f 4815 	mov.w	r8, r5, lsr #16
   e1910:	dcec      	bgt.n	e18ec <__multadd+0x12>
   e1912:	f1b8 0f00 	cmp.w	r8, #0
   e1916:	d01b      	beq.n	e1950 <__multadd+0x76>
   e1918:	68a3      	ldr	r3, [r4, #8]
   e191a:	42b3      	cmp	r3, r6
   e191c:	dc12      	bgt.n	e1944 <__multadd+0x6a>
   e191e:	6861      	ldr	r1, [r4, #4]
   e1920:	4638      	mov	r0, r7
   e1922:	3101      	adds	r1, #1
   e1924:	f7ff ff8e 	bl	e1844 <_Balloc>
   e1928:	6922      	ldr	r2, [r4, #16]
   e192a:	3202      	adds	r2, #2
   e192c:	f104 010c 	add.w	r1, r4, #12
   e1930:	4605      	mov	r5, r0
   e1932:	0092      	lsls	r2, r2, #2
   e1934:	300c      	adds	r0, #12
   e1936:	f7fe fb25 	bl	dff84 <memcpy>
   e193a:	4621      	mov	r1, r4
   e193c:	4638      	mov	r0, r7
   e193e:	f7ff ffb5 	bl	e18ac <_Bfree>
   e1942:	462c      	mov	r4, r5
   e1944:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   e1948:	3601      	adds	r6, #1
   e194a:	f8c3 8014 	str.w	r8, [r3, #20]
   e194e:	6126      	str	r6, [r4, #16]
   e1950:	4620      	mov	r0, r4
   e1952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e1956 <__s2b>:
   e1956:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e195a:	460c      	mov	r4, r1
   e195c:	4615      	mov	r5, r2
   e195e:	461f      	mov	r7, r3
   e1960:	2209      	movs	r2, #9
   e1962:	3308      	adds	r3, #8
   e1964:	4606      	mov	r6, r0
   e1966:	fb93 f3f2 	sdiv	r3, r3, r2
   e196a:	2100      	movs	r1, #0
   e196c:	2201      	movs	r2, #1
   e196e:	429a      	cmp	r2, r3
   e1970:	db20      	blt.n	e19b4 <__s2b+0x5e>
   e1972:	4630      	mov	r0, r6
   e1974:	f7ff ff66 	bl	e1844 <_Balloc>
   e1978:	9b08      	ldr	r3, [sp, #32]
   e197a:	6143      	str	r3, [r0, #20]
   e197c:	2d09      	cmp	r5, #9
   e197e:	f04f 0301 	mov.w	r3, #1
   e1982:	6103      	str	r3, [r0, #16]
   e1984:	dd19      	ble.n	e19ba <__s2b+0x64>
   e1986:	f104 0909 	add.w	r9, r4, #9
   e198a:	46c8      	mov	r8, r9
   e198c:	442c      	add	r4, r5
   e198e:	f818 3b01 	ldrb.w	r3, [r8], #1
   e1992:	4601      	mov	r1, r0
   e1994:	3b30      	subs	r3, #48	; 0x30
   e1996:	220a      	movs	r2, #10
   e1998:	4630      	mov	r0, r6
   e199a:	f7ff ff9e 	bl	e18da <__multadd>
   e199e:	45a0      	cmp	r8, r4
   e19a0:	d1f5      	bne.n	e198e <__s2b+0x38>
   e19a2:	f1a5 0408 	sub.w	r4, r5, #8
   e19a6:	444c      	add	r4, r9
   e19a8:	1b2d      	subs	r5, r5, r4
   e19aa:	1963      	adds	r3, r4, r5
   e19ac:	42bb      	cmp	r3, r7
   e19ae:	db07      	blt.n	e19c0 <__s2b+0x6a>
   e19b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e19b4:	0052      	lsls	r2, r2, #1
   e19b6:	3101      	adds	r1, #1
   e19b8:	e7d9      	b.n	e196e <__s2b+0x18>
   e19ba:	340a      	adds	r4, #10
   e19bc:	2509      	movs	r5, #9
   e19be:	e7f3      	b.n	e19a8 <__s2b+0x52>
   e19c0:	f814 3b01 	ldrb.w	r3, [r4], #1
   e19c4:	4601      	mov	r1, r0
   e19c6:	3b30      	subs	r3, #48	; 0x30
   e19c8:	220a      	movs	r2, #10
   e19ca:	4630      	mov	r0, r6
   e19cc:	f7ff ff85 	bl	e18da <__multadd>
   e19d0:	e7eb      	b.n	e19aa <__s2b+0x54>

000e19d2 <__hi0bits>:
   e19d2:	0c03      	lsrs	r3, r0, #16
   e19d4:	041b      	lsls	r3, r3, #16
   e19d6:	b9d3      	cbnz	r3, e1a0e <__hi0bits+0x3c>
   e19d8:	0400      	lsls	r0, r0, #16
   e19da:	2310      	movs	r3, #16
   e19dc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e19e0:	bf04      	itt	eq
   e19e2:	0200      	lsleq	r0, r0, #8
   e19e4:	3308      	addeq	r3, #8
   e19e6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e19ea:	bf04      	itt	eq
   e19ec:	0100      	lsleq	r0, r0, #4
   e19ee:	3304      	addeq	r3, #4
   e19f0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e19f4:	bf04      	itt	eq
   e19f6:	0080      	lsleq	r0, r0, #2
   e19f8:	3302      	addeq	r3, #2
   e19fa:	2800      	cmp	r0, #0
   e19fc:	db05      	blt.n	e1a0a <__hi0bits+0x38>
   e19fe:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   e1a02:	f103 0301 	add.w	r3, r3, #1
   e1a06:	bf08      	it	eq
   e1a08:	2320      	moveq	r3, #32
   e1a0a:	4618      	mov	r0, r3
   e1a0c:	4770      	bx	lr
   e1a0e:	2300      	movs	r3, #0
   e1a10:	e7e4      	b.n	e19dc <__hi0bits+0xa>

000e1a12 <__lo0bits>:
   e1a12:	6803      	ldr	r3, [r0, #0]
   e1a14:	f013 0207 	ands.w	r2, r3, #7
   e1a18:	4601      	mov	r1, r0
   e1a1a:	d00b      	beq.n	e1a34 <__lo0bits+0x22>
   e1a1c:	07da      	lsls	r2, r3, #31
   e1a1e:	d424      	bmi.n	e1a6a <__lo0bits+0x58>
   e1a20:	0798      	lsls	r0, r3, #30
   e1a22:	bf49      	itett	mi
   e1a24:	085b      	lsrmi	r3, r3, #1
   e1a26:	089b      	lsrpl	r3, r3, #2
   e1a28:	2001      	movmi	r0, #1
   e1a2a:	600b      	strmi	r3, [r1, #0]
   e1a2c:	bf5c      	itt	pl
   e1a2e:	600b      	strpl	r3, [r1, #0]
   e1a30:	2002      	movpl	r0, #2
   e1a32:	4770      	bx	lr
   e1a34:	b298      	uxth	r0, r3
   e1a36:	b9b0      	cbnz	r0, e1a66 <__lo0bits+0x54>
   e1a38:	0c1b      	lsrs	r3, r3, #16
   e1a3a:	2010      	movs	r0, #16
   e1a3c:	f013 0fff 	tst.w	r3, #255	; 0xff
   e1a40:	bf04      	itt	eq
   e1a42:	0a1b      	lsreq	r3, r3, #8
   e1a44:	3008      	addeq	r0, #8
   e1a46:	071a      	lsls	r2, r3, #28
   e1a48:	bf04      	itt	eq
   e1a4a:	091b      	lsreq	r3, r3, #4
   e1a4c:	3004      	addeq	r0, #4
   e1a4e:	079a      	lsls	r2, r3, #30
   e1a50:	bf04      	itt	eq
   e1a52:	089b      	lsreq	r3, r3, #2
   e1a54:	3002      	addeq	r0, #2
   e1a56:	07da      	lsls	r2, r3, #31
   e1a58:	d403      	bmi.n	e1a62 <__lo0bits+0x50>
   e1a5a:	085b      	lsrs	r3, r3, #1
   e1a5c:	f100 0001 	add.w	r0, r0, #1
   e1a60:	d005      	beq.n	e1a6e <__lo0bits+0x5c>
   e1a62:	600b      	str	r3, [r1, #0]
   e1a64:	4770      	bx	lr
   e1a66:	4610      	mov	r0, r2
   e1a68:	e7e8      	b.n	e1a3c <__lo0bits+0x2a>
   e1a6a:	2000      	movs	r0, #0
   e1a6c:	4770      	bx	lr
   e1a6e:	2020      	movs	r0, #32
   e1a70:	4770      	bx	lr

000e1a72 <__i2b>:
   e1a72:	b510      	push	{r4, lr}
   e1a74:	460c      	mov	r4, r1
   e1a76:	2101      	movs	r1, #1
   e1a78:	f7ff fee4 	bl	e1844 <_Balloc>
   e1a7c:	2201      	movs	r2, #1
   e1a7e:	6144      	str	r4, [r0, #20]
   e1a80:	6102      	str	r2, [r0, #16]
   e1a82:	bd10      	pop	{r4, pc}

000e1a84 <__multiply>:
   e1a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1a88:	4615      	mov	r5, r2
   e1a8a:	690a      	ldr	r2, [r1, #16]
   e1a8c:	692b      	ldr	r3, [r5, #16]
   e1a8e:	429a      	cmp	r2, r3
   e1a90:	bfb8      	it	lt
   e1a92:	460b      	movlt	r3, r1
   e1a94:	460c      	mov	r4, r1
   e1a96:	bfbc      	itt	lt
   e1a98:	462c      	movlt	r4, r5
   e1a9a:	461d      	movlt	r5, r3
   e1a9c:	6927      	ldr	r7, [r4, #16]
   e1a9e:	f8d5 9010 	ldr.w	r9, [r5, #16]
   e1aa2:	68a3      	ldr	r3, [r4, #8]
   e1aa4:	6861      	ldr	r1, [r4, #4]
   e1aa6:	eb07 0609 	add.w	r6, r7, r9
   e1aaa:	42b3      	cmp	r3, r6
   e1aac:	bfb8      	it	lt
   e1aae:	3101      	addlt	r1, #1
   e1ab0:	b085      	sub	sp, #20
   e1ab2:	f7ff fec7 	bl	e1844 <_Balloc>
   e1ab6:	f100 0114 	add.w	r1, r0, #20
   e1aba:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   e1abe:	460b      	mov	r3, r1
   e1ac0:	2200      	movs	r2, #0
   e1ac2:	4543      	cmp	r3, r8
   e1ac4:	d31d      	bcc.n	e1b02 <__multiply+0x7e>
   e1ac6:	f104 0314 	add.w	r3, r4, #20
   e1aca:	f105 0214 	add.w	r2, r5, #20
   e1ace:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   e1ad2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e1ad6:	9302      	str	r3, [sp, #8]
   e1ad8:	1b3b      	subs	r3, r7, r4
   e1ada:	3b15      	subs	r3, #21
   e1adc:	f023 0303 	bic.w	r3, r3, #3
   e1ae0:	3304      	adds	r3, #4
   e1ae2:	f104 0515 	add.w	r5, r4, #21
   e1ae6:	42af      	cmp	r7, r5
   e1ae8:	bf38      	it	cc
   e1aea:	2304      	movcc	r3, #4
   e1aec:	9301      	str	r3, [sp, #4]
   e1aee:	9b02      	ldr	r3, [sp, #8]
   e1af0:	9203      	str	r2, [sp, #12]
   e1af2:	4293      	cmp	r3, r2
   e1af4:	d808      	bhi.n	e1b08 <__multiply+0x84>
   e1af6:	2e00      	cmp	r6, #0
   e1af8:	dc5a      	bgt.n	e1bb0 <__multiply+0x12c>
   e1afa:	6106      	str	r6, [r0, #16]
   e1afc:	b005      	add	sp, #20
   e1afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1b02:	f843 2b04 	str.w	r2, [r3], #4
   e1b06:	e7dc      	b.n	e1ac2 <__multiply+0x3e>
   e1b08:	f8b2 a000 	ldrh.w	sl, [r2]
   e1b0c:	f1ba 0f00 	cmp.w	sl, #0
   e1b10:	d024      	beq.n	e1b5c <__multiply+0xd8>
   e1b12:	f104 0e14 	add.w	lr, r4, #20
   e1b16:	4689      	mov	r9, r1
   e1b18:	f04f 0c00 	mov.w	ip, #0
   e1b1c:	f85e 5b04 	ldr.w	r5, [lr], #4
   e1b20:	f8d9 b000 	ldr.w	fp, [r9]
   e1b24:	b2ab      	uxth	r3, r5
   e1b26:	fa1f fb8b 	uxth.w	fp, fp
   e1b2a:	fb0a b303 	mla	r3, sl, r3, fp
   e1b2e:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   e1b32:	f8d9 5000 	ldr.w	r5, [r9]
   e1b36:	4463      	add	r3, ip
   e1b38:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   e1b3c:	fb0a c50b 	mla	r5, sl, fp, ip
   e1b40:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   e1b44:	b29b      	uxth	r3, r3
   e1b46:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   e1b4a:	4577      	cmp	r7, lr
   e1b4c:	f849 3b04 	str.w	r3, [r9], #4
   e1b50:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   e1b54:	d8e2      	bhi.n	e1b1c <__multiply+0x98>
   e1b56:	9b01      	ldr	r3, [sp, #4]
   e1b58:	f841 c003 	str.w	ip, [r1, r3]
   e1b5c:	9b03      	ldr	r3, [sp, #12]
   e1b5e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   e1b62:	3204      	adds	r2, #4
   e1b64:	f1b9 0f00 	cmp.w	r9, #0
   e1b68:	d020      	beq.n	e1bac <__multiply+0x128>
   e1b6a:	680b      	ldr	r3, [r1, #0]
   e1b6c:	f104 0c14 	add.w	ip, r4, #20
   e1b70:	468e      	mov	lr, r1
   e1b72:	f04f 0a00 	mov.w	sl, #0
   e1b76:	f8bc 5000 	ldrh.w	r5, [ip]
   e1b7a:	f8be b002 	ldrh.w	fp, [lr, #2]
   e1b7e:	fb09 b505 	mla	r5, r9, r5, fp
   e1b82:	44aa      	add	sl, r5
   e1b84:	b29b      	uxth	r3, r3
   e1b86:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   e1b8a:	f84e 3b04 	str.w	r3, [lr], #4
   e1b8e:	f85c 3b04 	ldr.w	r3, [ip], #4
   e1b92:	f8be 5000 	ldrh.w	r5, [lr]
   e1b96:	0c1b      	lsrs	r3, r3, #16
   e1b98:	fb09 5303 	mla	r3, r9, r3, r5
   e1b9c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   e1ba0:	4567      	cmp	r7, ip
   e1ba2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   e1ba6:	d8e6      	bhi.n	e1b76 <__multiply+0xf2>
   e1ba8:	9d01      	ldr	r5, [sp, #4]
   e1baa:	514b      	str	r3, [r1, r5]
   e1bac:	3104      	adds	r1, #4
   e1bae:	e79e      	b.n	e1aee <__multiply+0x6a>
   e1bb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   e1bb4:	2b00      	cmp	r3, #0
   e1bb6:	d1a0      	bne.n	e1afa <__multiply+0x76>
   e1bb8:	3e01      	subs	r6, #1
   e1bba:	e79c      	b.n	e1af6 <__multiply+0x72>

000e1bbc <__pow5mult>:
   e1bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e1bc0:	4615      	mov	r5, r2
   e1bc2:	f012 0203 	ands.w	r2, r2, #3
   e1bc6:	4606      	mov	r6, r0
   e1bc8:	460f      	mov	r7, r1
   e1bca:	d007      	beq.n	e1bdc <__pow5mult+0x20>
   e1bcc:	4c21      	ldr	r4, [pc, #132]	; (e1c54 <__pow5mult+0x98>)
   e1bce:	3a01      	subs	r2, #1
   e1bd0:	2300      	movs	r3, #0
   e1bd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e1bd6:	f7ff fe80 	bl	e18da <__multadd>
   e1bda:	4607      	mov	r7, r0
   e1bdc:	10ad      	asrs	r5, r5, #2
   e1bde:	d035      	beq.n	e1c4c <__pow5mult+0x90>
   e1be0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e1be2:	b93c      	cbnz	r4, e1bf4 <__pow5mult+0x38>
   e1be4:	2010      	movs	r0, #16
   e1be6:	f7fa fbed 	bl	dc3c4 <malloc>
   e1bea:	e9c0 4401 	strd	r4, r4, [r0, #4]
   e1bee:	6270      	str	r0, [r6, #36]	; 0x24
   e1bf0:	6004      	str	r4, [r0, #0]
   e1bf2:	60c4      	str	r4, [r0, #12]
   e1bf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e1bf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e1bfc:	b94c      	cbnz	r4, e1c12 <__pow5mult+0x56>
   e1bfe:	f240 2171 	movw	r1, #625	; 0x271
   e1c02:	4630      	mov	r0, r6
   e1c04:	f7ff ff35 	bl	e1a72 <__i2b>
   e1c08:	2300      	movs	r3, #0
   e1c0a:	f8c8 0008 	str.w	r0, [r8, #8]
   e1c0e:	4604      	mov	r4, r0
   e1c10:	6003      	str	r3, [r0, #0]
   e1c12:	f04f 0900 	mov.w	r9, #0
   e1c16:	07eb      	lsls	r3, r5, #31
   e1c18:	d50a      	bpl.n	e1c30 <__pow5mult+0x74>
   e1c1a:	4639      	mov	r1, r7
   e1c1c:	4622      	mov	r2, r4
   e1c1e:	4630      	mov	r0, r6
   e1c20:	f7ff ff30 	bl	e1a84 <__multiply>
   e1c24:	4639      	mov	r1, r7
   e1c26:	4680      	mov	r8, r0
   e1c28:	4630      	mov	r0, r6
   e1c2a:	f7ff fe3f 	bl	e18ac <_Bfree>
   e1c2e:	4647      	mov	r7, r8
   e1c30:	106d      	asrs	r5, r5, #1
   e1c32:	d00b      	beq.n	e1c4c <__pow5mult+0x90>
   e1c34:	6820      	ldr	r0, [r4, #0]
   e1c36:	b938      	cbnz	r0, e1c48 <__pow5mult+0x8c>
   e1c38:	4622      	mov	r2, r4
   e1c3a:	4621      	mov	r1, r4
   e1c3c:	4630      	mov	r0, r6
   e1c3e:	f7ff ff21 	bl	e1a84 <__multiply>
   e1c42:	6020      	str	r0, [r4, #0]
   e1c44:	f8c0 9000 	str.w	r9, [r0]
   e1c48:	4604      	mov	r4, r0
   e1c4a:	e7e4      	b.n	e1c16 <__pow5mult+0x5a>
   e1c4c:	4638      	mov	r0, r7
   e1c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e1c52:	bf00      	nop
   e1c54:	000e31e0 	.word	0x000e31e0

000e1c58 <__lshift>:
   e1c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e1c5c:	460c      	mov	r4, r1
   e1c5e:	6849      	ldr	r1, [r1, #4]
   e1c60:	6923      	ldr	r3, [r4, #16]
   e1c62:	eb03 1862 	add.w	r8, r3, r2, asr #5
   e1c66:	68a3      	ldr	r3, [r4, #8]
   e1c68:	4607      	mov	r7, r0
   e1c6a:	4691      	mov	r9, r2
   e1c6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e1c70:	f108 0601 	add.w	r6, r8, #1
   e1c74:	42b3      	cmp	r3, r6
   e1c76:	db3f      	blt.n	e1cf8 <__lshift+0xa0>
   e1c78:	4638      	mov	r0, r7
   e1c7a:	f7ff fde3 	bl	e1844 <_Balloc>
   e1c7e:	2300      	movs	r3, #0
   e1c80:	4605      	mov	r5, r0
   e1c82:	f100 0114 	add.w	r1, r0, #20
   e1c86:	f100 0210 	add.w	r2, r0, #16
   e1c8a:	4618      	mov	r0, r3
   e1c8c:	4553      	cmp	r3, sl
   e1c8e:	db36      	blt.n	e1cfe <__lshift+0xa6>
   e1c90:	6920      	ldr	r0, [r4, #16]
   e1c92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   e1c96:	f104 0314 	add.w	r3, r4, #20
   e1c9a:	f019 091f 	ands.w	r9, r9, #31
   e1c9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   e1ca2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   e1ca6:	d02e      	beq.n	e1d06 <__lshift+0xae>
   e1ca8:	f1c9 0e20 	rsb	lr, r9, #32
   e1cac:	468a      	mov	sl, r1
   e1cae:	2200      	movs	r2, #0
   e1cb0:	6818      	ldr	r0, [r3, #0]
   e1cb2:	fa00 f009 	lsl.w	r0, r0, r9
   e1cb6:	4302      	orrs	r2, r0
   e1cb8:	f84a 2b04 	str.w	r2, [sl], #4
   e1cbc:	f853 2b04 	ldr.w	r2, [r3], #4
   e1cc0:	459c      	cmp	ip, r3
   e1cc2:	fa22 f20e 	lsr.w	r2, r2, lr
   e1cc6:	d8f3      	bhi.n	e1cb0 <__lshift+0x58>
   e1cc8:	ebac 0304 	sub.w	r3, ip, r4
   e1ccc:	3b15      	subs	r3, #21
   e1cce:	f023 0303 	bic.w	r3, r3, #3
   e1cd2:	3304      	adds	r3, #4
   e1cd4:	f104 0015 	add.w	r0, r4, #21
   e1cd8:	4560      	cmp	r0, ip
   e1cda:	bf88      	it	hi
   e1cdc:	2304      	movhi	r3, #4
   e1cde:	50ca      	str	r2, [r1, r3]
   e1ce0:	b10a      	cbz	r2, e1ce6 <__lshift+0x8e>
   e1ce2:	f108 0602 	add.w	r6, r8, #2
   e1ce6:	3e01      	subs	r6, #1
   e1ce8:	4638      	mov	r0, r7
   e1cea:	612e      	str	r6, [r5, #16]
   e1cec:	4621      	mov	r1, r4
   e1cee:	f7ff fddd 	bl	e18ac <_Bfree>
   e1cf2:	4628      	mov	r0, r5
   e1cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1cf8:	3101      	adds	r1, #1
   e1cfa:	005b      	lsls	r3, r3, #1
   e1cfc:	e7ba      	b.n	e1c74 <__lshift+0x1c>
   e1cfe:	f842 0f04 	str.w	r0, [r2, #4]!
   e1d02:	3301      	adds	r3, #1
   e1d04:	e7c2      	b.n	e1c8c <__lshift+0x34>
   e1d06:	3904      	subs	r1, #4
   e1d08:	f853 2b04 	ldr.w	r2, [r3], #4
   e1d0c:	f841 2f04 	str.w	r2, [r1, #4]!
   e1d10:	459c      	cmp	ip, r3
   e1d12:	d8f9      	bhi.n	e1d08 <__lshift+0xb0>
   e1d14:	e7e7      	b.n	e1ce6 <__lshift+0x8e>

000e1d16 <__mcmp>:
   e1d16:	b530      	push	{r4, r5, lr}
   e1d18:	6902      	ldr	r2, [r0, #16]
   e1d1a:	690c      	ldr	r4, [r1, #16]
   e1d1c:	1b12      	subs	r2, r2, r4
   e1d1e:	d10e      	bne.n	e1d3e <__mcmp+0x28>
   e1d20:	f100 0314 	add.w	r3, r0, #20
   e1d24:	3114      	adds	r1, #20
   e1d26:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   e1d2a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   e1d2e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   e1d32:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   e1d36:	42a5      	cmp	r5, r4
   e1d38:	d003      	beq.n	e1d42 <__mcmp+0x2c>
   e1d3a:	d305      	bcc.n	e1d48 <__mcmp+0x32>
   e1d3c:	2201      	movs	r2, #1
   e1d3e:	4610      	mov	r0, r2
   e1d40:	bd30      	pop	{r4, r5, pc}
   e1d42:	4283      	cmp	r3, r0
   e1d44:	d3f3      	bcc.n	e1d2e <__mcmp+0x18>
   e1d46:	e7fa      	b.n	e1d3e <__mcmp+0x28>
   e1d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e1d4c:	e7f7      	b.n	e1d3e <__mcmp+0x28>

000e1d4e <__mdiff>:
   e1d4e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1d52:	460c      	mov	r4, r1
   e1d54:	4606      	mov	r6, r0
   e1d56:	4611      	mov	r1, r2
   e1d58:	4620      	mov	r0, r4
   e1d5a:	4617      	mov	r7, r2
   e1d5c:	f7ff ffdb 	bl	e1d16 <__mcmp>
   e1d60:	1e05      	subs	r5, r0, #0
   e1d62:	d108      	bne.n	e1d76 <__mdiff+0x28>
   e1d64:	4629      	mov	r1, r5
   e1d66:	4630      	mov	r0, r6
   e1d68:	f7ff fd6c 	bl	e1844 <_Balloc>
   e1d6c:	2301      	movs	r3, #1
   e1d6e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   e1d72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1d76:	bfa4      	itt	ge
   e1d78:	463b      	movge	r3, r7
   e1d7a:	4627      	movge	r7, r4
   e1d7c:	4630      	mov	r0, r6
   e1d7e:	6879      	ldr	r1, [r7, #4]
   e1d80:	bfa6      	itte	ge
   e1d82:	461c      	movge	r4, r3
   e1d84:	2500      	movge	r5, #0
   e1d86:	2501      	movlt	r5, #1
   e1d88:	f7ff fd5c 	bl	e1844 <_Balloc>
   e1d8c:	693e      	ldr	r6, [r7, #16]
   e1d8e:	60c5      	str	r5, [r0, #12]
   e1d90:	6925      	ldr	r5, [r4, #16]
   e1d92:	f107 0114 	add.w	r1, r7, #20
   e1d96:	f104 0914 	add.w	r9, r4, #20
   e1d9a:	f100 0e14 	add.w	lr, r0, #20
   e1d9e:	f107 0210 	add.w	r2, r7, #16
   e1da2:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   e1da6:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   e1daa:	46f2      	mov	sl, lr
   e1dac:	2700      	movs	r7, #0
   e1dae:	f859 3b04 	ldr.w	r3, [r9], #4
   e1db2:	f852 bf04 	ldr.w	fp, [r2, #4]!
   e1db6:	fa1f f883 	uxth.w	r8, r3
   e1dba:	fa17 f78b 	uxtah	r7, r7, fp
   e1dbe:	0c1b      	lsrs	r3, r3, #16
   e1dc0:	eba7 0808 	sub.w	r8, r7, r8
   e1dc4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   e1dc8:	eb03 4328 	add.w	r3, r3, r8, asr #16
   e1dcc:	fa1f f888 	uxth.w	r8, r8
   e1dd0:	141f      	asrs	r7, r3, #16
   e1dd2:	454d      	cmp	r5, r9
   e1dd4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   e1dd8:	f84a 3b04 	str.w	r3, [sl], #4
   e1ddc:	d8e7      	bhi.n	e1dae <__mdiff+0x60>
   e1dde:	1b2b      	subs	r3, r5, r4
   e1de0:	3b15      	subs	r3, #21
   e1de2:	f023 0303 	bic.w	r3, r3, #3
   e1de6:	3304      	adds	r3, #4
   e1de8:	3415      	adds	r4, #21
   e1dea:	42a5      	cmp	r5, r4
   e1dec:	bf38      	it	cc
   e1dee:	2304      	movcc	r3, #4
   e1df0:	4419      	add	r1, r3
   e1df2:	4473      	add	r3, lr
   e1df4:	469e      	mov	lr, r3
   e1df6:	460d      	mov	r5, r1
   e1df8:	4565      	cmp	r5, ip
   e1dfa:	d30e      	bcc.n	e1e1a <__mdiff+0xcc>
   e1dfc:	f10c 0203 	add.w	r2, ip, #3
   e1e00:	1a52      	subs	r2, r2, r1
   e1e02:	f022 0203 	bic.w	r2, r2, #3
   e1e06:	3903      	subs	r1, #3
   e1e08:	458c      	cmp	ip, r1
   e1e0a:	bf38      	it	cc
   e1e0c:	2200      	movcc	r2, #0
   e1e0e:	441a      	add	r2, r3
   e1e10:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   e1e14:	b17b      	cbz	r3, e1e36 <__mdiff+0xe8>
   e1e16:	6106      	str	r6, [r0, #16]
   e1e18:	e7ab      	b.n	e1d72 <__mdiff+0x24>
   e1e1a:	f855 8b04 	ldr.w	r8, [r5], #4
   e1e1e:	fa17 f488 	uxtah	r4, r7, r8
   e1e22:	1422      	asrs	r2, r4, #16
   e1e24:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   e1e28:	b2a4      	uxth	r4, r4
   e1e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   e1e2e:	f84e 4b04 	str.w	r4, [lr], #4
   e1e32:	1417      	asrs	r7, r2, #16
   e1e34:	e7e0      	b.n	e1df8 <__mdiff+0xaa>
   e1e36:	3e01      	subs	r6, #1
   e1e38:	e7ea      	b.n	e1e10 <__mdiff+0xc2>
	...

000e1e3c <__ulp>:
   e1e3c:	b082      	sub	sp, #8
   e1e3e:	ed8d 0b00 	vstr	d0, [sp]
   e1e42:	9b01      	ldr	r3, [sp, #4]
   e1e44:	4912      	ldr	r1, [pc, #72]	; (e1e90 <__ulp+0x54>)
   e1e46:	4019      	ands	r1, r3
   e1e48:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   e1e4c:	2900      	cmp	r1, #0
   e1e4e:	dd05      	ble.n	e1e5c <__ulp+0x20>
   e1e50:	2200      	movs	r2, #0
   e1e52:	460b      	mov	r3, r1
   e1e54:	ec43 2b10 	vmov	d0, r2, r3
   e1e58:	b002      	add	sp, #8
   e1e5a:	4770      	bx	lr
   e1e5c:	4249      	negs	r1, r1
   e1e5e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   e1e62:	ea4f 5021 	mov.w	r0, r1, asr #20
   e1e66:	f04f 0200 	mov.w	r2, #0
   e1e6a:	f04f 0300 	mov.w	r3, #0
   e1e6e:	da04      	bge.n	e1e7a <__ulp+0x3e>
   e1e70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   e1e74:	fa41 f300 	asr.w	r3, r1, r0
   e1e78:	e7ec      	b.n	e1e54 <__ulp+0x18>
   e1e7a:	f1a0 0114 	sub.w	r1, r0, #20
   e1e7e:	291e      	cmp	r1, #30
   e1e80:	bfda      	itte	le
   e1e82:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   e1e86:	fa20 f101 	lsrle.w	r1, r0, r1
   e1e8a:	2101      	movgt	r1, #1
   e1e8c:	460a      	mov	r2, r1
   e1e8e:	e7e1      	b.n	e1e54 <__ulp+0x18>
   e1e90:	7ff00000 	.word	0x7ff00000

000e1e94 <__b2d>:
   e1e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e1e96:	6905      	ldr	r5, [r0, #16]
   e1e98:	f100 0714 	add.w	r7, r0, #20
   e1e9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   e1ea0:	1f2e      	subs	r6, r5, #4
   e1ea2:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e1ea6:	4620      	mov	r0, r4
   e1ea8:	f7ff fd93 	bl	e19d2 <__hi0bits>
   e1eac:	f1c0 0320 	rsb	r3, r0, #32
   e1eb0:	280a      	cmp	r0, #10
   e1eb2:	f8df c07c 	ldr.w	ip, [pc, #124]	; e1f30 <__b2d+0x9c>
   e1eb6:	600b      	str	r3, [r1, #0]
   e1eb8:	dc14      	bgt.n	e1ee4 <__b2d+0x50>
   e1eba:	f1c0 0e0b 	rsb	lr, r0, #11
   e1ebe:	fa24 f10e 	lsr.w	r1, r4, lr
   e1ec2:	42b7      	cmp	r7, r6
   e1ec4:	ea41 030c 	orr.w	r3, r1, ip
   e1ec8:	bf34      	ite	cc
   e1eca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e1ece:	2100      	movcs	r1, #0
   e1ed0:	3015      	adds	r0, #21
   e1ed2:	fa04 f000 	lsl.w	r0, r4, r0
   e1ed6:	fa21 f10e 	lsr.w	r1, r1, lr
   e1eda:	ea40 0201 	orr.w	r2, r0, r1
   e1ede:	ec43 2b10 	vmov	d0, r2, r3
   e1ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e1ee4:	42b7      	cmp	r7, r6
   e1ee6:	bf3a      	itte	cc
   e1ee8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e1eec:	f1a5 0608 	subcc.w	r6, r5, #8
   e1ef0:	2100      	movcs	r1, #0
   e1ef2:	380b      	subs	r0, #11
   e1ef4:	d017      	beq.n	e1f26 <__b2d+0x92>
   e1ef6:	f1c0 0c20 	rsb	ip, r0, #32
   e1efa:	fa04 f500 	lsl.w	r5, r4, r0
   e1efe:	42be      	cmp	r6, r7
   e1f00:	fa21 f40c 	lsr.w	r4, r1, ip
   e1f04:	ea45 0504 	orr.w	r5, r5, r4
   e1f08:	bf8c      	ite	hi
   e1f0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   e1f0e:	2400      	movls	r4, #0
   e1f10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   e1f14:	fa01 f000 	lsl.w	r0, r1, r0
   e1f18:	fa24 f40c 	lsr.w	r4, r4, ip
   e1f1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e1f20:	ea40 0204 	orr.w	r2, r0, r4
   e1f24:	e7db      	b.n	e1ede <__b2d+0x4a>
   e1f26:	ea44 030c 	orr.w	r3, r4, ip
   e1f2a:	460a      	mov	r2, r1
   e1f2c:	e7d7      	b.n	e1ede <__b2d+0x4a>
   e1f2e:	bf00      	nop
   e1f30:	3ff00000 	.word	0x3ff00000

000e1f34 <__d2b>:
   e1f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e1f38:	4689      	mov	r9, r1
   e1f3a:	2101      	movs	r1, #1
   e1f3c:	ec57 6b10 	vmov	r6, r7, d0
   e1f40:	4690      	mov	r8, r2
   e1f42:	f7ff fc7f 	bl	e1844 <_Balloc>
   e1f46:	f3c7 550a 	ubfx	r5, r7, #20, #11
   e1f4a:	4604      	mov	r4, r0
   e1f4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   e1f50:	bb35      	cbnz	r5, e1fa0 <__d2b+0x6c>
   e1f52:	2e00      	cmp	r6, #0
   e1f54:	9301      	str	r3, [sp, #4]
   e1f56:	d028      	beq.n	e1faa <__d2b+0x76>
   e1f58:	4668      	mov	r0, sp
   e1f5a:	9600      	str	r6, [sp, #0]
   e1f5c:	f7ff fd59 	bl	e1a12 <__lo0bits>
   e1f60:	9900      	ldr	r1, [sp, #0]
   e1f62:	b300      	cbz	r0, e1fa6 <__d2b+0x72>
   e1f64:	9a01      	ldr	r2, [sp, #4]
   e1f66:	f1c0 0320 	rsb	r3, r0, #32
   e1f6a:	fa02 f303 	lsl.w	r3, r2, r3
   e1f6e:	430b      	orrs	r3, r1
   e1f70:	40c2      	lsrs	r2, r0
   e1f72:	6163      	str	r3, [r4, #20]
   e1f74:	9201      	str	r2, [sp, #4]
   e1f76:	9b01      	ldr	r3, [sp, #4]
   e1f78:	61a3      	str	r3, [r4, #24]
   e1f7a:	2b00      	cmp	r3, #0
   e1f7c:	bf14      	ite	ne
   e1f7e:	2202      	movne	r2, #2
   e1f80:	2201      	moveq	r2, #1
   e1f82:	6122      	str	r2, [r4, #16]
   e1f84:	b1d5      	cbz	r5, e1fbc <__d2b+0x88>
   e1f86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   e1f8a:	4405      	add	r5, r0
   e1f8c:	f8c9 5000 	str.w	r5, [r9]
   e1f90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e1f94:	f8c8 0000 	str.w	r0, [r8]
   e1f98:	4620      	mov	r0, r4
   e1f9a:	b003      	add	sp, #12
   e1f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e1fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e1fa4:	e7d5      	b.n	e1f52 <__d2b+0x1e>
   e1fa6:	6161      	str	r1, [r4, #20]
   e1fa8:	e7e5      	b.n	e1f76 <__d2b+0x42>
   e1faa:	a801      	add	r0, sp, #4
   e1fac:	f7ff fd31 	bl	e1a12 <__lo0bits>
   e1fb0:	9b01      	ldr	r3, [sp, #4]
   e1fb2:	6163      	str	r3, [r4, #20]
   e1fb4:	2201      	movs	r2, #1
   e1fb6:	6122      	str	r2, [r4, #16]
   e1fb8:	3020      	adds	r0, #32
   e1fba:	e7e3      	b.n	e1f84 <__d2b+0x50>
   e1fbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   e1fc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e1fc4:	f8c9 0000 	str.w	r0, [r9]
   e1fc8:	6918      	ldr	r0, [r3, #16]
   e1fca:	f7ff fd02 	bl	e19d2 <__hi0bits>
   e1fce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   e1fd2:	e7df      	b.n	e1f94 <__d2b+0x60>

000e1fd4 <__ratio>:
   e1fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1fd8:	4688      	mov	r8, r1
   e1fda:	4669      	mov	r1, sp
   e1fdc:	4681      	mov	r9, r0
   e1fde:	f7ff ff59 	bl	e1e94 <__b2d>
   e1fe2:	a901      	add	r1, sp, #4
   e1fe4:	4640      	mov	r0, r8
   e1fe6:	ec55 4b10 	vmov	r4, r5, d0
   e1fea:	f7ff ff53 	bl	e1e94 <__b2d>
   e1fee:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e1ff2:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e1ff6:	eba3 0c02 	sub.w	ip, r3, r2
   e1ffa:	e9dd 3200 	ldrd	r3, r2, [sp]
   e1ffe:	1a9b      	subs	r3, r3, r2
   e2000:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   e2004:	ec51 0b10 	vmov	r0, r1, d0
   e2008:	2b00      	cmp	r3, #0
   e200a:	bfd6      	itet	le
   e200c:	460a      	movle	r2, r1
   e200e:	462a      	movgt	r2, r5
   e2010:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   e2014:	468b      	mov	fp, r1
   e2016:	462f      	mov	r7, r5
   e2018:	bfd4      	ite	le
   e201a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   e201e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   e2022:	4620      	mov	r0, r4
   e2024:	ee10 2a10 	vmov	r2, s0
   e2028:	465b      	mov	r3, fp
   e202a:	4639      	mov	r1, r7
   e202c:	f7fd fd96 	bl	dfb5c <__aeabi_ddiv>
   e2030:	ec41 0b10 	vmov	d0, r0, r1
   e2034:	b003      	add	sp, #12
   e2036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e203a <__copybits>:
   e203a:	3901      	subs	r1, #1
   e203c:	b570      	push	{r4, r5, r6, lr}
   e203e:	1149      	asrs	r1, r1, #5
   e2040:	6914      	ldr	r4, [r2, #16]
   e2042:	3101      	adds	r1, #1
   e2044:	f102 0314 	add.w	r3, r2, #20
   e2048:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e204c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e2050:	1f05      	subs	r5, r0, #4
   e2052:	42a3      	cmp	r3, r4
   e2054:	d30c      	bcc.n	e2070 <__copybits+0x36>
   e2056:	1aa3      	subs	r3, r4, r2
   e2058:	3b11      	subs	r3, #17
   e205a:	f023 0303 	bic.w	r3, r3, #3
   e205e:	3211      	adds	r2, #17
   e2060:	42a2      	cmp	r2, r4
   e2062:	bf88      	it	hi
   e2064:	2300      	movhi	r3, #0
   e2066:	4418      	add	r0, r3
   e2068:	2300      	movs	r3, #0
   e206a:	4288      	cmp	r0, r1
   e206c:	d305      	bcc.n	e207a <__copybits+0x40>
   e206e:	bd70      	pop	{r4, r5, r6, pc}
   e2070:	f853 6b04 	ldr.w	r6, [r3], #4
   e2074:	f845 6f04 	str.w	r6, [r5, #4]!
   e2078:	e7eb      	b.n	e2052 <__copybits+0x18>
   e207a:	f840 3b04 	str.w	r3, [r0], #4
   e207e:	e7f4      	b.n	e206a <__copybits+0x30>

000e2080 <__any_on>:
   e2080:	f100 0214 	add.w	r2, r0, #20
   e2084:	6900      	ldr	r0, [r0, #16]
   e2086:	114b      	asrs	r3, r1, #5
   e2088:	4298      	cmp	r0, r3
   e208a:	b510      	push	{r4, lr}
   e208c:	db11      	blt.n	e20b2 <__any_on+0x32>
   e208e:	dd0a      	ble.n	e20a6 <__any_on+0x26>
   e2090:	f011 011f 	ands.w	r1, r1, #31
   e2094:	d007      	beq.n	e20a6 <__any_on+0x26>
   e2096:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e209a:	fa24 f001 	lsr.w	r0, r4, r1
   e209e:	fa00 f101 	lsl.w	r1, r0, r1
   e20a2:	428c      	cmp	r4, r1
   e20a4:	d10b      	bne.n	e20be <__any_on+0x3e>
   e20a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e20aa:	4293      	cmp	r3, r2
   e20ac:	d803      	bhi.n	e20b6 <__any_on+0x36>
   e20ae:	2000      	movs	r0, #0
   e20b0:	bd10      	pop	{r4, pc}
   e20b2:	4603      	mov	r3, r0
   e20b4:	e7f7      	b.n	e20a6 <__any_on+0x26>
   e20b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e20ba:	2900      	cmp	r1, #0
   e20bc:	d0f5      	beq.n	e20aa <__any_on+0x2a>
   e20be:	2001      	movs	r0, #1
   e20c0:	e7f6      	b.n	e20b0 <__any_on+0x30>

000e20c2 <_calloc_r>:
   e20c2:	b513      	push	{r0, r1, r4, lr}
   e20c4:	434a      	muls	r2, r1
   e20c6:	4611      	mov	r1, r2
   e20c8:	9201      	str	r2, [sp, #4]
   e20ca:	f7fa f9bb 	bl	dc444 <_malloc_r>
   e20ce:	4604      	mov	r4, r0
   e20d0:	b118      	cbz	r0, e20da <_calloc_r+0x18>
   e20d2:	9a01      	ldr	r2, [sp, #4]
   e20d4:	2100      	movs	r1, #0
   e20d6:	f7fd ff7d 	bl	dffd4 <memset>
   e20da:	4620      	mov	r0, r4
   e20dc:	b002      	add	sp, #8
   e20de:	bd10      	pop	{r4, pc}

000e20e0 <_open_r>:
   e20e0:	b538      	push	{r3, r4, r5, lr}
   e20e2:	4d07      	ldr	r5, [pc, #28]	; (e2100 <_open_r+0x20>)
   e20e4:	4604      	mov	r4, r0
   e20e6:	4608      	mov	r0, r1
   e20e8:	4611      	mov	r1, r2
   e20ea:	2200      	movs	r2, #0
   e20ec:	602a      	str	r2, [r5, #0]
   e20ee:	461a      	mov	r2, r3
   e20f0:	f7f9 ff10 	bl	dbf14 <_open>
   e20f4:	1c43      	adds	r3, r0, #1
   e20f6:	d102      	bne.n	e20fe <_open_r+0x1e>
   e20f8:	682b      	ldr	r3, [r5, #0]
   e20fa:	b103      	cbz	r3, e20fe <_open_r+0x1e>
   e20fc:	6023      	str	r3, [r4, #0]
   e20fe:	bd38      	pop	{r3, r4, r5, pc}
   e2100:	2003e7ec 	.word	0x2003e7ec

000e2104 <_read_r>:
   e2104:	b538      	push	{r3, r4, r5, lr}
   e2106:	4d07      	ldr	r5, [pc, #28]	; (e2124 <_read_r+0x20>)
   e2108:	4604      	mov	r4, r0
   e210a:	4608      	mov	r0, r1
   e210c:	4611      	mov	r1, r2
   e210e:	2200      	movs	r2, #0
   e2110:	602a      	str	r2, [r5, #0]
   e2112:	461a      	mov	r2, r3
   e2114:	f7f9 ff0e 	bl	dbf34 <_read>
   e2118:	1c43      	adds	r3, r0, #1
   e211a:	d102      	bne.n	e2122 <_read_r+0x1e>
   e211c:	682b      	ldr	r3, [r5, #0]
   e211e:	b103      	cbz	r3, e2122 <_read_r+0x1e>
   e2120:	6023      	str	r3, [r4, #0]
   e2122:	bd38      	pop	{r3, r4, r5, pc}
   e2124:	2003e7ec 	.word	0x2003e7ec

000e2128 <nan>:
   e2128:	ed9f 0b01 	vldr	d0, [pc, #4]	; e2130 <nan+0x8>
   e212c:	4770      	bx	lr
   e212e:	bf00      	nop
   e2130:	00000000 	.word	0x00000000
   e2134:	7ff80000 	.word	0x7ff80000

000e2138 <__ascii_wctomb>:
   e2138:	b149      	cbz	r1, e214e <__ascii_wctomb+0x16>
   e213a:	2aff      	cmp	r2, #255	; 0xff
   e213c:	bf85      	ittet	hi
   e213e:	238a      	movhi	r3, #138	; 0x8a
   e2140:	6003      	strhi	r3, [r0, #0]
   e2142:	700a      	strbls	r2, [r1, #0]
   e2144:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   e2148:	bf98      	it	ls
   e214a:	2001      	movls	r0, #1
   e214c:	4770      	bx	lr
   e214e:	4608      	mov	r0, r1
   e2150:	4770      	bx	lr
	...

000e2154 <__aeabi_d2lz>:
   e2154:	b538      	push	{r3, r4, r5, lr}
   e2156:	2200      	movs	r2, #0
   e2158:	2300      	movs	r3, #0
   e215a:	4604      	mov	r4, r0
   e215c:	460d      	mov	r5, r1
   e215e:	f7fd fe45 	bl	dfdec <__aeabi_dcmplt>
   e2162:	b928      	cbnz	r0, e2170 <__aeabi_d2lz+0x1c>
   e2164:	4620      	mov	r0, r4
   e2166:	4629      	mov	r1, r5
   e2168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e216c:	f7fd beae 	b.w	dfecc <__aeabi_d2ulz>
   e2170:	4620      	mov	r0, r4
   e2172:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   e2176:	f7fd fea9 	bl	dfecc <__aeabi_d2ulz>
   e217a:	4240      	negs	r0, r0
   e217c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e2180:	bd38      	pop	{r3, r4, r5, pc}
   e2182:	bf00      	nop

000e2184 <dynalib_user>:
   e2184:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   e2194:	0000 0000 3030 303a 3a30 3030 3200 3a33     ....00:00:00.23:
   e21a4:	3935 353a 0039 3a74 2520 2e34 6632 5400     59:59.t: %4.2f.T
   e21b4:	7365 0074 6576 7463 726f 3a3a 4d5f 725f     est.vector::_M_r
   e21c4:	6165 6c6c 636f 695f 736e 7265 0074 7061     ealloc_insert.ap
   e21d4:	2e70 7570 7162 6100 7070 732e 7165 6966     p.pubq.app.seqfi
   e21e4:	656c 7400 6d65 4370 5300 7465 4d20 646f     le.tempC.Set Mod
   e21f4:	0065 6553 2074 6157 656b 5420 6d69 0065     e.Set Wake Time.
   e2204:	6553 2074 6c53 6565 2070 6954 656d 4500     Set Sleep Time.E
   e2214:	5453 4535 5444 4d2c 2e33 2e32 2f30 3230     ST5EDT,M3.2.0/02
   e2224:	303a 3a30 3030 4d2c 3131 312e 302e 302f     :00:00,M11.1.0/0
   e2234:	3a32 3030 303a 0030 752f 7273 652f 6576     2:00:00./usr/eve
   e2244:	746e 2e73 7874 0074 6865 6600 6c75 006c     nts.txt.eh.full.
   e2254:	3930 303a 3a30 3030 3100 3a36 3935 353a     09:00:00.16:59:5
   e2264:	0039 0000                                   9...

000e2268 <_ZTVN5spark10LogHandlerE>:
	...
   e2278:	40a9 000d 40cd 000d                         .@...@..

000e2280 <_ZTVN5spark16SerialLogHandlerE>:
	...
   e2288:	4259 000d 428d 000d e2c5 000d 40cf 000d     YB...B.......@..
   e2298:	704f 6e65 7420 6d69 2065 6573 2074 6f74     Open time set to
   e22a8:	2520 0069 6c43 736f 6e69 2067 6974 656d      %i.Closing time
   e22b8:	7320 7465 7420 206f 6925 4300 656c 7261      set to %i.Clear
   e22c8:	6465 4c20 776f 5020 776f 7265 4d20 646f     ed Low Power Mod
   e22d8:	0065 3425 322e 2066 0043 6166 6c69 6465     e.%4.2f C.failed
   e22e8:	7420 206f 6572 6461 7220 6765 6441 7264      to read regAddr
   e22f8:	253d 3230 2078 6f63 6e75 3d74 7525 6600     =%02x count=%u.f
   e2308:	6961 656c 2064 6f74 7220 6165 2064 6572     ailed to read re
   e2318:	4167 6464 3d72 3025 7832 7320 6174 3d74     gAddr=%02x stat=
   e2328:	6425 4600 554f 2054 6964 2064 6f6e 2074     %d.FOUT did not 
   e2338:	6f67 4820 4749 0048 6f6e 2074 6564 6574     go HIGH.not dete
   e2348:	7463 6465 6600 6961 656c 2064 6f74 7720     cted.failed to w
   e2358:	6972 6574 7220 6765 6441 7264 253d 3230     rite regAddr=%02
   e2368:	2078 7473 7461 253d 0064 6573 5774 5444     x stat=%d.setWDT
   e2378:	2520 0064 6177 6374 6468 676f 6320 656c      %d.watchdog cle
   e2388:	7261 6465 6220 6552 7573 746c 253d 0064     ared bResult=%d.
   e2398:	6177 6374 6468 676f 7320 7465 6620 756f     watchdog set fou
   e23a8:	5372 6365 3d73 6425 6220 6552 7573 746c     rSecs=%d bResult
   e23b8:	253d 0064 6572 6573 4374 6e6f 6966 2867     =%d.resetConfig(
   e23c8:	7830 3025 6c38 2978 5700 5441 4843 4f44     0x%08lx).WATCHDO
   e23d8:	0047 4544 5045 505f 574f 5245 445f 574f     G.DEEP_POWER_DOW
   e23e8:	004e 4f43 4e55 4454 574f 5f4e 4954 454d     N.COUNTDOWN_TIME
   e23f8:	0052 4c41 5241 004d 6166 6c69 7275 2065     R.ALARM.failure 
   e2408:	6e69 7520 6470 7461 5765 6b61 5265 6165     in updateWakeRea
   e2418:	6f73 206e 6425 7700 6b61 2065 6572 7361     son %d.wake reas
   e2428:	6e6f 3d20 2520 0073 3025 6434 252d 3230     on = %s.%04d-%02
   e2438:	2d64 3025 6432 2520 3230 3a64 3025 6432     d-%02d %02d:%02d
   e2448:	253a 3230 0064 6567 5274 6374 7341 6d54     :%02d.getRtcAsTm
   e2458:	2520 0073 6573 2074 7973 7473 6d65 6320      %s.set system c
   e2468:	6f6c 6b63 6620 6f72 206d 5452 2043 7325     lock from RTC %s
   e2478:	6600 6961 656c 2064 6f74 6420 7465 6365     .failed to detec
   e2488:	2074 4241 3831 3530 7300 7465 7452 4163     t AB1805.setRtcA
   e2498:	5473 206d 7325 6600 6961 756c 6572 6920     sTm %s.failure i
   e24a8:	206e 6573 5274 6374 7246 6d6f 6d54 2520     n setRtcFromTm %
   e24b8:	0064 6573 2074 5452 2043 7266 6d6f 6320     d.set RTC from c
   e24c8:	6f6c 6475 2520 0073 7061 2e70 6261 3831     loud %s.app.ab18
   e24d8:	3530 0000                                   05..

000e24dc <_ZTV6AB1805>:
	...
   e24e4:	549d 000d 549f 000d 5a0b 000d 5a91 000d     .T...T...Z...Z..
   e24f4:	6142 6b63 7267 756f 646e 7550 6c62 7369     BackgroundPublis
   e2504:	5268 004b                                   hRK.

000e2508 <_ZTV19BackgroundPublishRK>:
	...
   e2510:	5fad 000d 5fc9 000d                         ._..._..

000e2518 <_ZTV10JsonBuffer>:
	...
   e2520:	6285 000d 62a1 000d                         .b...b..

000e2528 <_ZTV10JsonParser>:
	...
   e2530:	62b5 000d 62d9 000d 6425 253a 3a64 6425     .b...b..%d:%d:%d
   e2540:	4d00 6425 252e 2e64 6425 2c00 0000 0000     .M%d.%d.%d.,....

000e2550 <_ZTV9LocalTime>:
	...
   e2558:	636d 000d 6385 000d                         mc...c..

000e2560 <_ZTV12LocalTimeHMS>:
	...
   e2568:	630d 000d 631f 000d                         .c...c..

000e2570 <_ZTV15LocalTimeChange>:
	...
   e2578:	630f 000d 632d 000d                         .c..-c..

000e2580 <_ZTV22LocalTimePosixTimezone>:
	...
   e2588:	633d 000d 6359 000d 6966 656c 754e 3d6d     =c..Yc..fileNum=
   e2598:	6425 7320 7a69 3d65 6c25 0064 6572 6461     %d size=%ld.read
   e25a8:	7551 7565 4665 6c69 2065 6425 6520 6576     QueueFile %d eve
   e25b8:	746e 253d 2073 6164 6174 253d 0073 6572     nt=%s data=%s.re
   e25c8:	6461 7551 7565 4665 6c69 2065 6425 6320     adQueueFile %d c
   e25d8:	726f 7572 7470 6465 6520 6576 746e 6e20     orrupted event n
   e25e8:	6d61 2065 726f 6420 7461 0061 6572 6461     ame or data.read
   e25f8:	7551 7565 4665 6c69 2065 6425 6220 6461     QueueFile %d bad
   e2608:	6d20 6761 6369 253d 3830 786c 7620 7265      magic=%08lx ver
   e2618:	6973 6e6f 253d 2075 6568 6461 7265 6953     sion=%u headerSi
   e2628:	657a 253d 2075 616e 656d 654c 3d6e 7525     ze=%u nameLen=%u
   e2638:	2f00 7375 2f72 7570 7162 6575 6575 7700     ./usr/pubqueue.w
   e2648:	6972 6574 7551 7565 5465 466f 6c69 7365     riteQueueToFiles
   e2658:	6620 6c69 4e65 6d75 253d 0064 6572 6573      fileNum=%d.rese
   e2668:	2074 726f 6420 7369 6f63 6e6e 6365 2074     t or disconnect 
   e2678:	7665 6e65 2c74 7320 7661 2065 6966 656c     event, save file
   e2688:	2073 6f74 7120 6575 6575 7200 6d61 6400     s to queue.ram.d
   e2698:	7369 6163 6472 6e69 2067 6f63 7272 7075     iscarding corrup
   e26a8:	6574 2064 6966 656c 2520 0064 7570 6c62     ted file %d.publ
   e26b8:	7369 6968 676e 2520 2073 7665 6e65 3d74     ishing %s event=
   e26c8:	7325 6420 7461 3d61 7325 6400 7369 6163     %s data=%s.disca
   e26d8:	6472 6465 6520 6576 746e 2520 0064 5953     rded event %d.SY
   e26e8:	5453 4d45 545f 5248 4145 2844 4e45 4241     STEM_THREAD(ENAB
   e26f8:	454c 2944 6920 2073 6572 7571 7269 6465     LED) is required
   e2708:	7000 6275 696c 6873 6f43 6d6d 6e6f 6520     .publishCommon e
   e2718:	6576 746e 614e 656d 253d 2073 7665 6e65     ventName=%s even
   e2728:	4474 7461 3d61 7325 6300 6e61 6f6e 2074     tData=%s.cannot 
   e2738:	7263 6165 6574 7320 6474 3a3a 6564 7571     create std::dequ
   e2748:	2065 616c 6772 7265 7420 6168 206e 616d     e larger than ma
   e2758:	5f78 6973 657a 2928 6600 6c69 5165 6575     x_size().fileQue
   e2768:	6575 654c 3d6e 7525 7220 6d61 7551 7565     ueLen=%u ramQueu
   e2778:	4c65 6e65 253d 2075 6f63 6e6e 6365 6574     eLen=%u connecte
   e2788:	3d64 6425 7100 6575 6575 2064 6f74 7220     d=%d.queued to r
   e2798:	6d61 7551 7565 0065 7570 6c62 7369 2068     amQueue.publish 
   e27a8:	7573 6363 7365 2073 6425 7200 6d65 766f     success %d.remov
   e27b8:	6465 6620 6c69 2065 6425 7000 6275 696c     ed file %d.publi
   e27c8:	6873 6620 6961 656c 2064 6425 7700 6972     sh failed %d.wri
   e27d8:	6974 676e 7420 206f 6966 656c 2073 6661     ting to files af
   e27e8:	6574 2072 7570 6c62 7369 2068 6166 6c69     ter publish fail
   e27f8:	7275 0065                                   ure.

000e27fc <_ZTV17PublishQueuePosix>:
	...
   e2804:	8131 000d 8409 000d 842d 000d 3025 6438     1.......-...%08d
   e2814:	2f00 7200 6d65 766f 6465 2520 0073 7325     ./.removed %s.%s
   e2824:	6520 6978 7473 2073 6e61 2064 7369 6120      exists and is a
   e2834:	6420 7269 6365 6f74 7972 6600 6c69 2065      directory.file 
   e2844:	6e69 7420 6568 7720 7961 202c 6564 656c     in the way, dele
   e2854:	6974 676e 2520 0073 7473 7461 6620 6c69     ting %s.stat fil
   e2864:	6465 6520 7272 6f6e 253d 0064 7263 6165     ed errno=%d.crea
   e2874:	6574 2064 6964 2072 7325 6d00 646b 7269     ted dir %s.mkdir
   e2884:	6620 6961 656c 2064 7265 6e72 3d6f 6425      failed errno=%d
   e2894:	7500 636e 6e6f 6966 7567 6572 2064 6964     .unconfigured di
   e28a4:	5072 7461 0068 6373 6e61 696e 676e 2520     rPath.scanning %
   e28b4:	2073 6977 6874 7020 7461 6574 6e72 2520     s with pattern %
   e28c4:	0073 6461 6964 676e 7420 206f 7571 7565     s.adding to queu
   e28d4:	2065 6425 2520 0073 6567 4674 6c69 4665     e %d %s.getFileF
   e28e4:	6f72 516d 6575 6575 7220 7465 7275 656e     romQueue returne
   e28f4:	2064 6425 0000 0000                         d %d....

000e28fc <_ZTV14SequentialFile>:
	...
   e2904:	8789 000d 87b5 000d 8441 000d 742e 706d     ........A....tmp
   e2914:	7300 656c 7065 6548 706c 7265 6100 7070     .sleepHelper.app
   e2924:	732e 656c 7065 2f00 7375 2f72 6c73 6565     .sleep./usr/slee
   e2934:	5370 7465 6974 676e 2e73 736a 6e6f 2f00     pSettings.json./
   e2944:	7375 2f72 6c73 6565 4470 7461 2e61 6164     usr/sleepData.da
   e2954:	0074 7645 6e65 4874 7369 6f74 7972 3a3a     t.EventHistory::
   e2964:	6461 4564 6576 746e 0d00 000a 6944 6373     addEvent....Disc
   e2974:	6e6f 656e 7463 6e69 2067 6563 6c6c 6c75     onnecting cellul
   e2984:	7261 7300 6174 6574 6148 646e 656c 5372     ar.stateHandlerS
   e2994:	6174 7472 7200 6e75 696e 676e 6920 206e     tart.running in 
   e29a4:	6f6e 6320 6e6f 656e 7463 6f69 206e 6f6d     no connection mo
   e29b4:	6564 6300 6e6f 656e 7463 6465 7420 206f     de.connected to 
   e29c4:	656e 7774 726f 206b 6e69 2520 756c 6d20     network in %lu m
   e29d4:	0073 6974 656d 2064 756f 2074 6f63 6e6e     s.timed out conn
   e29e4:	6365 6974 676e 7420 206f 6c63 756f 0064     ecting to cloud.
   e29f4:	6974 656d 2064 756f 2074 6572 6f63 6e6e     timed out reconn
   e2a04:	6365 6974 676e 7420 206f 6c63 756f 0064     ecting to cloud.
   e2a14:	7473 7461 4865 6e61 6c64 7265 6c53 6565     stateHandlerSlee
   e2a24:	0070 6c73 6565 6970 676e 6620 726f 2520     p.sleeping for %
   e2a34:	2064 6573 2063 6461 756a 7473 656d 746e     d sec adjustment
   e2a44:	734d 253d 0064 6570 6972 646f 7420 6f6f     Ms=%d.period too
   e2a54:	7320 6f68 7472 7420 206f 6c73 6565 2070      short to sleep 
   e2a64:	6425 7200 6d65 766f 6e69 2067 7469 6d65     %d.removing item
   e2a74:	6620 6f72 206d 7570 6c62 7369 4468 7461      from publishDat
   e2a84:	0061 6f63 6e6e 6365 6574 2064 6f74 6320     a.connected to c
   e2a94:	6f6c 6475 6920 206e 6c25 2075 736d 7100     loud in %lu ms.q
   e2aa4:	6975 6b63 7000 6275 696c 6873 6e69 2067     uick.publishing 
   e2ab4:	616e 656d 253d 2073 6c66 6761 3d73 7830     name=%s flags=0x
   e2ac4:	7825 7700 0072 7474 0063 7272 7300 636f     %x.wr.ttc.rr.soc
   e2ad4:	6e00 206f 5452 2043 6974 656d 202c 6f64     .no RTC time, do
   e2ae4:	6e69 2067 7566 6c6c 7720 6b61 0065 6974     ing full wake.ti
   e2af4:	656d 7420 206f 6f64 6620 6c75 206c 6177     me to do full wa
   e2b04:	656b 6400 6e6f 2065 6977 6874 6e20 206f     ke.done with no 
   e2b14:	6f63 6e6e 6365 6974 6e6f 6d20 646f 2c65     connection mode,
   e2b24:	7020 6572 6170 6972 676e 7420 206f 6c73      preparing to sl
   e2b34:	6565 0070 6c73 6565 2070 7963 6c63 2065     eep.sleep cycle 
   e2b44:	7369 7320 6f68 7472 202c 7375 6e69 2067     is short, using 
   e2b54:	6563 6c6c 6c75 7261 7320 6174 646e 7962     cellular standby
   e2b64:	6400 7369 6f63 6e6e 6365 6974 676e 6620     .disconnecting f
   e2b74:	6f72 206d 6c63 756f 0064 0000               rom cloud...

000e2b80 <_ZTV16JsonParserStaticILj622ELj50EE>:
	...
   e2b88:	8bc1 000d 8bd5 000d                         ........

000e2b90 <_ZTVN11SleepHelper12SettingsFileE>:
	...
   e2b98:	8de1 000d 8e29 000d                         ....)...

000e2ba0 <_ZTVN11SleepHelper14PersistentDataE>:
	...
   e2ba8:	a4a9 000d 8fbb 000d 9005 000d 8beb 000d     ................
   e2bb8:	8c4f 000d 8c2d 000d 8ccb 000d 8da5 000d     O...-...........
   e2bc8:	8dcd 000d                                   ....

000e2bcc <_ZTV11SleepHelper>:
	...
   e2bd4:	b6bd 000d b8b1 000d                         ........

000e2bdc <_ZTVN11SleepHelper18PersistentDataBaseE>:
	...
   e2be4:	8ae5 000d 8f93 000d 8ae1 000d 8ae3 000d     ................
   e2bf4:	8c4f 000d 8c2d 000d                         O...-...

000e2bfc <_ZTVN11SleepHelper18PersistentDataFileE>:
	...
   e2c04:	a4a9 000d 8fbb 000d 9005 000d 8beb 000d     ................
   e2c14:	8c4f 000d 8c2d 000d 8ccb 000d               O...-.......

000e2c20 <TMP36_POWER_PIN>:
   e2c20:	0012                                        ..

000e2c22 <TMP36_SENSE_PIN>:
   e2c22:	000f                                        ..

000e2c24 <_ZTVN5spark13CellularClassE>:
	...
   e2c2c:	c553 000d c549 000d c53f 000d c4f5 000d     S...I...?.......
   e2c3c:	c533 000d c527 000d e61d 000d e625 000d     3...'.......%...
   e2c4c:	c51b 000d c513 000d c509 000d c4ff 000d     ................
   e2c5c:	e655 000d                                   U...

000e2c60 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e2c68:	c58d 000d c593 000d c5d1 000d c5a1 000d     ................
   e2c78:	c58f 000d                                   ....

000e2c7c <_ZTVN5spark13EthernetClassE>:
	...
   e2c84:	cba7 000d cb9d 000d cb93 000d cb89 000d     ................
   e2c94:	cb7d 000d cb71 000d e61d 000d e625 000d     }...q.......%...
   e2ca4:	cb65 000d cb5d 000d cb53 000d cb49 000d     e...]...S...I...
   e2cb4:	e655 000d                                   U...

000e2cb8 <_ZTV7TwoWire>:
	...
   e2cc0:	cbc5 000d cc0f 000d cbe7 000d cbc7 000d     ................
   e2cd0:	cbef 000d cbf7 000d cbff 000d cc07 000d     ................

000e2ce0 <_ZTV9IPAddress>:
	...
   e2ce8:	cce3 000d ccd3 000d ccd5 000d 2e30 0030     ............0.0.
   e2cf8:	6166 736c 0065 7274 6575 2500 2a2e 666c     false.true.%.*lf
   e2d08:	2500 0067 756e 6c6c 7500 3025 7834 0000     .%g.null.u%04x..

000e2d18 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e2d20:	cde5 000d cdfb 000d ce11 000d ce09 000d     ................
   e2d30:	cde9 000d                                   ....

000e2d34 <_ZTVN5spark16JSONBufferWriterE>:
	...
   e2d3c:	cde7 000d cded 000d ce39 000d ce5f 000d     ........9..._...
   e2d4c:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   e2d5c:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   e2d6c:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   e2d7c:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   e2d8c:	005b 6f63 6564 3d20 0020 6564 6174 6c69     [.code = .detail
   e2d9c:	2073 203d 6c00 006e 6e66 6300 646f 0065     s = .ln.fn.code.
   e2dac:	6564 6174 6c69 0000                         detail..

000e2db4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   e2dbc:	d705 000d d72b 000d d6e9 000d ce95 000d     ....+...........

000e2dcc <_ZTVN5spark16StreamLogHandlerE>:
	...
   e2dd4:	dae1 000d daf9 000d e2c5 000d 40cf 000d     .............@..

000e2de4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   e2dec:	db0d 000d db21 000d e469 000d d6f1 000d     ....!...i.......

000e2dfc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   e2e04:	d703 000d d739 000d e201 000d d6f3 000d     ....9...........

000e2e14 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   e2e1c:	d701 000d d747 000d da29 000d d765 000d     ....G...)...e...

000e2e2c <_ZTVN5spark12NetworkClassE>:
	...
   e2e34:	e5dd 000d e5e7 000d e5f1 000d e5fb 000d     ................
   e2e44:	e605 000d e611 000d e61d 000d e625 000d     ............%...
   e2e54:	e62d 000d e639 000d e641 000d e64b 000d     -...9...A...K...
   e2e64:	e655 000d 6977 6972 676e 5300 7379 6574     U...wiring.Syste
   e2e74:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   e2e84:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   e2e94:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   e2ea4:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   e2eb4:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000e2ec0 <_ZTV11USARTSerial>:
	...
   e2ec8:	ef69 000d efd7 000d efaf 000d e73d 000d     i...........=...
   e2ed8:	ef7f 000d ef9b 000d ef8d 000d efa9 000d     ................
   e2ee8:	ef6b 000d ef71 000d                         k...q...

000e2ef0 <_ZTV9USBSerial>:
	...
   e2ef8:	f077 000d f0df 000d f0b5 000d e73d 000d     w...........=...
   e2f08:	f0a7 000d f079 000d f089 000d f0d9 000d     ....y...........
   e2f18:	f099 000d f071 000d                         ....q...

000e2f20 <_ZSt7nothrow>:
   e2f20:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   e2f30:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000e2f41 <day_name.6145>:
   e2f41:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e2f51:	6972 6153                                    riSat

000e2f56 <mon_name.6146>:
   e2f56:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e2f66:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e2f76:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000e2f88 <fpi.7566>:
   e2f88:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e2f98:	0000 0000                                   ....

000e2f9c <fpinan.7602>:
   e2f9c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e2fac:	0000 0000                                   ....

000e2fb0 <tinytens>:
   e2fb0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e2fc0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e2fd0:	6f43 64ac 0628 1168                         Co.d(.h.

000e2fd8 <_ctype_>:
   e2fd8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e2fe8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e2ff8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e3008:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e3018:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e3028:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e3038:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e3048:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e3058:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e30dc <_C_numeric_locale>:
   e30dc:	2e94 000e 296f 000e e280 2003 4f50 4953     ....o)..... POSI
   e30ec:	0058 0000                                   X...

000e30f0 <__mprec_bigtens>:
   e30f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e3100:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e3110:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e3118 <__mprec_tens>:
   e3118:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e3128:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e3138:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e3148:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e3158:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e3168:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e3178:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e3188:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e3198:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e31a8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e31b8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e31c8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e31d8:	9db4 79d9 7843 44ea                         ...yCx.D

000e31e0 <p05.7490>:
   e31e0:	0005 0000 0019 0000 007d 0000               ........}...

000e31ec <link_const_variable_data_end>:
   e31ec:	000d4e25 	.word	0x000d4e25
   e31f0:	000d53f9 	.word	0x000d53f9
   e31f4:	000d5e8d 	.word	0x000d5e8d
   e31f8:	000d83f9 	.word	0x000d83f9
   e31fc:	000d8ad1 	.word	0x000d8ad1
   e3200:	000db649 	.word	0x000db649
   e3204:	000dc4e5 	.word	0x000dc4e5
   e3208:	000dc55d 	.word	0x000dc55d
   e320c:	000dcbb1 	.word	0x000dcbb1
   e3210:	000de2b5 	.word	0x000de2b5
   e3214:	000de729 	.word	0x000de729
   e3218:	000de849 	.word	0x000de849
   e321c:	000decc9 	.word	0x000decc9
   e3220:	000def55 	.word	0x000def55

000e3224 <link_constructors_end>:
	...
