
/Users/chipmc/Documents/Maker/Particle/Utilities/SleepHelper-Demo/target/2.3.0/boron/SleepHelper-Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000f220  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e3240  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001e4  2003e20c  000e3244  0002e20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000400  2003e3f0  2003e3f0  0003e3f0  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000e3428  000e3428  00033428  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000e3454  000e3454  00033454  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002d2ff4  00000000  00000000  00033458  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00023e16  00000000  00000000  0030644c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00067dae  00000000  00000000  0032a262  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003f20  00000000  00000000  00392010  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00010260  00000000  00000000  00395f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00046dc6  00000000  00000000  003a6190  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0006878a  00000000  00000000  003ecf56  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00189f33  00000000  00000000  004556e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c850  00000000  00000000  005df614  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00b ffaf 	bl	dff94 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00b ffd1 	bl	dffe4 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e20c 	.word	0x2003e20c
   d404c:	000e3244 	.word	0x000e3244
   d4050:	2003e3f0 	.word	0x2003e3f0
   d4054:	2003e3f0 	.word	0x2003e3f0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f00b f8ff 	bl	df264 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000e31fc 	.word	0x000e31fc
   d4080:	000e3238 	.word	0x000e3238

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b84c 	b.w	d4120 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f88d 	bl	d41a8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f00b b89f 	b.w	df1d4 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f008 b99b 	b.w	dc3d0 <malloc>

000d409a <_Znaj>:
   d409a:	f008 b999 	b.w	dc3d0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f008 b99f 	b.w	dc3e0 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f008 b99d 	b.w	dc3e0 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f008 f82e 	bl	dc110 <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000dbd51 	.word	0x000dbd51

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d8:	4b0a      	ldr	r3, [pc, #40]	; (d4104 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40da:	b510      	push	{r4, lr}
   d40dc:	4604      	mov	r4, r0
   d40de:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40e0:	f009 fc4a 	bl	dd978 <_ZN5spark10LogManager8instanceEv>
   d40e4:	4621      	mov	r1, r4
   d40e6:	f009 fe0c 	bl	ddd02 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40ea:	f00b f82b 	bl	df144 <_Z16_fetch_usbserialv>
   d40ee:	f00b f81d 	bl	df12c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d40f2:	4620      	mov	r0, r4
   d40f4:	4b04      	ldr	r3, [pc, #16]	; (d4108 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40f6:	f840 3b04 	str.w	r3, [r0], #4
   d40fa:	f009 fcef 	bl	ddadc <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40fe:	4620      	mov	r0, r4
   d4100:	bd10      	pop	{r4, pc}
   d4102:	bf00      	nop
   d4104:	000e220c 	.word	0x000e220c
   d4108:	000e21f4 	.word	0x000e21f4

000d410c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d410c:	b510      	push	{r4, lr}
   d410e:	4604      	mov	r4, r0
    }
   d4110:	f7ff ffe2 	bl	d40d8 <_ZN5spark16SerialLogHandlerD1Ev>
   d4114:	4620      	mov	r0, r4
   d4116:	2124      	movs	r1, #36	; 0x24
   d4118:	f00b f9ac 	bl	df474 <_ZdlPvj>
   d411c:	4620      	mov	r0, r4
   d411e:	bd10      	pop	{r4, pc}

000d4120 <setup>:
PRODUCT_ID(PLATFORM_ID);                            // Device needs to be added to product ahead of time.  Remove once we go to deviceOS@4.x
PRODUCT_VERSION(0);
char currentPointRelease[6] ="0.05";


void setup() {
   d4120:	b510      	push	{r4, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4122:	4c17      	ldr	r4, [pc, #92]	; (d4180 <setup+0x60>)
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4124:	4917      	ldr	r1, [pc, #92]	; (d4184 <setup+0x64>)
   d4126:	4818      	ldr	r0, [pc, #96]	; (d4188 <setup+0x68>)
   d4128:	2300      	movs	r3, #0
   d412a:	2204      	movs	r2, #4
   d412c:	f008 f8a0 	bl	dc270 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4130:	4a16      	ldr	r2, [pc, #88]	; (d418c <setup+0x6c>)
   d4132:	4917      	ldr	r1, [pc, #92]	; (d4190 <setup+0x70>)
   d4134:	4620      	mov	r0, r4
   d4136:	f008 fa8a 	bl	dc64e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d413a:	4a16      	ldr	r2, [pc, #88]	; (d4194 <setup+0x74>)
   d413c:	4916      	ldr	r1, [pc, #88]	; (d4198 <setup+0x78>)
   d413e:	4620      	mov	r0, r4
   d4140:	f008 fa85 	bl	dc64e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4144:	4620      	mov	r0, r4
    Particle.function("Set Sleep Time", setSleepTime);


    // Initialize AB1805 Watchdog and RTC
    {
        ab1805.setup();
   d4146:	4c15      	ldr	r4, [pc, #84]	; (d419c <setup+0x7c>)
   d4148:	4a15      	ldr	r2, [pc, #84]	; (d41a0 <setup+0x80>)
   d414a:	4916      	ldr	r1, [pc, #88]	; (d41a4 <setup+0x84>)
   d414c:	f008 fa7f 	bl	dc64e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4150:	4620      	mov	r0, r4
   d4152:	2101      	movs	r1, #1
   d4154:	f000 fe66 	bl	d4e24 <_ZN6AB18055setupEb>

        // Reset the AB1805 configuration to default values
        ab1805.resetConfig();
   d4158:	2100      	movs	r1, #0
   d415a:	4620      	mov	r0, r4
   d415c:	f000 fc44 	bl	d49e8 <_ZN6AB180511resetConfigEm>

        // Enable watchdog
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d4160:	217c      	movs	r1, #124	; 0x7c
   d4162:	4620      	mov	r0, r4
   d4164:	f000 fbbc 	bl	d48e0 <_ZN6AB18056setWDTEi>
    }

    // Initialize PublishQueuePosixRK
	PublishQueuePosix::instance().setup();
   d4168:	f002 fe68 	bl	d6e3c <_ZN17PublishQueuePosix8instanceEv>
   d416c:	f003 f874 	bl	d7258 <_ZN17PublishQueuePosix5setupEv>

    sleepHelperConfig();                                 // This is the function call to configure the sleep helper parameters
   d4170:	f007 fc40 	bl	db9f4 <_Z17sleepHelperConfigv>

    SleepHelper::instance().setup();                    // This puts these parameters into action
   d4174:	f004 fc06 	bl	d8984 <_ZN11SleepHelper8instanceEv>
}
   d4178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SleepHelper::instance().setup();                    // This puts these parameters into action
   d417c:	f005 bd0e 	b.w	d9b9c <_ZN11SleepHelper5setupEv>
   d4180:	000dc623 	.word	0x000dc623
   d4184:	2003e474 	.word	0x2003e474
   d4188:	000e21a8 	.word	0x000e21a8
   d418c:	000e21ae 	.word	0x000e21ae
   d4190:	000d453d 	.word	0x000d453d
   d4194:	000e21b7 	.word	0x000e21b7
   d4198:	000d44ad 	.word	0x000d44ad
   d419c:	2003e3fc 	.word	0x2003e3fc
   d41a0:	000e21c5 	.word	0x000e21c5
   d41a4:	000d44dd 	.word	0x000d44dd

000d41a8 <loop>:

void loop() {
   d41a8:	b508      	push	{r3, lr}
    SleepHelper::instance().loop();
   d41aa:	f004 fbeb 	bl	d8984 <_ZN11SleepHelper8instanceEv>
   d41ae:	f006 ffbc 	bl	db12a <_ZN11SleepHelper4loopEv>

    ab1805.loop();
   d41b2:	4804      	ldr	r0, [pc, #16]	; (d41c4 <loop+0x1c>)
   d41b4:	f000 ff16 	bl	d4fe4 <_ZN6AB18054loopEv>
    PublishQueuePosix::instance().loop();
   d41b8:	f002 fe40 	bl	d6e3c <_ZN17PublishQueuePosix8instanceEv>
}
   d41bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    PublishQueuePosix::instance().loop();
   d41c0:	f002 bd2e 	b.w	d6c20 <_ZN17PublishQueuePosix4loopEv>
   d41c4:	2003e3fc 	.word	0x2003e3fc

000d41c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d41c8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d41ca:	e9d0 5300 	ldrd	r5, r3, [r0]
   d41ce:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d41d0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d41d2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d41d6:	42ae      	cmp	r6, r5
   d41d8:	d004      	beq.n	d41e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d41da:	4628      	mov	r0, r5
   d41dc:	f00a fb4c 	bl	de878 <_ZN6StringD1Ev>
   d41e0:	3514      	adds	r5, #20
   d41e2:	e7f8      	b.n	d41d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d41e4:	6820      	ldr	r0, [r4, #0]
   d41e6:	f008 f8fb 	bl	dc3e0 <free>
    AllocatorT::free(data_);
}
   d41ea:	4620      	mov	r0, r4
   d41ec:	bd70      	pop	{r4, r5, r6, pc}

000d41ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d41ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (n > 0) {
   d41f2:	f1b1 0800 	subs.w	r8, r1, #0
    bool realloc(int n) {
   d41f6:	4607      	mov	r7, r0
        if (n > 0) {
   d41f8:	dd35      	ble.n	d4266 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x78>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d41fa:	f04f 0914 	mov.w	r9, #20
    return ::malloc(size);
   d41fe:	fb09 f008 	mul.w	r0, r9, r8
   d4202:	f008 f8e5 	bl	dc3d0 <malloc>
            if (!d) {
   d4206:	4605      	mov	r5, r0
   d4208:	b3a8      	cbz	r0, d4276 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x88>
            move(d, data_, data_ + size_);
   d420a:	e9d7 4600 	ldrd	r4, r6, [r7]
        if (dest > p && dest < end) {
   d420e:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   d4210:	fb09 4606 	mla	r6, r9, r6, r4
        if (dest > p && dest < end) {
   d4214:	d215      	bcs.n	d4242 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
   d4216:	4286      	cmp	r6, r0
   d4218:	d914      	bls.n	d4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
            --end;
   d421a:	3e14      	subs	r6, #20
            dest += end - p - 1;
   d421c:	f1a4 0914 	sub.w	r9, r4, #20
   d4220:	1b34      	subs	r4, r6, r4
   d4222:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4224:	45b1      	cmp	r9, r6
   d4226:	d01f      	beq.n	d4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
                new(dest) T(std::move(*end));
   d4228:	b12c      	cbz	r4, d4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x48>
   d422a:	4631      	mov	r1, r6
   d422c:	4620      	mov	r0, r4
   d422e:	f00a fb9f 	bl	de970 <_ZN6StringC1EOS_>
   d4232:	7c33      	ldrb	r3, [r6, #16]
   d4234:	7423      	strb	r3, [r4, #16]
   d4236:	4630      	mov	r0, r6
   d4238:	f00a fb1e 	bl	de878 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d423c:	3e14      	subs	r6, #20
   d423e:	3c14      	subs	r4, #20
   d4240:	e7f0      	b.n	d4224 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x36>
        } else if (dest != p) {
   d4242:	d011      	beq.n	d4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
   d4244:	46a9      	mov	r9, r5
            for (; p != end; ++p, ++dest) {
   d4246:	42a6      	cmp	r6, r4
   d4248:	d00e      	beq.n	d4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
   d424a:	4621      	mov	r1, r4
   d424c:	4648      	mov	r0, r9
   d424e:	f00a fb8f 	bl	de970 <_ZN6StringC1EOS_>
   d4252:	7c23      	ldrb	r3, [r4, #16]
   d4254:	f889 3010 	strb.w	r3, [r9, #16]
   d4258:	4620      	mov	r0, r4
   d425a:	f00a fb0d 	bl	de878 <_ZN6StringD1Ev>
   d425e:	3414      	adds	r4, #20
   d4260:	f109 0914 	add.w	r9, r9, #20
   d4264:	e7ef      	b.n	d4246 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x58>
        T* d = nullptr;
   d4266:	2500      	movs	r5, #0
    ::free(ptr);
   d4268:	6838      	ldr	r0, [r7, #0]
   d426a:	f008 f8b9 	bl	dc3e0 <free>
        data_ = d;
   d426e:	603d      	str	r5, [r7, #0]
        capacity_ = n;
   d4270:	f8c7 8008 	str.w	r8, [r7, #8]
        return true;
   d4274:	2001      	movs	r0, #1
    }
   d4276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d427a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d427a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d427e:	2300      	movs	r3, #0
   d4280:	e9c0 3300 	strd	r3, r3, [r0]
   d4284:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4286:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4288:	6849      	ldr	r1, [r1, #4]
   d428a:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d428c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d428e:	dd17      	ble.n	d42c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
   d4290:	f7ff ffad 	bl	d41ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d4294:	b1a0      	cbz	r0, d42c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4296:	e9d5 6300 	ldrd	r6, r3, [r5]
   d429a:	f04f 0814 	mov.w	r8, #20
   d429e:	6827      	ldr	r7, [r4, #0]
   d42a0:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   d42a4:	45b0      	cmp	r8, r6
   d42a6:	d009      	beq.n	d42bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
   d42a8:	b12f      	cbz	r7, d42b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
   d42aa:	4631      	mov	r1, r6
   d42ac:	4638      	mov	r0, r7
   d42ae:	f00a fb79 	bl	de9a4 <_ZN6StringC1ERKS_>
   d42b2:	7c33      	ldrb	r3, [r6, #16]
   d42b4:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
   d42b6:	3614      	adds	r6, #20
   d42b8:	3714      	adds	r7, #20
   d42ba:	e7f3      	b.n	d42a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
   d42bc:	686b      	ldr	r3, [r5, #4]
   d42be:	6063      	str	r3, [r4, #4]
}
   d42c0:	4620      	mov	r0, r4
   d42c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d42c8 <_GLOBAL__sub_I_logHandler>:
}
   d42c8:	b530      	push	{r4, r5, lr}
   d42ca:	b097      	sub	sp, #92	; 0x5c
        level_(level) {
   d42cc:	4945      	ldr	r1, [pc, #276]	; (d43e4 <_GLOBAL__sub_I_logHandler+0x11c>)
   d42ce:	a80c      	add	r0, sp, #48	; 0x30
   d42d0:	f00a fb1d 	bl	de90e <_ZN6StringC1EPKc>
   d42d4:	2401      	movs	r4, #1
   d42d6:	4944      	ldr	r1, [pc, #272]	; (d43e8 <_GLOBAL__sub_I_logHandler+0x120>)
   d42d8:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
   d42dc:	a811      	add	r0, sp, #68	; 0x44
   d42de:	f00a fb16 	bl	de90e <_ZN6StringC1EPKc>
        capacity_(0) {
   d42e2:	2300      	movs	r3, #0
    if (n > 0 && realloc(n)) {
   d42e4:	2102      	movs	r1, #2
   d42e6:	4668      	mov	r0, sp
        capacity_(0) {
   d42e8:	e9cd 3300 	strd	r3, r3, [sp]
   d42ec:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
   d42f0:	9302      	str	r3, [sp, #8]
    if (n > 0 && realloc(n)) {
   d42f2:	f7ff ff7c 	bl	d41ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d42f6:	b198      	cbz	r0, d4320 <_GLOBAL__sub_I_logHandler+0x58>
        copy(data_, values.begin(), values.end());
   d42f8:	9c00      	ldr	r4, [sp, #0]
            new(dest) T(*p);
   d42fa:	b134      	cbz	r4, d430a <_GLOBAL__sub_I_logHandler+0x42>
class LogCategoryFilter {
   d42fc:	a90c      	add	r1, sp, #48	; 0x30
   d42fe:	4620      	mov	r0, r4
   d4300:	f00a fb50 	bl	de9a4 <_ZN6StringC1ERKS_>
   d4304:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   d4308:	7423      	strb	r3, [r4, #16]
   d430a:	a911      	add	r1, sp, #68	; 0x44
   d430c:	f104 0014 	add.w	r0, r4, #20
   d4310:	f00a fb48 	bl	de9a4 <_ZN6StringC1ERKS_>
   d4314:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d4318:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        size_ = n;
   d431c:	2302      	movs	r3, #2
   d431e:	9301      	str	r3, [sp, #4]
            StreamLogHandler(Serial, level, filters) {
   d4320:	f00a ff10 	bl	df144 <_Z16_fetch_usbserialv>
   d4324:	4669      	mov	r1, sp
   d4326:	4605      	mov	r5, r0
   d4328:	a803      	add	r0, sp, #12
        filter_(level, filters) {
   d432a:	4c30      	ldr	r4, [pc, #192]	; (d43ec <_GLOBAL__sub_I_logHandler+0x124>)
   d432c:	f7ff ffa5 	bl	d427a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   d4330:	a903      	add	r1, sp, #12
   d4332:	a806      	add	r0, sp, #24
   d4334:	f7ff ffa1 	bl	d427a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4338:	4b2d      	ldr	r3, [pc, #180]	; (d43f0 <_GLOBAL__sub_I_logHandler+0x128>)
   d433a:	6023      	str	r3, [r4, #0]
   d433c:	a906      	add	r1, sp, #24
   d433e:	a809      	add	r0, sp, #36	; 0x24
   d4340:	f7ff ff9b 	bl	d427a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4344:	aa09      	add	r2, sp, #36	; 0x24
   d4346:	211e      	movs	r1, #30
   d4348:	1d20      	adds	r0, r4, #4
   d434a:	f009 fe34 	bl	ddfb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d434e:	a809      	add	r0, sp, #36	; 0x24
   d4350:	f7ff ff3a 	bl	d41c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4354:	a806      	add	r0, sp, #24
   d4356:	f7ff ff37 	bl	d41c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d435a:	4b26      	ldr	r3, [pc, #152]	; (d43f4 <_GLOBAL__sub_I_logHandler+0x12c>)
   d435c:	6023      	str	r3, [r4, #0]
   d435e:	6225      	str	r5, [r4, #32]
   d4360:	a803      	add	r0, sp, #12
   d4362:	f7ff ff31 	bl	d41c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4366:	4b24      	ldr	r3, [pc, #144]	; (d43f8 <_GLOBAL__sub_I_logHandler+0x130>)
   d4368:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d436a:	f00a feeb 	bl	df144 <_Z16_fetch_usbserialv>
   d436e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4372:	f00a fed7 	bl	df124 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4376:	f009 faff 	bl	dd978 <_ZN5spark10LogManager8instanceEv>
   d437a:	4621      	mov	r1, r4
   d437c:	f009 fdad 	bl	ddeda <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
});                        
   d4380:	4668      	mov	r0, sp
   d4382:	f7ff ff21 	bl	d41c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
class LogCategoryFilter {
   d4386:	a811      	add	r0, sp, #68	; 0x44
   d4388:	f00a fa76 	bl	de878 <_ZN6StringD1Ev>
   d438c:	a80c      	add	r0, sp, #48	; 0x30
   d438e:	f00a fa73 	bl	de878 <_ZN6StringD1Ev>
SYSTEM_THREAD(ENABLED);
   d4392:	2100      	movs	r1, #0
   d4394:	2001      	movs	r0, #1
   d4396:	f007 ff25 	bl	dc1e4 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d439a:	4b18      	ldr	r3, [pc, #96]	; (d43fc <_GLOBAL__sub_I_logHandler+0x134>)
    SleepResult() {}
   d439c:	4a18      	ldr	r2, [pc, #96]	; (d4400 <_GLOBAL__sub_I_logHandler+0x138>)
   d439e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d43a0:	2400      	movs	r4, #0
   d43a2:	601c      	str	r4, [r3, #0]
   d43a4:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d43a6:	719c      	strb	r4, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d43a8:	2002      	movs	r0, #2
   d43aa:	f007 ff03 	bl	dc1b4 <set_system_mode>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d43ae:	2101      	movs	r1, #1
   d43b0:	2004      	movs	r0, #4
   d43b2:	f007 fcad 	bl	dbd10 <HAL_Feature_Set>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d43b6:	f00b f839 	bl	df42c <_Z19__fetch_global_Wirev>
   d43ba:	2269      	movs	r2, #105	; 0x69
   d43bc:	4601      	mov	r1, r0
   d43be:	4811      	ldr	r0, [pc, #68]	; (d4404 <_GLOBAL__sub_I_logHandler+0x13c>)
   d43c0:	f000 f99e 	bl	d4700 <_ZN6AB1805C1ER7TwoWireh>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d43c4:	f00a ff80 	bl	df2c8 <spark_protocol_instance>
   d43c8:	4623      	mov	r3, r4
   d43ca:	4622      	mov	r2, r4
   d43cc:	210d      	movs	r1, #13
   d43ce:	f00a ff83 	bl	df2d8 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d43d2:	f00a ff79 	bl	df2c8 <spark_protocol_instance>
   d43d6:	4623      	mov	r3, r4
   d43d8:	4622      	mov	r2, r4
   d43da:	4621      	mov	r1, r4
   d43dc:	f00a ff84 	bl	df2e8 <spark_protocol_set_product_firmware_version>
}
   d43e0:	b017      	add	sp, #92	; 0x5c
   d43e2:	bd30      	pop	{r4, r5, pc}
   d43e4:	000e21d4 	.word	0x000e21d4
   d43e8:	000e21dd 	.word	0x000e21dd
   d43ec:	2003e440 	.word	0x2003e440
   d43f0:	000e21f4 	.word	0x000e21f4
   d43f4:	000e2de4 	.word	0x000e2de4
   d43f8:	000e220c 	.word	0x000e220c
   d43fc:	2003e3f0 	.word	0x2003e3f0
   d4400:	ffff0000 	.word	0xffff0000
   d4404:	2003e3fc 	.word	0x2003e3fc

000d4408 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4408:	b40e      	push	{r1, r2, r3}
   d440a:	b510      	push	{r4, lr}
   d440c:	b08d      	sub	sp, #52	; 0x34
   d440e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4410:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4412:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4416:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4418:	2300      	movs	r3, #0
   d441a:	2020      	movs	r0, #32
   d441c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4420:	e9cd 4200 	strd	r4, r2, [sp]
   d4424:	201e      	movs	r0, #30
   d4426:	aa04      	add	r2, sp, #16
   d4428:	f007 fe92 	bl	dc150 <log_message_v>
}
   d442c:	b00d      	add	sp, #52	; 0x34
   d442e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4432:	b003      	add	sp, #12
   d4434:	4770      	bx	lr

000d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4436:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4438:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d443a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d443c:	b17c      	cbz	r4, d445e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d443e:	6863      	ldr	r3, [r4, #4]
   d4440:	3b01      	subs	r3, #1
   d4442:	6063      	str	r3, [r4, #4]
   d4444:	b95b      	cbnz	r3, d445e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4446:	6823      	ldr	r3, [r4, #0]
   d4448:	4620      	mov	r0, r4
   d444a:	689b      	ldr	r3, [r3, #8]
   d444c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d444e:	68a3      	ldr	r3, [r4, #8]
   d4450:	3b01      	subs	r3, #1
   d4452:	60a3      	str	r3, [r4, #8]
   d4454:	b91b      	cbnz	r3, d445e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4456:	6823      	ldr	r3, [r4, #0]
   d4458:	4620      	mov	r0, r4
   d445a:	68db      	ldr	r3, [r3, #12]
   d445c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d445e:	4628      	mov	r0, r5
   d4460:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4464 <_Z11setWakeTime6String.part.0>:
 * @param command A string indicating what the closing hour of the facility is in 24-hour time.
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setWakeTime(String command)
   d4464:	b500      	push	{lr}
  char data[256];
  int tempTime = strtol(command,&pEND,10);                             // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
  sysStatus.wakeTime = tempTime;
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.wakeTime);
   d4466:	4b0d      	ldr	r3, [pc, #52]	; (d449c <_Z11setWakeTime6String.part.0+0x38>)
   d4468:	4a0d      	ldr	r2, [pc, #52]	; (d44a0 <_Z11setWakeTime6String.part.0+0x3c>)
   d446a:	7adb      	ldrb	r3, [r3, #11]
int setWakeTime(String command)
   d446c:	b0c5      	sub	sp, #276	; 0x114
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.wakeTime);
   d446e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4472:	a804      	add	r0, sp, #16
   d4474:	f007 ffd4 	bl	dc420 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4478:	4b0a      	ldr	r3, [pc, #40]	; (d44a4 <_Z11setWakeTime6String.part.0+0x40>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d447a:	490b      	ldr	r1, [pc, #44]	; (d44a8 <_Z11setWakeTime6String.part.0+0x44>)
   d447c:	781b      	ldrb	r3, [r3, #0]
   d447e:	f88d 3000 	strb.w	r3, [sp]
   d4482:	aa04      	add	r2, sp, #16
   d4484:	233c      	movs	r3, #60	; 0x3c
   d4486:	a802      	add	r0, sp, #8
   d4488:	f008 f9ee 	bl	dc868 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d448c:	a803      	add	r0, sp, #12
   d448e:	f7ff ffd2 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Time",data, PRIVATE);
  }
  return 1;
}
   d4492:	2001      	movs	r0, #1
   d4494:	b045      	add	sp, #276	; 0x114
   d4496:	f85d fb04 	ldr.w	pc, [sp], #4
   d449a:	bf00      	nop
   d449c:	2003e464 	.word	0x2003e464
   d44a0:	000e221c 	.word	0x000e221c
   d44a4:	2003e484 	.word	0x2003e484
   d44a8:	000e21c0 	.word	0x000e21c0

000d44ac <_Z11setWakeTime6String>:
{
   d44ac:	b507      	push	{r0, r1, r2, lr}
  int tempTime = strtol(command,&pEND,10);                             // Looks for the first integer and interprets it
   d44ae:	220a      	movs	r2, #10
   d44b0:	6800      	ldr	r0, [r0, #0]
   d44b2:	a901      	add	r1, sp, #4
   d44b4:	f00c fd3c 	bl	e0f30 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   d44b8:	2817      	cmp	r0, #23
   d44ba:	d809      	bhi.n	d44d0 <_Z11setWakeTime6String+0x24>
  sysStatus.wakeTime = tempTime;
   d44bc:	4b06      	ldr	r3, [pc, #24]	; (d44d8 <_Z11setWakeTime6String+0x2c>)
   d44be:	72d8      	strb	r0, [r3, #11]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44c0:	f007 fef6 	bl	dc2b0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d44c4:	b130      	cbz	r0, d44d4 <_Z11setWakeTime6String+0x28>
   d44c6:	f7ff ffcd 	bl	d4464 <_Z11setWakeTime6String.part.0>
}
   d44ca:	b003      	add	sp, #12
   d44cc:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   d44d0:	2000      	movs	r0, #0
   d44d2:	e7fa      	b.n	d44ca <_Z11setWakeTime6String+0x1e>
  return 1;
   d44d4:	2001      	movs	r0, #1
   d44d6:	e7f8      	b.n	d44ca <_Z11setWakeTime6String+0x1e>
   d44d8:	2003e464 	.word	0x2003e464

000d44dc <_Z12setSleepTime6String>:
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setSleepTime(String command)
{
   d44dc:	b500      	push	{lr}
   d44de:	b0c7      	sub	sp, #284	; 0x11c
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44e0:	6800      	ldr	r0, [r0, #0]
   d44e2:	220a      	movs	r2, #10
   d44e4:	a903      	add	r1, sp, #12
   d44e6:	f00c fd23 	bl	e0f30 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d44ea:	2818      	cmp	r0, #24
   d44ec:	d81a      	bhi.n	d4524 <_Z12setSleepTime6String+0x48>
  sysStatus.sleepTime = tempTime;
   d44ee:	4b0f      	ldr	r3, [pc, #60]	; (d452c <_Z12setSleepTime6String+0x50>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.sleepTime);
   d44f0:	4a0f      	ldr	r2, [pc, #60]	; (d4530 <_Z12setSleepTime6String+0x54>)
  sysStatus.sleepTime = tempTime;
   d44f2:	7318      	strb	r0, [r3, #12]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.sleepTime);
   d44f4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d44f8:	4603      	mov	r3, r0
   d44fa:	a806      	add	r0, sp, #24
   d44fc:	f007 ff90 	bl	dc420 <snprintf>
   d4500:	f007 fed6 	bl	dc2b0 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4504:	b160      	cbz	r0, d4520 <_Z12setSleepTime6String+0x44>
   d4506:	4b0b      	ldr	r3, [pc, #44]	; (d4534 <_Z12setSleepTime6String+0x58>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4508:	490b      	ldr	r1, [pc, #44]	; (d4538 <_Z12setSleepTime6String+0x5c>)
   d450a:	781b      	ldrb	r3, [r3, #0]
   d450c:	f88d 3000 	strb.w	r3, [sp]
   d4510:	a804      	add	r0, sp, #16
   d4512:	233c      	movs	r3, #60	; 0x3c
   d4514:	aa06      	add	r2, sp, #24
   d4516:	f008 f9a7 	bl	dc868 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d451a:	a805      	add	r0, sp, #20
   d451c:	f7ff ff8b 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4520:	2001      	movs	r0, #1
   d4522:	e000      	b.n	d4526 <_Z12setSleepTime6String+0x4a>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4524:	2000      	movs	r0, #0
}
   d4526:	b047      	add	sp, #284	; 0x11c
   d4528:	f85d fb04 	ldr.w	pc, [sp], #4
   d452c:	2003e464 	.word	0x2003e464
   d4530:	000e2230 	.word	0x000e2230
   d4534:	2003e484 	.word	0x2003e484
   d4538:	000e21c0 	.word	0x000e21c0

000d453c <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d453c:	b530      	push	{r4, r5, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d453e:	4924      	ldr	r1, [pc, #144]	; (d45d0 <_Z15setLowPowerMode6String+0x94>)
   d4540:	b08b      	sub	sp, #44	; 0x2c
   d4542:	4604      	mov	r4, r0
   d4544:	f00a fabe 	bl	deac4 <_ZNK6String6equalsEPKc>
  char lowPowerModeStr[24];

  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4548:	b338      	cbz	r0, d459a <_Z15setLowPowerMode6String+0x5e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d454a:	4921      	ldr	r1, [pc, #132]	; (d45d0 <_Z15setLowPowerMode6String+0x94>)
   d454c:	4620      	mov	r0, r4
   d454e:	f00a fab9 	bl	deac4 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4552:	4605      	mov	r5, r0
   d4554:	bb48      	cbnz	r0, d45aa <_Z15setLowPowerMode6String+0x6e>
   d4556:	491f      	ldr	r1, [pc, #124]	; (d45d4 <_Z15setLowPowerMode6String+0x98>)
   d4558:	4620      	mov	r0, r4
   d455a:	f00a fab3 	bl	deac4 <_ZNK6String6equalsEPKc>
    Log.info(lowPowerModeStr);
    if (Particle.connected()) {
      Particle.publish("Mode",lowPowerModeStr, PRIVATE);
    }
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d455e:	2800      	cmp	r0, #0
   d4560:	d033      	beq.n	d45ca <_Z15setLowPowerMode6String+0x8e>
  {
    sysStatus.lowPowerMode = false;
   d4562:	4b1d      	ldr	r3, [pc, #116]	; (d45d8 <_Z15setLowPowerMode6String+0x9c>)
    strncpy(lowPowerModeStr,"Cleared Low Power Mode",  sizeof(lowPowerModeStr));
   d4564:	491d      	ldr	r1, [pc, #116]	; (d45dc <_Z15setLowPowerMode6String+0xa0>)
    sysStatus.lowPowerMode = false;
   d4566:	729d      	strb	r5, [r3, #10]
    strncpy(lowPowerModeStr,"Cleared Low Power Mode",  sizeof(lowPowerModeStr));
   d4568:	2218      	movs	r2, #24
   d456a:	a804      	add	r0, sp, #16
   d456c:	f00b fddf 	bl	e012e <strncpy>
    Log.info(lowPowerModeStr);
   d4570:	481b      	ldr	r0, [pc, #108]	; (d45e0 <_Z15setLowPowerMode6String+0xa4>)
   d4572:	a904      	add	r1, sp, #16
   d4574:	f7ff ff48 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4578:	f007 fe9a 	bl	dc2b0 <spark_cloud_flag_connected>
    if (!Particle.connected()) {                                 // In case we are not connected, we will do so now.
   d457c:	bb28      	cbnz	r0, d45ca <_Z15setLowPowerMode6String+0x8e>
   d457e:	4b19      	ldr	r3, [pc, #100]	; (d45e4 <_Z15setLowPowerMode6String+0xa8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4580:	4919      	ldr	r1, [pc, #100]	; (d45e8 <_Z15setLowPowerMode6String+0xac>)
   d4582:	781b      	ldrb	r3, [r3, #0]
   d4584:	f88d 3000 	strb.w	r3, [sp]
   d4588:	a802      	add	r0, sp, #8
   d458a:	233c      	movs	r3, #60	; 0x3c
   d458c:	aa04      	add	r2, sp, #16
   d458e:	f008 f96b 	bl	dc868 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4592:	a803      	add	r0, sp, #12
   d4594:	f7ff ff4f 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4598:	e017      	b.n	d45ca <_Z15setLowPowerMode6String+0x8e>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d459a:	490e      	ldr	r1, [pc, #56]	; (d45d4 <_Z15setLowPowerMode6String+0x98>)
   d459c:	4620      	mov	r0, r4
   d459e:	f00a fa91 	bl	deac4 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d45a2:	2800      	cmp	r0, #0
   d45a4:	d1d1      	bne.n	d454a <_Z15setLowPowerMode6String+0xe>
      Particle.publish("Mode",lowPowerModeStr, PRIVATE);
    }
  }
  return 1;
   d45a6:	b00b      	add	sp, #44	; 0x2c
   d45a8:	bd30      	pop	{r4, r5, pc}
    sysStatus.lowPowerMode = true;
   d45aa:	4b0b      	ldr	r3, [pc, #44]	; (d45d8 <_Z15setLowPowerMode6String+0x9c>)
    strncpy(lowPowerModeStr,"Low Power Mode", sizeof(lowPowerModeStr));
   d45ac:	490f      	ldr	r1, [pc, #60]	; (d45ec <_Z15setLowPowerMode6String+0xb0>)
   d45ae:	2218      	movs	r2, #24
    sysStatus.lowPowerMode = true;
   d45b0:	2401      	movs	r4, #1
    strncpy(lowPowerModeStr,"Low Power Mode", sizeof(lowPowerModeStr));
   d45b2:	a804      	add	r0, sp, #16
    sysStatus.lowPowerMode = true;
   d45b4:	729c      	strb	r4, [r3, #10]
    strncpy(lowPowerModeStr,"Low Power Mode", sizeof(lowPowerModeStr));
   d45b6:	f00b fdba 	bl	e012e <strncpy>
    Log.info(lowPowerModeStr);
   d45ba:	4809      	ldr	r0, [pc, #36]	; (d45e0 <_Z15setLowPowerMode6String+0xa4>)
   d45bc:	a904      	add	r1, sp, #16
   d45be:	f7ff ff23 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d45c2:	f007 fe75 	bl	dc2b0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d45c6:	2800      	cmp	r0, #0
   d45c8:	d1d9      	bne.n	d457e <_Z15setLowPowerMode6String+0x42>
  return 1;
   d45ca:	2001      	movs	r0, #1
   d45cc:	e7eb      	b.n	d45a6 <_Z15setLowPowerMode6String+0x6a>
   d45ce:	bf00      	nop
   d45d0:	000e2d6e 	.word	0x000e2d6e
   d45d4:	000e2d06 	.word	0x000e2d06
   d45d8:	2003e464 	.word	0x2003e464
   d45dc:	000e2247 	.word	0x000e2247
   d45e0:	2003e57c 	.word	0x2003e57c
   d45e4:	2003e484 	.word	0x2003e484
   d45e8:	000e2259 	.word	0x000e2259
   d45ec:	000e224f 	.word	0x000e224f

000d45f0 <_GLOBAL__sub_I__Z11setWakeTime6String>:
        val_(val) {
   d45f0:	4b01      	ldr	r3, [pc, #4]	; (d45f8 <_GLOBAL__sub_I__Z11setWakeTime6String+0x8>)
   d45f2:	2201      	movs	r2, #1
   d45f4:	701a      	strb	r2, [r3, #0]
   d45f6:	4770      	bx	lr
   d45f8:	2003e484 	.word	0x2003e484

000d45fc <_Z9readTempCv>:
 * 
 * @returns Returns true if succesful and puts the data into the current object
 * 
 */

bool readTempC() {
   d45fc:	b510      	push	{r4, lr}

    digitalWrite(TMP36_POWER_PIN, HIGH);
   d45fe:	4b1d      	ldr	r3, [pc, #116]	; (d4674 <_Z9readTempCv+0x78>)
bool readTempC() {
   d4600:	ed2d 8b02 	vpush	{d8}
    digitalWrite(TMP36_POWER_PIN, HIGH);
   d4604:	881c      	ldrh	r4, [r3, #0]
bool readTempC() {
   d4606:	b082      	sub	sp, #8
    digitalWrite(TMP36_POWER_PIN, HIGH);
   d4608:	2101      	movs	r1, #1
   d460a:	4620      	mov	r0, r4
   d460c:	f00a feb2 	bl	df374 <digitalWrite>
    delay(2);
   d4610:	2002      	movs	r0, #2
   d4612:	f007 ff55 	bl	dc4c0 <delay>

    int adcValue = analogRead(TMP36_SENSE_PIN);
   d4616:	4b18      	ldr	r3, [pc, #96]	; (d4678 <_Z9readTempCv+0x7c>)
   d4618:	8818      	ldrh	r0, [r3, #0]
   d461a:	f00a fed7 	bl	df3cc <analogRead>
   d461e:	ee08 0a10 	vmov	s16, r0
    digitalWrite(TMP36_POWER_PIN, LOW);
   d4622:	2100      	movs	r1, #0
   d4624:	4620      	mov	r0, r4
   d4626:	f00a fea5 	bl	df374 <digitalWrite>

    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   d462a:	eddf 7a14 	vldr	s15, [pc, #80]	; d467c <_Z9readTempCv+0x80>
   d462e:	ed9f 7a14 	vldr	s14, [pc, #80]	; d4680 <_Z9readTempCv+0x84>
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!

    // As configured above, connect VCC to A1 and Analog Out to A0.

    current.tempC = (mV - 500) / 10;
   d4632:	4b14      	ldr	r3, [pc, #80]	; (d4684 <_Z9readTempCv+0x88>)
    float mV = ((float)adcValue) * 3300 / 4095;
   d4634:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    current.tempC = (mV - 500) / 10;
   d4638:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    float mV = ((float)adcValue) * 3300 / 4095;
   d463c:	ee28 8a27 	vmul.f32	s16, s16, s15
   d4640:	eec8 7a07 	vdiv.f32	s15, s16, s14
    current.tempC = (mV - 500) / 10;
   d4644:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4688 <_Z9readTempCv+0x8c>
   d4648:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d464c:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    snprintf(tempString,sizeof(tempString), "%4.2f C", current.tempC);
   d4650:	ee17 0a10 	vmov	r0, s14
    current.tempC = (mV - 500) / 10;
   d4654:	ed83 7a00 	vstr	s14, [r3]
    snprintf(tempString,sizeof(tempString), "%4.2f C", current.tempC);
   d4658:	f00b f906 	bl	df868 <__aeabi_f2d>
   d465c:	4a0b      	ldr	r2, [pc, #44]	; (d468c <_Z9readTempCv+0x90>)
   d465e:	e9cd 0100 	strd	r0, r1, [sp]
   d4662:	2110      	movs	r1, #16
   d4664:	480a      	ldr	r0, [pc, #40]	; (d4690 <_Z9readTempCv+0x94>)
   d4666:	f007 fedb 	bl	dc420 <snprintf>

    return true;
}
   d466a:	2001      	movs	r0, #1
   d466c:	b002      	add	sp, #8
   d466e:	ecbd 8b02 	vpop	{d8}
   d4672:	bd10      	pop	{r4, pc}
   d4674:	000e2bd4 	.word	0x000e2bd4
   d4678:	000e2bd6 	.word	0x000e2bd6
   d467c:	454e4000 	.word	0x454e4000
   d4680:	457ff000 	.word	0x457ff000
   d4684:	2003e420 	.word	0x2003e420
   d4688:	43fa0000 	.word	0x43fa0000
   d468c:	000e225e 	.word	0x000e225e
   d4690:	2003e474 	.word	0x2003e474

000d4694 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d4694:	4770      	bx	lr

000d4696 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d4696:	b510      	push	{r4, lr}
}
   d4698:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d469a:	4604      	mov	r4, r0
}
   d469c:	f00a feea 	bl	df474 <_ZdlPvj>
   d46a0:	4620      	mov	r0, r4
   d46a2:	bd10      	pop	{r4, pc}

000d46a4 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d46a4:	b40e      	push	{r1, r2, r3}
   d46a6:	b510      	push	{r4, lr}
   d46a8:	b08d      	sub	sp, #52	; 0x34
   d46aa:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d46ac:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d46ae:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d46b2:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d46b4:	2300      	movs	r3, #0
   d46b6:	2020      	movs	r0, #32
   d46b8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d46bc:	e9cd 4200 	strd	r4, r2, [sp]
   d46c0:	2001      	movs	r0, #1
   d46c2:	aa04      	add	r2, sp, #16
   d46c4:	f007 fd44 	bl	dc150 <log_message_v>
}
   d46c8:	b00d      	add	sp, #52	; 0x34
   d46ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d46ce:	b003      	add	sp, #12
   d46d0:	4770      	bx	lr

000d46d2 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d46d2:	b40e      	push	{r1, r2, r3}
   d46d4:	b510      	push	{r4, lr}
   d46d6:	b08d      	sub	sp, #52	; 0x34
   d46d8:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d46da:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d46dc:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d46e0:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d46e2:	2300      	movs	r3, #0
   d46e4:	2020      	movs	r0, #32
   d46e6:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d46ea:	e9cd 4200 	strd	r4, r2, [sp]
   d46ee:	2032      	movs	r0, #50	; 0x32
   d46f0:	aa04      	add	r2, sp, #16
   d46f2:	f007 fd2d 	bl	dc150 <log_message_v>
}
   d46f6:	b00d      	add	sp, #52	; 0x34
   d46f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d46fc:	b003      	add	sp, #12
   d46fe:	4770      	bx	lr

000d4700 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d4700:	b510      	push	{r4, lr}
   d4702:	7202      	strb	r2, [r0, #8]
   d4704:	22ff      	movs	r2, #255	; 0xff
   d4706:	8142      	strh	r2, [r0, #10]
   d4708:	2200      	movs	r2, #0
   d470a:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d470e:	6142      	str	r2, [r0, #20]
   d4710:	7602      	strb	r2, [r0, #24]
   d4712:	61c2      	str	r2, [r0, #28]
    instance = this;
   d4714:	4a02      	ldr	r2, [pc, #8]	; (d4720 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d4716:	4c03      	ldr	r4, [pc, #12]	; (d4724 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d4718:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d471a:	e9c0 4100 	strd	r4, r1, [r0]
}
   d471e:	bd10      	pop	{r4, pc}
   d4720:	2003e48c 	.word	0x2003e48c
   d4724:	000e2468 	.word	0x000e2468

000d4728 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d4728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d472c:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d4730:	4604      	mov	r4, r0
   d4732:	4689      	mov	r9, r1
   d4734:	4616      	mov	r6, r2
   d4736:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d4738:	f1b8 0f00 	cmp.w	r8, #0
   d473c:	d002      	beq.n	d4744 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d473e:	6840      	ldr	r0, [r0, #4]
   d4740:	f008 fabb 	bl	dccba <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d4744:	7a21      	ldrb	r1, [r4, #8]
   d4746:	6860      	ldr	r0, [r4, #4]
   d4748:	f008 faaf 	bl	dccaa <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d474c:	6860      	ldr	r0, [r4, #4]
   d474e:	6803      	ldr	r3, [r0, #0]
   d4750:	4649      	mov	r1, r9
   d4752:	689b      	ldr	r3, [r3, #8]
   d4754:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d4756:	6860      	ldr	r0, [r4, #4]
   d4758:	2100      	movs	r1, #0
   d475a:	f008 faaa 	bl	dccb2 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d475e:	4605      	mov	r5, r0
   d4760:	bb00      	cbnz	r0, d47a4 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d4762:	2301      	movs	r3, #1
   d4764:	7a21      	ldrb	r1, [r4, #8]
   d4766:	6860      	ldr	r0, [r4, #4]
   d4768:	463a      	mov	r2, r7
   d476a:	f008 fa8c 	bl	dcc86 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d476e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d4770:	4603      	mov	r3, r0
        if (count == num) {
   d4772:	d109      	bne.n	d4788 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d4774:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d4776:	42be      	cmp	r6, r7
   d4778:	d01c      	beq.n	d47b4 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d477a:	6860      	ldr	r0, [r4, #4]
   d477c:	6803      	ldr	r3, [r0, #0]
   d477e:	695b      	ldr	r3, [r3, #20]
   d4780:	4798      	blx	r3
   d4782:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d4786:	e7f6      	b.n	d4776 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d4788:	490b      	ldr	r1, [pc, #44]	; (d47b8 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d478a:	480c      	ldr	r0, [pc, #48]	; (d47bc <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d478c:	464a      	mov	r2, r9
   d478e:	f7ff ffa0 	bl	d46d2 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d4792:	f1b8 0f00 	cmp.w	r8, #0
   d4796:	d002      	beq.n	d479e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d4798:	6860      	ldr	r0, [r4, #4]
   d479a:	f008 fa97 	bl	dcccc <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d479e:	4628      	mov	r0, r5
   d47a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d47a4:	4603      	mov	r3, r0
   d47a6:	4906      	ldr	r1, [pc, #24]	; (d47c0 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d47a8:	4804      	ldr	r0, [pc, #16]	; (d47bc <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d47aa:	464a      	mov	r2, r9
   d47ac:	f7ff ff91 	bl	d46d2 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d47b0:	2500      	movs	r5, #0
   d47b2:	e7ee      	b.n	d4792 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d47b4:	2501      	movs	r5, #1
   d47b6:	e7ec      	b.n	d4792 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d47b8:	000e2266 	.word	0x000e2266
   d47bc:	2003e488 	.word	0x2003e488
   d47c0:	000e228b 	.word	0x000e228b

000d47c4 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d47c4:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d47c6:	9300      	str	r3, [sp, #0]
   d47c8:	2301      	movs	r3, #1
   d47ca:	f7ff ffad 	bl	d4728 <_ZN6AB180513readRegistersEhPhjb>
}
   d47ce:	b003      	add	sp, #12
   d47d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d47d4 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d47d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d47d6:	8943      	ldrh	r3, [r0, #10]
   d47d8:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d47da:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d47dc:	d010      	beq.n	d4800 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d47de:	4e19      	ldr	r6, [pc, #100]	; (d4844 <_ZN6AB180510detectChipEv+0x70>)
   d47e0:	4d19      	ldr	r5, [pc, #100]	; (d4848 <_ZN6AB180510detectChipEv+0x74>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d47e2:	f007 fabd 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d47e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d47ea:	d209      	bcs.n	d4800 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d47ec:	8960      	ldrh	r0, [r4, #10]
   d47ee:	f00a fdda 	bl	df3a6 <digitalRead>
   d47f2:	2801      	cmp	r0, #1
   d47f4:	d004      	beq.n	d4800 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d47f6:	4631      	mov	r1, r6
   d47f8:	4628      	mov	r0, r5
   d47fa:	f7ff fe05 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
   d47fe:	e7f0      	b.n	d47e2 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d4800:	2301      	movs	r3, #1
   d4802:	f10d 0207 	add.w	r2, sp, #7
   d4806:	2128      	movs	r1, #40	; 0x28
   d4808:	4620      	mov	r0, r4
   d480a:	f7ff ffdb 	bl	d47c4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d480e:	b930      	cbnz	r0, d481e <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d4810:	480d      	ldr	r0, [pc, #52]	; (d4848 <_ZN6AB180510detectChipEv+0x74>)
   d4812:	490e      	ldr	r1, [pc, #56]	; (d484c <_ZN6AB180510detectChipEv+0x78>)
   d4814:	f7ff fdf8 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
   d4818:	2000      	movs	r0, #0
}
   d481a:	b002      	add	sp, #8
   d481c:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d481e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4822:	2b18      	cmp	r3, #24
   d4824:	d1f4      	bne.n	d4810 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d4826:	2301      	movs	r3, #1
   d4828:	f10d 0207 	add.w	r2, sp, #7
   d482c:	2129      	movs	r1, #41	; 0x29
   d482e:	4620      	mov	r0, r4
   d4830:	f7ff ffc8 	bl	d47c4 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d4834:	2800      	cmp	r0, #0
   d4836:	d0eb      	beq.n	d4810 <_ZN6AB180510detectChipEv+0x3c>
   d4838:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d483c:	2b05      	cmp	r3, #5
   d483e:	d1e7      	bne.n	d4810 <_ZN6AB180510detectChipEv+0x3c>
   d4840:	e7eb      	b.n	d481a <_ZN6AB180510detectChipEv+0x46>
   d4842:	bf00      	nop
   d4844:	000e22af 	.word	0x000e22af
   d4848:	2003e488 	.word	0x2003e488
   d484c:	000e22c4 	.word	0x000e22c4

000d4850 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d4850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4854:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d4858:	4604      	mov	r4, r0
   d485a:	460f      	mov	r7, r1
   d485c:	4615      	mov	r5, r2
   d485e:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d4860:	f1b8 0f00 	cmp.w	r8, #0
   d4864:	d002      	beq.n	d486c <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d4866:	6840      	ldr	r0, [r0, #4]
   d4868:	f008 fa27 	bl	dccba <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d486c:	7a21      	ldrb	r1, [r4, #8]
   d486e:	6860      	ldr	r0, [r4, #4]
   d4870:	f008 fa1b 	bl	dccaa <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d4874:	6860      	ldr	r0, [r4, #4]
   d4876:	6803      	ldr	r3, [r0, #0]
   d4878:	4639      	mov	r1, r7
   d487a:	689b      	ldr	r3, [r3, #8]
   d487c:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d487e:	442e      	add	r6, r5
   d4880:	42b5      	cmp	r5, r6
   d4882:	6860      	ldr	r0, [r4, #4]
   d4884:	d005      	beq.n	d4892 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d4886:	6803      	ldr	r3, [r0, #0]
   d4888:	f815 1b01 	ldrb.w	r1, [r5], #1
   d488c:	689b      	ldr	r3, [r3, #8]
   d488e:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d4890:	e7f6      	b.n	d4880 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d4892:	2101      	movs	r1, #1
   d4894:	f008 fa0d 	bl	dccb2 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d4898:	4603      	mov	r3, r0
   d489a:	b170      	cbz	r0, d48ba <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d489c:	4908      	ldr	r1, [pc, #32]	; (d48c0 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d489e:	4809      	ldr	r0, [pc, #36]	; (d48c4 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d48a0:	463a      	mov	r2, r7
   d48a2:	f7ff ff16 	bl	d46d2 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d48a6:	2500      	movs	r5, #0
    }

    if (lock) {
   d48a8:	f1b8 0f00 	cmp.w	r8, #0
   d48ac:	d002      	beq.n	d48b4 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d48ae:	6860      	ldr	r0, [r4, #4]
   d48b0:	f008 fa0c 	bl	dcccc <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d48b4:	4628      	mov	r0, r5
   d48b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d48ba:	2501      	movs	r5, #1
   d48bc:	e7f4      	b.n	d48a8 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d48be:	bf00      	nop
   d48c0:	000e22d1 	.word	0x000e22d1
   d48c4:	2003e488 	.word	0x2003e488

000d48c8 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d48c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d48ca:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d48ce:	9300      	str	r3, [sp, #0]
   d48d0:	f10d 020f 	add.w	r2, sp, #15
   d48d4:	2301      	movs	r3, #1
   d48d6:	f7ff ffbb 	bl	d4850 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d48da:	b005      	add	sp, #20
   d48dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d48e0 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d48e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d48e2:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d48e4:	460c      	mov	r4, r1
   d48e6:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d48e8:	491a      	ldr	r1, [pc, #104]	; (d4954 <_ZN6AB18056setWDTEi+0x74>)
   d48ea:	481b      	ldr	r0, [pc, #108]	; (d4958 <_ZN6AB18056setWDTEi+0x78>)
   d48ec:	f7ff fd8c 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d48f0:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d48f2:	bfb8      	it	lt
   d48f4:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d48f6:	b97c      	cbnz	r4, d4918 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d48f8:	2301      	movs	r3, #1
   d48fa:	4622      	mov	r2, r4
   d48fc:	211b      	movs	r1, #27
   d48fe:	4628      	mov	r0, r5
   d4900:	f7ff ffe2 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d4904:	4915      	ldr	r1, [pc, #84]	; (d495c <_ZN6AB18056setWDTEi+0x7c>)
   d4906:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d4908:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d490a:	4813      	ldr	r0, [pc, #76]	; (d4958 <_ZN6AB18056setWDTEi+0x78>)
   d490c:	f7ff feca 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d4910:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d4912:	616c      	str	r4, [r5, #20]
}
   d4914:	4630      	mov	r0, r6
   d4916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d4918:	2c03      	cmp	r4, #3
   d491a:	dd19      	ble.n	d4950 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d491c:	10a7      	asrs	r7, r4, #2
   d491e:	2f1f      	cmp	r7, #31
   d4920:	bfa8      	it	ge
   d4922:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d4924:	00ba      	lsls	r2, r7, #2
   d4926:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d492a:	2301      	movs	r3, #1
   d492c:	b2d2      	uxtb	r2, r2
   d492e:	211b      	movs	r1, #27
   d4930:	4628      	mov	r0, r5
   d4932:	f7ff ffc9 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d4936:	463a      	mov	r2, r7
   d4938:	4603      	mov	r3, r0
   d493a:	4909      	ldr	r1, [pc, #36]	; (d4960 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d493c:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d493e:	4806      	ldr	r0, [pc, #24]	; (d4958 <_ZN6AB18056setWDTEi+0x78>)
   d4940:	f7ff feb0 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d4944:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d4948:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d494a:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d494c:	616f      	str	r7, [r5, #20]
   d494e:	e7e1      	b.n	d4914 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d4950:	2701      	movs	r7, #1
   d4952:	e7e7      	b.n	d4924 <_ZN6AB18056setWDTEi+0x44>
   d4954:	000e22f6 	.word	0x000e22f6
   d4958:	2003e488 	.word	0x2003e488
   d495c:	000e2300 	.word	0x000e2300
   d4960:	000e231c 	.word	0x000e231c

000d4964 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d4964:	460b      	mov	r3, r1
    if (instance) {
   d4966:	4907      	ldr	r1, [pc, #28]	; (d4984 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d4968:	4602      	mov	r2, r0
    if (instance) {
   d496a:	6808      	ldr	r0, [r1, #0]
   d496c:	b148      	cbz	r0, d4982 <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d496e:	2b00      	cmp	r3, #0
   d4970:	bf08      	it	eq
   d4972:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d4976:	d104      	bne.n	d4982 <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d4978:	68c3      	ldr	r3, [r0, #12]
   d497a:	b113      	cbz	r3, d4982 <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d497c:	2100      	movs	r1, #0
   d497e:	f7ff bfaf 	b.w	d48e0 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d4982:	4770      	bx	lr
   d4984:	2003e48c 	.word	0x2003e48c

000d4988 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d4988:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d498c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4990:	4605      	mov	r5, r0
   d4992:	4616      	mov	r6, r2
   d4994:	461f      	mov	r7, r3
    if (lock) {
   d4996:	f1b8 0f00 	cmp.w	r8, #0
   d499a:	d004      	beq.n	d49a6 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d499c:	6840      	ldr	r0, [r0, #4]
   d499e:	9101      	str	r1, [sp, #4]
   d49a0:	f008 f98b 	bl	dccba <_ZN7TwoWire4lockEv>
   d49a4:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d49a6:	9101      	str	r1, [sp, #4]
   d49a8:	2300      	movs	r3, #0
   d49aa:	f10d 020f 	add.w	r2, sp, #15
   d49ae:	4628      	mov	r0, r5
   d49b0:	f7ff ff08 	bl	d47c4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d49b4:	4604      	mov	r4, r0
   d49b6:	b160      	cbz	r0, d49d2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d49b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d49bc:	ea03 0206 	and.w	r2, r3, r6
   d49c0:	433a      	orrs	r2, r7
        if (newValue != value) {
   d49c2:	4293      	cmp	r3, r2
   d49c4:	d005      	beq.n	d49d2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d49c6:	9901      	ldr	r1, [sp, #4]
   d49c8:	2300      	movs	r3, #0
   d49ca:	4628      	mov	r0, r5
   d49cc:	f7ff ff7c 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
   d49d0:	4604      	mov	r4, r0
    if (lock) {
   d49d2:	f1b8 0f00 	cmp.w	r8, #0
   d49d6:	d002      	beq.n	d49de <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d49d8:	6868      	ldr	r0, [r5, #4]
   d49da:	f008 f977 	bl	dcccc <_ZN7TwoWire6unlockEv>
}
   d49de:	4620      	mov	r0, r4
   d49e0:	b004      	add	sp, #16
   d49e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d49e8 <_ZN6AB180511resetConfigEm>:
bool AB1805::resetConfig(uint32_t flags) {
   d49e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d49ea:	4604      	mov	r4, r0
    _log.trace("resetConfig(0x%08lx)", flags);
   d49ec:	460a      	mov	r2, r1
   d49ee:	483f      	ldr	r0, [pc, #252]	; (d4aec <_ZN6AB180511resetConfigEm+0x104>)
bool AB1805::resetConfig(uint32_t flags) {
   d49f0:	460d      	mov	r5, r1
    _log.trace("resetConfig(0x%08lx)", flags);
   d49f2:	493f      	ldr	r1, [pc, #252]	; (d4af0 <_ZN6AB180511resetConfigEm+0x108>)
   d49f4:	f7ff fe56 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
    wire.lock();
   d49f8:	6860      	ldr	r0, [r4, #4]
   d49fa:	f008 f95e 	bl	dccba <_ZN7TwoWire4lockEv>
    writeRegister(REG_STATUS, REG_STATUS_DEFAULT, false);
   d49fe:	2300      	movs	r3, #0
   d4a00:	461a      	mov	r2, r3
   d4a02:	210f      	movs	r1, #15
   d4a04:	4620      	mov	r0, r4
   d4a06:	f7ff ff5f 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_1, REG_CTRL_1_DEFAULT, false);
   d4a0a:	2300      	movs	r3, #0
   d4a0c:	2213      	movs	r2, #19
   d4a0e:	2110      	movs	r1, #16
   d4a10:	4620      	mov	r0, r4
   d4a12:	f7ff ff59 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_2, REG_CTRL_2_DEFAULT, false);
   d4a16:	2300      	movs	r3, #0
   d4a18:	223c      	movs	r2, #60	; 0x3c
   d4a1a:	2111      	movs	r1, #17
   d4a1c:	4620      	mov	r0, r4
   d4a1e:	f7ff ff53 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_INT_MASK, REG_INT_MASK_DEFAULT, false);
   d4a22:	2300      	movs	r3, #0
   d4a24:	22e0      	movs	r2, #224	; 0xe0
   d4a26:	2112      	movs	r1, #18
   d4a28:	4620      	mov	r0, r4
   d4a2a:	f7ff ff4d 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SQW, REG_SQW_DEFAULT, false);
   d4a2e:	2300      	movs	r3, #0
   d4a30:	2226      	movs	r2, #38	; 0x26
   d4a32:	2113      	movs	r1, #19
   d4a34:	4620      	mov	r0, r4
   d4a36:	f7ff ff47 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT, false);
   d4a3a:	2300      	movs	r3, #0
   d4a3c:	461a      	mov	r2, r3
   d4a3e:	2117      	movs	r1, #23
   d4a40:	4620      	mov	r0, r4
   d4a42:	f7ff ff41 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0) {
   d4a46:	f015 0301 	ands.w	r3, r5, #1
   d4a4a:	d048      	beq.n	d4ade <_ZN6AB180511resetConfigEm+0xf6>
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
   d4a4c:	2300      	movs	r3, #0
   d4a4e:	9300      	str	r3, [sp, #0]
   d4a50:	22e3      	movs	r2, #227	; 0xe3
   d4a52:	2323      	movs	r3, #35	; 0x23
   d4a54:	2118      	movs	r1, #24
   d4a56:	4620      	mov	r0, r4
   d4a58:	f7ff ff96 	bl	d4988 <_ZN6AB180512maskRegisterEhhhb>
    writeRegister(REG_TIMER, REG_TIMER_DEFAULT, false);
   d4a5c:	2300      	movs	r3, #0
   d4a5e:	461a      	mov	r2, r3
   d4a60:	2119      	movs	r1, #25
   d4a62:	4620      	mov	r0, r4
   d4a64:	f7ff ff30 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT, false);
   d4a68:	2300      	movs	r3, #0
   d4a6a:	461a      	mov	r2, r3
   d4a6c:	211a      	movs	r1, #26
   d4a6e:	4620      	mov	r0, r4
   d4a70:	f7ff ff2a 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_WDT, REG_WDT_DEFAULT, false);
   d4a74:	2300      	movs	r3, #0
   d4a76:	461a      	mov	r2, r3
   d4a78:	211b      	movs	r1, #27
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	f7ff ff24 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
   d4a80:	f015 0f02 	tst.w	r5, #2
    writeRegister(REG_OSC_CTRL, oscCtrl, false);
   d4a84:	f04f 0300 	mov.w	r3, #0
   d4a88:	bf0c      	ite	eq
   d4a8a:	461a      	moveq	r2, r3
   d4a8c:	2288      	movne	r2, #136	; 0x88
   d4a8e:	211c      	movs	r1, #28
   d4a90:	4620      	mov	r0, r4
   d4a92:	f7ff ff19 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TRICKLE, REG_TRICKLE_DEFAULT, false);
   d4a96:	2300      	movs	r3, #0
   d4a98:	461a      	mov	r2, r3
   d4a9a:	2120      	movs	r1, #32
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	f7ff ff13 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT, false);
   d4aa2:	2300      	movs	r3, #0
   d4aa4:	22f0      	movs	r2, #240	; 0xf0
   d4aa6:	2121      	movs	r1, #33	; 0x21
   d4aa8:	4620      	mov	r0, r4
   d4aaa:	f7ff ff0d 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_AFCTRL, REG_AFCTRL_DEFAULT, false);
   d4aae:	2300      	movs	r3, #0
   d4ab0:	461a      	mov	r2, r3
   d4ab2:	2126      	movs	r1, #38	; 0x26
   d4ab4:	4620      	mov	r0, r4
   d4ab6:	f7ff ff07 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT, false);
   d4aba:	2300      	movs	r3, #0
   d4abc:	2280      	movs	r2, #128	; 0x80
   d4abe:	2127      	movs	r1, #39	; 0x27
   d4ac0:	4620      	mov	r0, r4
   d4ac2:	f7ff ff01 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_OCTRL, REG_OCTRL_DEFAULT, false);
   d4ac6:	2300      	movs	r3, #0
   d4ac8:	461a      	mov	r2, r3
   d4aca:	2130      	movs	r1, #48	; 0x30
   d4acc:	4620      	mov	r0, r4
   d4ace:	f7ff fefb 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
    wire.unlock();
   d4ad2:	6860      	ldr	r0, [r4, #4]
   d4ad4:	f008 f8fa 	bl	dcccc <_ZN7TwoWire6unlockEv>
}
   d4ad8:	2001      	movs	r0, #1
   d4ada:	b003      	add	sp, #12
   d4adc:	bd30      	pop	{r4, r5, pc}
        writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT, false);
   d4ade:	2223      	movs	r2, #35	; 0x23
   d4ae0:	2118      	movs	r1, #24
   d4ae2:	4620      	mov	r0, r4
   d4ae4:	f7ff fef0 	bl	d48c8 <_ZN6AB180513writeRegisterEhhb>
   d4ae8:	e7b8      	b.n	d4a5c <_ZN6AB180511resetConfigEm+0x74>
   d4aea:	bf00      	nop
   d4aec:	2003e488 	.word	0x2003e488
   d4af0:	000e2340 	.word	0x000e2340

000d4af4 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d4af4:	b513      	push	{r0, r1, r4, lr}
   d4af6:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d4af8:	f10d 0207 	add.w	r2, sp, #7
   d4afc:	f7ff fe62 	bl	d47c4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d4b00:	b128      	cbz	r0, d4b0e <_ZN6AB180510isBitClearEhhb+0x1a>
   d4b02:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4b06:	421c      	tst	r4, r3
   d4b08:	bf0c      	ite	eq
   d4b0a:	2001      	moveq	r0, #1
   d4b0c:	2000      	movne	r0, #0
}
   d4b0e:	b002      	add	sp, #8
   d4b10:	bd10      	pop	{r4, pc}

000d4b12 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d4b12:	b513      	push	{r0, r1, r4, lr}
   d4b14:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d4b16:	f10d 0207 	add.w	r2, sp, #7
   d4b1a:	f7ff fe53 	bl	d47c4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d4b1e:	b128      	cbz	r0, d4b2c <_ZN6AB18058isBitSetEhhb+0x1a>
   d4b20:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4b24:	421c      	tst	r4, r3
   d4b26:	bf14      	ite	ne
   d4b28:	2001      	movne	r0, #1
   d4b2a:	2000      	moveq	r0, #0
}
   d4b2c:	b002      	add	sp, #8
   d4b2e:	bd10      	pop	{r4, pc}

000d4b30 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d4b30:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d4b32:	43d2      	mvns	r2, r2
   d4b34:	9300      	str	r3, [sp, #0]
   d4b36:	b2d2      	uxtb	r2, r2
   d4b38:	2300      	movs	r3, #0
   d4b3a:	f7ff ff25 	bl	d4988 <_ZN6AB180512maskRegisterEhhhb>
}
   d4b3e:	b003      	add	sp, #12
   d4b40:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b44 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d4b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d4b46:	2301      	movs	r3, #1
   d4b48:	f10d 0207 	add.w	r2, sp, #7
   d4b4c:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d4b4e:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d4b50:	f7ff fe38 	bl	d47c4 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d4b54:	4605      	mov	r5, r0
   d4b56:	b938      	cbnz	r0, d4b68 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d4b58:	491e      	ldr	r1, [pc, #120]	; (d4bd4 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d4b5a:	481f      	ldr	r0, [pc, #124]	; (d4bd8 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d4b5c:	22ad      	movs	r2, #173	; 0xad
   d4b5e:	f7ff fdb8 	bl	d46d2 <_ZNK5spark6Logger5errorEPKcz>
}
   d4b62:	4628      	mov	r0, r5
   d4b64:	b003      	add	sp, #12
   d4b66:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d4b68:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4b6c:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d4b70:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d4b74:	d00b      	beq.n	d4b8e <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d4b76:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d4b78:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d4b7a:	210f      	movs	r1, #15
   d4b7c:	4620      	mov	r0, r4
   d4b7e:	f7ff ffd7 	bl	d4b30 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d4b82:	4a16      	ldr	r2, [pc, #88]	; (d4bdc <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d4b84:	4916      	ldr	r1, [pc, #88]	; (d4be0 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d4b86:	4814      	ldr	r0, [pc, #80]	; (d4bd8 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d4b88:	f7ff fc3e 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
   d4b8c:	e7e9      	b.n	d4b62 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d4b8e:	2208      	movs	r2, #8
   d4b90:	2117      	movs	r1, #23
   d4b92:	4620      	mov	r0, r4
   d4b94:	f7ff ffbd 	bl	d4b12 <_ZN6AB18058isBitSetEhhb>
   d4b98:	b118      	cbz	r0, d4ba2 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d4b9a:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d4b9c:	4a11      	ldr	r2, [pc, #68]	; (d4be4 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d4b9e:	61e3      	str	r3, [r4, #28]
   d4ba0:	e7f0      	b.n	d4b84 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d4ba2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4ba6:	071a      	lsls	r2, r3, #28
   d4ba8:	d509      	bpl.n	d4bbe <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d4baa:	2303      	movs	r3, #3
   d4bac:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d4bae:	2208      	movs	r2, #8
   d4bb0:	2301      	movs	r3, #1
   d4bb2:	210f      	movs	r1, #15
   d4bb4:	4620      	mov	r0, r4
   d4bb6:	f7ff ffbb 	bl	d4b30 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d4bba:	4a0b      	ldr	r2, [pc, #44]	; (d4be8 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d4bbc:	e7e2      	b.n	d4b84 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d4bbe:	075b      	lsls	r3, r3, #29
   d4bc0:	d5cf      	bpl.n	d4b62 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d4bc2:	2204      	movs	r2, #4
   d4bc4:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d4bc6:	2301      	movs	r3, #1
   d4bc8:	210f      	movs	r1, #15
   d4bca:	4620      	mov	r0, r4
   d4bcc:	f7ff ffb0 	bl	d4b30 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d4bd0:	4a06      	ldr	r2, [pc, #24]	; (d4bec <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d4bd2:	e7d7      	b.n	d4b84 <_ZN6AB180516updateWakeReasonEv+0x40>
   d4bd4:	000e2384 	.word	0x000e2384
   d4bd8:	2003e488 	.word	0x2003e488
   d4bdc:	000e2355 	.word	0x000e2355
   d4be0:	000e23a3 	.word	0x000e23a3
   d4be4:	000e235e 	.word	0x000e235e
   d4be8:	000e236e 	.word	0x000e236e
   d4bec:	000e237e 	.word	0x000e237e

000d4bf0 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d4bf0:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d4bf2:	9300      	str	r3, [sp, #0]
   d4bf4:	4613      	mov	r3, r2
   d4bf6:	22ff      	movs	r2, #255	; 0xff
   d4bf8:	f7ff fec6 	bl	d4988 <_ZN6AB180512maskRegisterEhhhb>
}
   d4bfc:	b003      	add	sp, #12
   d4bfe:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c02 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d4c02:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4c06:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d4c0a:	4605      	mov	r5, r0
   d4c0c:	460c      	mov	r4, r1
   d4c0e:	4691      	mov	r9, r2
   d4c10:	461f      	mov	r7, r3
    if (lock) {
   d4c12:	f1ba 0f00 	cmp.w	sl, #0
   d4c16:	d002      	beq.n	d4c1e <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d4c18:	6840      	ldr	r0, [r0, #4]
   d4c1a:	f008 f84e 	bl	dccba <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d4c1e:	b307      	cbz	r7, d4c62 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d4c20:	2f20      	cmp	r7, #32
   d4c22:	463e      	mov	r6, r7
   d4c24:	bf28      	it	cs
   d4c26:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d4c28:	2c7f      	cmp	r4, #127	; 0x7f
   d4c2a:	d826      	bhi.n	d4c7a <_ZN6AB18057readRamEjPhjb+0x78>
   d4c2c:	1933      	adds	r3, r6, r4
   d4c2e:	2b80      	cmp	r3, #128	; 0x80
   d4c30:	d901      	bls.n	d4c36 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d4c32:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d4c36:	2301      	movs	r3, #1
   d4c38:	2204      	movs	r2, #4
   d4c3a:	213f      	movs	r1, #63	; 0x3f
   d4c3c:	4628      	mov	r0, r5
   d4c3e:	f7ff ff77 	bl	d4b30 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d4c42:	2300      	movs	r3, #0
   d4c44:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d4c48:	9300      	str	r3, [sp, #0]
   d4c4a:	464a      	mov	r2, r9
   d4c4c:	4633      	mov	r3, r6
   d4c4e:	b2c9      	uxtb	r1, r1
   d4c50:	4628      	mov	r0, r5
   d4c52:	f7ff fd69 	bl	d4728 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d4c56:	4680      	mov	r8, r0
   d4c58:	b128      	cbz	r0, d4c66 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d4c5a:	4434      	add	r4, r6
        dataLen -= count;
   d4c5c:	1bbf      	subs	r7, r7, r6
        data += count;
   d4c5e:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d4c60:	e7dd      	b.n	d4c1e <_ZN6AB18057readRamEjPhjb+0x1c>
   d4c62:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d4c66:	f1ba 0f00 	cmp.w	sl, #0
   d4c6a:	d002      	beq.n	d4c72 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d4c6c:	6868      	ldr	r0, [r5, #4]
   d4c6e:	f008 f82d 	bl	dcccc <_ZN7TwoWire6unlockEv>
}
   d4c72:	4640      	mov	r0, r8
   d4c74:	b002      	add	sp, #8
   d4c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d4c7a:	2301      	movs	r3, #1
   d4c7c:	2204      	movs	r2, #4
   d4c7e:	213f      	movs	r1, #63	; 0x3f
   d4c80:	4628      	mov	r0, r5
   d4c82:	f7ff ffb5 	bl	d4bf0 <_ZN6AB180514setRegisterBitEhhb>
   d4c86:	e7dc      	b.n	d4c42 <_ZN6AB18057readRamEjPhjb+0x40>

000d4c88 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d4c88:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4c8c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d4c90:	4605      	mov	r5, r0
   d4c92:	460c      	mov	r4, r1
   d4c94:	4691      	mov	r9, r2
   d4c96:	461f      	mov	r7, r3
    if (lock) {
   d4c98:	f1ba 0f00 	cmp.w	sl, #0
   d4c9c:	d002      	beq.n	d4ca4 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d4c9e:	6840      	ldr	r0, [r0, #4]
   d4ca0:	f008 f80b 	bl	dccba <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d4ca4:	b307      	cbz	r7, d4ce8 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d4ca6:	2f1f      	cmp	r7, #31
   d4ca8:	463e      	mov	r6, r7
   d4caa:	bf28      	it	cs
   d4cac:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d4cae:	2c7f      	cmp	r4, #127	; 0x7f
   d4cb0:	d826      	bhi.n	d4d00 <_ZN6AB18058writeRamEjPKhjb+0x78>
   d4cb2:	1933      	adds	r3, r6, r4
   d4cb4:	2b80      	cmp	r3, #128	; 0x80
   d4cb6:	d901      	bls.n	d4cbc <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d4cb8:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d4cbc:	2301      	movs	r3, #1
   d4cbe:	2204      	movs	r2, #4
   d4cc0:	213f      	movs	r1, #63	; 0x3f
   d4cc2:	4628      	mov	r0, r5
   d4cc4:	f7ff ff34 	bl	d4b30 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d4cc8:	2300      	movs	r3, #0
   d4cca:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d4cce:	9300      	str	r3, [sp, #0]
   d4cd0:	464a      	mov	r2, r9
   d4cd2:	4633      	mov	r3, r6
   d4cd4:	b2c9      	uxtb	r1, r1
   d4cd6:	4628      	mov	r0, r5
   d4cd8:	f7ff fdba 	bl	d4850 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d4cdc:	4680      	mov	r8, r0
   d4cde:	b128      	cbz	r0, d4cec <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d4ce0:	4434      	add	r4, r6
        dataLen -= count;
   d4ce2:	1bbf      	subs	r7, r7, r6
        data += count;
   d4ce4:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d4ce6:	e7dd      	b.n	d4ca4 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d4ce8:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d4cec:	f1ba 0f00 	cmp.w	sl, #0
   d4cf0:	d002      	beq.n	d4cf8 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d4cf2:	6868      	ldr	r0, [r5, #4]
   d4cf4:	f007 ffea 	bl	dcccc <_ZN7TwoWire6unlockEv>
}
   d4cf8:	4640      	mov	r0, r8
   d4cfa:	b002      	add	sp, #8
   d4cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d4d00:	2301      	movs	r3, #1
   d4d02:	2204      	movs	r2, #4
   d4d04:	213f      	movs	r1, #63	; 0x3f
   d4d06:	4628      	mov	r0, r5
   d4d08:	f7ff ff72 	bl	d4bf0 <_ZN6AB180514setRegisterBitEhhb>
   d4d0c:	e7dc      	b.n	d4cc8 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d4d10 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d4d10:	b530      	push	{r4, r5, lr}
   d4d12:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d4d14:	680d      	ldr	r5, [r1, #0]
   d4d16:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d4d1a:	9503      	str	r5, [sp, #12]
   d4d1c:	684d      	ldr	r5, [r1, #4]
   d4d1e:	9502      	str	r5, [sp, #8]
   d4d20:	688d      	ldr	r5, [r1, #8]
   d4d22:	9501      	str	r5, [sp, #4]
   d4d24:	68c9      	ldr	r1, [r1, #12]
   d4d26:	9100      	str	r1, [sp, #0]
   d4d28:	3301      	adds	r3, #1
   d4d2a:	4904      	ldr	r1, [pc, #16]	; (d4d3c <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d4d2c:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d4d30:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d4d32:	f009 ff0f 	bl	deb54 <_ZN6String6formatEPKcz>
}
   d4d36:	4620      	mov	r0, r4
   d4d38:	b005      	add	sp, #20
   d4d3a:	bd30      	pop	{r4, r5, pc}
   d4d3c:	000e23b4 	.word	0x000e23b4

000d4d40 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d4d40:	1103      	asrs	r3, r0, #4
}
   d4d42:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d4d44:	f000 000f 	and.w	r0, r0, #15
}
   d4d48:	fb02 0003 	mla	r0, r2, r3, r0
   d4d4c:	4770      	bx	lr

000d4d4e <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d4d4e:	b538      	push	{r3, r4, r5, lr}
   d4d50:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d4d52:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d4d54:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d4d56:	f7ff fff3 	bl	d4d40 <_ZN6AB180510bcdToValueEh>
   d4d5a:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d4d5c:	7860      	ldrb	r0, [r4, #1]
   d4d5e:	f7ff ffef 	bl	d4d40 <_ZN6AB180510bcdToValueEh>
   d4d62:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d4d64:	78a0      	ldrb	r0, [r4, #2]
   d4d66:	f7ff ffeb 	bl	d4d40 <_ZN6AB180510bcdToValueEh>
   d4d6a:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d4d6c:	78e0      	ldrb	r0, [r4, #3]
   d4d6e:	f7ff ffe7 	bl	d4d40 <_ZN6AB180510bcdToValueEh>
   d4d72:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d4d74:	7920      	ldrb	r0, [r4, #4]
   d4d76:	f7ff ffe3 	bl	d4d40 <_ZN6AB180510bcdToValueEh>
   d4d7a:	3801      	subs	r0, #1
   d4d7c:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d4d7e:	b92d      	cbnz	r5, d4d8c <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d4d80:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d4d82:	7828      	ldrb	r0, [r5, #0]
   d4d84:	f7ff ffdc 	bl	d4d40 <_ZN6AB180510bcdToValueEh>
   d4d88:	6188      	str	r0, [r1, #24]
}
   d4d8a:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d4d8c:	7960      	ldrb	r0, [r4, #5]
   d4d8e:	f7ff ffd7 	bl	d4d40 <_ZN6AB180510bcdToValueEh>
   d4d92:	3064      	adds	r0, #100	; 0x64
   d4d94:	1da5      	adds	r5, r4, #6
   d4d96:	6148      	str	r0, [r1, #20]
   d4d98:	e7f3      	b.n	d4d82 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d4d9c <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d4d9c:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d4d9e:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d4da0:	b088      	sub	sp, #32
   d4da2:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d4da4:	461a      	mov	r2, r3
   d4da6:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d4da8:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d4daa:	f7ff fea3 	bl	d4af4 <_ZN6AB180510isBitClearEhhb>
   d4dae:	b1f0      	cbz	r0, d4dee <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d4db0:	2308      	movs	r3, #8
   d4db2:	2601      	movs	r6, #1
   d4db4:	4620      	mov	r0, r4
   d4db6:	9600      	str	r6, [sp, #0]
   d4db8:	eb0d 0203 	add.w	r2, sp, r3
   d4dbc:	2100      	movs	r1, #0
   d4dbe:	f7ff fcb3 	bl	d4728 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d4dc2:	4604      	mov	r4, r0
   d4dc4:	b198      	cbz	r0, d4dee <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d4dc6:	4632      	mov	r2, r6
   d4dc8:	4629      	mov	r1, r5
   d4dca:	f10d 0009 	add.w	r0, sp, #9
   d4dce:	f7ff ffbe 	bl	d4d4e <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d4dd2:	a804      	add	r0, sp, #16
   d4dd4:	f7ff ff9c 	bl	d4d10 <_ZN6AB180510tmToStringEPK2tm>
   d4dd8:	4808      	ldr	r0, [pc, #32]	; (d4dfc <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d4dda:	9a04      	ldr	r2, [sp, #16]
   d4ddc:	4908      	ldr	r1, [pc, #32]	; (d4e00 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d4dde:	f7ff fb13 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
   d4de2:	a804      	add	r0, sp, #16
   d4de4:	f009 fd48 	bl	de878 <_ZN6StringD1Ev>
}
   d4de8:	4620      	mov	r0, r4
   d4dea:	b008      	add	sp, #32
   d4dec:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d4dee:	2224      	movs	r2, #36	; 0x24
   d4df0:	2100      	movs	r1, #0
   d4df2:	4628      	mov	r0, r5
   d4df4:	f00b f8f6 	bl	dffe4 <memset>
   d4df8:	2400      	movs	r4, #0
   d4dfa:	e7f5      	b.n	d4de8 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d4dfc:	2003e488 	.word	0x2003e488
   d4e00:	000e23d2 	.word	0x000e23d2

000d4e04 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d4e04:	b530      	push	{r4, r5, lr}
   d4e06:	b08b      	sub	sp, #44	; 0x2c
   d4e08:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d4e0a:	a901      	add	r1, sp, #4
   d4e0c:	f7ff ffc6 	bl	d4d9c <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d4e10:	4604      	mov	r4, r0
   d4e12:	b120      	cbz	r0, d4e1e <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d4e14:	a801      	add	r0, sp, #4
   d4e16:	f007 fb4b 	bl	dc4b0 <mktime>
   d4e1a:	e9c5 0100 	strd	r0, r1, [r5]
}
   d4e1e:	4620      	mov	r0, r4
   d4e20:	b00b      	add	sp, #44	; 0x2c
   d4e22:	bd30      	pop	{r4, r5, pc}

000d4e24 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d4e24:	b510      	push	{r4, lr}
   d4e26:	4604      	mov	r4, r0
   d4e28:	b088      	sub	sp, #32
    if (callBegin) {
   d4e2a:	b111      	cbz	r1, d4e32 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d4e2c:	6840      	ldr	r0, [r0, #4]
   d4e2e:	f007 ff0d 	bl	dcc4c <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d4e32:	4620      	mov	r0, r4
   d4e34:	f7ff fcce 	bl	d47d4 <_ZN6AB180510detectChipEv>
   d4e38:	b370      	cbz	r0, d4e98 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d4e3a:	4620      	mov	r0, r4
   d4e3c:	f7ff fe82 	bl	d4b44 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d4e40:	2301      	movs	r3, #1
   d4e42:	461a      	mov	r2, r3
   d4e44:	2110      	movs	r1, #16
   d4e46:	4620      	mov	r0, r4
   d4e48:	f7ff fe54 	bl	d4af4 <_ZN6AB180510isBitClearEhhb>
   d4e4c:	b1d8      	cbz	r0, d4e86 <_ZN6AB18055setupEb+0x62>
   d4e4e:	f00a f85b 	bl	def08 <_ZN9TimeClass7isValidEv>
   d4e52:	b9c0      	cbnz	r0, d4e86 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d4e54:	a902      	add	r1, sp, #8
   d4e56:	4620      	mov	r0, r4
   d4e58:	f7ff ffd4 	bl	d4e04 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d4e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d4e60:	f009 ff59 	bl	ded16 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d4e64:	4b0f      	ldr	r3, [pc, #60]	; (d4ea4 <_ZN6AB18055setupEb+0x80>)
   d4e66:	4910      	ldr	r1, [pc, #64]	; (d4ea8 <_ZN6AB18055setupEb+0x84>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	9300      	str	r3, [sp, #0]
   d4e6c:	a804      	add	r0, sp, #16
   d4e6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d4e72:	f00a f807 	bl	dee84 <_ZN9TimeClass6formatExPKc>
   d4e76:	480d      	ldr	r0, [pc, #52]	; (d4eac <_ZN6AB18055setupEb+0x88>)
   d4e78:	9a04      	ldr	r2, [sp, #16]
   d4e7a:	490d      	ldr	r1, [pc, #52]	; (d4eb0 <_ZN6AB18055setupEb+0x8c>)
   d4e7c:	f7ff fac4 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
   d4e80:	a804      	add	r0, sp, #16
   d4e82:	f009 fcf9 	bl	de878 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d4e86:	4a0b      	ldr	r2, [pc, #44]	; (d4eb4 <_ZN6AB18055setupEb+0x90>)
   d4e88:	2300      	movs	r3, #0
   d4e8a:	2100      	movs	r1, #0
   d4e8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d4e90:	f007 f9a0 	bl	dc1d4 <system_subscribe_event>
}
   d4e94:	b008      	add	sp, #32
   d4e96:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d4e98:	4907      	ldr	r1, [pc, #28]	; (d4eb8 <_ZN6AB18055setupEb+0x94>)
   d4e9a:	4804      	ldr	r0, [pc, #16]	; (d4eac <_ZN6AB18055setupEb+0x88>)
   d4e9c:	f7ff fc19 	bl	d46d2 <_ZNK5spark6Logger5errorEPKcz>
   d4ea0:	e7f1      	b.n	d4e86 <_ZN6AB18055setupEb+0x62>
   d4ea2:	bf00      	nop
   d4ea4:	2003e214 	.word	0x2003e214
   d4ea8:	2003e5d0 	.word	0x2003e5d0
   d4eac:	2003e488 	.word	0x2003e488
   d4eb0:	000e23e0 	.word	0x000e23e0
   d4eb4:	000d4965 	.word	0x000d4965
   d4eb8:	000e23fd 	.word	0x000e23fd

000d4ebc <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d4ebc:	220a      	movs	r2, #10
   d4ebe:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d4ec2:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d4ec6:	fb93 f1f2 	sdiv	r1, r3, r2
   d4eca:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d4ece:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d4ed2:	b2c0      	uxtb	r0, r0
   d4ed4:	4770      	bx	lr

000d4ed6 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d4ed6:	b570      	push	{r4, r5, r6, lr}
   d4ed8:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d4eda:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d4edc:	460c      	mov	r4, r1
   d4ede:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d4ee0:	f7ff ffec 	bl	d4ebc <_ZN6AB180510valueToBcdEi>
   d4ee4:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d4ee6:	6868      	ldr	r0, [r5, #4]
   d4ee8:	f7ff ffe8 	bl	d4ebc <_ZN6AB180510valueToBcdEi>
   d4eec:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d4eee:	68a8      	ldr	r0, [r5, #8]
   d4ef0:	f7ff ffe4 	bl	d4ebc <_ZN6AB180510valueToBcdEi>
   d4ef4:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d4ef6:	68e8      	ldr	r0, [r5, #12]
   d4ef8:	f7ff ffe0 	bl	d4ebc <_ZN6AB180510valueToBcdEi>
   d4efc:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d4efe:	6928      	ldr	r0, [r5, #16]
   d4f00:	3001      	adds	r0, #1
   d4f02:	f7ff ffdb 	bl	d4ebc <_ZN6AB180510valueToBcdEi>
   d4f06:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d4f08:	b92e      	cbnz	r6, d4f16 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d4f0a:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d4f0c:	69a8      	ldr	r0, [r5, #24]
   d4f0e:	f7ff ffd5 	bl	d4ebc <_ZN6AB180510valueToBcdEi>
   d4f12:	7030      	strb	r0, [r6, #0]
}
   d4f14:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d4f16:	696a      	ldr	r2, [r5, #20]
   d4f18:	2364      	movs	r3, #100	; 0x64
   d4f1a:	fb92 f0f3 	sdiv	r0, r2, r3
   d4f1e:	fb03 2010 	mls	r0, r3, r0, r2
   d4f22:	f7ff ffcb 	bl	d4ebc <_ZN6AB180510valueToBcdEi>
   d4f26:	1da6      	adds	r6, r4, #6
   d4f28:	7160      	strb	r0, [r4, #5]
   d4f2a:	e7ef      	b.n	d4f0c <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d4f2c <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d4f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f2e:	b087      	sub	sp, #28
   d4f30:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d4f32:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d4f34:	4616      	mov	r6, r2
   d4f36:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d4f38:	f7ff feea 	bl	d4d10 <_ZN6AB180510tmToStringEPK2tm>
   d4f3c:	481e      	ldr	r0, [pc, #120]	; (d4fb8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d4f3e:	9a02      	ldr	r2, [sp, #8]
   d4f40:	491e      	ldr	r1, [pc, #120]	; (d4fbc <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d4f42:	f7ff fa61 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
   d4f46:	a802      	add	r0, sp, #8
   d4f48:	f009 fc96 	bl	de878 <_ZN6StringD1Ev>
    if (lock) {
   d4f4c:	b116      	cbz	r6, d4f54 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d4f4e:	6868      	ldr	r0, [r5, #4]
   d4f50:	f007 feb3 	bl	dccba <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d4f54:	4620      	mov	r0, r4
   d4f56:	2201      	movs	r2, #1
   d4f58:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d4f5c:	2700      	movs	r7, #0
   d4f5e:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d4f62:	f7ff ffb8 	bl	d4ed6 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d4f66:	2301      	movs	r3, #1
   d4f68:	461a      	mov	r2, r3
   d4f6a:	2110      	movs	r1, #16
   d4f6c:	4628      	mov	r0, r5
   d4f6e:	f7ff fe3f 	bl	d4bf0 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d4f72:	4604      	mov	r4, r0
   d4f74:	b1e8      	cbz	r0, d4fb2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d4f76:	2308      	movs	r3, #8
   d4f78:	9700      	str	r7, [sp, #0]
   d4f7a:	eb0d 0203 	add.w	r2, sp, r3
   d4f7e:	4639      	mov	r1, r7
   d4f80:	4628      	mov	r0, r5
   d4f82:	f7ff fc65 	bl	d4850 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d4f86:	4604      	mov	r4, r0
   d4f88:	b160      	cbz	r0, d4fa4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d4f8a:	2301      	movs	r3, #1
   d4f8c:	461a      	mov	r2, r3
   d4f8e:	2110      	movs	r1, #16
   d4f90:	4628      	mov	r0, r5
   d4f92:	f7ff fdcd 	bl	d4b30 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d4f96:	b116      	cbz	r6, d4f9e <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d4f98:	6868      	ldr	r0, [r5, #4]
   d4f9a:	f007 fe97 	bl	dcccc <_ZN7TwoWire6unlockEv>
}
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	b007      	add	sp, #28
   d4fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d4fa4:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d4fa8:	4905      	ldr	r1, [pc, #20]	; (d4fc0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d4faa:	4803      	ldr	r0, [pc, #12]	; (d4fb8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d4fac:	f7ff fb91 	bl	d46d2 <_ZNK5spark6Logger5errorEPKcz>
   d4fb0:	e7f1      	b.n	d4f96 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d4fb2:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d4fb6:	e7f7      	b.n	d4fa8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d4fb8:	2003e488 	.word	0x2003e488
   d4fbc:	000e2415 	.word	0x000e2415
   d4fc0:	000e2423 	.word	0x000e2423

000d4fc4 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d4fc4:	b513      	push	{r0, r1, r4, lr}
   d4fc6:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d4fc8:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d4fca:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d4fce:	f00a ffcf 	bl	dff70 <gmtime>
    return setRtcFromTm(tm, lock);
   d4fd2:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d4fd6:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d4fd8:	4620      	mov	r0, r4
   d4fda:	f7ff ffa7 	bl	d4f2c <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d4fde:	b002      	add	sp, #8
   d4fe0:	bd10      	pop	{r4, pc}
	...

000d4fe4 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d4fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d4fe6:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d4fe8:	b089      	sub	sp, #36	; 0x24
   d4fea:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d4fec:	bb75      	cbnz	r5, d504c <_ZN6AB18054loopEv+0x68>
   d4fee:	f009 ff8b 	bl	def08 <_ZN9TimeClass7isValidEv>
   d4ff2:	b358      	cbz	r0, d504c <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d4ff4:	2600      	movs	r6, #0
   d4ff6:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d4ff8:	a904      	add	r1, sp, #16
   d4ffa:	4628      	mov	r0, r5
        tm = 0;
   d4ffc:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d5000:	f007 f96e 	bl	dc2e0 <spark_sync_time_last>
   d5004:	b310      	cbz	r0, d504c <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d5006:	2501      	movs	r5, #1
   d5008:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d500a:	f009 ff9a 	bl	def42 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d500e:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d5010:	4602      	mov	r2, r0
   d5012:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d5014:	4620      	mov	r0, r4
        time_t time = Time.now();
   d5016:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d501a:	f7ff ffd3 	bl	d4fc4 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d501e:	a902      	add	r1, sp, #8
   d5020:	4620      	mov	r0, r4
        time = 0;
   d5022:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d5026:	f7ff feed 	bl	d4e04 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d502a:	4b12      	ldr	r3, [pc, #72]	; (d5074 <_ZN6AB18054loopEv+0x90>)
   d502c:	4912      	ldr	r1, [pc, #72]	; (d5078 <_ZN6AB18054loopEv+0x94>)
   d502e:	681b      	ldr	r3, [r3, #0]
   d5030:	9300      	str	r3, [sp, #0]
   d5032:	a804      	add	r0, sp, #16
   d5034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d5038:	f009 ff24 	bl	dee84 <_ZN9TimeClass6formatExPKc>
   d503c:	480f      	ldr	r0, [pc, #60]	; (d507c <_ZN6AB18054loopEv+0x98>)
   d503e:	9a04      	ldr	r2, [sp, #16]
   d5040:	490f      	ldr	r1, [pc, #60]	; (d5080 <_ZN6AB18054loopEv+0x9c>)
   d5042:	f7ff f9e1 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
   d5046:	a804      	add	r0, sp, #16
   d5048:	f009 fc16 	bl	de878 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d504c:	6963      	ldr	r3, [r4, #20]
   d504e:	b173      	cbz	r3, d506e <_ZN6AB18054loopEv+0x8a>
   d5050:	f006 fe86 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d5054:	6923      	ldr	r3, [r4, #16]
   d5056:	1ac0      	subs	r0, r0, r3
   d5058:	6963      	ldr	r3, [r4, #20]
   d505a:	4298      	cmp	r0, r3
   d505c:	d307      	bcc.n	d506e <_ZN6AB18054loopEv+0x8a>
   d505e:	f006 fe7f 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d5062:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d5066:	6120      	str	r0, [r4, #16]
            setWDT();
   d5068:	4620      	mov	r0, r4
   d506a:	f7ff fc39 	bl	d48e0 <_ZN6AB18056setWDTEi>
}
   d506e:	b009      	add	sp, #36	; 0x24
   d5070:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5072:	bf00      	nop
   d5074:	2003e214 	.word	0x2003e214
   d5078:	2003e5d0 	.word	0x2003e5d0
   d507c:	2003e488 	.word	0x2003e488
   d5080:	000e243e 	.word	0x000e243e

000d5084 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d5084:	4b01      	ldr	r3, [pc, #4]	; (d508c <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d5086:	4a02      	ldr	r2, [pc, #8]	; (d5090 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d5088:	601a      	str	r2, [r3, #0]
}
   d508a:	4770      	bx	lr
   d508c:	2003e488 	.word	0x2003e488
   d5090:	000e2454 	.word	0x000e2454

000d5094 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5094:	2a02      	cmp	r2, #2
   d5096:	d006      	beq.n	d50a6 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x12>
   d5098:	2a03      	cmp	r2, #3
   d509a:	d002      	beq.n	d50a2 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d509c:	2a01      	cmp	r2, #1
   d509e:	d100      	bne.n	d50a2 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d50a0:	6001      	str	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d50a2:	2000      	movs	r0, #0
   d50a4:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d50a6:	680b      	ldr	r3, [r1, #0]
   d50a8:	6003      	str	r3, [r0, #0]
	}
   d50aa:	e7fa      	b.n	d50a2 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>

000d50ac <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d50ac:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d50ae:	2301      	movs	r3, #1
   d50b0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d50b2:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d50b4:	4604      	mov	r4, r0
        if (th->func) {
   d50b6:	b143      	cbz	r3, d50ca <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d50b8:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d50ba:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d50bc:	2301      	movs	r3, #1
   d50be:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d50c0:	2000      	movs	r0, #0
    }
   d50c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d50c6:	f006 be1b 	b.w	dbd00 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d50ca:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d50cc:	2800      	cmp	r0, #0
   d50ce:	d0f5      	beq.n	d50bc <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d50d0:	6883      	ldr	r3, [r0, #8]
   d50d2:	b90b      	cbnz	r3, d50d8 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d50d4:	f00a f9da 	bl	df48c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d50d8:	68c3      	ldr	r3, [r0, #12]
   d50da:	e7ee      	b.n	d50ba <_ZN6Thread3runEPv+0xe>

000d50dc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d50dc:	b510      	push	{r4, lr}
      if (_M_manager)
   d50de:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d50e0:	4604      	mov	r4, r0
      if (_M_manager)
   d50e2:	b113      	cbz	r3, d50ea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d50e4:	2203      	movs	r2, #3
   d50e6:	4601      	mov	r1, r0
   d50e8:	4798      	blx	r3
    }
   d50ea:	4620      	mov	r0, r4
   d50ec:	bd10      	pop	{r4, pc}

000d50ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d50ee:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d50f0:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d50f2:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d50f4:	b135      	cbz	r5, d5104 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d50f6:	4628      	mov	r0, r5
   d50f8:	f7ff fff0 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d50fc:	2110      	movs	r1, #16
   d50fe:	4628      	mov	r0, r5
   d5100:	f00a f9b8 	bl	df474 <_ZdlPvj>
   d5104:	4620      	mov	r0, r4
   d5106:	2114      	movs	r1, #20
      }
   d5108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d510c:	f00a b9b2 	b.w	df474 <_ZdlPvj>

000d5110 <_ZN6Thread7disposeEv>:
    void dispose()
   d5110:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5112:	6803      	ldr	r3, [r0, #0]
   d5114:	4604      	mov	r4, r0
        if (!isValid())
   d5116:	b1ab      	cbz	r3, d5144 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   d5118:	6858      	ldr	r0, [r3, #4]
   d511a:	f006 fda1 	bl	dbc60 <os_thread_is_current>
   d511e:	b988      	cbnz	r0, d5144 <_ZN6Thread7disposeEv+0x34>
   d5120:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d5122:	7c5a      	ldrb	r2, [r3, #17]
   d5124:	b912      	cbnz	r2, d512c <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d5126:	6858      	ldr	r0, [r3, #4]
   d5128:	f006 fda2 	bl	dbc70 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d512c:	6823      	ldr	r3, [r4, #0]
   d512e:	6858      	ldr	r0, [r3, #4]
   d5130:	f006 fda6 	bl	dbc80 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5134:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5136:	2300      	movs	r3, #0
   d5138:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d513a:	b118      	cbz	r0, d5144 <_ZN6Thread7disposeEv+0x34>
    }
   d513c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5140:	f7ff bfd5 	b.w	d50ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d5144:	bd10      	pop	{r4, pc}
	...

000d5148 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   d5148:	4a05      	ldr	r2, [pc, #20]	; (d5160 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   d514a:	6002      	str	r2, [r0, #0]
   d514c:	2200      	movs	r2, #0
   d514e:	6042      	str	r2, [r0, #4]
   d5150:	7302      	strb	r2, [r0, #12]
        val_(0) {
   d5152:	f880 22bd 	strb.w	r2, [r0, #701]	; 0x2bd
    _Function_base() : _M_manager(nullptr) { }
   d5156:	f8c0 22c8 	str.w	r2, [r0, #712]	; 0x2c8
   d515a:	f8c0 22d0 	str.w	r2, [r0, #720]	; 0x2d0
}
   d515e:	4770      	bx	lr
   d5160:	000e2494 	.word	0x000e2494

000d5164 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   d5164:	b510      	push	{r4, lr}
    if (!_instance) {
   d5166:	4c07      	ldr	r4, [pc, #28]	; (d5184 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   d5168:	6823      	ldr	r3, [r4, #0]
   d516a:	b943      	cbnz	r3, d517e <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   d516c:	f44f 7035 	mov.w	r0, #724	; 0x2d4
   d5170:	f7fe ff91 	bl	d4096 <_Znwj>
   d5174:	4603      	mov	r3, r0
   d5176:	b108      	cbz	r0, d517c <_ZN19BackgroundPublishRK8instanceEv+0x18>
   d5178:	f7ff ffe6 	bl	d5148 <_ZN19BackgroundPublishRKC1Ev>
   d517c:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   d517e:	6820      	ldr	r0, [r4, #0]
   d5180:	bd10      	pop	{r4, pc}
   d5182:	bf00      	nop
   d5184:	2003e490 	.word	0x2003e490

000d5188 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   d5188:	b538      	push	{r3, r4, r5, lr}
   d518a:	4604      	mov	r4, r0
    if(thread)
   d518c:	6840      	ldr	r0, [r0, #4]
   d518e:	b190      	cbz	r0, d51b6 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   d5190:	2302      	movs	r3, #2
   d5192:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   d5194:	f7ff ffbc 	bl	d5110 <_ZN6Thread7disposeEv>
        delete thread;
   d5198:	6865      	ldr	r5, [r4, #4]
   d519a:	b155      	cbz	r5, d51b2 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   d519c:	4628      	mov	r0, r5
   d519e:	f7ff ffb7 	bl	d5110 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   d51a2:	6828      	ldr	r0, [r5, #0]
   d51a4:	b108      	cbz	r0, d51aa <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   d51a6:	f7ff ffa2 	bl	d50ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d51aa:	2104      	movs	r1, #4
   d51ac:	4628      	mov	r0, r5
   d51ae:	f00a f961 	bl	df474 <_ZdlPvj>
        thread = NULL;
   d51b2:	2300      	movs	r3, #0
   d51b4:	6063      	str	r3, [r4, #4]
    }
}
   d51b6:	bd38      	pop	{r3, r4, r5, pc}

000d51b8 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d51b8:	b510      	push	{r4, lr}
   d51ba:	4b05      	ldr	r3, [pc, #20]	; (d51d0 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   d51bc:	6003      	str	r3, [r0, #0]
   d51be:	4604      	mov	r4, r0
    stop();
   d51c0:	f7ff ffe2 	bl	d5188 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   d51c4:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d51c8:	f7ff ff88 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
}
   d51cc:	4620      	mov	r0, r4
   d51ce:	bd10      	pop	{r4, pc}
   d51d0:	000e2494 	.word	0x000e2494

000d51d4 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d51d4:	b510      	push	{r4, lr}
   d51d6:	4604      	mov	r4, r0
}
   d51d8:	f7ff ffee 	bl	d51b8 <_ZN19BackgroundPublishRKD1Ev>
   d51dc:	4620      	mov	r0, r4
   d51de:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   d51e2:	f00a f947 	bl	df474 <_ZdlPvj>
   d51e6:	4620      	mov	r0, r4
   d51e8:	bd10      	pop	{r4, pc}

000d51ea <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   d51ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   d51ec:	4604      	mov	r4, r0
   d51ee:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   d51f0:	f100 060d 	add.w	r6, r0, #13
   d51f4:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   d51f8:	7b23      	ldrb	r3, [r4, #12]
   d51fa:	b91b      	cbnz	r3, d5204 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   d51fc:	2001      	movs	r0, #1
   d51fe:	f007 f95f 	bl	dc4c0 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   d5202:	e7f9      	b.n	d51f8 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   d5204:	7b23      	ldrb	r3, [r4, #12]
   d5206:	2b02      	cmp	r3, #2
   d5208:	d062      	beq.n	d52d0 <_ZN19BackgroundPublishRK8thread_fEv+0xe6>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   d520a:	68a0      	ldr	r0, [r4, #8]
   d520c:	f006 fd48 	bl	dbca0 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   d5210:	68a0      	ldr	r0, [r4, #8]
   d5212:	f006 fd4d 	bl	dbcb0 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5216:	f894 32bd 	ldrb.w	r3, [r4, #701]	; 0x2bd
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d521a:	f88d 3000 	strb.w	r3, [sp]
   d521e:	463a      	mov	r2, r7
   d5220:	233c      	movs	r3, #60	; 0x3c
   d5222:	4631      	mov	r1, r6
   d5224:	a806      	add	r0, sp, #24
   d5226:	f007 fb1f 	bl	dc868 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d522a:	9d06      	ldr	r5, [sp, #24]
   d522c:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d522e:	b933      	cbnz	r3, d523e <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   d5230:	7b23      	ldrb	r3, [r4, #12]
   d5232:	2b02      	cmp	r3, #2
   d5234:	d003      	beq.n	d523e <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   d5236:	2001      	movs	r0, #1
   d5238:	f007 f942 	bl	dc4c0 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d523c:	e7f5      	b.n	d522a <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   d523e:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d5242:	b31b      	cbz	r3, d528c <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5244:	2000      	movs	r0, #0
   d5246:	f006 ffd5 	bl	dc1f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d524a:	b120      	cbz	r0, d5256 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   d524c:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d524e:	b913      	cbnz	r3, d5256 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   d5250:	f007 f81e 	bl	dc290 <spark_process>
    }
   d5254:	e7fa      	b.n	d524c <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5256:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   d5258:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   d525c:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   d525e:	1e59      	subs	r1, r3, #1
   d5260:	424b      	negs	r3, r1
   d5262:	414b      	adcs	r3, r1
   d5264:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   d5268:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d526c:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d5270:	b90b      	cbnz	r3, d5276 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   d5272:	f00a f90b 	bl	df48c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5276:	ab05      	add	r3, sp, #20
   d5278:	9300      	str	r3, [sp, #0]
   d527a:	f8d4 52cc 	ldr.w	r5, [r4, #716]	; 0x2cc
   d527e:	ab04      	add	r3, sp, #16
   d5280:	aa03      	add	r2, sp, #12
   d5282:	f10d 010b 	add.w	r1, sp, #11
   d5286:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d528a:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   d528c:	68a0      	ldr	r0, [r4, #8]
   d528e:	f006 fd07 	bl	dbca0 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   d5292:	7b23      	ldrb	r3, [r4, #12]
   d5294:	2b02      	cmp	r3, #2
   d5296:	d015      	beq.n	d52c4 <_ZN19BackgroundPublishRK8thread_fEv+0xda>
	if (_M_manager)
   d5298:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
            {
                return;
            }
            event_context = NULL;
   d529c:	2500      	movs	r5, #0
   d529e:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
   d52a2:	b133      	cbz	r3, d52b2 <_ZN19BackgroundPublishRK8thread_fEv+0xc8>
            completed_cb = NULL;
   d52a4:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d52a8:	2203      	movs	r2, #3
   d52aa:	4608      	mov	r0, r1
   d52ac:	4798      	blx	r3
	    _M_invoker = nullptr;
   d52ae:	e9c4 55b2 	strd	r5, r5, [r4, #712]	; 0x2c8
            state = BACKGROUND_PUBLISH_IDLE;
   d52b2:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   d52b4:	68a0      	ldr	r0, [r4, #8]
   d52b6:	7323      	strb	r3, [r4, #12]
   d52b8:	f006 fcfa 	bl	dbcb0 <os_mutex_unlock>
   d52bc:	a807      	add	r0, sp, #28
   d52be:	f7ff f8ba 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52c2:	e799      	b.n	d51f8 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   d52c4:	68a0      	ldr	r0, [r4, #8]
   d52c6:	f006 fcf3 	bl	dbcb0 <os_mutex_unlock>
   d52ca:	a807      	add	r0, sp, #28
   d52cc:	f7ff f8b3 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d52d0:	b009      	add	sp, #36	; 0x24
   d52d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d52d4 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   d52d4:	6800      	ldr	r0, [r0, #0]
   d52d6:	f7ff bf88 	b.w	d51ea <_ZN19BackgroundPublishRK8thread_fEv>

000d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d52da:	b513      	push	{r0, r1, r4, lr}
   d52dc:	460b      	mov	r3, r1
   d52de:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52e0:	e9d0 0100 	ldrd	r0, r1, [r0]
   d52e4:	466c      	mov	r4, sp
   d52e6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d52ea:	e893 0003 	ldmia.w	r3, {r0, r1}
   d52ee:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d52f2:	e894 0003 	ldmia.w	r4, {r0, r1}
   d52f6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d52fa:	b002      	add	sp, #8
   d52fc:	bd10      	pop	{r4, pc}
	...

000d5300 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d5300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5304:	4606      	mov	r6, r0
   d5306:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d5308:	2014      	movs	r0, #20
   d530a:	4926      	ldr	r1, [pc, #152]	; (d53a4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d530c:	4617      	mov	r7, r2
   d530e:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d5310:	f00a f8b2 	bl	df478 <_ZnwjRKSt9nothrow_t>
   d5314:	4604      	mov	r4, r0
   d5316:	b130      	cbz	r0, d5326 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5318:	2200      	movs	r2, #0
            exited(false) {
   d531a:	e9c0 2200 	strd	r2, r2, [r0]
   d531e:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d5322:	7402      	strb	r2, [r0, #16]
   d5324:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5326:	6034      	str	r4, [r6, #0]
        if (!d_) {
   d5328:	2c00      	cmp	r4, #0
   d532a:	d031      	beq.n	d5390 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d532c:	491d      	ldr	r1, [pc, #116]	; (d53a4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   d532e:	2010      	movs	r0, #16
   d5330:	f00a f8a2 	bl	df478 <_ZnwjRKSt9nothrow_t>
   d5334:	4605      	mov	r5, r0
   d5336:	b168      	cbz	r0, d5354 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   d5338:	2300      	movs	r3, #0
   d533a:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d533c:	4601      	mov	r1, r0
   d533e:	4638      	mov	r0, r7
   d5340:	f7ff ffcb 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5344:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5346:	68aa      	ldr	r2, [r5, #8]
   d5348:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d534a:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d534c:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d534e:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5350:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5352:	60fa      	str	r2, [r7, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5354:	6827      	ldr	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5356:	6025      	str	r5, [r4, #0]
	if (__p != pointer())
   d5358:	b137      	cbz	r7, d5368 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   d535a:	4638      	mov	r0, r7
   d535c:	f7ff febe 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d5360:	2110      	movs	r1, #16
   d5362:	4638      	mov	r0, r7
   d5364:	f00a f886 	bl	df474 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5368:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d536a:	6803      	ldr	r3, [r0, #0]
   d536c:	b183      	cbz	r3, d5390 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d536e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5370:	464a      	mov	r2, r9
   d5372:	e9cd 0300 	strd	r0, r3, [sp]
   d5376:	4641      	mov	r1, r8
   d5378:	4b0b      	ldr	r3, [pc, #44]	; (d53a8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   d537a:	3004      	adds	r0, #4
   d537c:	f006 fc68 	bl	dbc50 <os_thread_create>
   d5380:	b930      	cbnz	r0, d5390 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   d5382:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   d5384:	7c1b      	ldrb	r3, [r3, #16]
   d5386:	b94b      	cbnz	r3, d539c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   d5388:	2001      	movs	r0, #1
   d538a:	f006 fcd9 	bl	dbd40 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d538e:	e7f8      	b.n	d5382 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5390:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5392:	2300      	movs	r3, #0
   d5394:	6033      	str	r3, [r6, #0]
	if (__p != pointer())
   d5396:	b108      	cbz	r0, d539c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   d5398:	f7ff fea9 	bl	d50ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d539c:	4630      	mov	r0, r6
   d539e:	b003      	add	sp, #12
   d53a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d53a4:	000e2f30 	.word	0x000e2f30
   d53a8:	000d50ad 	.word	0x000d50ad

000d53ac <_ZN19BackgroundPublishRK5startEv>:
{
   d53ac:	b530      	push	{r4, r5, lr}
    if(!thread)
   d53ae:	6843      	ldr	r3, [r0, #4]
{
   d53b0:	b087      	sub	sp, #28
   d53b2:	4604      	mov	r4, r0
    if(!thread)
   d53b4:	b9c3      	cbnz	r3, d53e8 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   d53b6:	3008      	adds	r0, #8
   d53b8:	f006 fc6a 	bl	dbc90 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   d53bc:	4b0b      	ldr	r3, [pc, #44]	; (d53ec <_ZN19BackgroundPublishRK5startEv+0x40>)
   d53be:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   d53c0:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   d53c2:	4b0b      	ldr	r3, [pc, #44]	; (d53f0 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d53c4:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d53c6:	9304      	str	r3, [sp, #16]
   d53c8:	f7fe fe65 	bl	d4096 <_Znwj>
   d53cc:	4605      	mov	r5, r0
   d53ce:	b138      	cbz	r0, d53e0 <_ZN19BackgroundPublishRK5startEv+0x34>
   d53d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d53d4:	9300      	str	r3, [sp, #0]
   d53d6:	4907      	ldr	r1, [pc, #28]	; (d53f4 <_ZN19BackgroundPublishRK5startEv+0x48>)
   d53d8:	2302      	movs	r3, #2
   d53da:	aa02      	add	r2, sp, #8
   d53dc:	f7ff ff90 	bl	d5300 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   d53e0:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   d53e2:	a802      	add	r0, sp, #8
   d53e4:	f7ff fe7a 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
}
   d53e8:	b007      	add	sp, #28
   d53ea:	bd30      	pop	{r4, r5, pc}
   d53ec:	000d52d5 	.word	0x000d52d5
   d53f0:	000d5095 	.word	0x000d5095
   d53f4:	000e2478 	.word	0x000e2478

000d53f8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   d53f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d53fc:	4604      	mov	r4, r0
   d53fe:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   d5400:	6880      	ldr	r0, [r0, #8]
   d5402:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d5404:	4698      	mov	r8, r3
   d5406:	460d      	mov	r5, r1
   d5408:	4616      	mov	r6, r2
   d540a:	f006 fc49 	bl	dbca0 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   d540e:	6863      	ldr	r3, [r4, #4]
   d5410:	b11b      	cbz	r3, d541a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   d5412:	7b23      	ldrb	r3, [r4, #12]
   d5414:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d5418:	b133      	cbz	r3, d5428 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   d541a:	68a0      	ldr	r0, [r4, #8]
   d541c:	f006 fc48 	bl	dbcb0 <os_mutex_unlock>
    {
        return false;
   d5420:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   d5422:	b005      	add	sp, #20
   d5424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5428:	68a0      	ldr	r0, [r4, #8]
   d542a:	f006 fc41 	bl	dbcb0 <os_mutex_unlock>
    if(!name)
   d542e:	2d00      	cmp	r5, #0
   d5430:	d03d      	beq.n	d54ae <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   d5432:	2241      	movs	r2, #65	; 0x41
   d5434:	4629      	mov	r1, r5
   d5436:	f104 000d 	add.w	r0, r4, #13
   d543a:	f00a fe78 	bl	e012e <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   d543e:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   d5442:	b38e      	cbz	r6, d54a8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   d5444:	f240 226f 	movw	r2, #623	; 0x26f
   d5448:	4631      	mov	r1, r6
   d544a:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   d544e:	f00a fe6e 	bl	e012e <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   d5452:	f884 92bc 	strb.w	r9, [r4, #700]	; 0x2bc
    _Function_base() : _M_manager(nullptr) { }
   d5456:	2300      	movs	r3, #0
   d5458:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d545a:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   d545c:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
      if (static_cast<bool>(__x))
   d5460:	b13b      	cbz	r3, d5472 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5462:	2202      	movs	r2, #2
   d5464:	4639      	mov	r1, r7
   d5466:	4668      	mov	r0, sp
   d5468:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d546a:	68fb      	ldr	r3, [r7, #12]
   d546c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d546e:	68bb      	ldr	r3, [r7, #8]
   d5470:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d5472:	4629      	mov	r1, r5
   d5474:	4668      	mov	r0, sp
   d5476:	f7ff ff30 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d547a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d547c:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
      __b = _GLIBCXX_MOVE(__tmp);
   d5480:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5484:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5486:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d5488:	4668      	mov	r0, sp
   d548a:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
      __b = _GLIBCXX_MOVE(__tmp);
   d548e:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
      __a = _GLIBCXX_MOVE(__b);
   d5492:	9203      	str	r2, [sp, #12]
   d5494:	f7ff fe22 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   d5498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d549a:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
    state = BACKGROUND_PUBLISH_REQUESTED;
   d549e:	2001      	movs	r0, #1
    event_flags = flags;
   d54a0:	f884 82bd 	strb.w	r8, [r4, #701]	; 0x2bd
    state = BACKGROUND_PUBLISH_REQUESTED;
   d54a4:	7320      	strb	r0, [r4, #12]
    return true;
   d54a6:	e7bc      	b.n	d5422 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   d54a8:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   d54ac:	e7d3      	b.n	d5456 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   d54ae:	4628      	mov	r0, r5
   d54b0:	e7b7      	b.n	d5422 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000d54b4 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d54b4:	b510      	push	{r4, lr}
   d54b6:	4b05      	ldr	r3, [pc, #20]	; (d54cc <_ZN10JsonBufferD1Ev+0x18>)
   d54b8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d54ba:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   d54bc:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d54be:	b91b      	cbnz	r3, d54c8 <_ZN10JsonBufferD1Ev+0x14>
   d54c0:	6840      	ldr	r0, [r0, #4]
   d54c2:	b108      	cbz	r0, d54c8 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d54c4:	f006 ff8c 	bl	dc3e0 <free>
	}
}
   d54c8:	4620      	mov	r0, r4
   d54ca:	bd10      	pop	{r4, pc}
   d54cc:	000e24a4 	.word	0x000e24a4

000d54d0 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   d54d0:	b510      	push	{r4, lr}
   d54d2:	4604      	mov	r4, r0
}
   d54d4:	f7ff ffee 	bl	d54b4 <_ZN10JsonBufferD1Ev>
   d54d8:	4620      	mov	r0, r4
   d54da:	2114      	movs	r1, #20
   d54dc:	f009 ffca 	bl	df474 <_ZdlPvj>
   d54e0:	4620      	mov	r0, r4
   d54e2:	bd10      	pop	{r4, pc}

000d54e4 <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d54e4:	b510      	push	{r4, lr}
   d54e6:	4b07      	ldr	r3, [pc, #28]	; (d5504 <_ZN10JsonParserD1Ev+0x20>)
   d54e8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   d54ea:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   d54ec:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   d54ee:	b91b      	cbnz	r3, d54f8 <_ZN10JsonParserD1Ev+0x14>
   d54f0:	6940      	ldr	r0, [r0, #20]
   d54f2:	b108      	cbz	r0, d54f8 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   d54f4:	f006 ff74 	bl	dc3e0 <free>
JsonParser::~JsonParser() {
   d54f8:	4620      	mov	r0, r4
   d54fa:	f7ff ffdb 	bl	d54b4 <_ZN10JsonBufferD1Ev>
	}
}
   d54fe:	4620      	mov	r0, r4
   d5500:	bd10      	pop	{r4, pc}
   d5502:	bf00      	nop
   d5504:	000e24b4 	.word	0x000e24b4

000d5508 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   d5508:	b510      	push	{r4, lr}
   d550a:	4604      	mov	r4, r0
}
   d550c:	f7ff ffea 	bl	d54e4 <_ZN10JsonParserD1Ev>
   d5510:	4620      	mov	r0, r4
   d5512:	212c      	movs	r1, #44	; 0x2c
   d5514:	f009 ffae 	bl	df474 <_ZdlPvj>
   d5518:	4620      	mov	r0, r4
   d551a:	bd10      	pop	{r4, pc}

000d551c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   d551c:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d551e:	e9c0 1201 	strd	r1, r2, [r0, #4]
   d5522:	2200      	movs	r2, #0
   d5524:	60c2      	str	r2, [r0, #12]
   d5526:	2201      	movs	r2, #1
   d5528:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d552a:	6143      	str	r3, [r0, #20]
   d552c:	4a02      	ldr	r2, [pc, #8]	; (d5538 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   d552e:	9b02      	ldr	r3, [sp, #8]
   d5530:	6002      	str	r2, [r0, #0]
   d5532:	61c3      	str	r3, [r0, #28]
}
   d5534:	bd10      	pop	{r4, pc}
   d5536:	bf00      	nop
   d5538:	000e24b4 	.word	0x000e24b4

000d553c <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   d553c:	4770      	bx	lr

000d553e <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   d553e:	4770      	bx	lr

000d5540 <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      }
   d5540:	2001      	movs	r0, #1
   d5542:	4770      	bx	lr

000d5544 <_ZNSt14_Function_base13_Base_managerIZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlR21LocalTimeScheduleItemE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d5544:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5546:	bf08      	it	eq
   d5548:	6001      	streq	r1, [r0, #0]
	}
   d554a:	2000      	movs	r0, #0
   d554c:	4770      	bx	lr

000d554e <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   d554e:	b510      	push	{r4, lr}
}
   d5550:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   d5552:	4604      	mov	r4, r0
}
   d5554:	f009 ff8e 	bl	df474 <_ZdlPvj>
   d5558:	4620      	mov	r0, r4
   d555a:	bd10      	pop	{r4, pc}

000d555c <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   d555c:	b510      	push	{r4, lr}
}
   d555e:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   d5560:	4604      	mov	r4, r0
}
   d5562:	f009 ff87 	bl	df474 <_ZdlPvj>
   d5566:	4620      	mov	r0, r4
   d5568:	bd10      	pop	{r4, pc}
	...

000d556c <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d556c:	b510      	push	{r4, lr}
   d556e:	4b05      	ldr	r3, [pc, #20]	; (d5584 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   d5570:	4604      	mov	r4, r0
   d5572:	f840 3b1c 	str.w	r3, [r0], #28
   d5576:	f009 f97f 	bl	de878 <_ZN6StringD1Ev>
   d557a:	1d20      	adds	r0, r4, #4
   d557c:	f009 f97c 	bl	de878 <_ZN6StringD1Ev>
}
   d5580:	4620      	mov	r0, r4
   d5582:	bd10      	pop	{r4, pc}
   d5584:	000e2538 	.word	0x000e2538

000d5588 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d5588:	b510      	push	{r4, lr}
   d558a:	4604      	mov	r4, r0
}
   d558c:	f7ff ffee 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
   d5590:	4620      	mov	r0, r4
   d5592:	2158      	movs	r1, #88	; 0x58
   d5594:	f009 ff6e 	bl	df474 <_ZdlPvj>
   d5598:	4620      	mov	r0, r4
   d559a:	bd10      	pop	{r4, pc}

000d559c <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   d559c:	b510      	push	{r4, lr}
   d559e:	4b04      	ldr	r3, [pc, #16]	; (d55b0 <_ZN9LocalTimeD1Ev+0x14>)
   d55a0:	4604      	mov	r4, r0
   d55a2:	f840 3b04 	str.w	r3, [r0], #4
   d55a6:	f7ff ffe1 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
   d55aa:	4620      	mov	r0, r4
   d55ac:	bd10      	pop	{r4, pc}
   d55ae:	bf00      	nop
   d55b0:	000e2508 	.word	0x000e2508

000d55b4 <_ZN9LocalTimeD0Ev>:
   d55b4:	b510      	push	{r4, lr}
   d55b6:	4604      	mov	r4, r0
   d55b8:	f7ff fff0 	bl	d559c <_ZN9LocalTimeD1Ev>
   d55bc:	4620      	mov	r0, r4
   d55be:	2160      	movs	r1, #96	; 0x60
   d55c0:	f009 ff58 	bl	df474 <_ZdlPvj>
   d55c4:	4620      	mov	r0, r4
   d55c6:	bd10      	pop	{r4, pc}

000d55c8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   d55c8:	f020 0302 	bic.w	r3, r0, #2
   d55cc:	2b01      	cmp	r3, #1
   d55ce:	d003      	beq.n	d55d8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   d55d0:	1f43      	subs	r3, r0, #5
   d55d2:	4258      	negs	r0, r3
   d55d4:	4158      	adcs	r0, r3
   d55d6:	4770      	bx	lr
   d55d8:	4618      	mov	r0, r3
   d55da:	4770      	bx	lr

000d55dc <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>:

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d55dc:	b108      	cbz	r0, d55e2 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0+0x6>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d55de:	f7fe bd5e 	b.w	d409e <_ZdlPv>
	  _Tr::deallocate(_M_impl, __p, __n);
      }
   d55e2:	4770      	bx	lr

000d55e4 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   d55e4:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d55e6:	b148      	cbz	r0, d55fc <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->max_size())
   d55e8:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   d55ec:	d301      	bcc.n	d55f2 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   d55ee:	f009 ff47 	bl	df480 <_ZSt17__throw_bad_allocv>
      }
   d55f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d55f6:	0080      	lsls	r0, r0, #2
   d55f8:	f7fe bd4d 	b.w	d4096 <_Znwj>
   d55fc:	bd08      	pop	{r3, pc}

000d55fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55fe:	680b      	ldr	r3, [r1, #0]
   d5600:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d5602:	684b      	ldr	r3, [r1, #4]
   d5604:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d5606:	b113      	cbz	r3, d560e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d5608:	685a      	ldr	r2, [r3, #4]
   d560a:	3201      	adds	r2, #1
   d560c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d560e:	4770      	bx	lr

000d5610 <_ZNK12LocalTimeHMS9compareToERKS_>:
        if (hour < other.hour) {
   d5610:	f990 2004 	ldrsb.w	r2, [r0, #4]
   d5614:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d5618:	429a      	cmp	r2, r3
   d561a:	db13      	blt.n	d5644 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
        if (hour > other.hour) {
   d561c:	dc10      	bgt.n	d5640 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
            if (minute < other.minute) {
   d561e:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d5622:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d5626:	429a      	cmp	r2, r3
   d5628:	db0c      	blt.n	d5644 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
            if (minute > other.minute) {
   d562a:	dc09      	bgt.n	d5640 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
                if (second < other.second) {
   d562c:	f990 2006 	ldrsb.w	r2, [r0, #6]
   d5630:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d5634:	429a      	cmp	r2, r3
   d5636:	db05      	blt.n	d5644 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
                if (second > other.second) {
   d5638:	bfcc      	ite	gt
   d563a:	2001      	movgt	r0, #1
   d563c:	2000      	movle	r0, #0
   d563e:	4770      	bx	lr
            return +1;
   d5640:	2001      	movs	r0, #1
   d5642:	4770      	bx	lr
            return -1;
   d5644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
   d5648:	4770      	bx	lr
	...

000d564c <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   d564c:	4a02      	ldr	r2, [pc, #8]	; (d5658 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   d564e:	6002      	str	r2, [r0, #0]
   d5650:	684a      	ldr	r2, [r1, #4]
   d5652:	6042      	str	r2, [r0, #4]
   d5654:	4770      	bx	lr
   d5656:	bf00      	nop
   d5658:	000e2518 	.word	0x000e2518

000d565c <_ZN12LocalTimeHMSaSERKS_>:
   d565c:	f991 2004 	ldrsb.w	r2, [r1, #4]
   d5660:	7102      	strb	r2, [r0, #4]
   d5662:	f991 2005 	ldrsb.w	r2, [r1, #5]
   d5666:	7142      	strb	r2, [r0, #5]
   d5668:	f991 2006 	ldrsb.w	r2, [r1, #6]
   d566c:	7182      	strb	r2, [r0, #6]
   d566e:	f991 2007 	ldrsb.w	r2, [r1, #7]
   d5672:	71c2      	strb	r2, [r0, #7]
   d5674:	4770      	bx	lr

000d5676 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>:
    int compareTo(LocalTimeHMS hms) const {
   d5676:	b538      	push	{r3, r4, r5, lr}
   d5678:	460c      	mov	r4, r1
   d567a:	4605      	mov	r5, r0
        return compareTo(other) < 0;
   d567c:	f100 011c 	add.w	r1, r0, #28
   d5680:	4620      	mov	r0, r4
   d5682:	f7ff ffc5 	bl	d5610 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms < hmsStart) {
   d5686:	2800      	cmp	r0, #0
   d5688:	db09      	blt.n	d569e <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x28>
        return compareTo(other) > 0;
   d568a:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d568e:	4620      	mov	r0, r4
   d5690:	f7ff ffbe 	bl	d5610 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms > hmsEnd) {
   d5694:	2800      	cmp	r0, #0
   d5696:	bfd4      	ite	le
   d5698:	2000      	movle	r0, #0
   d569a:	2001      	movgt	r0, #1
    }
   d569c:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   d569e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d56a2:	e7fb      	b.n	d569c <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x26>

000d56a4 <_ZN22LocalTimePosixTimezoneaSERKS_>:
class LocalTimePosixTimezone {
   d56a4:	b538      	push	{r3, r4, r5, lr}
   d56a6:	4604      	mov	r4, r0
   d56a8:	460d      	mov	r5, r1
   d56aa:	3004      	adds	r0, #4
   d56ac:	3104      	adds	r1, #4
   d56ae:	f009 f96a 	bl	de986 <_ZN6StringaSERKS_>
   d56b2:	f105 0114 	add.w	r1, r5, #20
   d56b6:	f104 0014 	add.w	r0, r4, #20
   d56ba:	f7ff ffcf 	bl	d565c <_ZN12LocalTimeHMSaSERKS_>
   d56be:	f105 011c 	add.w	r1, r5, #28
   d56c2:	f104 001c 	add.w	r0, r4, #28
   d56c6:	f009 f95e 	bl	de986 <_ZN6StringaSERKS_>
   d56ca:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d56ce:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d56d2:	f7ff ffc3 	bl	d565c <_ZN12LocalTimeHMSaSERKS_>
class LocalTimeChange {
   d56d6:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   d56da:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   d56de:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   d56e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   d56e6:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   d56ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   d56ee:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   d56f2:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   d56f6:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d56fa:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d56fe:	f7ff ffad 	bl	d565c <_ZN12LocalTimeHMSaSERKS_>
   d5702:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   d5706:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d570a:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   d570e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   d5712:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   d5716:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   d571a:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   d571e:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   d5722:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d5726:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d572a:	f7ff ff97 	bl	d565c <_ZN12LocalTimeHMSaSERKS_>
class LocalTimePosixTimezone {
   d572e:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d5732:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d5736:	4620      	mov	r0, r4
   d5738:	bd38      	pop	{r3, r4, r5, pc}

000d573a <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   d573a:	694a      	ldr	r2, [r1, #20]
   d573c:	6803      	ldr	r3, [r0, #0]
   d573e:	f362 0316 	bfi	r3, r2, #0, #23
   d5742:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   d5744:	690b      	ldr	r3, [r1, #16]
   d5746:	1c5a      	adds	r2, r3, #1
   d5748:	8843      	ldrh	r3, [r0, #2]
   d574a:	f362 13ca 	bfi	r3, r2, #7, #4
   d574e:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   d5750:	68ca      	ldr	r2, [r1, #12]
   d5752:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d5756:	f362 03c7 	bfi	r3, r2, #3, #5
   d575a:	70c3      	strb	r3, [r0, #3]
}
   d575c:	4770      	bx	lr

000d575e <_ZNK12LocalTimeYMD12getDayOfWeekEv>:
int LocalTimeYMD::getDayOfWeek() const {
   d575e:	b510      	push	{r4, lr}
   d5760:	4604      	mov	r4, r0
   d5762:	b08c      	sub	sp, #48	; 0x30
    struct tm timeInfo = {0};
   d5764:	2224      	movs	r2, #36	; 0x24
   d5766:	2100      	movs	r1, #0
   d5768:	a803      	add	r0, sp, #12
   d576a:	f00a fc3b 	bl	dffe4 <memset>
    timeInfo.tm_year = ymd.year;
   d576e:	6823      	ldr	r3, [r4, #0]
   d5770:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d5774:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d5776:	8863      	ldrh	r3, [r4, #2]
   d5778:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d577c:	3b01      	subs	r3, #1
   d577e:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday = ymd.day;
   d5780:	78e3      	ldrb	r3, [r4, #3]
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   d5782:	a803      	add	r0, sp, #12
    timeInfo.tm_mday = ymd.day;
   d5784:	08db      	lsrs	r3, r3, #3
   d5786:	9306      	str	r3, [sp, #24]
    return mktime(pTimeInfo);
   d5788:	f006 fe92 	bl	dc4b0 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d578c:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d5790:	a903      	add	r1, sp, #12
   d5792:	4668      	mov	r0, sp
   d5794:	f006 fe7c 	bl	dc490 <localtime_r>
}
   d5798:	9809      	ldr	r0, [sp, #36]	; 0x24
   d579a:	b00c      	add	sp, #48	; 0x30
   d579c:	bd10      	pop	{r4, pc}

000d579e <_ZN12LocalTimeYMD6addDayEi>:
void LocalTimeYMD::addDay(int numberOfDays) {
   d579e:	b530      	push	{r4, r5, lr}
   d57a0:	4604      	mov	r4, r0
   d57a2:	b08d      	sub	sp, #52	; 0x34
    struct tm timeInfo = {0};
   d57a4:	2224      	movs	r2, #36	; 0x24
void LocalTimeYMD::addDay(int numberOfDays) {
   d57a6:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d57a8:	a803      	add	r0, sp, #12
   d57aa:	2100      	movs	r1, #0
   d57ac:	f00a fc1a 	bl	dffe4 <memset>
    timeInfo.tm_year = ymd.year;
   d57b0:	6823      	ldr	r3, [r4, #0]
    timeInfo.tm_mday = ymd.day;
   d57b2:	78e1      	ldrb	r1, [r4, #3]
    timeInfo.tm_year = ymd.year;
   d57b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d57b8:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d57ba:	8863      	ldrh	r3, [r4, #2]
   d57bc:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d57c0:	3b01      	subs	r3, #1
    timeInfo.tm_mday += numberOfDays;
   d57c2:	eb05 05d1 	add.w	r5, r5, r1, lsr #3
    return mktime(pTimeInfo);
   d57c6:	a803      	add	r0, sp, #12
    timeInfo.tm_mon = ymd.month - 1;
   d57c8:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday += numberOfDays;
   d57ca:	9506      	str	r5, [sp, #24]
    return mktime(pTimeInfo);
   d57cc:	f006 fe70 	bl	dc4b0 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d57d0:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d57d4:	a903      	add	r1, sp, #12
   d57d6:	4668      	mov	r0, sp
   d57d8:	f006 fe5a 	bl	dc490 <localtime_r>
    fromTimeInfo(&timeInfo);
   d57dc:	a903      	add	r1, sp, #12
   d57de:	4620      	mov	r0, r4
   d57e0:	f7ff ffab 	bl	d573a <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d57e4:	b00d      	add	sp, #52	; 0x34
   d57e6:	bd30      	pop	{r4, r5, pc}

000d57e8 <_ZNK12LocalTimeYMD9compareToES_>:
    if (ymd.year < other.ymd.year) {
   d57e8:	6803      	ldr	r3, [r0, #0]
   d57ea:	f3c1 0216 	ubfx	r2, r1, #0, #23
   d57ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d57f2:	4293      	cmp	r3, r2
   d57f4:	d313      	bcc.n	d581e <_ZNK12LocalTimeYMD9compareToES_+0x36>
    if (ymd.year > other.ymd.year) {
   d57f6:	d810      	bhi.n	d581a <_ZNK12LocalTimeYMD9compareToES_+0x32>
        if (ymd.month < other.ymd.month) {
   d57f8:	8842      	ldrh	r2, [r0, #2]
   d57fa:	f3c1 53c3 	ubfx	r3, r1, #23, #4
   d57fe:	f3c2 12c3 	ubfx	r2, r2, #7, #4
   d5802:	429a      	cmp	r2, r3
   d5804:	d30b      	bcc.n	d581e <_ZNK12LocalTimeYMD9compareToES_+0x36>
        if (ymd.month > other.ymd.month) {
   d5806:	d808      	bhi.n	d581a <_ZNK12LocalTimeYMD9compareToES_+0x32>
            if (ymd.day < other.ymd.day) {
   d5808:	78c3      	ldrb	r3, [r0, #3]
   d580a:	08db      	lsrs	r3, r3, #3
   d580c:	ebb3 6fd1 	cmp.w	r3, r1, lsr #27
   d5810:	d305      	bcc.n	d581e <_ZNK12LocalTimeYMD9compareToES_+0x36>
            if (ymd.day > other.ymd.day) {
   d5812:	bf8c      	ite	hi
   d5814:	2001      	movhi	r0, #1
   d5816:	2000      	movls	r0, #0
   d5818:	4770      	bx	lr
        cmp = +1;
   d581a:	2001      	movs	r0, #1
   d581c:	4770      	bx	lr
        cmp = -1;
   d581e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5822:	4770      	bx	lr

000d5824 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   d5824:	4a02      	ldr	r2, [pc, #8]	; (d5830 <_ZN12LocalTimeHMSC1Ev+0xc>)
   d5826:	6002      	str	r2, [r0, #0]
   d5828:	2200      	movs	r2, #0
   d582a:	6042      	str	r2, [r0, #4]
}
   d582c:	4770      	bx	lr
   d582e:	bf00      	nop
   d5830:	000e2518 	.word	0x000e2518

000d5834 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   d5834:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   d5836:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   d5838:	b087      	sub	sp, #28
    hour = minute = second = 0;
   d583a:	8083      	strh	r3, [r0, #4]
   d583c:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   d583e:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d5840:	ab05      	add	r3, sp, #20
   d5842:	9300      	str	r3, [sp, #0]
   d5844:	4913      	ldr	r1, [pc, #76]	; (d5894 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   d5846:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d5848:	ab04      	add	r3, sp, #16
   d584a:	aa03      	add	r2, sp, #12
   d584c:	4628      	mov	r0, r5
   d584e:	f006 fddf 	bl	dc410 <sscanf>
   d5852:	2803      	cmp	r0, #3
   d5854:	d107      	bne.n	d5866 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   d5856:	9b03      	ldr	r3, [sp, #12]
   d5858:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d585a:	9b04      	ldr	r3, [sp, #16]
   d585c:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   d585e:	9b05      	ldr	r3, [sp, #20]
   d5860:	71a3      	strb	r3, [r4, #6]
}
   d5862:	b007      	add	sp, #28
   d5864:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   d5866:	490c      	ldr	r1, [pc, #48]	; (d5898 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   d5868:	ab04      	add	r3, sp, #16
   d586a:	aa03      	add	r2, sp, #12
   d586c:	4628      	mov	r0, r5
   d586e:	f006 fdcf 	bl	dc410 <sscanf>
   d5872:	2802      	cmp	r0, #2
   d5874:	d104      	bne.n	d5880 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   d5876:	9b03      	ldr	r3, [sp, #12]
   d5878:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d587a:	9b04      	ldr	r3, [sp, #16]
   d587c:	7163      	strb	r3, [r4, #5]
   d587e:	e7f0      	b.n	d5862 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   d5880:	4906      	ldr	r1, [pc, #24]	; (d589c <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   d5882:	aa03      	add	r2, sp, #12
   d5884:	4628      	mov	r0, r5
   d5886:	f006 fdc3 	bl	dc410 <sscanf>
   d588a:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   d588c:	bf04      	itt	eq
   d588e:	9b03      	ldreq	r3, [sp, #12]
   d5890:	7123      	strbeq	r3, [r4, #4]
}
   d5892:	e7e6      	b.n	d5862 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   d5894:	000e24bc 	.word	0x000e24bc
   d5898:	000e24bf 	.word	0x000e24bf
   d589c:	000e22fd 	.word	0x000e22fd

000d58a0 <_ZN12LocalTimeHMSC1EPKc>:
LocalTimeHMS::LocalTimeHMS(const char *str) {
   d58a0:	b510      	push	{r4, lr}
   d58a2:	4b04      	ldr	r3, [pc, #16]	; (d58b4 <_ZN12LocalTimeHMSC1EPKc+0x14>)
   d58a4:	6003      	str	r3, [r0, #0]
   d58a6:	2300      	movs	r3, #0
   d58a8:	4604      	mov	r4, r0
   d58aa:	6043      	str	r3, [r0, #4]
    parse(str);
   d58ac:	f7ff ffc2 	bl	d5834 <_ZN12LocalTimeHMS5parseEPKc>
}
   d58b0:	4620      	mov	r0, r4
   d58b2:	bd10      	pop	{r4, pc}
   d58b4:	000e2518 	.word	0x000e2518

000d58b8 <_ZN21LocalTimeScheduleItemC1Ev>:
    LocalTimeScheduleItem() {
   d58b8:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   d58ba:	2500      	movs	r5, #0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d58bc:	237f      	movs	r3, #127	; 0x7f
    LocalTimeScheduleItem() {
   d58be:	4604      	mov	r4, r0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d58c0:	7003      	strb	r3, [r0, #0]
   d58c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
   d58c6:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d58ca:	e9c0 5505 	strd	r5, r5, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d58ce:	490a      	ldr	r1, [pc, #40]	; (d58f8 <_ZN21LocalTimeScheduleItemC1Ev+0x40>)
   d58d0:	301c      	adds	r0, #28
   d58d2:	f7ff ffe5 	bl	d58a0 <_ZN12LocalTimeHMSC1EPKc>
   d58d6:	4909      	ldr	r1, [pc, #36]	; (d58fc <_ZN21LocalTimeScheduleItemC1Ev+0x44>)
   d58d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d58dc:	f7ff ffe0 	bl	d58a0 <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeScheduleItem() {
   d58e0:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   d58e4:	4906      	ldr	r1, [pc, #24]	; (d5900 <_ZN21LocalTimeScheduleItemC1Ev+0x48>)
   d58e6:	6365      	str	r5, [r4, #52]	; 0x34
   d58e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d58ec:	f009 f80f 	bl	de90e <_ZN6StringC1EPKc>
   d58f0:	64a5      	str	r5, [r4, #72]	; 0x48
    }
   d58f2:	4620      	mov	r0, r4
   d58f4:	bd38      	pop	{r3, r4, r5, pc}
   d58f6:	bf00      	nop
   d58f8:	000e24c5 	.word	0x000e24c5
   d58fc:	000e24ce 	.word	0x000e24ce
   d5900:	000e291f 	.word	0x000e291f

000d5904 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   d5904:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d5908:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d590c:	f990 1006 	ldrsb.w	r1, [r0, #6]
   d5910:	2b00      	cmp	r3, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   d5912:	bfb8      	it	lt
   d5914:	4808      	ldrlt	r0, [pc, #32]	; (d5938 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   d5916:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   d591a:	ea4f 0282 	mov.w	r2, r2, lsl #2
   d591e:	bfbd      	ittte	lt
   d5920:	fb00 2003 	mlalt	r0, r0, r3, r2
   d5924:	1840      	addlt	r0, r0, r1
   d5926:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   d5928:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   d592c:	bfa4      	itt	ge
   d592e:	fb00 2303 	mlage	r3, r0, r3, r2
   d5932:	1858      	addge	r0, r3, r1
}
   d5934:	4770      	bx	lr
   d5936:	bf00      	nop
   d5938:	fffff1f0 	.word	0xfffff1f0

000d593c <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   d593c:	f990 3007 	ldrsb.w	r3, [r0, #7]
   d5940:	b943      	cbnz	r3, d5954 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   d5942:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d5946:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   d5948:	f990 3005 	ldrsb.w	r3, [r0, #5]
   d594c:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   d594e:	f990 3006 	ldrsb.w	r3, [r0, #6]
   d5952:	600b      	str	r3, [r1, #0]
}
   d5954:	4770      	bx	lr

000d5956 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   d5956:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   d595a:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   d595c:	b9b3      	cbnz	r3, d598c <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   d595e:	f990 5004 	ldrsb.w	r5, [r0, #4]
   d5962:	688c      	ldr	r4, [r1, #8]
   d5964:	442c      	add	r4, r5
   d5966:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   d596a:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   d596c:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   d5970:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   d5972:	bfb5      	itete	lt
   d5974:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   d5976:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   d5978:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   d597a:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   d597c:	bfb5      	itete	lt
   d597e:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   d5982:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   d5986:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   d5988:	189b      	addge	r3, r3, r2
   d598a:	600b      	str	r3, [r1, #0]
}
   d598c:	bd30      	pop	{r4, r5, pc}

000d598e <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const {
   d598e:	b538      	push	{r3, r4, r5, lr}
   d5990:	6844      	ldr	r4, [r0, #4]
   d5992:	4605      	mov	r5, r0
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d5994:	68ab      	ldr	r3, [r5, #8]
   d5996:	42a3      	cmp	r3, r4
   d5998:	d007      	beq.n	d59aa <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1c>
        return compareTo(other) == 0; 
   d599a:	4620      	mov	r0, r4
   d599c:	f7ff ff24 	bl	d57e8 <_ZNK12LocalTimeYMD9compareToES_>
   d59a0:	3404      	adds	r4, #4
        if (*it == ymd) {
   d59a2:	2800      	cmp	r0, #0
   d59a4:	d1f6      	bne.n	d5994 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x6>
            return true;
   d59a6:	2001      	movs	r0, #1
}
   d59a8:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d59aa:	2000      	movs	r0, #0
   d59ac:	e7fc      	b.n	d59a8 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1a>

000d59ae <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const {
   d59ae:	b538      	push	{r3, r4, r5, lr}
   d59b0:	6904      	ldr	r4, [r0, #16]
   d59b2:	4605      	mov	r5, r0
    for(auto it = exceptDates.begin(); it != exceptDates.end(); ++it) {
   d59b4:	696b      	ldr	r3, [r5, #20]
   d59b6:	42a3      	cmp	r3, r4
   d59b8:	d007      	beq.n	d59ca <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1c>
   d59ba:	4620      	mov	r0, r4
   d59bc:	f7ff ff14 	bl	d57e8 <_ZNK12LocalTimeYMD9compareToES_>
   d59c0:	3404      	adds	r4, #4
        if (*it == ymd) {
   d59c2:	2800      	cmp	r0, #0
   d59c4:	d1f6      	bne.n	d59b4 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x6>
            return true;
   d59c6:	2001      	movs	r0, #1
}
   d59c8:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d59ca:	2000      	movs	r0, #0
   d59cc:	e7fc      	b.n	d59c8 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1a>

000d59ce <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const {
   d59ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d59d0:	4605      	mov	r5, r0
   d59d2:	460e      	mov	r6, r1
    if (inExceptDates(ymd)) {
   d59d4:	f7ff ffeb 	bl	d59ae <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>
   d59d8:	b990      	cbnz	r0, d5a00 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x32>
        int dayOfWeek = ymd.getDayOfWeek();
   d59da:	a801      	add	r0, sp, #4
   d59dc:	9101      	str	r1, [sp, #4]
   d59de:	f7ff febe 	bl	d575e <_ZNK12LocalTimeYMD12getDayOfWeekEv>
        return (dayOfWeekMask & (1 << dayOfWeek)) != 0;
   d59e2:	782b      	ldrb	r3, [r5, #0]
        bool isValidDates = inOnlyOnDates(ymd);
   d59e4:	4631      	mov	r1, r6
   d59e6:	fa43 f400 	asr.w	r4, r3, r0
   d59ea:	4628      	mov	r0, r5
   d59ec:	f7ff ffcf 	bl	d598e <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>
   d59f0:	f004 0401 	and.w	r4, r4, #1
        result = isValidDays || isValidDates;
   d59f4:	2c00      	cmp	r4, #0
   d59f6:	bf08      	it	eq
   d59f8:	4604      	moveq	r4, r0
}
   d59fa:	4620      	mov	r0, r4
   d59fc:	b002      	add	sp, #8
   d59fe:	bd70      	pop	{r4, r5, r6, pc}
        result = false;
   d5a00:	2400      	movs	r4, #0
   d5a02:	e7fa      	b.n	d59fa <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x2c>

000d5a04 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>:
LocalTimeYMD LocalTimeRestrictedDate::getExpirationDate() const {
   d5a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d5a08:	2400      	movs	r4, #0
   d5a0a:	6845      	ldr	r5, [r0, #4]
   d5a0c:	4680      	mov	r8, r0
   d5a0e:	4626      	mov	r6, r4
   d5a10:	4627      	mov	r7, r4
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d5a12:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d5a16:	429d      	cmp	r5, r3
   d5a18:	d01e      	beq.n	d5a58 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x54>
        return ymd.year == 0 && ymd.month == 0 && ymd.day == 0;
   d5a1a:	f367 0916 	bfi	r9, r7, #0, #23
   d5a1e:	f366 59da 	bfi	r9, r6, #23, #4
   d5a22:	f364 69df 	bfi	r9, r4, #27, #5
        if (result.isEmpty() || *it > result) {
   d5a26:	f1b9 0f00 	cmp.w	r9, #0
   d5a2a:	d109      	bne.n	d5a40 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x3c>
            result = *it;
   d5a2c:	682f      	ldr	r7, [r5, #0]
   d5a2e:	886e      	ldrh	r6, [r5, #2]
   d5a30:	78ec      	ldrb	r4, [r5, #3]
   d5a32:	f3c7 0716 	ubfx	r7, r7, #0, #23
   d5a36:	f3c6 16c3 	ubfx	r6, r6, #7, #4
   d5a3a:	08e4      	lsrs	r4, r4, #3
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   d5a3c:	3504      	adds	r5, #4
      {
	++_M_current;
	return *this;
   d5a3e:	e7e8      	b.n	d5a12 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0xe>
   d5a40:	f367 0116 	bfi	r1, r7, #0, #23
   d5a44:	f366 51da 	bfi	r1, r6, #23, #4
   d5a48:	f364 61df 	bfi	r1, r4, #27, #5
        return compareTo(other) > 0; 
   d5a4c:	4628      	mov	r0, r5
   d5a4e:	f7ff fecb 	bl	d57e8 <_ZNK12LocalTimeYMD9compareToES_>
        if (result.isEmpty() || *it > result) {
   d5a52:	2800      	cmp	r0, #0
   d5a54:	dcea      	bgt.n	d5a2c <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x28>
   d5a56:	e7f1      	b.n	d5a3c <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x38>
    return result;
   d5a58:	2000      	movs	r0, #0
   d5a5a:	f367 0016 	bfi	r0, r7, #0, #23
   d5a5e:	f366 50da 	bfi	r0, r6, #23, #4
   d5a62:	f364 60df 	bfi	r0, r4, #27, #5
}
   d5a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d5a6c <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   d5a6c:	4a05      	ldr	r2, [pc, #20]	; (d5a84 <_ZN15LocalTimeChangeC1Ev+0x18>)
   d5a6e:	b508      	push	{r3, lr}
   d5a70:	6002      	str	r2, [r0, #0]
   d5a72:	2200      	movs	r2, #0
   d5a74:	4603      	mov	r3, r0
   d5a76:	6042      	str	r2, [r0, #4]
   d5a78:	3008      	adds	r0, #8
   d5a7a:	f7ff fed3 	bl	d5824 <_ZN12LocalTimeHMSC1Ev>
}
   d5a7e:	4618      	mov	r0, r3
   d5a80:	bd08      	pop	{r3, pc}
   d5a82:	bf00      	nop
   d5a84:	000e2528 	.word	0x000e2528

000d5a88 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   d5a88:	2300      	movs	r3, #0
   d5a8a:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   d5a8c:	8183      	strh	r3, [r0, #12]
   d5a8e:	7383      	strb	r3, [r0, #14]
}
   d5a90:	4770      	bx	lr
	...

000d5a94 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   d5a94:	b530      	push	{r4, r5, lr}
   d5a96:	4604      	mov	r4, r0
   d5a98:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   d5a9a:	460d      	mov	r5, r1
   d5a9c:	b111      	cbz	r1, d5aa4 <_ZN15LocalTimeChange5parseEPKc+0x10>
   d5a9e:	780b      	ldrb	r3, [r1, #0]
   d5aa0:	2b4d      	cmp	r3, #77	; 0x4d
   d5aa2:	d003      	beq.n	d5aac <_ZN15LocalTimeChange5parseEPKc+0x18>
        clear();
   d5aa4:	4620      	mov	r0, r4
   d5aa6:	f7ff ffef 	bl	d5a88 <_ZN15LocalTimeChange5clearEv>
   d5aaa:	e01b      	b.n	d5ae4 <_ZN15LocalTimeChange5parseEPKc+0x50>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   d5aac:	ab05      	add	r3, sp, #20
   d5aae:	9300      	str	r3, [sp, #0]
   d5ab0:	490f      	ldr	r1, [pc, #60]	; (d5af0 <_ZN15LocalTimeChange5parseEPKc+0x5c>)
   d5ab2:	ab04      	add	r3, sp, #16
   d5ab4:	aa03      	add	r2, sp, #12
   d5ab6:	4628      	mov	r0, r5
   d5ab8:	f006 fcaa 	bl	dc410 <sscanf>
   d5abc:	2803      	cmp	r0, #3
   d5abe:	d1f1      	bne.n	d5aa4 <_ZN15LocalTimeChange5parseEPKc+0x10>
        month = (int8_t) values[0];
   d5ac0:	9b03      	ldr	r3, [sp, #12]
   d5ac2:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   d5ac4:	9b04      	ldr	r3, [sp, #16]
   d5ac6:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   d5ac8:	9b05      	ldr	r3, [sp, #20]
   d5aca:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   d5acc:	212f      	movs	r1, #47	; 0x2f
   d5ace:	4628      	mov	r0, r5
   d5ad0:	f00a facd 	bl	e006e <strchr>
        if (cp) {
   d5ad4:	b140      	cbz	r0, d5ae8 <_ZN15LocalTimeChange5parseEPKc+0x54>
            hms.parse(cp);
   d5ad6:	1c41      	adds	r1, r0, #1
   d5ad8:	f104 0008 	add.w	r0, r4, #8
   d5adc:	f7ff feaa 	bl	d5834 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   d5ae0:	2301      	movs	r3, #1
   d5ae2:	71e3      	strb	r3, [r4, #7]
}
   d5ae4:	b007      	add	sp, #28
   d5ae6:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   d5ae8:	81a0      	strh	r0, [r4, #12]
   d5aea:	73a0      	strb	r0, [r4, #14]
}
   d5aec:	e7f8      	b.n	d5ae0 <_ZN15LocalTimeChange5parseEPKc+0x4c>
   d5aee:	bf00      	nop
   d5af0:	000e24d7 	.word	0x000e24d7

000d5af4 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   d5af4:	4b10      	ldr	r3, [pc, #64]	; (d5b38 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   d5af6:	4911      	ldr	r1, [pc, #68]	; (d5b3c <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d5af8:	b510      	push	{r4, lr}
   d5afa:	4604      	mov	r4, r0
   d5afc:	f840 3b04 	str.w	r3, [r0], #4
   d5b00:	f008 ff05 	bl	de90e <_ZN6StringC1EPKc>
   d5b04:	f104 0014 	add.w	r0, r4, #20
   d5b08:	f7ff fe8c 	bl	d5824 <_ZN12LocalTimeHMSC1Ev>
   d5b0c:	490b      	ldr	r1, [pc, #44]	; (d5b3c <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d5b0e:	f104 001c 	add.w	r0, r4, #28
   d5b12:	f008 fefc 	bl	de90e <_ZN6StringC1EPKc>
   d5b16:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5b1a:	f7ff fe83 	bl	d5824 <_ZN12LocalTimeHMSC1Ev>
   d5b1e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5b22:	f7ff ffa3 	bl	d5a6c <_ZN15LocalTimeChangeC1Ev>
   d5b26:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5b2a:	f7ff ff9f 	bl	d5a6c <_ZN15LocalTimeChangeC1Ev>
   d5b2e:	2300      	movs	r3, #0
   d5b30:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   d5b34:	4620      	mov	r0, r4
   d5b36:	bd10      	pop	{r4, pc}
   d5b38:	000e2538 	.word	0x000e2538
   d5b3c:	000e291f 	.word	0x000e291f

000d5b40 <_ZN22LocalTimePosixTimezone5parseEPKc>:
bool LocalTimePosixTimezone::parse(const char *str) {
   d5b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b44:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   d5b46:	4608      	mov	r0, r1
   d5b48:	f00a faba 	bl	e00c0 <strdup>
    size_t ii = 0;
   d5b4c:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   d5b4e:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   d5b50:	9001      	str	r0, [sp, #4]
                dstStart.parse(token);
   d5b52:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   d5b56:	493f      	ldr	r1, [pc, #252]	; (d5c54 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   d5b58:	9801      	ldr	r0, [sp, #4]
   d5b5a:	aa01      	add	r2, sp, #4
   d5b5c:	f00b f96a 	bl	e0e34 <strtok_r>
   d5b60:	4601      	mov	r1, r0
   d5b62:	2800      	cmp	r0, #0
   d5b64:	d062      	beq.n	d5c2c <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   d5b66:	2d01      	cmp	r5, #1
   d5b68:	f105 0301 	add.w	r3, r5, #1
   d5b6c:	d053      	beq.n	d5c16 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   d5b6e:	2d02      	cmp	r5, #2
   d5b70:	d056      	beq.n	d5c20 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   d5b72:	2d00      	cmp	r5, #0
   d5b74:	d146      	bne.n	d5c04 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   d5b76:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   d5b78:	f892 9000 	ldrb.w	r9, [r2]
   d5b7c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   d5b80:	4615      	mov	r5, r2
   d5b82:	4617      	mov	r7, r2
   d5b84:	f102 0201 	add.w	r2, r2, #1
   d5b88:	d8f6      	bhi.n	d5b78 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   d5b8a:	2200      	movs	r2, #0
   d5b8c:	702a      	strb	r2, [r5, #0]
                standardName = start;
   d5b8e:	f104 001c 	add.w	r0, r4, #28
   d5b92:	f008 ff1a 	bl	de9ca <_ZN6StringaSEPKc>
                valid = true;
   d5b96:	2201      	movs	r2, #1
                *cp = save2;
   d5b98:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   d5b9c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   d5ba0:	782a      	ldrb	r2, [r5, #0]
   d5ba2:	b36a      	cbz	r2, d5c00 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   d5ba4:	f897 a000 	ldrb.w	sl, [r7]
   d5ba8:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d5bac:	2a3f      	cmp	r2, #63	; 0x3f
   d5bae:	46b9      	mov	r9, r7
   d5bb0:	46bb      	mov	fp, r7
   d5bb2:	f107 0701 	add.w	r7, r7, #1
   d5bb6:	d9f5      	bls.n	d5ba4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   d5bb8:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   d5bba:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   d5bbe:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   d5bc2:	4629      	mov	r1, r5
   d5bc4:	4638      	mov	r0, r7
   d5bc6:	f7ff fe35 	bl	d5834 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   d5bca:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   d5bce:	f1ba 0f00 	cmp.w	sl, #0
   d5bd2:	d015      	beq.n	d5c00 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   d5bd4:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   d5bd6:	f81b ab01 	ldrb.w	sl, [fp], #1
   d5bda:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   d5bde:	d8f9      	bhi.n	d5bd4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   d5be0:	2200      	movs	r2, #0
   d5be2:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   d5be4:	4649      	mov	r1, r9
   d5be6:	1d20      	adds	r0, r4, #4
   d5be8:	f008 feef 	bl	de9ca <_ZN6StringaSEPKc>
                        *cp = save2;
   d5bec:	f885 a000 	strb.w	sl, [r5]
                        if (*cp) {
   d5bf0:	f104 0014 	add.w	r0, r4, #20
   d5bf4:	f1ba 0f00 	cmp.w	sl, #0
   d5bf8:	d006      	beq.n	d5c08 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   d5bfa:	4629      	mov	r1, r5
   d5bfc:	f7ff fe1a 	bl	d5834 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   d5c00:	2501      	movs	r5, #1
   d5c02:	e7a8      	b.n	d5b56 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   d5c04:	461d      	mov	r5, r3
   d5c06:	e7a6      	b.n	d5b56 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   d5c08:	4639      	mov	r1, r7
   d5c0a:	f7ff fd27 	bl	d565c <_ZN12LocalTimeHMSaSERKS_>
                            dstHMS.hour--;
   d5c0e:	7e23      	ldrb	r3, [r4, #24]
   d5c10:	3b01      	subs	r3, #1
   d5c12:	7623      	strb	r3, [r4, #24]
   d5c14:	e7f4      	b.n	d5c00 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   d5c16:	4640      	mov	r0, r8
   d5c18:	f7ff ff3c 	bl	d5a94 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d5c1c:	2502      	movs	r5, #2
   d5c1e:	e79a      	b.n	d5b56 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                standardStart.parse(token);
   d5c20:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5c24:	f7ff ff36 	bl	d5a94 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d5c28:	2503      	movs	r5, #3
   d5c2a:	e794      	b.n	d5b56 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
    if (dstStart.valid && !standardStart.valid) {
   d5c2c:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   d5c30:	b143      	cbz	r3, d5c44 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   d5c32:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   d5c36:	b92a      	cbnz	r2, d5c44 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        dstStart.clear();
   d5c38:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5c3c:	f7ff ff24 	bl	d5a88 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   d5c40:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    free(mutableCopy);
   d5c44:	4630      	mov	r0, r6
   d5c46:	f006 fbcb 	bl	dc3e0 <free>
}
   d5c4a:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   d5c4e:	b003      	add	sp, #12
   d5c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c54:	000e24e1 	.word	0x000e24e1

000d5c58 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   d5c58:	b538      	push	{r3, r4, r5, lr}
   d5c5a:	4b13      	ldr	r3, [pc, #76]	; (d5ca8 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   d5c5c:	4604      	mov	r4, r0
   d5c5e:	460d      	mov	r5, r1
   d5c60:	f840 3b04 	str.w	r3, [r0], #4
   d5c64:	4911      	ldr	r1, [pc, #68]	; (d5cac <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d5c66:	f008 fe52 	bl	de90e <_ZN6StringC1EPKc>
   d5c6a:	f104 0014 	add.w	r0, r4, #20
   d5c6e:	f7ff fdd9 	bl	d5824 <_ZN12LocalTimeHMSC1Ev>
   d5c72:	490e      	ldr	r1, [pc, #56]	; (d5cac <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d5c74:	f104 001c 	add.w	r0, r4, #28
   d5c78:	f008 fe49 	bl	de90e <_ZN6StringC1EPKc>
   d5c7c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5c80:	f7ff fdd0 	bl	d5824 <_ZN12LocalTimeHMSC1Ev>
   d5c84:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5c88:	f7ff fef0 	bl	d5a6c <_ZN15LocalTimeChangeC1Ev>
   d5c8c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5c90:	f7ff feec 	bl	d5a6c <_ZN15LocalTimeChangeC1Ev>
   d5c94:	2300      	movs	r3, #0
   d5c96:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   d5c9a:	4629      	mov	r1, r5
   d5c9c:	4620      	mov	r0, r4
   d5c9e:	f7ff ff4f 	bl	d5b40 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   d5ca2:	4620      	mov	r0, r4
   d5ca4:	bd38      	pop	{r3, r4, r5, pc}
   d5ca6:	bf00      	nop
   d5ca8:	000e2538 	.word	0x000e2538
   d5cac:	000e291f 	.word	0x000e291f

000d5cb0 <_ZNK14LocalTimeValue3hmsEv>:
LocalTimeHMS LocalTimeValue::hms() const {
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4603      	mov	r3, r0
    LocalTimeHMS result;
   d5cb4:	f7ff fdb6 	bl	d5824 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   d5cb8:	688a      	ldr	r2, [r1, #8]
   d5cba:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   d5cbc:	684a      	ldr	r2, [r1, #4]
   d5cbe:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   d5cc0:	680a      	ldr	r2, [r1, #0]
   d5cc2:	719a      	strb	r2, [r3, #6]
}
   d5cc4:	4618      	mov	r0, r3
   d5cc6:	bd08      	pop	{r3, pc}

000d5cc8 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   d5cc8:	b513      	push	{r0, r1, r4, lr}
   d5cca:	4b07      	ldr	r3, [pc, #28]	; (d5ce8 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   d5ccc:	6003      	str	r3, [r0, #0]
   d5cce:	2300      	movs	r3, #0
   d5cd0:	4604      	mov	r4, r0
   d5cd2:	6043      	str	r3, [r0, #4]
    *this = value.hms();
   d5cd4:	4668      	mov	r0, sp
   d5cd6:	f7ff ffeb 	bl	d5cb0 <_ZNK14LocalTimeValue3hmsEv>
   d5cda:	4669      	mov	r1, sp
   d5cdc:	4620      	mov	r0, r4
   d5cde:	f7ff fcbd 	bl	d565c <_ZN12LocalTimeHMSaSERKS_>
}
   d5ce2:	4620      	mov	r0, r4
   d5ce4:	b002      	add	sp, #8
   d5ce6:	bd10      	pop	{r4, pc}
   d5ce8:	000e2518 	.word	0x000e2518

000d5cec <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>:
    if (!hms.ignore) {
   d5cec:	f991 3007 	ldrsb.w	r3, [r1, #7]
   d5cf0:	b943      	cbnz	r3, d5d04 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS+0x18>
        tm_hour = hms.hour;
   d5cf2:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d5cf6:	6083      	str	r3, [r0, #8]
        tm_min = hms.minute;
   d5cf8:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d5cfc:	6043      	str	r3, [r0, #4]
        tm_sec = hms.second;
   d5cfe:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d5d02:	6003      	str	r3, [r0, #0]
}
   d5d04:	4770      	bx	lr

000d5d06 <_ZNK14LocalTimeValue3ymdEv>:
LocalTimeYMD LocalTimeValue::ymd() const {
   d5d06:	b507      	push	{r0, r1, r2, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d5d08:	2300      	movs	r3, #0
   d5d0a:	4601      	mov	r1, r0
    result.fromTimeInfo(this);
   d5d0c:	a801      	add	r0, sp, #4
   d5d0e:	9301      	str	r3, [sp, #4]
   d5d10:	f7ff fd13 	bl	d573a <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d5d14:	9801      	ldr	r0, [sp, #4]
   d5d16:	b003      	add	sp, #12
   d5d18:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d1c <_ZN22LocalTimePosixTimezoneC1ERKS_>:
class LocalTimePosixTimezone {
   d5d1c:	4b19      	ldr	r3, [pc, #100]	; (d5d84 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x68>)
   d5d1e:	b570      	push	{r4, r5, r6, lr}
   d5d20:	4604      	mov	r4, r0
   d5d22:	460d      	mov	r5, r1
   d5d24:	f840 3b04 	str.w	r3, [r0], #4
   d5d28:	3104      	adds	r1, #4
   d5d2a:	f008 fe3b 	bl	de9a4 <_ZN6StringC1ERKS_>
   d5d2e:	f105 0114 	add.w	r1, r5, #20
   d5d32:	f104 0014 	add.w	r0, r4, #20
   d5d36:	f7ff fc89 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
   d5d3a:	f105 011c 	add.w	r1, r5, #28
   d5d3e:	f104 001c 	add.w	r0, r4, #28
   d5d42:	f008 fe2f 	bl	de9a4 <_ZN6StringC1ERKS_>
   d5d46:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d5d4a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5d4e:	f7ff fc7d 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeChange {
   d5d52:	4e0d      	ldr	r6, [pc, #52]	; (d5d88 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x6c>)
   d5d54:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5d56:	63a3      	str	r3, [r4, #56]	; 0x38
   d5d58:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d5d5c:	6366      	str	r6, [r4, #52]	; 0x34
   d5d5e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5d62:	f7ff fc73 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
   d5d66:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d5d68:	64a3      	str	r3, [r4, #72]	; 0x48
   d5d6a:	6466      	str	r6, [r4, #68]	; 0x44
   d5d6c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d5d70:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d5d74:	f7ff fc6a 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimePosixTimezone {
   d5d78:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d5d7c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d5d80:	4620      	mov	r0, r4
   d5d82:	bd70      	pop	{r4, r5, r6, pc}
   d5d84:	000e2538 	.word	0x000e2538
   d5d88:	000e2528 	.word	0x000e2528

000d5d8c <_ZN16LocalTimeConvertC1ERKS_>:
class LocalTimeConvert {
   d5d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d8e:	460c      	mov	r4, r1
   d5d90:	f851 3b04 	ldr.w	r3, [r1], #4
   d5d94:	4607      	mov	r7, r0
   d5d96:	f840 3b04 	str.w	r3, [r0], #4
   d5d9a:	f7ff ffbf 	bl	d5d1c <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d5d9e:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d5da2:	f104 0668 	add.w	r6, r4, #104	; 0x68
   d5da6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   d5daa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5dac:	f107 0568 	add.w	r5, r7, #104	; 0x68
   d5db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5db2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5db6:	6833      	ldr	r3, [r6, #0]
   d5db8:	602b      	str	r3, [r5, #0]
   d5dba:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d5dbe:	f104 0698 	add.w	r6, r4, #152	; 0x98
   d5dc2:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
   d5dc6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5dc8:	f107 0598 	add.w	r5, r7, #152	; 0x98
   d5dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5dce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5dd2:	6833      	ldr	r3, [r6, #0]
   d5dd4:	602b      	str	r3, [r5, #0]
   d5dd6:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
   d5dda:	34c8      	adds	r4, #200	; 0xc8
   d5ddc:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
   d5de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5de2:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
   d5de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5dec:	6823      	ldr	r3, [r4, #0]
   d5dee:	602b      	str	r3, [r5, #0]
   d5df0:	4638      	mov	r0, r7
   d5df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5df4 <_ZN21LocalTimeScheduleItemD1Ev>:
class LocalTimeScheduleItem {
   d5df4:	b510      	push	{r4, lr}
   d5df6:	4604      	mov	r4, r0
   d5df8:	3038      	adds	r0, #56	; 0x38
   d5dfa:	f008 fd3d 	bl	de878 <_ZN6StringD1Ev>
	_M_deallocate(_M_impl._M_start,
   d5dfe:	6920      	ldr	r0, [r4, #16]
   d5e00:	f7ff fbec 	bl	d55dc <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d5e04:	6860      	ldr	r0, [r4, #4]
   d5e06:	f7ff fbe9 	bl	d55dc <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d5e0a:	4620      	mov	r0, r4
   d5e0c:	bd10      	pop	{r4, pc}
	...

000d5e10 <_ZN9LocalTime8instanceEv>:
LocalTime &LocalTime::instance() {
   d5e10:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d5e12:	4d09      	ldr	r5, [pc, #36]	; (d5e38 <_ZN9LocalTime8instanceEv+0x28>)
   d5e14:	682b      	ldr	r3, [r5, #0]
   d5e16:	b963      	cbnz	r3, d5e32 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   d5e18:	2060      	movs	r0, #96	; 0x60
   d5e1a:	f7fe f93c 	bl	d4096 <_Znwj>
   d5e1e:	4604      	mov	r4, r0
   d5e20:	b130      	cbz	r0, d5e30 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   d5e22:	4b06      	ldr	r3, [pc, #24]	; (d5e3c <_ZN9LocalTime8instanceEv+0x2c>)
   d5e24:	f840 3b04 	str.w	r3, [r0], #4
   d5e28:	f7ff fe64 	bl	d5af4 <_ZN22LocalTimePosixTimezoneC1Ev>
   d5e2c:	2364      	movs	r3, #100	; 0x64
   d5e2e:	65e3      	str	r3, [r4, #92]	; 0x5c
   d5e30:	602c      	str	r4, [r5, #0]
}
   d5e32:	6828      	ldr	r0, [r5, #0]
   d5e34:	bd38      	pop	{r3, r4, r5, pc}
   d5e36:	bf00      	nop
   d5e38:	2003e494 	.word	0x2003e494
   d5e3c:	000e2508 	.word	0x000e2508

000d5e40 <_ZN9LocalTime8tmToTimeEP2tm>:
    return mktime(pTimeInfo);
   d5e40:	f006 bb36 	b.w	dc4b0 <mktime>

000d5e44 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   d5e44:	3901      	subs	r1, #1
   d5e46:	290b      	cmp	r1, #11
   d5e48:	d815      	bhi.n	d5e76 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   d5e4a:	e8df f001 	tbb	[pc, r1]
   d5e4e:	0816      	.short	0x0816
   d5e50:	06160616 	.word	0x06160616
   d5e54:	16061616 	.word	0x16061616
   d5e58:	1606      	.short	0x1606
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   d5e5a:	201e      	movs	r0, #30
   d5e5c:	4770      	bx	lr
            if ((year % 4) == 0) {
   d5e5e:	0783      	lsls	r3, r0, #30
   d5e60:	d10d      	bne.n	d5e7e <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   d5e62:	2264      	movs	r2, #100	; 0x64
   d5e64:	fb90 f3f2 	sdiv	r3, r0, r2
   d5e68:	fb02 0013 	mls	r0, r2, r3, r0
   d5e6c:	2800      	cmp	r0, #0
                    return 29;
   d5e6e:	bf0c      	ite	eq
   d5e70:	201c      	moveq	r0, #28
   d5e72:	201d      	movne	r0, #29
   d5e74:	4770      	bx	lr
    return 0;
   d5e76:	2000      	movs	r0, #0
   d5e78:	4770      	bx	lr
            return 31;
   d5e7a:	201f      	movs	r0, #31
   d5e7c:	4770      	bx	lr
                return 28;
   d5e7e:	201c      	movs	r0, #28
}
   d5e80:	4770      	bx	lr

000d5e82 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d5e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   d5e84:	2301      	movs	r3, #1
   d5e86:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   d5e88:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d5e8c:	3b01      	subs	r3, #1
   d5e8e:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d5e90:	2300      	movs	r3, #0
   d5e92:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d5e96:	4606      	mov	r6, r0
   d5e98:	460c      	mov	r4, r1
   d5e9a:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d5e9c:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   d5e9e:	4620      	mov	r0, r4
   d5ea0:	f7ff ffce 	bl	d5e40 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   d5ea4:	f996 3006 	ldrsb.w	r3, [r6, #6]
   d5ea8:	69a2      	ldr	r2, [r4, #24]
   d5eaa:	429a      	cmp	r2, r3
   d5eac:	d003      	beq.n	d5eb6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   d5eae:	68e3      	ldr	r3, [r4, #12]
   d5eb0:	3301      	adds	r3, #1
   d5eb2:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   d5eb4:	e7f3      	b.n	d5e9e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   d5eb6:	f996 5005 	ldrsb.w	r5, [r6, #5]
   d5eba:	2d01      	cmp	r5, #1
   d5ebc:	d013      	beq.n	d5ee6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   d5ebe:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d5ec0:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   d5ec2:	3d01      	subs	r5, #1
   d5ec4:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   d5ec8:	441d      	add	r5, r3
   d5eca:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d5ecc:	f996 1004 	ldrsb.w	r1, [r6, #4]
   d5ed0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d5ed4:	f7ff ffb6 	bl	d5e44 <_ZN9LocalTime14lastDayOfMonthEii>
   d5ed8:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   d5eda:	bfc4      	itt	gt
   d5edc:	3d07      	subgt	r5, #7
   d5ede:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   d5ee0:	4620      	mov	r0, r4
   d5ee2:	f7ff ffad 	bl	d5e40 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   d5ee6:	4621      	mov	r1, r4
   d5ee8:	f106 0008 	add.w	r0, r6, #8
   d5eec:	f7ff fd26 	bl	d593c <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   d5ef0:	4638      	mov	r0, r7
   d5ef2:	f7ff fd30 	bl	d5956 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   d5ef6:	4620      	mov	r0, r4
}
   d5ef8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   d5efc:	f006 bad8 	b.w	dc4b0 <mktime>

000d5f00 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   d5f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   d5f02:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   d5f06:	b085      	sub	sp, #20
   d5f08:	4604      	mov	r4, r0
    if (!config.isValid()) {
   d5f0a:	b92b      	cbnz	r3, d5f18 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   d5f0c:	f7ff ff80 	bl	d5e10 <_ZN9LocalTime8instanceEv>
   d5f10:	1d01      	adds	r1, r0, #4
   d5f12:	1d20      	adds	r0, r4, #4
   d5f14:	f7ff fbc6 	bl	d56a4 <_ZN22LocalTimePosixTimezoneaSERKS_>
    if (config.hasDST()) {
   d5f18:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d5f1c:	2b00      	cmp	r3, #0
   d5f1e:	d069      	beq.n	d5ff4 <_ZN16LocalTimeConvert7convertEv+0xf4>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   d5f20:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d5f24:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   d5f28:	4639      	mov	r1, r7
        standardStartTimeInfo = dstStartTimeInfo;
   d5f2a:	463e      	mov	r6, r7
    localtime_r(&time, pTimeInfo);
   d5f2c:	a802      	add	r0, sp, #8
   d5f2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d5f32:	f006 faad 	bl	dc490 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   d5f36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5f38:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d5f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5f3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5f42:	6833      	ldr	r3, [r6, #0]
   d5f44:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   d5f46:	f104 0130 	add.w	r1, r4, #48	; 0x30
   d5f4a:	a802      	add	r0, sp, #8
   d5f4c:	f7ff fb7e 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
   d5f50:	aa02      	add	r2, sp, #8
   d5f52:	4639      	mov	r1, r7
   d5f54:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5f58:	f7ff ff93 	bl	d5e82 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   d5f5c:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d5f60:	f104 0118 	add.w	r1, r4, #24
   d5f64:	a802      	add	r0, sp, #8
   d5f66:	f7ff fb71 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
   d5f6a:	aa02      	add	r2, sp, #8
   d5f6c:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   d5f70:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5f74:	f7ff ff85 	bl	d5e82 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   d5f78:	e9d4 6724 	ldrd	r6, r7, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d5f7c:	460b      	mov	r3, r1
        if (dstStart < standardStart) {
   d5f7e:	4286      	cmp	r6, r0
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d5f80:	4602      	mov	r2, r0
        if (dstStart < standardStart) {
   d5f82:	eb77 0103 	sbcs.w	r1, r7, r3
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d5f86:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   d5f8a:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   d5f8e:	da24      	bge.n	d5fda <_ZN16LocalTimeConvert7convertEv+0xda>
            if (time < dstStart) {
   d5f90:	42b0      	cmp	r0, r6
   d5f92:	eb71 0507 	sbcs.w	r5, r1, r7
   d5f96:	da19      	bge.n	d5fcc <_ZN16LocalTimeConvert7convertEv+0xcc>
                position = Position::BEFORE_DST;
   d5f98:	2300      	movs	r3, #0
        position = Position::NO_DST;
   d5f9a:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   d5f9c:	6820      	ldr	r0, [r4, #0]
   d5f9e:	f7ff fb13 	bl	d55c8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d5fa2:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d5fa6:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
   d5faa:	9101      	str	r1, [sp, #4]
   d5fac:	bb20      	cbnz	r0, d5ff8 <_ZN16LocalTimeConvert7convertEv+0xf8>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   d5fae:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d5fb2:	f7ff fca7 	bl	d5904 <_ZNK12LocalTimeHMS9toSecondsEv>
   d5fb6:	1a36      	subs	r6, r6, r0
   d5fb8:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
    localtime_r(&time, pTimeInfo);
   d5fbc:	9901      	ldr	r1, [sp, #4]
   d5fbe:	a802      	add	r0, sp, #8
   d5fc0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5fc4:	f006 fa64 	bl	dc490 <localtime_r>
}
   d5fc8:	b005      	add	sp, #20
   d5fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   d5fcc:	4290      	cmp	r0, r2
   d5fce:	eb71 0303 	sbcs.w	r3, r1, r3
                position = Position::IN_DST;
   d5fd2:	bfb4      	ite	lt
   d5fd4:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   d5fd6:	2302      	movge	r3, #2
   d5fd8:	e7df      	b.n	d5f9a <_ZN16LocalTimeConvert7convertEv+0x9a>
            if (time < standardStart) {
   d5fda:	4290      	cmp	r0, r2
   d5fdc:	eb71 0303 	sbcs.w	r3, r1, r3
   d5fe0:	da01      	bge.n	d5fe6 <_ZN16LocalTimeConvert7convertEv+0xe6>
                position = Position::BEFORE_STANDARD;
   d5fe2:	2303      	movs	r3, #3
   d5fe4:	e7d9      	b.n	d5f9a <_ZN16LocalTimeConvert7convertEv+0x9a>
            else if (time < dstStart) {
   d5fe6:	42b0      	cmp	r0, r6
   d5fe8:	eb71 0307 	sbcs.w	r3, r1, r7
                position = Position::IN_STANDARD;
   d5fec:	bfb4      	ite	lt
   d5fee:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   d5ff0:	2305      	movge	r3, #5
   d5ff2:	e7d2      	b.n	d5f9a <_ZN16LocalTimeConvert7convertEv+0x9a>
        position = Position::NO_DST;
   d5ff4:	2306      	movs	r3, #6
   d5ff6:	e7d0      	b.n	d5f9a <_ZN16LocalTimeConvert7convertEv+0x9a>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d5ff8:	f104 0018 	add.w	r0, r4, #24
   d5ffc:	e7d9      	b.n	d5fb2 <_ZN16LocalTimeConvert7convertEv+0xb2>

000d5ffe <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>:
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d5ffe:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct tm mutableTimeInfo = *this;
   d6002:	4604      	mov	r4, r0
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d6004:	460e      	mov	r6, r1
    struct tm mutableTimeInfo = *this;
   d6006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d6008:	b0dc      	sub	sp, #368	; 0x170
    struct tm mutableTimeInfo = *this;
   d600a:	ad01      	add	r5, sp, #4
   d600c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d600e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6012:	6823      	ldr	r3, [r4, #0]
   d6014:	602b      	str	r3, [r5, #0]
    return mktime(pTimeInfo);
   d6016:	a801      	add	r0, sp, #4
   d6018:	f006 fa4a 	bl	dc4b0 <mktime>
   d601c:	4604      	mov	r4, r0
    standardTime += config.standardHMS.toSeconds();
   d601e:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    return mktime(pTimeInfo);
   d6022:	460d      	mov	r5, r1
    standardTime += config.standardHMS.toSeconds();
   d6024:	f7ff fc6e 	bl	d5904 <_ZNK12LocalTimeHMS9toSecondsEv>
    if (config.hasDST()) {
   d6028:	f996 303b 	ldrsb.w	r3, [r6, #59]	; 0x3b
    standardTime += config.standardHMS.toSeconds();
   d602c:	eb14 0800 	adds.w	r8, r4, r0
   d6030:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
    if (config.hasDST()) {
   d6034:	b31b      	cbz	r3, d607e <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x80>
class LocalTimeConvert {
   d6036:	2306      	movs	r3, #6
   d6038:	a821      	add	r0, sp, #132	; 0x84
   d603a:	9320      	str	r3, [sp, #128]	; 0x80
   d603c:	f7ff fd5a 	bl	d5af4 <_ZN22LocalTimePosixTimezoneC1Ev>
        convert.withConfig(config).withTime(standardTime).convert();
   d6040:	4631      	mov	r1, r6
   d6042:	a80a      	add	r0, sp, #40	; 0x28
   d6044:	f7ff fe6a 	bl	d5d1c <_ZN22LocalTimePosixTimezoneC1ERKS_>
    LocalTimeConvert &withConfig(LocalTimePosixTimezone config) { this->config = config; return *this; };
   d6048:	a90a      	add	r1, sp, #40	; 0x28
   d604a:	a821      	add	r0, sp, #132	; 0x84
   d604c:	f7ff fb2a 	bl	d56a4 <_ZN22LocalTimePosixTimezoneaSERKS_>
   d6050:	a820      	add	r0, sp, #128	; 0x80
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   d6052:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
   d6056:	f7ff ff53 	bl	d5f00 <_ZN16LocalTimeConvert7convertEv>
   d605a:	a80a      	add	r0, sp, #40	; 0x28
   d605c:	f7ff fa86 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
        if (convert.isDST()) {
   d6060:	9820      	ldr	r0, [sp, #128]	; 0x80
   d6062:	f7ff fab1 	bl	d55c8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d6066:	b138      	cbz	r0, d6078 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x7a>
            dstTime += config.dstHMS.toSeconds();
   d6068:	f106 0014 	add.w	r0, r6, #20
   d606c:	f7ff fc4a 	bl	d5904 <_ZNK12LocalTimeHMS9toSecondsEv>
   d6070:	eb14 0800 	adds.w	r8, r4, r0
   d6074:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
class LocalTimeConvert {
   d6078:	a821      	add	r0, sp, #132	; 0x84
   d607a:	f7ff fa77 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d607e:	4640      	mov	r0, r8
   d6080:	4649      	mov	r1, r9
   d6082:	b05c      	add	sp, #368	; 0x170
   d6084:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000d6088 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>:
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d6088:	b530      	push	{r4, r5, lr}
    if (!hms.ignore) {
   d608a:	f991 3007 	ldrsb.w	r3, [r1, #7]
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d608e:	b097      	sub	sp, #92	; 0x5c
   d6090:	4604      	mov	r4, r0
    if (!hms.ignore) {
   d6092:	b9c3      	cbnz	r3, d60c6 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS+0x3e>
        localTimeValue.setHMS(hms);
   d6094:	f100 0568 	add.w	r5, r0, #104	; 0x68
   d6098:	4668      	mov	r0, sp
   d609a:	f7ff fad7 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
   d609e:	4669      	mov	r1, sp
   d60a0:	4628      	mov	r0, r5
   d60a2:	f7ff fe23 	bl	d5cec <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>
        time = localTimeValue.toUTC(config);
   d60a6:	1d21      	adds	r1, r4, #4
   d60a8:	4668      	mov	r0, sp
   d60aa:	f7ff fe37 	bl	d5d1c <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d60ae:	4669      	mov	r1, sp
   d60b0:	4628      	mov	r0, r5
   d60b2:	f7ff ffa4 	bl	d5ffe <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>
   d60b6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   d60ba:	4668      	mov	r0, sp
   d60bc:	f7ff fa56 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
        convert();
   d60c0:	4620      	mov	r0, r4
   d60c2:	f7ff ff1d 	bl	d5f00 <_ZN16LocalTimeConvert7convertEv>
}
   d60c6:	b017      	add	sp, #92	; 0x5c
   d60c8:	bd30      	pop	{r4, r5, pc}
	...

000d60cc <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>:
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d60cc:	b530      	push	{r4, r5, lr}
    time += 86400;
   d60ce:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
   d60d2:	4d0b      	ldr	r5, [pc, #44]	; (d6100 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS+0x34>)
   d60d4:	195b      	adds	r3, r3, r5
   d60d6:	f04f 0500 	mov.w	r5, #0
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d60da:	b085      	sub	sp, #20
    time += 86400;
   d60dc:	eb45 0202 	adc.w	r2, r5, r2
   d60e0:	e9c0 3218 	strd	r3, r2, [r0, #96]	; 0x60
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d60e4:	4604      	mov	r4, r0
   d60e6:	9101      	str	r1, [sp, #4]
    convert();
   d60e8:	f7ff ff0a 	bl	d5f00 <_ZN16LocalTimeConvert7convertEv>
    atLocalTime(hms);
   d60ec:	9901      	ldr	r1, [sp, #4]
   d60ee:	a802      	add	r0, sp, #8
   d60f0:	f7ff faac 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
   d60f4:	a902      	add	r1, sp, #8
   d60f6:	4620      	mov	r0, r4
   d60f8:	f7ff ffc6 	bl	d6088 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
}
   d60fc:	b005      	add	sp, #20
   d60fe:	bd30      	pop	{r4, r5, pc}
   d6100:	00015180 	.word	0x00015180

000d6104 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>:

// [static]
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d6104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6108:	b08a      	sub	sp, #40	; 0x28
   d610a:	4617      	mov	r7, r2
   d610c:	4606      	mov	r6, r0
   d610e:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d6110:	2224      	movs	r2, #36	; 0x24
   d6112:	2100      	movs	r1, #0
   d6114:	a801      	add	r0, sp, #4
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d6116:	461c      	mov	r4, r3
    struct tm timeInfo = {0};
   d6118:	f009 ff64 	bl	dffe4 <memset>

    if (dayOfWeek < 0 || dayOfWeek >= 7) {
   d611c:	2f06      	cmp	r7, #6
   d611e:	d829      	bhi.n	d6174 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        // Invalid values of dayOfWeek can cause infinite loop below
        return 0;
    }

    int lastDay = lastDayOfMonth(year, month);
   d6120:	4629      	mov	r1, r5
   d6122:	4630      	mov	r0, r6
   d6124:	f7ff fe8e 	bl	d5e44 <_ZN9LocalTime14lastDayOfMonthEii>

    if (ordinal > 0) {
   d6128:	2c00      	cmp	r4, #0
    int lastDay = lastDayOfMonth(year, month);
   d612a:	4680      	mov	r8, r0
    if (ordinal > 0) {
   d612c:	dd24      	ble.n	d6178 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x74>
        timeInfo.tm_year = year - 1900;
   d612e:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
        timeInfo.tm_mon = month - 1;
   d6132:	3d01      	subs	r5, #1
        timeInfo.tm_year = year - 1900;
   d6134:	9606      	str	r6, [sp, #24]
        timeInfo.tm_mon = month - 1;
   d6136:	9505      	str	r5, [sp, #20]
        timeInfo.tm_mday = 1;
   d6138:	2301      	movs	r3, #1
        tmToTime(&timeInfo);
   d613a:	a801      	add	r0, sp, #4
        timeInfo.tm_mday = 1;
   d613c:	9304      	str	r3, [sp, #16]
        tmToTime(&timeInfo);
   d613e:	f7ff fe7f 	bl	d5e40 <_ZN9LocalTime8tmToTimeEP2tm>

        while(timeInfo.tm_wday != dayOfWeek) {
   d6142:	9a07      	ldr	r2, [sp, #28]
   d6144:	9b04      	ldr	r3, [sp, #16]
   d6146:	42ba      	cmp	r2, r7
   d6148:	d001      	beq.n	d614e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4a>
            timeInfo.tm_mday++;
   d614a:	3301      	adds	r3, #1
   d614c:	e7f5      	b.n	d613a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x36>
   d614e:	2100      	movs	r1, #0
            tmToTime(&timeInfo);
        }

        for(int loops = 1; loops <= 5; loops++) {
   d6150:	2201      	movs	r2, #1
            if (loops >= ordinal) {
   d6152:	4294      	cmp	r4, r2
   d6154:	d106      	bne.n	d6164 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x60>
   d6156:	b101      	cbz	r1, d615a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d6158:	9304      	str	r3, [sp, #16]
            timeInfo.tm_mday--;
            tmToTime(&timeInfo);
        }
        for(int loops = 1; loops <= 5; loops++) {
            if (loops >= -ordinal) {
                return timeInfo.tm_mday;
   d615a:	9c04      	ldr	r4, [sp, #16]
        }
    }

    
    return 0;
}
   d615c:	4620      	mov	r0, r4
   d615e:	b00a      	add	sp, #40	; 0x28
   d6160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timeInfo.tm_mday += 7;
   d6164:	3307      	adds	r3, #7
            if (timeInfo.tm_mday > lastDay) {
   d6166:	4543      	cmp	r3, r8
   d6168:	dc04      	bgt.n	d6174 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d616a:	3201      	adds	r2, #1
   d616c:	2a06      	cmp	r2, #6
   d616e:	f04f 0101 	mov.w	r1, #1
   d6172:	d1ee      	bne.n	d6152 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4e>
                return 0;
   d6174:	2400      	movs	r4, #0
   d6176:	e7f1      	b.n	d615c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
    if (ordinal < 0) {
   d6178:	d0f0      	beq.n	d615c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
        timeInfo.tm_mon = month - 1;
   d617a:	3d01      	subs	r5, #1
        timeInfo.tm_mday = lastDay;
   d617c:	e9cd 0504 	strd	r0, r5, [sp, #16]
        timeInfo.tm_year = year - 1900;
   d6180:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   d6184:	9606      	str	r6, [sp, #24]
        tmToTime(&timeInfo);
   d6186:	a801      	add	r0, sp, #4
   d6188:	f7ff fe5a 	bl	d5e40 <_ZN9LocalTime8tmToTimeEP2tm>
        while(timeInfo.tm_wday != dayOfWeek) {
   d618c:	9b07      	ldr	r3, [sp, #28]
   d618e:	9904      	ldr	r1, [sp, #16]
   d6190:	42bb      	cmp	r3, r7
   d6192:	d002      	beq.n	d619a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x96>
            timeInfo.tm_mday--;
   d6194:	3901      	subs	r1, #1
   d6196:	9104      	str	r1, [sp, #16]
            tmToTime(&timeInfo);
   d6198:	e7f5      	b.n	d6186 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x82>
   d619a:	2000      	movs	r0, #0
        for(int loops = 1; loops <= 5; loops++) {
   d619c:	2201      	movs	r2, #1
            if (loops >= -ordinal) {
   d619e:	4264      	negs	r4, r4
   d61a0:	4294      	cmp	r4, r2
   d61a2:	dc03      	bgt.n	d61ac <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0xa8>
   d61a4:	2800      	cmp	r0, #0
   d61a6:	d0d8      	beq.n	d615a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d61a8:	9104      	str	r1, [sp, #16]
   d61aa:	e7d6      	b.n	d615a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
            timeInfo.tm_mday -= 7;
   d61ac:	3907      	subs	r1, #7
            if (timeInfo.tm_mday < 1) {
   d61ae:	2900      	cmp	r1, #0
   d61b0:	dde0      	ble.n	d6174 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d61b2:	3201      	adds	r2, #1
   d61b4:	2a06      	cmp	r2, #6
   d61b6:	f04f 0001 	mov.w	r0, #1
   d61ba:	d1f1      	bne.n	d61a0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x9c>
   d61bc:	e7da      	b.n	d6174 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
	...

000d61c0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d61c0:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   d61c4:	b0cd      	sub	sp, #308	; 0x134
   d61c6:	4604      	mov	r4, r0
    LocalTimeConvert tempConv(conv);
   d61c8:	a810      	add	r0, sp, #64	; 0x40
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d61ca:	460d      	mov	r5, r1
    LocalTimeConvert tempConv(conv);
   d61cc:	f7ff fdde 	bl	d5d8c <_ZN16LocalTimeConvertC1ERKS_>
        ymd.year = ymd.month = ymd.day = 0;
   d61d0:	2300      	movs	r3, #0
        return LocalTimeRestrictedDate::getExpirationDate();
   d61d2:	4620      	mov	r0, r4
        ymd.year = ymd.month = ymd.day = 0;
   d61d4:	9302      	str	r3, [sp, #8]
        return LocalTimeRestrictedDate::getExpirationDate();
   d61d6:	f7ff fc15 	bl	d5a04 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>
    if (expirationDate.isEmpty()) {
   d61da:	bb58      	cbnz	r0, d6234 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x74>
    *this = value.ymd();
   d61dc:	a82a      	add	r0, sp, #168	; 0xa8
   d61de:	f7ff fd92 	bl	d5d06 <_ZNK14LocalTimeValue3ymdEv>
        endYMD = tempConv.getLocalTimeYMD();
   d61e2:	9002      	str	r0, [sp, #8]
        endYMD.addDay(LocalTime::instance().getScheduleLookaheadDays());
   d61e4:	f7ff fe14 	bl	d5e10 <_ZN9LocalTime8instanceEv>
   d61e8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   d61ea:	a802      	add	r0, sp, #8
   d61ec:	f7ff fad7 	bl	d579e <_ZN12LocalTimeYMD6addDayEi>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d61f0:	f8df a20c 	ldr.w	sl, [pc, #524]	; d6400 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x240>
    *this = value.ymd();
   d61f4:	a82a      	add	r0, sp, #168	; 0xa8
   d61f6:	f7ff fd86 	bl	d5d06 <_ZNK14LocalTimeValue3ymdEv>
        return compareTo(other) > 0; 
   d61fa:	9902      	ldr	r1, [sp, #8]
        LocalTimeYMD curYMD = tempConv.getLocalTimeYMD();
   d61fc:	9003      	str	r0, [sp, #12]
    *this = value.ymd();
   d61fe:	4606      	mov	r6, r0
   d6200:	a803      	add	r0, sp, #12
   d6202:	f7ff faf1 	bl	d57e8 <_ZNK12LocalTimeYMD9compareToES_>
        if (curYMD > endYMD) {
   d6206:	2800      	cmp	r0, #0
   d6208:	f300 80f2 	bgt.w	d63f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x230>
        return LocalTimeRestrictedDate::isValid(ymd);
   d620c:	4631      	mov	r1, r6
   d620e:	4620      	mov	r0, r4
   d6210:	f7ff fbdd 	bl	d59ce <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
        if (!timeRange.isValidDate(curYMD)) {
   d6214:	4607      	mov	r7, r0
   d6216:	2800      	cmp	r0, #0
   d6218:	f000 8094 	beq.w	d6344 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
        switch(scheduleItemType) {
   d621c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d621e:	3b01      	subs	r3, #1
   d6220:	2b04      	cmp	r3, #4
   d6222:	f200 808f 	bhi.w	d6344 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d6226:	e8df f013 	tbh	[pc, r3, lsl #1]
   d622a:	0007      	.short	0x0007
   d622c:	00960007 	.word	0x00960007
   d6230:	00d500b8 	.word	0x00d500b8
        endYMD = expirationDate;
   d6234:	9002      	str	r0, [sp, #8]
   d6236:	e7db      	b.n	d61f0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x30>
                int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d6238:	a92a      	add	r1, sp, #168	; 0xa8
   d623a:	a807      	add	r0, sp, #28
   d623c:	f7ff fd38 	bl	d5cb0 <_ZNK14LocalTimeValue3hmsEv>
   d6240:	a907      	add	r1, sp, #28
   d6242:	4620      	mov	r0, r4
   d6244:	f7ff fa17 	bl	d5676 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                if (cmp < 0) {
   d6248:	2800      	cmp	r0, #0
   d624a:	da0d      	bge.n	d6268 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xa8>
                    tempConv.atLocalTime(timeRange.hmsStart);
   d624c:	f104 011c 	add.w	r1, r4, #28
   d6250:	a807      	add	r0, sp, #28
   d6252:	f7ff f9fb 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
   d6256:	a907      	add	r1, sp, #28
   d6258:	a810      	add	r0, sp, #64	; 0x40
   d625a:	f7ff ff15 	bl	d6088 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                        conv.time = tempConv.time;
   d625e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d6262:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
   d6266:	e094      	b.n	d6392 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1d2>
                if (cmp == 0) {
   d6268:	d16c      	bne.n	d6344 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    switch(scheduleItemType) {
   d626a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d626c:	2b01      	cmp	r3, #1
   d626e:	d025      	beq.n	d62bc <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xfc>
   d6270:	2b02      	cmp	r3, #2
   d6272:	d167      	bne.n	d6344 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d6274:	f104 011c 	add.w	r1, r4, #28
   d6278:	a804      	add	r0, sp, #16
   d627a:	f7ff f9e7 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
   d627e:	f104 0924 	add.w	r9, r4, #36	; 0x24
        return compareTo(other) <= 0;
   d6282:	4649      	mov	r1, r9
   d6284:	a804      	add	r0, sp, #16
   d6286:	f7ff f9c3 	bl	d5610 <_ZNK12LocalTimeHMS9compareToERKS_>
   d628a:	2800      	cmp	r0, #0
   d628c:	dc5a      	bgt.n	d6344 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                            tempConv.atLocalTime(tempHMS);
   d628e:	a904      	add	r1, sp, #16
   d6290:	a807      	add	r0, sp, #28
   d6292:	f7ff f9db 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
   d6296:	a907      	add	r1, sp, #28
   d6298:	a810      	add	r0, sp, #64	; 0x40
   d629a:	f7ff fef5 	bl	d6088 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                            if (tempConv.time > conv.time) {
   d629e:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	; 0x60
   d62a2:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d62a6:	4290      	cmp	r0, r2
   d62a8:	eb71 0303 	sbcs.w	r3, r1, r3
   d62ac:	db41      	blt.n	d6332 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x172>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d62ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d62b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d62b4:	4413      	add	r3, r2
   d62b6:	f88d 3014 	strb.w	r3, [sp, #20]
   d62ba:	e7e2      	b.n	d6282 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xc2>
                        startingModulo = timeRange.hmsStart.minute % increment;
   d62bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d62be:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   d62c2:	fb93 f6f2 	sdiv	r6, r3, r2
                        tempConv.time += increment * 60;
   d62c6:	213c      	movs	r1, #60	; 0x3c
   d62c8:	4351      	muls	r1, r2
                        startingModulo = timeRange.hmsStart.minute % increment;
   d62ca:	fb02 3616 	mls	r6, r2, r6, r3
                        tempConv.time += increment * 60;
   d62ce:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d62d2:	1852      	adds	r2, r2, r1
   d62d4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
                        tempConv.convert();
   d62d8:	a810      	add	r0, sp, #64	; 0x40
                        tempConv.time += increment * 60;
   d62da:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
                        tempConv.convert();
   d62de:	f7ff fe0f 	bl	d5f00 <_ZN16LocalTimeConvert7convertEv>
                        LocalTime::timeToTm(tempConv.time, &timeInfo);
   d62e2:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
    localtime_r(&time, pTimeInfo);
   d62e6:	a907      	add	r1, sp, #28
   d62e8:	a804      	add	r0, sp, #16
   d62ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d62ee:	f006 f8cf 	bl	dc490 <localtime_r>
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d62f2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   d62f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d62f6:	1b9b      	subs	r3, r3, r6
   d62f8:	fb93 f2f1 	sdiv	r2, r3, r1
   d62fc:	fb01 3312 	mls	r3, r1, r2, r3
   d6300:	9a08      	ldr	r2, [sp, #32]
    return mktime(pTimeInfo);
   d6302:	a807      	add	r0, sp, #28
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d6304:	1ad2      	subs	r2, r2, r3
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d6306:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d630a:	9208      	str	r2, [sp, #32]
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d630c:	9307      	str	r3, [sp, #28]
    return mktime(pTimeInfo);
   d630e:	f006 f8cf 	bl	dc4b0 <mktime>
                        tempConv.time = LocalTime::tmToTime(&timeInfo);
   d6312:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
                        tempConv.convert();
   d6316:	a810      	add	r0, sp, #64	; 0x40
   d6318:	f7ff fdf2 	bl	d5f00 <_ZN16LocalTimeConvert7convertEv>
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   d631c:	a92a      	add	r1, sp, #168	; 0xa8
   d631e:	a804      	add	r0, sp, #16
   d6320:	f7ff fcd2 	bl	d5cc8 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
        return compareTo(other) < 0;
   d6324:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d6328:	a804      	add	r0, sp, #16
   d632a:	f7ff f971 	bl	d5610 <_ZNK12LocalTimeHMS9compareToERKS_>
                        if (tempConv.getLocalTimeHMS() < timeRange.hmsEnd) {
   d632e:	2800      	cmp	r0, #0
   d6330:	da08      	bge.n	d6344 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
    *this = value.ymd();
   d6332:	a82a      	add	r0, sp, #168	; 0xa8
   d6334:	f7ff fce7 	bl	d5d06 <_ZNK14LocalTimeValue3ymdEv>
   d6338:	4601      	mov	r1, r0
        return LocalTimeRestrictedDate::isValid(ymd);
   d633a:	4620      	mov	r0, r4
   d633c:	f7ff fb47 	bl	d59ce <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
                        if (!timeRange.isValidDate(tempConv.getLocalTimeYMD())) {
   d6340:	2800      	cmp	r0, #0
   d6342:	d18c      	bne.n	d625e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x9e>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d6344:	4651      	mov	r1, sl
   d6346:	a807      	add	r0, sp, #28
   d6348:	f7ff faaa 	bl	d58a0 <_ZN12LocalTimeHMSC1EPKc>
   d634c:	a907      	add	r1, sp, #28
   d634e:	a810      	add	r0, sp, #64	; 0x40
   d6350:	f7ff febc 	bl	d60cc <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>
    }
   d6354:	e74e      	b.n	d61f4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x34>
                int day = LocalTime::dayOfWeekOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month(), dayOfWeek, increment);
   d6356:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d6358:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d635a:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
   d635e:	3101      	adds	r1, #1
   d6360:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6364:	f7ff fece 	bl	d6104 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>
                if (day == tempConv.localTimeValue.day()) {
   d6368:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   d636a:	4298      	cmp	r0, r3
   d636c:	d1ea      	bne.n	d6344 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        tempConv.atLocalTime(timeRange.hmsStart);
   d636e:	f104 011c 	add.w	r1, r4, #28
                tempConv.atLocalTime(timeRange.hmsStart);
   d6372:	a807      	add	r0, sp, #28
   d6374:	f7ff f96a 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
   d6378:	a907      	add	r1, sp, #28
   d637a:	a810      	add	r0, sp, #64	; 0x40
   d637c:	f7ff fe84 	bl	d6088 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                if (tempConv.time > conv.time) {
   d6380:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   d6384:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d6388:	4282      	cmp	r2, r0
   d638a:	418b      	sbcs	r3, r1
   d638c:	dada      	bge.n	d6344 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    conv.time = tempConv.time;
   d638e:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
                        conv.convert();
   d6392:	4628      	mov	r0, r5
   d6394:	f7ff fdb4 	bl	d5f00 <_ZN16LocalTimeConvert7convertEv>
                        return true;
   d6398:	e02b      	b.n	d63f2 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x232>
                int tempIncrement = increment;
   d639a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                if (tempIncrement < 0) {
   d639c:	2e00      	cmp	r6, #0
   d639e:	da08      	bge.n	d63b2 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1f2>
                    tempIncrement = LocalTime::lastDayOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month()) + tempIncrement + 1;
   d63a0:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d63a2:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d63a4:	3101      	adds	r1, #1
   d63a6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d63aa:	f7ff fd4b 	bl	d5e44 <_ZN9LocalTime14lastDayOfMonthEii>
   d63ae:	4430      	add	r0, r6
   d63b0:	1c46      	adds	r6, r0, #1
                if (tempConv.localTimeValue.ymd().getDay() == tempIncrement) {
   d63b2:	a82a      	add	r0, sp, #168	; 0xa8
   d63b4:	f7ff fca7 	bl	d5d06 <_ZNK14LocalTimeValue3ymdEv>
   d63b8:	ebb6 6fd0 	cmp.w	r6, r0, lsr #27
   d63bc:	d1c2      	bne.n	d6344 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d63be:	a92a      	add	r1, sp, #168	; 0xa8
   d63c0:	a807      	add	r0, sp, #28
   d63c2:	f7ff fc75 	bl	d5cb0 <_ZNK14LocalTimeValue3hmsEv>
   d63c6:	a907      	add	r1, sp, #28
   d63c8:	4620      	mov	r0, r4
   d63ca:	f7ff f954 	bl	d5676 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                    if (cmp <= 0) {
   d63ce:	2800      	cmp	r0, #0
   d63d0:	dcb8      	bgt.n	d6344 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d63d2:	e7cc      	b.n	d636e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1ae>
            if (tempConv.localTimeValue.hms() <= timeRange.hmsStart) {
   d63d4:	a92a      	add	r1, sp, #168	; 0xa8
   d63d6:	a807      	add	r0, sp, #28
   d63d8:	f7ff fc6a 	bl	d5cb0 <_ZNK14LocalTimeValue3hmsEv>
   d63dc:	f104 011c 	add.w	r1, r4, #28
        return compareTo(other) <= 0;
   d63e0:	a807      	add	r0, sp, #28
   d63e2:	9101      	str	r1, [sp, #4]
   d63e4:	f7ff f914 	bl	d5610 <_ZNK12LocalTimeHMS9compareToERKS_>
   d63e8:	2800      	cmp	r0, #0
   d63ea:	9901      	ldr	r1, [sp, #4]
   d63ec:	dcaa      	bgt.n	d6344 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d63ee:	e7c0      	b.n	d6372 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1b2>
    return false;
   d63f0:	2700      	movs	r7, #0
class LocalTimeConvert {
   d63f2:	a811      	add	r0, sp, #68	; 0x44
   d63f4:	f7ff f8ba 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d63f8:	4638      	mov	r0, r7
   d63fa:	b04d      	add	sp, #308	; 0x134
   d63fc:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
   d6400:	000e24c5 	.word	0x000e24c5

000d6404 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6404:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d6406:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6408:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d640a:	4668      	mov	r0, sp
   d640c:	f7ff f8f7 	bl	d55fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d6410:	466a      	mov	r2, sp
   d6412:	4629      	mov	r1, r5
   d6414:	4620      	mov	r0, r4
   d6416:	f006 ff85 	bl	dd324 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d641a:	a801      	add	r0, sp, #4
   d641c:	f7fe f80b 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6420:	4620      	mov	r0, r4
   d6422:	b003      	add	sp, #12
   d6424:	bd30      	pop	{r4, r5, pc}

000d6426 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6426:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d6428:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d642a:	4604      	mov	r4, r0
   d642c:	4668      	mov	r0, sp
   d642e:	f7ff f8e6 	bl	d55fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d6432:	466a      	mov	r2, sp
   d6434:	4629      	mov	r1, r5
   d6436:	4620      	mov	r0, r4
   d6438:	f006 ff50 	bl	dd2dc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d643c:	a801      	add	r0, sp, #4
   d643e:	f7fd fffa 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6442:	4620      	mov	r0, r4
   d6444:	b003      	add	sp, #12
   d6446:	bd30      	pop	{r4, r5, pc}

000d6448 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6448:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d644a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d644c:	4604      	mov	r4, r0
   d644e:	4668      	mov	r0, sp
   d6450:	f7ff f8d5 	bl	d55fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d6454:	466a      	mov	r2, sp
   d6456:	4629      	mov	r1, r5
   d6458:	4620      	mov	r0, r4
   d645a:	f006 fd8c 	bl	dcf76 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d645e:	a801      	add	r0, sp, #4
   d6460:	f7fd ffe9 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6464:	4620      	mov	r0, r4
   d6466:	b003      	add	sp, #12
   d6468:	bd30      	pop	{r4, r5, pc}

000d646a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>:
       *  (i.e. capacity() == size() in the new %vector).
       *
       *  The newly-created %vector uses a copy of the allocator object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */
      vector(const vector& __x)
   d646a:	b570      	push	{r4, r5, r6, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d646c:	e9d1 3600 	ldrd	r3, r6, [r1]
   d6470:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   d6472:	2300      	movs	r3, #0
   d6474:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d6478:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   d647a:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   d647c:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   d647e:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   d6480:	f7ff f8b0 	bl	d55e4 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d6484:	e9d5 5300 	ldrd	r5, r3, [r5]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d6488:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d648c:	4406      	add	r6, r0
   d648e:	60a6      	str	r6, [r4, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d6490:	462a      	mov	r2, r5
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
   d6492:	4601      	mov	r1, r0
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   d6494:	4293      	cmp	r3, r2
   d6496:	d005      	beq.n	d64a4 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x3a>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d6498:	b109      	cbz	r1, d649e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x34>
   d649a:	6816      	ldr	r6, [r2, #0]
   d649c:	600e      	str	r6, [r1, #0]
   d649e:	3104      	adds	r1, #4
   d64a0:	3204      	adds	r2, #4
   d64a2:	e7f7      	b.n	d6494 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x2a>
	this->_M_impl._M_finish =
   d64a4:	1b5b      	subs	r3, r3, r5
   d64a6:	4418      	add	r0, r3
   d64a8:	6060      	str	r0, [r4, #4]
      }
   d64aa:	4620      	mov	r0, r4
   d64ac:	bd70      	pop	{r4, r5, r6, pc}

000d64ae <_ZN23LocalTimeRestrictedDateC1ERKS_>:
class LocalTimeRestrictedDate {
   d64ae:	b538      	push	{r3, r4, r5, lr}
   d64b0:	460d      	mov	r5, r1
   d64b2:	f811 3b04 	ldrb.w	r3, [r1], #4
   d64b6:	4604      	mov	r4, r0
   d64b8:	f800 3b04 	strb.w	r3, [r0], #4
   d64bc:	f7ff ffd5 	bl	d646a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d64c0:	f105 0110 	add.w	r1, r5, #16
   d64c4:	f104 0010 	add.w	r0, r4, #16
   d64c8:	f7ff ffcf 	bl	d646a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d64cc:	4620      	mov	r0, r4
   d64ce:	bd38      	pop	{r3, r4, r5, pc}

000d64d0 <_ZN21LocalTimeScheduleItemC1ERKS_>:
class LocalTimeScheduleItem {
   d64d0:	b538      	push	{r3, r4, r5, lr}
   d64d2:	4604      	mov	r4, r0
   d64d4:	460d      	mov	r5, r1
class LocalTimeRange : public LocalTimeRestrictedDate {
   d64d6:	f7ff ffea 	bl	d64ae <_ZN23LocalTimeRestrictedDateC1ERKS_>
   d64da:	f105 011c 	add.w	r1, r5, #28
   d64de:	f104 001c 	add.w	r0, r4, #28
   d64e2:	f7ff f8b3 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
   d64e6:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d64ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d64ee:	f7ff f8ad 	bl	d564c <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeScheduleItem {
   d64f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d64f4:	62e3      	str	r3, [r4, #44]	; 0x2c
   d64f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d64f8:	6323      	str	r3, [r4, #48]	; 0x30
   d64fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d64fc:	6363      	str	r3, [r4, #52]	; 0x34
   d64fe:	f105 0138 	add.w	r1, r5, #56	; 0x38
   d6502:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6506:	f008 fa4d 	bl	de9a4 <_ZN6StringC1ERKS_>
   d650a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d650c:	64a3      	str	r3, [r4, #72]	; 0x48
   d650e:	4620      	mov	r0, r4
   d6510:	bd38      	pop	{r3, r4, r5, pc}

000d6512 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   d6512:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6516:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d651a:	b0d1      	sub	sp, #324	; 0x144
   d651c:	4681      	mov	r9, r0
   d651e:	460c      	mov	r4, r1
   d6520:	4615      	mov	r5, r2
    time_t closestTime = 0;
   d6522:	2600      	movs	r6, #0
   d6524:	2700      	movs	r7, #0
    for(auto it = scheduleItems.begin(); it != scheduleItems.end(); ++it) {
   d6526:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   d652a:	4543      	cmp	r3, r8
   d652c:	d029      	beq.n	d6582 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x70>
        LocalTimeScheduleItem item = *it;
   d652e:	4641      	mov	r1, r8
   d6530:	a801      	add	r0, sp, #4
   d6532:	f7ff ffcd 	bl	d64d0 <_ZN21LocalTimeScheduleItemC1ERKS_>
      if (_M_empty())
   d6536:	68ab      	ldr	r3, [r5, #8]
   d6538:	b90b      	cbnz	r3, d653e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x2c>
	__throw_bad_function_call();
   d653a:	f008 ffa7 	bl	df48c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d653e:	68eb      	ldr	r3, [r5, #12]
   d6540:	a901      	add	r1, sp, #4
   d6542:	4628      	mov	r0, r5
   d6544:	4798      	blx	r3
        if (filter(item)) {
   d6546:	b1b0      	cbz	r0, d6576 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x64>
            LocalTimeConvert tmpConvert(conv);
   d6548:	4621      	mov	r1, r4
   d654a:	a814      	add	r0, sp, #80	; 0x50
   d654c:	f7ff fc1e 	bl	d5d8c <_ZN16LocalTimeConvertC1ERKS_>
            bool bResult = item.getNextScheduledTime(tmpConvert);
   d6550:	a914      	add	r1, sp, #80	; 0x50
   d6552:	a801      	add	r0, sp, #4
   d6554:	f7ff fe34 	bl	d61c0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>
            if (bResult && closestTime == 0 || tmpConvert.time < closestTime) {
   d6558:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   d655c:	b110      	cbz	r0, d6564 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x52>
   d655e:	ea56 0107 	orrs.w	r1, r6, r7
   d6562:	d003      	beq.n	d656c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5a>
   d6564:	42b2      	cmp	r2, r6
   d6566:	eb73 0107 	sbcs.w	r1, r3, r7
   d656a:	da01      	bge.n	d6570 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5e>
                closestTime = tmpConvert.time;
   d656c:	4616      	mov	r6, r2
   d656e:	461f      	mov	r7, r3
class LocalTimeConvert {
   d6570:	a815      	add	r0, sp, #84	; 0x54
   d6572:	f7fe fffb 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
        LocalTimeScheduleItem item = *it;
   d6576:	a801      	add	r0, sp, #4
   d6578:	f7ff fc3c 	bl	d5df4 <_ZN21LocalTimeScheduleItemD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   d657c:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return *this;
   d6580:	e7d1      	b.n	d6526 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x14>
    if (closestTime != 0) {
   d6582:	ea56 0307 	orrs.w	r3, r6, r7
   d6586:	d008      	beq.n	d659a <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x88>
        conv.convert();
   d6588:	4620      	mov	r0, r4
        conv.time = closestTime;
   d658a:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
        conv.convert();
   d658e:	f7ff fcb7 	bl	d5f00 <_ZN16LocalTimeConvert7convertEv>
        return true;
   d6592:	2001      	movs	r0, #1
}
   d6594:	b051      	add	sp, #324	; 0x144
   d6596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   d659a:	2000      	movs	r0, #0
   d659c:	e7fa      	b.n	d6594 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x82>
	...

000d65a0 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv) const {
   d65a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
   d65a2:	4b08      	ldr	r3, [pc, #32]	; (d65c4 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x24>)
   d65a4:	9303      	str	r3, [sp, #12]
    return getNextScheduledTime(conv, [](LocalTimeScheduleItem &item) {
   d65a6:	466a      	mov	r2, sp
	    _M_manager = &_My_handler::_M_manager;
   d65a8:	4b07      	ldr	r3, [pc, #28]	; (d65c8 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x28>)
   d65aa:	9302      	str	r3, [sp, #8]
   d65ac:	f7ff ffb1 	bl	d6512 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>
      if (_M_manager)
   d65b0:	9b02      	ldr	r3, [sp, #8]
   d65b2:	4604      	mov	r4, r0
   d65b4:	b11b      	cbz	r3, d65be <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x1e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d65b6:	4669      	mov	r1, sp
   d65b8:	2203      	movs	r2, #3
   d65ba:	4608      	mov	r0, r1
   d65bc:	4798      	blx	r3
}
   d65be:	4620      	mov	r0, r4
   d65c0:	b004      	add	sp, #16
   d65c2:	bd10      	pop	{r4, pc}
   d65c4:	000d5541 	.word	0x000d5541
   d65c8:	000d5545 	.word	0x000d5545

000d65cc <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert>:
time_t LocalTimeScheduleManager::getNextWake(const LocalTimeConvert &conv) const {
   d65cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d65d0:	6806      	ldr	r6, [r0, #0]
   d65d2:	b0bc      	sub	sp, #240	; 0xf0
   d65d4:	4607      	mov	r7, r0
   d65d6:	468a      	mov	sl, r1
    time_t nextTime = 0;
   d65d8:	2400      	movs	r4, #0
   d65da:	2500      	movs	r5, #0
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d65dc:	687b      	ldr	r3, [r7, #4]
   d65de:	429e      	cmp	r6, r3
   d65e0:	d01c      	beq.n	d661c <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x50>
        if ((it->flags & LocalTimeSchedule::FLAG_ANY_WAKE) != 0) {
   d65e2:	7c33      	ldrb	r3, [r6, #16]
   d65e4:	b1c3      	cbz	r3, d6618 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x4c>
            LocalTimeConvert tempConv(conv);
   d65e6:	4651      	mov	r1, sl
   d65e8:	4668      	mov	r0, sp
   d65ea:	f7ff fbcf 	bl	d5d8c <_ZN16LocalTimeConvertC1ERKS_>
            if (it->getNextScheduledTime(tempConv)) {
   d65ee:	4669      	mov	r1, sp
   d65f0:	4630      	mov	r0, r6
   d65f2:	f7ff ffd5 	bl	d65a0 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d65f6:	b140      	cbz	r0, d660a <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x3e>
                if (nextTime == 0 || tempConv.time < nextTime) {
   d65f8:	ea54 0305 	orrs.w	r3, r4, r5
   d65fc:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   d6600:	d005      	beq.n	d660e <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x42>
   d6602:	45a0      	cmp	r8, r4
   d6604:	eb79 0305 	sbcs.w	r3, r9, r5
   d6608:	db01      	blt.n	d660e <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x42>
   d660a:	46a0      	mov	r8, r4
   d660c:	46a9      	mov	r9, r5
   d660e:	a801      	add	r0, sp, #4
   d6610:	f7fe ffac 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
   d6614:	4644      	mov	r4, r8
   d6616:	464d      	mov	r5, r9
      operator++() _GLIBCXX_NOEXCEPT
   d6618:	3630      	adds	r6, #48	; 0x30
	return *this;
   d661a:	e7df      	b.n	d65dc <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x10>
}
   d661c:	4620      	mov	r0, r4
   d661e:	4629      	mov	r1, r5
   d6620:	b03c      	add	sp, #240	; 0xf0
   d6622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6626 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert>:
time_t LocalTimeScheduleManager::getNextFullWake(const LocalTimeConvert &conv) const {
   d6626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d662a:	6806      	ldr	r6, [r0, #0]
   d662c:	b0bc      	sub	sp, #240	; 0xf0
   d662e:	4607      	mov	r7, r0
   d6630:	468a      	mov	sl, r1
    time_t nextTime = 0;
   d6632:	2400      	movs	r4, #0
   d6634:	2500      	movs	r5, #0
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d6636:	687b      	ldr	r3, [r7, #4]
   d6638:	429e      	cmp	r6, r3
   d663a:	d01d      	beq.n	d6678 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x52>
        if ((it->flags & LocalTimeSchedule::FLAG_FULL_WAKE) != 0) {
   d663c:	6933      	ldr	r3, [r6, #16]
   d663e:	079b      	lsls	r3, r3, #30
   d6640:	d518      	bpl.n	d6674 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x4e>
            LocalTimeConvert tempConv(conv);
   d6642:	4651      	mov	r1, sl
   d6644:	4668      	mov	r0, sp
   d6646:	f7ff fba1 	bl	d5d8c <_ZN16LocalTimeConvertC1ERKS_>
            if (it->getNextScheduledTime(tempConv)) {
   d664a:	4669      	mov	r1, sp
   d664c:	4630      	mov	r0, r6
   d664e:	f7ff ffa7 	bl	d65a0 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d6652:	b140      	cbz	r0, d6666 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x40>
                if (nextTime == 0 || tempConv.time < nextTime) {
   d6654:	ea54 0305 	orrs.w	r3, r4, r5
   d6658:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   d665c:	d005      	beq.n	d666a <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x44>
   d665e:	45a0      	cmp	r8, r4
   d6660:	eb79 0305 	sbcs.w	r3, r9, r5
   d6664:	db01      	blt.n	d666a <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x44>
   d6666:	46a0      	mov	r8, r4
   d6668:	46a9      	mov	r9, r5
   d666a:	a801      	add	r0, sp, #4
   d666c:	f7fe ff7e 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
   d6670:	4644      	mov	r4, r8
   d6672:	464d      	mov	r5, r9
      operator++() _GLIBCXX_NOEXCEPT
   d6674:	3630      	adds	r6, #48	; 0x30
	return *this;
   d6676:	e7de      	b.n	d6636 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x10>
}
   d6678:	4620      	mov	r0, r4
   d667a:	4629      	mov	r1, r5
   d667c:	b03c      	add	sp, #240	; 0xf0
   d667e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000d6684 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert>:
time_t LocalTimeScheduleManager::getNextDataCapture(const LocalTimeConvert &conv) const {
   d6684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (it->name.equals("data")) {
   d6688:	f8df b05c 	ldr.w	fp, [pc, #92]	; d66e8 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x64>
   d668c:	6806      	ldr	r6, [r0, #0]
time_t LocalTimeScheduleManager::getNextDataCapture(const LocalTimeConvert &conv) const {
   d668e:	b0bd      	sub	sp, #244	; 0xf4
   d6690:	4607      	mov	r7, r0
   d6692:	468a      	mov	sl, r1
    time_t nextTime = 0;
   d6694:	2400      	movs	r4, #0
   d6696:	2500      	movs	r5, #0
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d6698:	687b      	ldr	r3, [r7, #4]
   d669a:	429e      	cmp	r6, r3
   d669c:	d01f      	beq.n	d66de <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x5a>
        if (it->name.equals("data")) {
   d669e:	4659      	mov	r1, fp
   d66a0:	4630      	mov	r0, r6
   d66a2:	f008 fa0f 	bl	deac4 <_ZNK6String6equalsEPKc>
   d66a6:	b1c0      	cbz	r0, d66da <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x56>
            LocalTimeConvert tempConv(conv);
   d66a8:	4651      	mov	r1, sl
   d66aa:	4668      	mov	r0, sp
   d66ac:	f7ff fb6e 	bl	d5d8c <_ZN16LocalTimeConvertC1ERKS_>
            if (it->getNextScheduledTime(tempConv)) {
   d66b0:	4669      	mov	r1, sp
   d66b2:	4630      	mov	r0, r6
   d66b4:	f7ff ff74 	bl	d65a0 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d66b8:	b140      	cbz	r0, d66cc <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x48>
                if (nextTime == 0 || tempConv.time < nextTime) {
   d66ba:	ea54 0305 	orrs.w	r3, r4, r5
   d66be:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   d66c2:	d005      	beq.n	d66d0 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x4c>
   d66c4:	45a0      	cmp	r8, r4
   d66c6:	eb79 0305 	sbcs.w	r3, r9, r5
   d66ca:	db01      	blt.n	d66d0 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x4c>
   d66cc:	46a0      	mov	r8, r4
   d66ce:	46a9      	mov	r9, r5
   d66d0:	a801      	add	r0, sp, #4
   d66d2:	f7fe ff4b 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
   d66d6:	4644      	mov	r4, r8
   d66d8:	464d      	mov	r5, r9
      operator++() _GLIBCXX_NOEXCEPT
   d66da:	3630      	adds	r6, #48	; 0x30
	return *this;
   d66dc:	e7dc      	b.n	d6698 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x14>
}
   d66de:	4620      	mov	r0, r4
   d66e0:	4629      	mov	r1, r5
   d66e2:	b03d      	add	sp, #244	; 0xf4
   d66e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66e8:	000e259f 	.word	0x000e259f

000d66ec <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   d66ec:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   d66ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d66f2:	4604      	mov	r4, r0
   d66f4:	460e      	mov	r6, r1
      if (&__x != this)
   d66f6:	d022      	beq.n	d673e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d66f8:	e9d1 5800 	ldrd	r5, r8, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   d66fc:	6800      	ldr	r0, [r0, #0]
   d66fe:	68a3      	ldr	r3, [r4, #8]
   d6700:	1a1b      	subs	r3, r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6702:	eba8 0705 	sub.w	r7, r8, r5
			 - this->_M_impl._M_start); }
   d6706:	109b      	asrs	r3, r3, #2
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   d6708:	ebb3 0fa7 	cmp.w	r3, r7, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d670c:	ea4f 01a7 	mov.w	r1, r7, asr #2
   d6710:	d218      	bcs.n	d6744 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   d6712:	4608      	mov	r0, r1
   d6714:	f7fe ff66 	bl	d55e4 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d6718:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   d671a:	4603      	mov	r3, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d671c:	45a8      	cmp	r8, r5
   d671e:	d005      	beq.n	d672c <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x40>
   d6720:	b10b      	cbz	r3, d6726 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x3a>
   d6722:	682a      	ldr	r2, [r5, #0]
   d6724:	601a      	str	r2, [r3, #0]
   d6726:	3304      	adds	r3, #4
   d6728:	3504      	adds	r5, #4
   d672a:	e7f7      	b.n	d671c <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x30>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
   d672c:	6820      	ldr	r0, [r4, #0]
   d672e:	f7fe ff55 	bl	d55dc <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
   d6732:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   d6734:	443e      	add	r6, r7
   d6736:	60a6      	str	r6, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   d6738:	6823      	ldr	r3, [r4, #0]
   d673a:	441f      	add	r7, r3
   d673c:	6067      	str	r7, [r4, #4]
	}
      return *this;
    }
   d673e:	4620      	mov	r0, r4
   d6740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6744:	6862      	ldr	r2, [r4, #4]
   d6746:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   d6748:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   d674c:	d806      	bhi.n	d675c <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x70>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d674e:	45a8      	cmp	r8, r5
   d6750:	d0f2      	beq.n	d6738 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d6752:	463a      	mov	r2, r7
   d6754:	4629      	mov	r1, r5
   d6756:	f009 fc2b 	bl	dffb0 <memmove>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d675a:	e7ed      	b.n	d6738 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	  if (_Num)
   d675c:	b112      	cbz	r2, d6764 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d675e:	4629      	mov	r1, r5
   d6760:	f009 fc26 	bl	dffb0 <memmove>
   d6764:	e9d4 3200 	ldrd	r3, r2, [r4]
   d6768:	1ad1      	subs	r1, r2, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   d676a:	6833      	ldr	r3, [r6, #0]
   d676c:	440b      	add	r3, r1
					  __x._M_impl._M_finish,
   d676e:	6871      	ldr	r1, [r6, #4]
   d6770:	4299      	cmp	r1, r3
   d6772:	d0e1      	beq.n	d6738 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
   d6774:	b10a      	cbz	r2, d677a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x8e>
   d6776:	6818      	ldr	r0, [r3, #0]
   d6778:	6010      	str	r0, [r2, #0]
   d677a:	3304      	adds	r3, #4
   d677c:	3204      	adds	r2, #4
   d677e:	e7f7      	b.n	d6770 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x84>

000d6780 <_ZN14LocalTimeRangeaSERKS_>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d6780:	b538      	push	{r3, r4, r5, lr}
   d6782:	460d      	mov	r5, r1
class LocalTimeRestrictedDate {
   d6784:	f811 3b04 	ldrb.w	r3, [r1], #4
class LocalTimeRange : public LocalTimeRestrictedDate {
   d6788:	4604      	mov	r4, r0
class LocalTimeRestrictedDate {
   d678a:	f800 3b04 	strb.w	r3, [r0], #4
   d678e:	f7ff ffad 	bl	d66ec <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
   d6792:	f105 0110 	add.w	r1, r5, #16
   d6796:	f104 0010 	add.w	r0, r4, #16
   d679a:	f7ff ffa7 	bl	d66ec <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
class LocalTimeRange : public LocalTimeRestrictedDate {
   d679e:	f105 011c 	add.w	r1, r5, #28
   d67a2:	f104 001c 	add.w	r0, r4, #28
   d67a6:	f7fe ff59 	bl	d565c <_ZN12LocalTimeHMSaSERKS_>
   d67aa:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d67ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d67b2:	f7fe ff53 	bl	d565c <_ZN12LocalTimeHMSaSERKS_>
   d67b6:	4620      	mov	r0, r4
   d67b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d67bc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d67bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67c0:	e9d0 6900 	ldrd	r6, r9, [r0]
   d67c4:	4d3b      	ldr	r5, [pc, #236]	; (d68b4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d67c6:	4b3c      	ldr	r3, [pc, #240]	; (d68b8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d67c8:	eba9 0406 	sub.w	r4, r9, r6
   d67cc:	10a4      	asrs	r4, r4, #2
   d67ce:	436c      	muls	r4, r5
	if (max_size() - size() < __n)
   d67d0:	429c      	cmp	r4, r3
   d67d2:	468a      	mov	sl, r1
   d67d4:	4607      	mov	r7, r0
   d67d6:	4611      	mov	r1, r2
   d67d8:	46a8      	mov	r8, r5
   d67da:	d102      	bne.n	d67e2 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d67dc:	4837      	ldr	r0, [pc, #220]	; (d68bc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>)
   d67de:	f008 fe52 	bl	df486 <_ZSt20__throw_length_errorPKc>
   d67e2:	2c01      	cmp	r4, #1
   d67e4:	4622      	mov	r2, r4
   d67e6:	bf38      	it	cc
   d67e8:	2201      	movcc	r2, #1
   d67ea:	18a4      	adds	r4, r4, r2
   d67ec:	ebaa 0506 	sub.w	r5, sl, r6

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d67f0:	d25d      	bcs.n	d68ae <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d67f2:	b154      	cbz	r4, d680a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
   d67f4:	429c      	cmp	r4, r3
   d67f6:	bf28      	it	cs
   d67f8:	461c      	movcs	r4, r3
   d67fa:	204c      	movs	r0, #76	; 0x4c
   d67fc:	4360      	muls	r0, r4
   d67fe:	9100      	str	r1, [sp, #0]
   d6800:	f7fd fc49 	bl	d4096 <_Znwj>
   d6804:	9900      	ldr	r1, [sp, #0]
   d6806:	4683      	mov	fp, r0
   d6808:	e000      	b.n	d680c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x50>
   d680a:	46a3      	mov	fp, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d680c:	eb1b 0005 	adds.w	r0, fp, r5
   d6810:	d001      	beq.n	d6816 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
   d6812:	f7ff fe5d 	bl	d64d0 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d6816:	465b      	mov	r3, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6818:	4631      	mov	r1, r6
   d681a:	458a      	cmp	sl, r1
   d681c:	d00a      	beq.n	d6834 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
   d681e:	b133      	cbz	r3, d682e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   d6820:	4618      	mov	r0, r3
   d6822:	9101      	str	r1, [sp, #4]
   d6824:	9300      	str	r3, [sp, #0]
   d6826:	f7ff fe53 	bl	d64d0 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d682a:	e9dd 3100 	ldrd	r3, r1, [sp]
   d682e:	314c      	adds	r1, #76	; 0x4c
   d6830:	334c      	adds	r3, #76	; 0x4c
   d6832:	e7f2      	b.n	d681a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
   d6834:	08ad      	lsrs	r5, r5, #2
   d6836:	fb08 fa05 	mul.w	sl, r8, r5
   d683a:	f02a 4540 	bic.w	r5, sl, #3221225472	; 0xc0000000
   d683e:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
   d6842:	fb0a fa05 	mul.w	sl, sl, r5
   d6846:	eb06 050a 	add.w	r5, r6, sl
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   d684a:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d684e:	44da      	add	sl, fp
	  _ForwardIterator __cur = __result;
   d6850:	4653      	mov	r3, sl
   d6852:	4629      	mov	r1, r5
	      for (; __first != __last; ++__first, (void)++__cur)
   d6854:	4549      	cmp	r1, r9
   d6856:	d113      	bne.n	d6880 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d6858:	eba9 0505 	sub.w	r5, r9, r5
   d685c:	08ad      	lsrs	r5, r5, #2
   d685e:	fb08 f505 	mul.w	r5, r8, r5
   d6862:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d6866:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d686a:	fb08 a505 	mla	r5, r8, r5, sl
   d686e:	46b0      	mov	r8, r6
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d6870:	45c8      	cmp	r8, r9
   d6872:	d00f      	beq.n	d6894 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
    { __pointer->~_Tp(); }
   d6874:	4640      	mov	r0, r8
   d6876:	f7ff fabd 	bl	d5df4 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d687a:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d687e:	e7f7      	b.n	d6870 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d6880:	4618      	mov	r0, r3
   d6882:	9101      	str	r1, [sp, #4]
   d6884:	9300      	str	r3, [sp, #0]
   d6886:	f7ff fe23 	bl	d64d0 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d688a:	9901      	ldr	r1, [sp, #4]
   d688c:	9b00      	ldr	r3, [sp, #0]
   d688e:	314c      	adds	r1, #76	; 0x4c
   d6890:	334c      	adds	r3, #76	; 0x4c
   d6892:	e7df      	b.n	d6854 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	if (__p)
   d6894:	b116      	cbz	r6, d689c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>
	::operator delete(__p);
   d6896:	4630      	mov	r0, r6
   d6898:	f7fd fc01 	bl	d409e <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d689c:	204c      	movs	r0, #76	; 0x4c
   d689e:	fb00 b404 	mla	r4, r0, r4, fp
      this->_M_impl._M_finish = __new_finish;
   d68a2:	e9c7 b500 	strd	fp, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d68a6:	60bc      	str	r4, [r7, #8]
    }
   d68a8:	b003      	add	sp, #12
   d68aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d68ae:	461c      	mov	r4, r3
   d68b0:	e7a3      	b.n	d67fa <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
   d68b2:	bf00      	nop
   d68b4:	286bca1b 	.word	0x286bca1b
   d68b8:	01af286b 	.word	0x01af286b
   d68bc:	000e24e3 	.word	0x000e24e3

000d68c0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   d68c0:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d68c2:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d68c6:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d68c8:	4604      	mov	r4, r0
   d68ca:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d68cc:	d007      	beq.n	d68de <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d68ce:	b113      	cbz	r3, d68d6 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x16>
   d68d0:	4618      	mov	r0, r3
   d68d2:	f7ff fdfd 	bl	d64d0 <_ZN21LocalTimeScheduleItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   d68d6:	6863      	ldr	r3, [r4, #4]
   d68d8:	334c      	adds	r3, #76	; 0x4c
   d68da:	6063      	str	r3, [r4, #4]
      }
   d68dc:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d68de:	4619      	mov	r1, r3
   d68e0:	f7ff ff6c 	bl	d67bc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   d68e4:	e7fa      	b.n	d68dc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1c>

000d68e6 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d68e6:	b530      	push	{r4, r5, lr}
   d68e8:	b097      	sub	sp, #92	; 0x5c
   d68ea:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d68ec:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d68ee:	9201      	str	r2, [sp, #4]
   d68f0:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d68f2:	f7fe ffe1 	bl	d58b8 <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d68f6:	2301      	movs	r3, #1
    item.timeRange = timeRange;
   d68f8:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d68fa:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d68fc:	a803      	add	r0, sp, #12
    item.increment = increment;
   d68fe:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d6900:	f7ff ff3e 	bl	d6780 <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d6904:	a903      	add	r1, sp, #12
   d6906:	f104 0020 	add.w	r0, r4, #32
   d690a:	f7ff ffd9 	bl	d68c0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d690e:	a803      	add	r0, sp, #12
   d6910:	f7ff fa70 	bl	d5df4 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d6914:	4620      	mov	r0, r4
   d6916:	b017      	add	sp, #92	; 0x5c
   d6918:	bd30      	pop	{r4, r5, pc}

000d691a <_ZN17LocalTimeSchedule13withHourOfDayEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withHourOfDay(int hourMultiple, LocalTimeRange timeRange) {
   d691a:	b530      	push	{r4, r5, lr}
   d691c:	b097      	sub	sp, #92	; 0x5c
   d691e:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d6920:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withHourOfDay(int hourMultiple, LocalTimeRange timeRange) {
   d6922:	9201      	str	r2, [sp, #4]
   d6924:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d6926:	f7fe ffc7 	bl	d58b8 <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::HOUR_OF_DAY;
   d692a:	2302      	movs	r3, #2
    item.timeRange = timeRange;
   d692c:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::HOUR_OF_DAY;
   d692e:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d6930:	a803      	add	r0, sp, #12
    item.increment = hourMultiple;
   d6932:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d6934:	f7ff ff24 	bl	d6780 <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d6938:	a903      	add	r1, sp, #12
   d693a:	f104 0020 	add.w	r0, r4, #32
   d693e:	f7ff ffbf 	bl	d68c0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d6942:	a803      	add	r0, sp, #12
   d6944:	f7ff fa56 	bl	d5df4 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d6948:	4620      	mov	r0, r4
   d694a:	b017      	add	sp, #92	; 0x5c
   d694c:	bd30      	pop	{r4, r5, pc}
	...

000d6950 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   d6950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6954:	e9d1 3700 	ldrd	r3, r7, [r1]
   d6958:	4d1b      	ldr	r5, [pc, #108]	; (d69c8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x78>)
   d695a:	1aff      	subs	r7, r7, r3
   d695c:	10bc      	asrs	r4, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   d695e:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d6960:	436c      	muls	r4, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
   d6962:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d6966:	4606      	mov	r6, r0
   d6968:	4688      	mov	r8, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
   d696a:	6083      	str	r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d696c:	d008      	beq.n	d6980 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x30>
	if (__n > this->max_size())
   d696e:	4b17      	ldr	r3, [pc, #92]	; (d69cc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x7c>)
   d6970:	429c      	cmp	r4, r3
   d6972:	d901      	bls.n	d6978 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x28>
	  std::__throw_bad_alloc();
   d6974:	f008 fd84 	bl	df480 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6978:	4638      	mov	r0, r7
   d697a:	f7fd fb8c 	bl	d4096 <_Znwj>
   d697e:	4604      	mov	r4, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d6980:	4427      	add	r7, r4
   d6982:	60b7      	str	r7, [r6, #8]
   d6984:	e9d8 a700 	ldrd	sl, r7, [r8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d6988:	e9c6 4400 	strd	r4, r4, [r6]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d698c:	46d0      	mov	r8, sl
	  _ForwardIterator __cur = __result;
   d698e:	46a1      	mov	r9, r4
	      for (; __first != __last; ++__first, (void)++__cur)
   d6990:	4547      	cmp	r7, r8
   d6992:	d00b      	beq.n	d69ac <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x5c>
   d6994:	f1b9 0f00 	cmp.w	r9, #0
   d6998:	d003      	beq.n	d69a2 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x52>
   d699a:	4641      	mov	r1, r8
   d699c:	4648      	mov	r0, r9
   d699e:	f7ff fd97 	bl	d64d0 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d69a2:	f109 094c 	add.w	r9, r9, #76	; 0x4c
   d69a6:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d69aa:	e7f1      	b.n	d6990 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x40>
	this->_M_impl._M_finish =
   d69ac:	eba7 070a 	sub.w	r7, r7, sl
   d69b0:	08bf      	lsrs	r7, r7, #2
   d69b2:	437d      	muls	r5, r7
   d69b4:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d69b8:	204c      	movs	r0, #76	; 0x4c
   d69ba:	fb00 4405 	mla	r4, r0, r5, r4
   d69be:	6074      	str	r4, [r6, #4]
      }
   d69c0:	4630      	mov	r0, r6
   d69c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d69c6:	bf00      	nop
   d69c8:	286bca1b 	.word	0x286bca1b
   d69cc:	01af286b 	.word	0x01af286b

000d69d0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   d69d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d69d4:	4607      	mov	r7, r0
   d69d6:	4688      	mov	r8, r1
   d69d8:	4616      	mov	r6, r2
	  _ForwardIterator __cur = __result;
   d69da:	4615      	mov	r5, r2
   d69dc:	4604      	mov	r4, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d69de:	4544      	cmp	r4, r8
   d69e0:	d013      	beq.n	d6a0a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0x3a>
   d69e2:	b17d      	cbz	r5, d6a04 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0x34>
class LocalTimeSchedule {
   d69e4:	4621      	mov	r1, r4
   d69e6:	4628      	mov	r0, r5
   d69e8:	f007 ffdc 	bl	de9a4 <_ZN6StringC1ERKS_>
   d69ec:	6923      	ldr	r3, [r4, #16]
   d69ee:	612b      	str	r3, [r5, #16]
   d69f0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d69f4:	f104 0120 	add.w	r1, r4, #32
   d69f8:	e9c5 2306 	strd	r2, r3, [r5, #24]
   d69fc:	f105 0020 	add.w	r0, r5, #32
   d6a00:	f7ff ffa6 	bl	d6950 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>
   d6a04:	3430      	adds	r4, #48	; 0x30
   d6a06:	3530      	adds	r5, #48	; 0x30
   d6a08:	e7e9      	b.n	d69de <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0xe>
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
   d6a0a:	1be0      	subs	r0, r4, r7
   d6a0c:	0904      	lsrs	r4, r0, #4
   d6a0e:	4804      	ldr	r0, [pc, #16]	; (d6a20 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0x50>)
   d6a10:	4344      	muls	r4, r0
   d6a12:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
	  __catch(...)
	    {
	      std::_Destroy(__result, __cur);
	      __throw_exception_again;
	    }
	}
   d6a16:	2030      	movs	r0, #48	; 0x30
   d6a18:	fb00 6004 	mla	r0, r0, r4, r6
   d6a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a20:	0aaaaaab 	.word	0x0aaaaaab

000d6a24 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d6a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6a28:	e9d0 6800 	ldrd	r6, r8, [r0]
   d6a2c:	eba8 0406 	sub.w	r4, r8, r6
   d6a30:	1123      	asrs	r3, r4, #4
   d6a32:	4c33      	ldr	r4, [pc, #204]	; (d6b00 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xdc>)
   d6a34:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   d6a36:	4b33      	ldr	r3, [pc, #204]	; (d6b04 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>)
   d6a38:	429c      	cmp	r4, r3
   d6a3a:	4605      	mov	r5, r0
   d6a3c:	460f      	mov	r7, r1
   d6a3e:	4693      	mov	fp, r2
   d6a40:	d102      	bne.n	d6a48 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   d6a42:	4831      	ldr	r0, [pc, #196]	; (d6b08 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe4>)
   d6a44:	f008 fd1f 	bl	df486 <_ZSt20__throw_length_errorPKc>
   d6a48:	2c01      	cmp	r4, #1
   d6a4a:	4622      	mov	r2, r4
   d6a4c:	bf38      	it	cc
   d6a4e:	2201      	movcc	r2, #1
   d6a50:	18a4      	adds	r4, r4, r2
   d6a52:	eba1 0a06 	sub.w	sl, r1, r6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d6a56:	d250      	bcs.n	d6afa <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d6a58:	b144      	cbz	r4, d6a6c <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
   d6a5a:	429c      	cmp	r4, r3
   d6a5c:	bf28      	it	cs
   d6a5e:	461c      	movcs	r4, r3
   d6a60:	2030      	movs	r0, #48	; 0x30
   d6a62:	4360      	muls	r0, r4
   d6a64:	f7fd fb17 	bl	d4096 <_Znwj>
   d6a68:	4681      	mov	r9, r0
   d6a6a:	e000      	b.n	d6a6e <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   d6a6c:	46a1      	mov	r9, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6a6e:	eb19 0a0a 	adds.w	sl, r9, sl
   d6a72:	d011      	beq.n	d6a98 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
   d6a74:	4659      	mov	r1, fp
   d6a76:	4650      	mov	r0, sl
   d6a78:	f007 ff94 	bl	de9a4 <_ZN6StringC1ERKS_>
   d6a7c:	f8db 3010 	ldr.w	r3, [fp, #16]
   d6a80:	f8ca 3010 	str.w	r3, [sl, #16]
   d6a84:	e9db 2306 	ldrd	r2, r3, [fp, #24]
   d6a88:	f10b 0120 	add.w	r1, fp, #32
   d6a8c:	e9ca 2306 	strd	r2, r3, [sl, #24]
   d6a90:	f10a 0020 	add.w	r0, sl, #32
   d6a94:	f7ff ff5c 	bl	d6950 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>
#endif

      return std::__uninitialized_copy<__is_trivial(_ValueType1)
				       && __is_trivial(_ValueType2)
				       && __assignable>::
	__uninit_copy(__first, __last, __result);
   d6a98:	4639      	mov	r1, r7
   d6a9a:	464a      	mov	r2, r9
   d6a9c:	4630      	mov	r0, r6
   d6a9e:	f7ff ff97 	bl	d69d0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_>
   d6aa2:	4641      	mov	r1, r8
   d6aa4:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d6aa8:	4638      	mov	r0, r7
   d6aaa:	f7ff ff91 	bl	d69d0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6aae:	4637      	mov	r7, r6
   d6ab0:	4683      	mov	fp, r0
	  for (; __first != __last; ++__first)
   d6ab2:	4547      	cmp	r7, r8
   d6ab4:	d014      	beq.n	d6ae0 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d6ab6:	e9d7 a308 	ldrd	sl, r3, [r7, #32]
   d6aba:	4553      	cmp	r3, sl
   d6abc:	9301      	str	r3, [sp, #4]
   d6abe:	d006      	beq.n	d6ace <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
    { __pointer->~_Tp(); }
   d6ac0:	4650      	mov	r0, sl
   d6ac2:	f7ff f997 	bl	d5df4 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d6ac6:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d6aca:	9b01      	ldr	r3, [sp, #4]
   d6acc:	e7f5      	b.n	d6aba <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
	_M_deallocate(_M_impl._M_start,
   d6ace:	6a38      	ldr	r0, [r7, #32]
	if (__p)
   d6ad0:	b108      	cbz	r0, d6ad6 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb2>
	::operator delete(__p);
   d6ad2:	f7fd fae4 	bl	d409e <_ZdlPv>
   d6ad6:	4638      	mov	r0, r7
   d6ad8:	f007 fece 	bl	de878 <_ZN6StringD1Ev>
   d6adc:	3730      	adds	r7, #48	; 0x30
   d6ade:	e7e8      	b.n	d6ab2 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8e>
   d6ae0:	b116      	cbz	r6, d6ae8 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d6ae2:	4630      	mov	r0, r6
   d6ae4:	f7fd fadb 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d6ae8:	2030      	movs	r0, #48	; 0x30
   d6aea:	fb00 9404 	mla	r4, r0, r4, r9
      this->_M_impl._M_finish = __new_finish;
   d6aee:	e9c5 9b00 	strd	r9, fp, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d6af2:	60ac      	str	r4, [r5, #8]
    }
   d6af4:	b003      	add	sp, #12
   d6af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d6afa:	461c      	mov	r4, r3
   d6afc:	e7b0      	b.n	d6a60 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
   d6afe:	bf00      	nop
   d6b00:	aaaaaaab 	.word	0xaaaaaaab
   d6b04:	02aaaaaa 	.word	0x02aaaaaa
   d6b08:	000e24e3 	.word	0x000e24e3

000d6b0c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>:
LocalTimeSchedule &LocalTimeScheduleManager::getScheduleByName(const char *name) {
   d6b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b0e:	6805      	ldr	r5, [r0, #0]
   d6b10:	b08d      	sub	sp, #52	; 0x34
   d6b12:	4604      	mov	r4, r0
   d6b14:	460e      	mov	r6, r1
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d6b16:	6863      	ldr	r3, [r4, #4]
   d6b18:	429d      	cmp	r5, r3
   d6b1a:	462f      	mov	r7, r5
   d6b1c:	d009      	beq.n	d6b32 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x26>
        if (it->name.equals(name)) {
   d6b1e:	4628      	mov	r0, r5
   d6b20:	4631      	mov	r1, r6
   d6b22:	f007 ffcf 	bl	deac4 <_ZNK6String6equalsEPKc>
   d6b26:	3530      	adds	r5, #48	; 0x30
   d6b28:	2800      	cmp	r0, #0
   d6b2a:	d0f4      	beq.n	d6b16 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0xa>
}
   d6b2c:	4638      	mov	r0, r7
   d6b2e:	b00d      	add	sp, #52	; 0x34
   d6b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LocalTimeSchedule() {
   d6b32:	4922      	ldr	r1, [pc, #136]	; (d6bbc <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0xb0>)
   d6b34:	4668      	mov	r0, sp
   d6b36:	f007 feea 	bl	de90e <_ZN6StringC1EPKc>
   d6b3a:	2000      	movs	r0, #0
   d6b3c:	2100      	movs	r1, #0
   d6b3e:	2300      	movs	r3, #0
   d6b40:	e9cd 0106 	strd	r0, r1, [sp, #24]
    sch.name = name;
   d6b44:	4631      	mov	r1, r6
   d6b46:	4668      	mov	r0, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
   d6b48:	e9cd 3308 	strd	r3, r3, [sp, #32]
   d6b4c:	9304      	str	r3, [sp, #16]
   d6b4e:	930a      	str	r3, [sp, #40]	; 0x28
   d6b50:	f007 ff3b 	bl	de9ca <_ZN6StringaSEPKc>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d6b54:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
   d6b58:	429d      	cmp	r5, r3
   d6b5a:	d020      	beq.n	d6b9e <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x92>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6b5c:	b175      	cbz	r5, d6b7c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x70>
class LocalTimeSchedule {
   d6b5e:	4669      	mov	r1, sp
   d6b60:	4628      	mov	r0, r5
   d6b62:	f007 ff1f 	bl	de9a4 <_ZN6StringC1ERKS_>
   d6b66:	9b04      	ldr	r3, [sp, #16]
   d6b68:	612b      	str	r3, [r5, #16]
   d6b6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d6b6e:	a908      	add	r1, sp, #32
   d6b70:	e9c5 2306 	strd	r2, r3, [r5, #24]
   d6b74:	f105 0020 	add.w	r0, r5, #32
   d6b78:	f7ff feea 	bl	d6950 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>
	    ++this->_M_impl._M_finish;
   d6b7c:	6863      	ldr	r3, [r4, #4]
   d6b7e:	3330      	adds	r3, #48	; 0x30
   d6b80:	6063      	str	r3, [r4, #4]
    return getScheduleByName(name);
   d6b82:	4620      	mov	r0, r4
   d6b84:	4631      	mov	r1, r6
   d6b86:	f7ff ffc1 	bl	d6b0c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d6b8a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   d6b8e:	4607      	mov	r7, r0
   d6b90:	42a5      	cmp	r5, r4
   d6b92:	d00a      	beq.n	d6baa <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x9e>
    { __pointer->~_Tp(); }
   d6b94:	4620      	mov	r0, r4
   d6b96:	f7ff f92d 	bl	d5df4 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d6b9a:	344c      	adds	r4, #76	; 0x4c
   d6b9c:	e7f8      	b.n	d6b90 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x84>
	  _M_realloc_insert(end(), __x);
   d6b9e:	466a      	mov	r2, sp
   d6ba0:	4629      	mov	r1, r5
   d6ba2:	4620      	mov	r0, r4
   d6ba4:	f7ff ff3e 	bl	d6a24 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   d6ba8:	e7eb      	b.n	d6b82 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x76>
	_M_deallocate(_M_impl._M_start,
   d6baa:	9808      	ldr	r0, [sp, #32]
	if (__p)
   d6bac:	b108      	cbz	r0, d6bb2 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0xa6>
	::operator delete(__p);
   d6bae:	f7fd fa76 	bl	d409e <_ZdlPv>
   d6bb2:	4668      	mov	r0, sp
   d6bb4:	f007 fe60 	bl	de878 <_ZN6StringD1Ev>
   d6bb8:	e7b8      	b.n	d6b2c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x20>
   d6bba:	bf00      	nop
   d6bbc:	000e291f 	.word	0x000e291f

000d6bc0 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
	(*_Base::_M_get_pointer(__functor))(
   d6bc0:	6803      	ldr	r3, [r0, #0]
   d6bc2:	780a      	ldrb	r2, [r1, #0]
    return result;
}

void PublishQueuePosix::publishCompleteCallback(bool succeeded, const char *eventName, const char *eventData) {
    publishComplete = true;
    publishSuccess = succeeded;
   d6bc4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   d6bc8:	2101      	movs	r1, #1
   d6bca:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   d6bce:	4770      	bx	lr

000d6bd0 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d6bd0:	2a02      	cmp	r2, #2
   d6bd2:	d006      	beq.n	d6be2 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d6bd4:	2a03      	cmp	r2, #3
   d6bd6:	d002      	beq.n	d6bde <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d6bd8:	2a01      	cmp	r2, #1
   d6bda:	d100      	bne.n	d6bde <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6bdc:	6001      	str	r1, [r0, #0]
	}
   d6bde:	2000      	movs	r0, #0
   d6be0:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6be2:	680b      	ldr	r3, [r1, #0]
   d6be4:	6003      	str	r3, [r0, #0]
	}
   d6be6:	e7fa      	b.n	d6bde <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d6be8 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d6be8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6bea:	4603      	mov	r3, r0
	switch (__op)
   d6bec:	d102      	bne.n	d6bf4 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d6bee:	6001      	str	r1, [r0, #0]
      }
   d6bf0:	2000      	movs	r0, #0
   d6bf2:	4770      	bx	lr
	  switch (__op)
   d6bf4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6bf6:	bf04      	itt	eq
   d6bf8:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d6bfc:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d6c00:	e7f6      	b.n	d6bf0 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d6c02 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6c02:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d6c04:	6842      	ldr	r2, [r0, #4]
   d6c06:	4603      	mov	r3, r0
   d6c08:	1054      	asrs	r4, r2, #1
   d6c0a:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d6c0e:	07d2      	lsls	r2, r2, #31
   d6c10:	bf48      	it	mi
   d6c12:	590a      	ldrmi	r2, [r1, r4]
   d6c14:	681b      	ldr	r3, [r3, #0]
      }
   d6c16:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6c1a:	bf48      	it	mi
   d6c1c:	58d3      	ldrmi	r3, [r2, r3]
   d6c1e:	4718      	bx	r3

000d6c20 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   d6c20:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   d6c24:	4601      	mov	r1, r0
    if (stateHandler) {
   d6c26:	b11b      	cbz	r3, d6c30 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c28:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   d6c2c:	30c0      	adds	r0, #192	; 0xc0
   d6c2e:	4718      	bx	r3
}
   d6c30:	4770      	bx	lr
	...

000d6c34 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d6c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   d6c36:	4d12      	ldr	r5, [pc, #72]	; (d6c80 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d6c38:	4608      	mov	r0, r1
        eventData = "";
   d6c3a:	2a00      	cmp	r2, #0
   d6c3c:	bf18      	it	ne
   d6c3e:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d6c40:	460f      	mov	r7, r1
   d6c42:	461e      	mov	r6, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d6c44:	f009 fa59 	bl	e00fa <strlen>
   d6c48:	2840      	cmp	r0, #64	; 0x40
   d6c4a:	d817      	bhi.n	d6c7c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   d6c4c:	4628      	mov	r0, r5
   d6c4e:	f009 fa54 	bl	e00fa <strlen>
   d6c52:	f240 236e 	movw	r3, #622	; 0x26e
   d6c56:	4298      	cmp	r0, r3
   d6c58:	d810      	bhi.n	d6c7c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   d6c5a:	3043      	adds	r0, #67	; 0x43
   d6c5c:	f7fd fa1d 	bl	d409a <_Znaj>
    if (event) {
   d6c60:	4604      	mov	r4, r0
   d6c62:	b148      	cbz	r0, d6c78 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
        strcpy(event->eventName, eventName);
   d6c64:	4639      	mov	r1, r7
        event->flags = flags;
   d6c66:	f800 6b01 	strb.w	r6, [r0], #1
        strcpy(event->eventName, eventName);
   d6c6a:	f009 fa21 	bl	e00b0 <strcpy>
        strcpy(event->eventData, eventData);
   d6c6e:	4629      	mov	r1, r5
   d6c70:	f104 0042 	add.w	r0, r4, #66	; 0x42
   d6c74:	f009 fa1c 	bl	e00b0 <strcpy>
}
   d6c78:	4620      	mov	r0, r4
   d6c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   d6c7c:	2400      	movs	r4, #0
   d6c7e:	e7fb      	b.n	d6c78 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
   d6c80:	000e291f 	.word	0x000e291f

000d6c84 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d6c84:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6c86:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d6c88:	460a      	mov	r2, r1
   d6c8a:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d6c8c:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d6c8e:	1d01      	adds	r1, r0, #4
   d6c90:	a808      	add	r0, sp, #32
   d6c92:	f000 fdf9 	bl	d7888 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d6c96:	9808      	ldr	r0, [sp, #32]
   d6c98:	2100      	movs	r1, #0
   d6c9a:	f00a f96d 	bl	e0f78 <open>
   d6c9e:	4605      	mov	r5, r0
   d6ca0:	a808      	add	r0, sp, #32
   d6ca2:	f007 fde9 	bl	de878 <_ZN6StringD1Ev>
    if (fd) {
   d6ca6:	2d00      	cmp	r5, #0
   d6ca8:	d060      	beq.n	d6d6c <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   d6caa:	a908      	add	r1, sp, #32
   d6cac:	4628      	mov	r0, r5
   d6cae:	f00a f951 	bl	e0f54 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   d6cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d6cb4:	492e      	ldr	r1, [pc, #184]	; (d6d70 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   d6cb6:	482f      	ldr	r0, [pc, #188]	; (d6d74 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d6cb8:	4632      	mov	r2, r6
   d6cba:	f7fd fcf3 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   d6cbe:	2200      	movs	r2, #0
   d6cc0:	4611      	mov	r1, r2
   d6cc2:	4628      	mov	r0, r5
   d6cc4:	f00a f94e 	bl	e0f64 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   d6cc8:	2208      	movs	r2, #8
   d6cca:	a906      	add	r1, sp, #24
   d6ccc:	4628      	mov	r0, r5
   d6cce:	f00a f967 	bl	e0fa0 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   d6cd2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d6cd4:	2f4a      	cmp	r7, #74	; 0x4a
   d6cd6:	dd39      	ble.n	d6d4c <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   d6cd8:	4b27      	ldr	r3, [pc, #156]	; (d6d78 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   d6cda:	9a06      	ldr	r2, [sp, #24]
   d6cdc:	429a      	cmp	r2, r3
   d6cde:	d135      	bne.n	d6d4c <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   d6ce0:	4b26      	ldr	r3, [pc, #152]	; (d6d7c <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   d6ce2:	9a07      	ldr	r2, [sp, #28]
   d6ce4:	429a      	cmp	r2, r3
   d6ce6:	d131      	bne.n	d6d4c <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   d6ce8:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   d6cec:	4610      	mov	r0, r2
   d6cee:	9205      	str	r2, [sp, #20]
   d6cf0:	f7fd f9d3 	bl	d409a <_Znaj>
            if (result) {
   d6cf4:	4604      	mov	r4, r0
   d6cf6:	b1c0      	cbz	r0, d6d2a <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d6cf8:	4427      	add	r7, r4
                read(fd, result, eventSize);
   d6cfa:	4601      	mov	r1, r0
   d6cfc:	9a05      	ldr	r2, [sp, #20]
   d6cfe:	4628      	mov	r0, r5
   d6d00:	f00a f94e 	bl	e0fa0 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d6d04:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   d6d08:	b9ab      	cbnz	r3, d6d36 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   d6d0a:	1c63      	adds	r3, r4, #1
   d6d0c:	4618      	mov	r0, r3
   d6d0e:	9305      	str	r3, [sp, #20]
   d6d10:	f009 f9f3 	bl	e00fa <strlen>
   d6d14:	283f      	cmp	r0, #63	; 0x3f
   d6d16:	9b05      	ldr	r3, [sp, #20]
   d6d18:	d80d      	bhi.n	d6d36 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   d6d1a:	f104 0242 	add.w	r2, r4, #66	; 0x42
   d6d1e:	9200      	str	r2, [sp, #0]
   d6d20:	4917      	ldr	r1, [pc, #92]	; (d6d80 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   d6d22:	4814      	ldr	r0, [pc, #80]	; (d6d74 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d6d24:	4632      	mov	r2, r6
   d6d26:	f7fd fcbd 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   d6d2a:	4628      	mov	r0, r5
   d6d2c:	f00a f90a 	bl	e0f44 <close>
}
   d6d30:	4620      	mov	r0, r4
   d6d32:	b01f      	add	sp, #124	; 0x7c
   d6d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   d6d36:	4913      	ldr	r1, [pc, #76]	; (d6d84 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   d6d38:	480e      	ldr	r0, [pc, #56]	; (d6d74 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d6d3a:	4632      	mov	r2, r6
   d6d3c:	f7fd fcb2 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   d6d40:	2143      	movs	r1, #67	; 0x43
   d6d42:	4620      	mov	r0, r4
   d6d44:	f008 fb96 	bl	df474 <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   d6d48:	2400      	movs	r4, #0
   d6d4a:	e7ee      	b.n	d6d2a <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   d6d4c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d6d50:	9302      	str	r3, [sp, #8]
   d6d52:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d6d56:	9301      	str	r3, [sp, #4]
   d6d58:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d6d5c:	9300      	str	r3, [sp, #0]
   d6d5e:	490a      	ldr	r1, [pc, #40]	; (d6d88 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   d6d60:	9b06      	ldr	r3, [sp, #24]
   d6d62:	4804      	ldr	r0, [pc, #16]	; (d6d74 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d6d64:	4632      	mov	r2, r6
   d6d66:	f7fd fc9d 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
   d6d6a:	e7ed      	b.n	d6d48 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   d6d6c:	462c      	mov	r4, r5
    return result;
   d6d6e:	e7df      	b.n	d6d30 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   d6d70:	000e2540 	.word	0x000e2540
   d6d74:	2003e498 	.word	0x2003e498
   d6d78:	31b67663 	.word	0x31b67663
   d6d7c:	00410801 	.word	0x00410801
   d6d80:	000e2554 	.word	0x000e2554
   d6d84:	000e2576 	.word	0x000e2576
   d6d88:	000e25a4 	.word	0x000e25a4

000d6d8c <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   d6d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6d90:	4680      	mov	r8, r0
   d6d92:	4b28      	ldr	r3, [pc, #160]	; (d6e34 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   d6d94:	f848 3b04 	str.w	r3, [r8], #4
   d6d98:	4604      	mov	r4, r0
   d6d9a:	4640      	mov	r0, r8
   d6d9c:	f000 fc8c 	bl	d76b8 <_ZN14SequentialFileC1Ev>
   d6da0:	2202      	movs	r2, #2
   d6da2:	2364      	movs	r3, #100	; 0x64
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d6da4:	2500      	movs	r5, #0
   d6da6:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d6daa:	2308      	movs	r3, #8
   d6dac:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d6dae:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   d6db2:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   d6db6:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   d6dba:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	  _M_start(), _M_finish()
   d6dbe:	67a5      	str	r5, [r4, #120]	; 0x78
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6dc0:	2020      	movs	r0, #32
   d6dc2:	f7fd f968 	bl	d4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d6dc6:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d6dc8:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d6dca:	3e01      	subs	r6, #1
   d6dcc:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d6dce:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d6dd2:	4607      	mov	r7, r0
   d6dd4:	f44f 7000 	mov.w	r0, #512	; 0x200
   d6dd8:	f7fd f95d 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d6ddc:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d6de0:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   d6de4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d6de8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6df0:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   d6df4:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   d6df8:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   d6dfc:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d6e00:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d6e04:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   d6e08:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   d6e0c:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   d6e10:	4909      	ldr	r1, [pc, #36]	; (d6e38 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   d6e12:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   d6e16:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   d6e1a:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   d6e1e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   d6e22:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   d6e26:	4640      	mov	r0, r8
   d6e28:	f000 fc8c 	bl	d7744 <_ZN14SequentialFile11withDirPathEPKc>
}
   d6e2c:	4620      	mov	r0, r4
   d6e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6e32:	bf00      	nop
   d6e34:	000e27b4 	.word	0x000e27b4
   d6e38:	000e25e9 	.word	0x000e25e9

000d6e3c <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   d6e3c:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d6e3e:	4c06      	ldr	r4, [pc, #24]	; (d6e58 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   d6e40:	6823      	ldr	r3, [r4, #0]
   d6e42:	b93b      	cbnz	r3, d6e54 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   d6e44:	20d0      	movs	r0, #208	; 0xd0
   d6e46:	f7fd f926 	bl	d4096 <_Znwj>
   d6e4a:	4605      	mov	r5, r0
   d6e4c:	b108      	cbz	r0, d6e52 <_ZN17PublishQueuePosix8instanceEv+0x16>
   d6e4e:	f7ff ff9d 	bl	d6d8c <_ZN17PublishQueuePosixC1Ev>
   d6e52:	6025      	str	r5, [r4, #0]
}
   d6e54:	6820      	ldr	r0, [r4, #0]
   d6e56:	bd38      	pop	{r3, r4, r5, pc}
   d6e58:	2003e49c 	.word	0x2003e49c

000d6e5c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6e5c:	b510      	push	{r4, lr}
   d6e5e:	e9d1 2300 	ldrd	r2, r3, [r1]
   d6e62:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d6e64:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d6e66:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6e68:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d6e6a:	b90a      	cbnz	r2, d6e70 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d6e6c:	07d9      	lsls	r1, r3, #31
   d6e6e:	d505      	bpl.n	d6e7c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6e70:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d6e74:	4b0f      	ldr	r3, [pc, #60]	; (d6eb4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d6e76:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d6e78:	4b0f      	ldr	r3, [pc, #60]	; (d6eb8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d6e7a:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e7c:	ab02      	add	r3, sp, #8
   d6e7e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6e82:	466a      	mov	r2, sp
   d6e84:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6e88:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6e8c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6e90:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e94:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e96:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6e9a:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e9c:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e9e:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6ea0:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d6ea2:	4618      	mov	r0, r3
   d6ea4:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ea6:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6ea8:	9105      	str	r1, [sp, #20]
   d6eaa:	f7fe f917 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	}
   d6eae:	4620      	mov	r0, r4
   d6eb0:	b006      	add	sp, #24
   d6eb2:	bd10      	pop	{r4, pc}
   d6eb4:	000d6c03 	.word	0x000d6c03
   d6eb8:	000d6be9 	.word	0x000d6be9

000d6ebc <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6ebc:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d6ebe:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d6ec0:	4604      	mov	r4, r0
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   d6ec2:	6f58      	ldr	r0, [r3, #116]	; 0x74
   d6ec4:	f004 ff14 	bl	dbcf0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d6ec8:	4620      	mov	r0, r4
   d6eca:	bd10      	pop	{r4, pc}

000d6ecc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d6ecc:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   d6ece:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   d6ed0:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   d6ed2:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d6ed4:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   d6ed6:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   d6ed8:	d002      	beq.n	d6ee0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d6eda:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d6edc:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   d6ede:	bd10      	pop	{r4, pc}
	::operator delete(__p);
   d6ee0:	68c0      	ldr	r0, [r0, #12]
   d6ee2:	f7fd f8dc 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d6ee6:	6963      	ldr	r3, [r4, #20]
   d6ee8:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d6eea:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d6eec:	685b      	ldr	r3, [r3, #4]
   d6eee:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d6ef0:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d6ef4:	6122      	str	r2, [r4, #16]
   d6ef6:	e7f1      	b.n	d6edc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>

000d6ef8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   d6ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6efc:	b087      	sub	sp, #28
   d6efe:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6f00:	9001      	str	r0, [sp, #4]
    void lock() { os_mutex_recursive_lock(mutex); };
   d6f02:	6f40      	ldr	r0, [r0, #116]	; 0x74
                hdr.magic = FILE_MAGIC;
   d6f04:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d6fb0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                hdr.version = FILE_VERSION;
   d6f08:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d6fb4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
   d6f0c:	f004 fee8 	bl	dbce0 <os_mutex_recursive_lock>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d6f10:	f8df b0a4 	ldr.w	fp, [pc, #164]	; d6fb8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xc0>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d6f14:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   d6f18:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d6f1c:	4293      	cmp	r3, r2
   d6f1e:	d105      	bne.n	d6f2c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x34>
    WITH_LOCK(*this) {
   d6f20:	a801      	add	r0, sp, #4
   d6f22:	f7ff ffcb 	bl	d6ebc <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d6f26:	b007      	add	sp, #28
   d6f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ramQueue.pop_front();
   d6f2c:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   d6f30:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   d6f34:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   d6f36:	f7ff ffc9 	bl	d6ecc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   d6f3a:	4640      	mov	r0, r8
   d6f3c:	f000 fe98 	bl	d7c70 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d6f40:	2300      	movs	r3, #0
   d6f42:	4602      	mov	r2, r0
   d6f44:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   d6f46:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d6f48:	a802      	add	r0, sp, #8
   d6f4a:	f000 fc9d 	bl	d7888 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d6f4e:	9802      	ldr	r0, [sp, #8]
   d6f50:	f240 2102 	movw	r1, #514	; 0x202
   d6f54:	f00a f810 	bl	e0f78 <open>
   d6f58:	4605      	mov	r5, r0
   d6f5a:	a802      	add	r0, sp, #8
   d6f5c:	f007 fc8c 	bl	de878 <_ZN6StringD1Ev>
            if (fd) {
   d6f60:	b1cd      	cbz	r5, d6f96 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x9e>
                write(fd, &hdr, sizeof(hdr));
   d6f62:	2208      	movs	r2, #8
   d6f64:	eb0d 0102 	add.w	r1, sp, r2
   d6f68:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   d6f6a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
                write(fd, &hdr, sizeof(hdr));
   d6f6e:	f00a f829 	bl	e0fc4 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   d6f72:	f107 0042 	add.w	r0, r7, #66	; 0x42
   d6f76:	f009 f8c0 	bl	e00fa <strlen>
   d6f7a:	4639      	mov	r1, r7
   d6f7c:	f100 0243 	add.w	r2, r0, #67	; 0x43
   d6f80:	4628      	mov	r0, r5
   d6f82:	f00a f81f 	bl	e0fc4 <write>
                close(fd);
   d6f86:	4628      	mov	r0, r5
   d6f88:	f009 ffdc 	bl	e0f44 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d6f8c:	4807      	ldr	r0, [pc, #28]	; (d6fac <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>)
   d6f8e:	4632      	mov	r2, r6
   d6f90:	4659      	mov	r1, fp
   d6f92:	f7fd fb87 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   d6f96:	4631      	mov	r1, r6
   d6f98:	4640      	mov	r0, r8
   d6f9a:	f000 fea9 	bl	d7cf0 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   d6f9e:	2f00      	cmp	r7, #0
   d6fa0:	d0b8      	beq.n	d6f14 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x1c>
   d6fa2:	2143      	movs	r1, #67	; 0x43
   d6fa4:	4638      	mov	r0, r7
   d6fa6:	f008 fa65 	bl	df474 <_ZdlPvj>
   d6faa:	e7b1      	b.n	d6f10 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   d6fac:	2003e498 	.word	0x2003e498
   d6fb0:	31b67663 	.word	0x31b67663
   d6fb4:	00410801 	.word	0x00410801
   d6fb8:	000e25f7 	.word	0x000e25f7

000d6fbc <_ZN17PublishQueuePosix18systemEventHandlerEyi>:
PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d6fbc:	2900      	cmp	r1, #0
   d6fbe:	bf08      	it	eq
   d6fc0:	f5b0 6f00 	cmpeq.w	r0, #2048	; 0x800
void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   d6fc4:	b538      	push	{r3, r4, r5, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d6fc6:	d005      	beq.n	d6fd4 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x18>
   d6fc8:	2900      	cmp	r1, #0
   d6fca:	bf08      	it	eq
   d6fcc:	2840      	cmpeq	r0, #64	; 0x40
   d6fce:	d10b      	bne.n	d6fe8 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
   d6fd0:	2a09      	cmp	r2, #9
   d6fd2:	d109      	bne.n	d6fe8 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
        _log.trace("reset or disconnect event, save files to queue");
   d6fd4:	4905      	ldr	r1, [pc, #20]	; (d6fec <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   d6fd6:	4806      	ldr	r0, [pc, #24]	; (d6ff0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x34>)
   d6fd8:	f7fd fb64 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   d6fdc:	f7ff ff2e 	bl	d6e3c <_ZN17PublishQueuePosix8instanceEv>
    }
}
   d6fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   d6fe4:	f7ff bf88 	b.w	d6ef8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   d6fe8:	bd38      	pop	{r3, r4, r5, pc}
   d6fea:	bf00      	nop
   d6fec:	000e2614 	.word	0x000e2614
   d6ff0:	2003e498 	.word	0x2003e498

000d6ff4 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   d6ff4:	b570      	push	{r4, r5, r6, lr}
   d6ff6:	b086      	sub	sp, #24
   d6ff8:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6ffa:	f005 f959 	bl	dc2b0 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   d6ffe:	b948      	cbnz	r0, d7014 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   d7000:	4b43      	ldr	r3, [pc, #268]	; (d7110 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   d7002:	a902      	add	r1, sp, #8
   d7004:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d7008:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d700c:	f7ff ff26 	bl	d6e5c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7010:	b006      	add	sp, #24
   d7012:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   d7014:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   d7018:	b11d      	cbz	r5, d7022 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   d701a:	2301      	movs	r3, #1
   d701c:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   d7020:	e7f6      	b.n	d7010 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d7022:	f004 fe9d 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   d7026:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   d702a:	1ac0      	subs	r0, r0, r3
   d702c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   d7030:	4298      	cmp	r0, r3
   d7032:	d3ed      	bcc.n	d7010 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   d7034:	1d26      	adds	r6, r4, #4
   d7036:	4629      	mov	r1, r5
   d7038:	4630      	mov	r0, r6
   d703a:	f000 fe25 	bl	d7c88 <_ZN14SequentialFile16getFileFromQueueEb>
   d703e:	4601      	mov	r1, r0
   d7040:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   d7044:	2800      	cmp	r0, #0
   d7046:	d052      	beq.n	d70ee <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   d7048:	4620      	mov	r0, r4
   d704a:	f7ff fe1b 	bl	d6c84 <_ZN17PublishQueuePosix13readQueueFileEi>
   d704e:	4605      	mov	r5, r0
   d7050:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   d7054:	2800      	cmp	r0, #0
   d7056:	d035      	beq.n	d70c4 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   d7058:	f004 fe82 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   d705c:	ae02      	add	r6, sp, #8
   d705e:	2500      	movs	r5, #0
   d7060:	4b2c      	ldr	r3, [pc, #176]	; (d7114 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   d7062:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   d7066:	4631      	mov	r1, r6
   d7068:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d706c:	9302      	str	r3, [sp, #8]
   d706e:	9503      	str	r5, [sp, #12]
   d7070:	f7ff fef4 	bl	d6e5c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d7074:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   d7078:	f103 0242 	add.w	r2, r3, #66	; 0x42
   d707c:	9200      	str	r2, [sp, #0]
   d707e:	4926      	ldr	r1, [pc, #152]	; (d7118 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d7080:	4a26      	ldr	r2, [pc, #152]	; (d711c <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   d7082:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d7086:	42a8      	cmp	r0, r5
   d7088:	bf08      	it	eq
   d708a:	460a      	moveq	r2, r1
   d708c:	3301      	adds	r3, #1
   d708e:	4924      	ldr	r1, [pc, #144]	; (d7120 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   d7090:	4824      	ldr	r0, [pc, #144]	; (d7124 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   d7092:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d7096:	f7fd fb05 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   d709a:	f7fe f863 	bl	d5164 <_ZN19BackgroundPublishRK8instanceEv>
   d709e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   d70a2:	4b21      	ldr	r3, [pc, #132]	; (d7128 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   d70a4:	9305      	str	r3, [sp, #20]
   d70a6:	e9cd 6500 	strd	r6, r5, [sp]
   d70aa:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   d70ac:	4b1f      	ldr	r3, [pc, #124]	; (d712c <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d70ae:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d70b0:	9304      	str	r3, [sp, #16]
   d70b2:	f811 3b01 	ldrb.w	r3, [r1], #1
   d70b6:	3242      	adds	r2, #66	; 0x42
   d70b8:	f7fe f99e 	bl	d53f8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   d70bc:	4630      	mov	r0, r6
   d70be:	f7fe f80d 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d70c2:	e7a5      	b.n	d7010 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   d70c4:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   d70c8:	4919      	ldr	r1, [pc, #100]	; (d7130 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   d70ca:	4816      	ldr	r0, [pc, #88]	; (d7124 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   d70cc:	f7fd f99c 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   d70d0:	2101      	movs	r1, #1
   d70d2:	4630      	mov	r0, r6
   d70d4:	f000 fdd8 	bl	d7c88 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   d70d8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   d70dc:	462a      	mov	r2, r5
   d70de:	4630      	mov	r0, r6
   d70e0:	f000 fc0e 	bl	d7900 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   d70e4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d70e8:	2b00      	cmp	r3, #0
   d70ea:	d1b5      	bne.n	d7058 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   d70ec:	e790      	b.n	d7010 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d70ee:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   d70f2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d70f6:	429a      	cmp	r2, r3
   d70f8:	d007      	beq.n	d710a <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   d70fa:	681b      	ldr	r3, [r3, #0]
   d70fc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   d7100:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d7104:	f7ff fee2 	bl	d6ecc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   d7108:	e7ec      	b.n	d70e4 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   d710a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   d710e:	e77f      	b.n	d7010 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d7110:	000d7195 	.word	0x000d7195
   d7114:	000d74ed 	.word	0x000d74ed
   d7118:	000e2643 	.word	0x000e2643
   d711c:	000e21e4 	.word	0x000e21e4
   d7120:	000e2664 	.word	0x000e2664
   d7124:	2003e498 	.word	0x2003e498
   d7128:	000d6bc1 	.word	0x000d6bc1
   d712c:	000d6bd1 	.word	0x000d6bd1
   d7130:	000e2647 	.word	0x000e2647

000d7134 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d7134:	68c3      	ldr	r3, [r0, #12]
   d7136:	68ca      	ldr	r2, [r1, #12]
   d7138:	1a9b      	subs	r3, r3, r2
   d713a:	109b      	asrs	r3, r3, #2
   d713c:	1e5a      	subs	r2, r3, #1
   d713e:	e9d0 3000 	ldrd	r3, r0, [r0]
   d7142:	1a1b      	subs	r3, r3, r0
   d7144:	109b      	asrs	r3, r3, #2
   d7146:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d714a:	6888      	ldr	r0, [r1, #8]
   d714c:	680a      	ldr	r2, [r1, #0]
   d714e:	1a80      	subs	r0, r0, r2
    }
   d7150:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d7154:	4770      	bx	lr

000d7156 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   d7156:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7158:	4605      	mov	r5, r0
   d715a:	9001      	str	r0, [sp, #4]
   d715c:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d715e:	f004 fdbf 	bl	dbce0 <os_mutex_recursive_lock>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d7162:	f105 0180 	add.w	r1, r5, #128	; 0x80
   d7166:	f105 0090 	add.w	r0, r5, #144	; 0x90
   d716a:	f7ff ffe3 	bl	d7134 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (result == 0) {
   d716e:	4604      	mov	r4, r0
   d7170:	b950      	cbnz	r0, d7188 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
            result = fileQueue.getQueueLen();
   d7172:	1d28      	adds	r0, r5, #4
   d7174:	f000 fdd6 	bl	d7d24 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   d7178:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   d717c:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   d717e:	b11b      	cbz	r3, d7188 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
   d7180:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d7184:	b903      	cbnz	r3, d7188 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
                result++;
   d7186:	3401      	adds	r4, #1
    WITH_LOCK(*this) {
   d7188:	a801      	add	r0, sp, #4
   d718a:	f7ff fe97 	bl	d6ebc <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d718e:	4620      	mov	r0, r4
   d7190:	b003      	add	sp, #12
   d7192:	bd30      	pop	{r4, r5, pc}

000d7194 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   d7194:	b513      	push	{r0, r1, r4, lr}
   d7196:	4604      	mov	r4, r0
   d7198:	f005 f88a 	bl	dc2b0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d719c:	b190      	cbz	r0, d71c4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   d719e:	f004 fddf 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   d71a2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   d71a6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   d71aa:	4b0d      	ldr	r3, [pc, #52]	; (d71e0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   d71ac:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   d71b0:	9300      	str	r3, [sp, #0]
   d71b2:	4669      	mov	r1, sp
   d71b4:	2300      	movs	r3, #0
   d71b6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d71ba:	9301      	str	r3, [sp, #4]
   d71bc:	f7ff fe4e 	bl	d6e5c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d71c0:	b002      	add	sp, #8
   d71c2:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   d71c4:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   d71c8:	b11b      	cbz	r3, d71d2 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   d71ca:	2301      	movs	r3, #1
   d71cc:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   d71d0:	e7f6      	b.n	d71c0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   d71d2:	4620      	mov	r0, r4
   d71d4:	f7ff ffbf 	bl	d7156 <_ZN17PublishQueuePosix12getNumEventsEv>
   d71d8:	2800      	cmp	r0, #0
   d71da:	d0f6      	beq.n	d71ca <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   d71dc:	e7f0      	b.n	d71c0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   d71de:	bf00      	nop
   d71e0:	000d6ff5 	.word	0x000d6ff5

000d71e4 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   d71e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d71e8:	4604      	mov	r4, r0
   d71ea:	9001      	str	r0, [sp, #4]
   d71ec:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d71ee:	f004 fd77 	bl	dbce0 <os_mutex_recursive_lock>
   d71f2:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d71f6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d71fa:	f7ff ff9b 	bl	d7134 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (ramQueue.size() > ramQueueSize) {
   d71fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d7200:	4283      	cmp	r3, r0
   d7202:	d202      	bcs.n	d720a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
            writeQueueToFiles();
   d7204:	4620      	mov	r0, r4
   d7206:	f7ff fe77 	bl	d6ef8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   d720a:	f8df 8048 	ldr.w	r8, [pc, #72]	; d7254 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x70>
   d720e:	4f10      	ldr	r7, [pc, #64]	; (d7250 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x6c>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   d7210:	1d26      	adds	r6, r4, #4
   d7212:	4630      	mov	r0, r6
   d7214:	f000 fd86 	bl	d7d24 <_ZNK14SequentialFile11getQueueLenEv>
   d7218:	6f23      	ldr	r3, [r4, #112]	; 0x70
   d721a:	4298      	cmp	r0, r3
   d721c:	dc05      	bgt.n	d722a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x46>
    WITH_LOCK(*this) {
   d721e:	a801      	add	r0, sp, #4
   d7220:	f7ff fe4c 	bl	d6ebc <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d7224:	b002      	add	sp, #8
   d7226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int fileNum = fileQueue.getFileFromQueue(true);
   d722a:	2101      	movs	r1, #1
   d722c:	4630      	mov	r0, r6
   d722e:	f000 fd2b 	bl	d7c88 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   d7232:	4605      	mov	r5, r0
   d7234:	2800      	cmp	r0, #0
   d7236:	d0ec      	beq.n	d7212 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
                fileQueue.removeFileNum(fileNum, false);
   d7238:	4601      	mov	r1, r0
   d723a:	2200      	movs	r2, #0
   d723c:	4630      	mov	r0, r6
   d723e:	f000 fb5f 	bl	d7900 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   d7242:	462a      	mov	r2, r5
   d7244:	4641      	mov	r1, r8
   d7246:	4638      	mov	r0, r7
   d7248:	f7fd f8de 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
   d724c:	e7e1      	b.n	d7212 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
   d724e:	bf00      	nop
   d7250:	2003e498 	.word	0x2003e498
   d7254:	000e2683 	.word	0x000e2683

000d7258 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   d7258:	b513      	push	{r0, r1, r4, lr}
   d725a:	4604      	mov	r4, r0
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   d725c:	2000      	movs	r0, #0
   d725e:	f004 ffd9 	bl	dc214 <system_thread_get_state>
   d7262:	2801      	cmp	r0, #1
   d7264:	d005      	beq.n	d7272 <_ZN17PublishQueuePosix5setupEv+0x1a>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   d7266:	4912      	ldr	r1, [pc, #72]	; (d72b0 <_ZN17PublishQueuePosix5setupEv+0x58>)
   d7268:	4812      	ldr	r0, [pc, #72]	; (d72b4 <_ZN17PublishQueuePosix5setupEv+0x5c>)
   d726a:	f7fd fa32 	bl	d46d2 <_ZNK5spark6Logger5errorEPKcz>
}
   d726e:	b002      	add	sp, #8
   d7270:	bd10      	pop	{r4, pc}
    os_mutex_recursive_create(&mutex);
   d7272:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d7276:	f004 fd23 	bl	dbcc0 <os_mutex_recursive_create>
   d727a:	4a0f      	ldr	r2, [pc, #60]	; (d72b8 <_ZN17PublishQueuePosix5setupEv+0x60>)
   d727c:	2300      	movs	r3, #0
   d727e:	2100      	movs	r1, #0
   d7280:	f44f 6004 	mov.w	r0, #2112	; 0x840
   d7284:	f004 ffa6 	bl	dc1d4 <system_subscribe_event>
    BackgroundPublishRK::instance().start();
   d7288:	f7fd ff6c 	bl	d5164 <_ZN19BackgroundPublishRK8instanceEv>
   d728c:	f7fe f88e 	bl	d53ac <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   d7290:	1d20      	adds	r0, r4, #4
   d7292:	f000 fc75 	bl	d7b80 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   d7296:	4620      	mov	r0, r4
   d7298:	f7ff ffa4 	bl	d71e4 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   d729c:	4b07      	ldr	r3, [pc, #28]	; (d72bc <_ZN17PublishQueuePosix5setupEv+0x64>)
   d729e:	9300      	str	r3, [sp, #0]
   d72a0:	4669      	mov	r1, sp
   d72a2:	2300      	movs	r3, #0
   d72a4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d72a8:	9301      	str	r3, [sp, #4]
   d72aa:	f7ff fdd7 	bl	d6e5c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d72ae:	e7de      	b.n	d726e <_ZN17PublishQueuePosix5setupEv+0x16>
   d72b0:	000e2696 	.word	0x000e2696
   d72b4:	2003e498 	.word	0x2003e498
   d72b8:	000d6fbd 	.word	0x000d6fbd
   d72bc:	000d7195 	.word	0x000d7195

000d72c0 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d72c0:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d72c2:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d72c4:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d72c6:	b163      	cbz	r3, d72e2 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d72c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d72ca:	6945      	ldr	r5, [r0, #20]
   d72cc:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d72ce:	42ae      	cmp	r6, r5
   d72d0:	d904      	bls.n	d72dc <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x1c>
   d72d2:	f855 0b04 	ldr.w	r0, [r5], #4
   d72d6:	f7fc fee2 	bl	d409e <_ZdlPv>
   d72da:	e7f8      	b.n	d72ce <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   d72dc:	6820      	ldr	r0, [r4, #0]
   d72de:	f7fc fede 	bl	d409e <_ZdlPv>
    }
   d72e2:	4620      	mov	r0, r4
   d72e4:	bd70      	pop	{r4, r5, r6, pc}

000d72e6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   d72e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d72ea:	4606      	mov	r6, r0
   d72ec:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d72ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d72f0:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d72f2:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d72f4:	1a47      	subs	r7, r0, r1
   d72f6:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d72fa:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d72fc:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   d7300:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d7302:	d927      	bls.n	d7354 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   d7304:	1b5d      	subs	r5, r3, r5
   d7306:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d7308:	6832      	ldr	r2, [r6, #0]
   d730a:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d730c:	b10c      	cbz	r4, d7312 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   d730e:	ea4f 0489 	mov.w	r4, r9, lsl #2
   d7312:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d7314:	4414      	add	r4, r2
   d7316:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d7318:	42a1      	cmp	r1, r4
   d731a:	eba3 0201 	sub.w	r2, r3, r1
   d731e:	d913      	bls.n	d7348 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   d7320:	4299      	cmp	r1, r3
   d7322:	d002      	beq.n	d732a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7324:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d7326:	f008 fe43 	bl	dffb0 <memmove>
	_M_node = __new_node;
   d732a:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   d732c:	6823      	ldr	r3, [r4, #0]
   d732e:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7330:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d7334:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d7336:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   d7338:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   d733a:	59e3      	ldr	r3, [r4, r7]
   d733c:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d733e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d7342:	6233      	str	r3, [r6, #32]
    }
   d7344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d7348:	4299      	cmp	r1, r3
   d734a:	d0ee      	beq.n	d732a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d734c:	1d38      	adds	r0, r7, #4
   d734e:	1a80      	subs	r0, r0, r2
   d7350:	4420      	add	r0, r4
   d7352:	e7e8      	b.n	d7326 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d7354:	f103 0802 	add.w	r8, r3, #2
   d7358:	454b      	cmp	r3, r9
   d735a:	bf2c      	ite	cs
   d735c:	4498      	addcs	r8, r3
   d735e:	44c8      	addcc	r8, r9
	if (__n > this->max_size())
   d7360:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   d7364:	d301      	bcc.n	d736a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   d7366:	f008 f88b 	bl	df480 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d736a:	ea4f 0088 	mov.w	r0, r8, lsl #2
   d736e:	f7fc fe92 	bl	d4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d7372:	eba8 0505 	sub.w	r5, r8, r5
   d7376:	086d      	lsrs	r5, r5, #1
   d7378:	4682      	mov	sl, r0
   d737a:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d737c:	b10c      	cbz	r4, d7382 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   d737e:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   d7382:	6a72      	ldr	r2, [r6, #36]	; 0x24
   d7384:	6971      	ldr	r1, [r6, #20]
   d7386:	3204      	adds	r2, #4
	                 + (__add_at_front ? __nodes_to_add : 0);
   d7388:	442c      	add	r4, r5
	  if (_Num)
   d738a:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d738c:	4454      	add	r4, sl
   d738e:	d003      	beq.n	d7398 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7390:	1a52      	subs	r2, r2, r1
   d7392:	4620      	mov	r0, r4
   d7394:	f008 fe0c 	bl	dffb0 <memmove>
	::operator delete(__p);
   d7398:	6830      	ldr	r0, [r6, #0]
   d739a:	f7fc fe80 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d739e:	e9c6 a800 	strd	sl, r8, [r6]
   d73a2:	e7c2      	b.n	d732a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>

000d73a4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d73a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d73a8:	b086      	sub	sp, #24
   d73aa:	4604      	mov	r4, r0
   d73ac:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d73b0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d73b4:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d73b6:	460f      	mov	r7, r1
   d73b8:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d73ba:	f7ff fc3b 	bl	d6c34 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   d73be:	4605      	mov	r5, r0
   d73c0:	2800      	cmp	r0, #0
   d73c2:	d042      	beq.n	d744a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xa6>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   d73c4:	4b43      	ldr	r3, [pc, #268]	; (d74d4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   d73c6:	4944      	ldr	r1, [pc, #272]	; (d74d8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x134>)
   d73c8:	4844      	ldr	r0, [pc, #272]	; (d74dc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d73ca:	2e00      	cmp	r6, #0
   d73cc:	bf18      	it	ne
   d73ce:	4633      	movne	r3, r6
   d73d0:	463a      	mov	r2, r7
   d73d2:	f7fd f967 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
   d73d6:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d73d8:	9405      	str	r4, [sp, #20]
   d73da:	f004 fc81 	bl	dbce0 <os_mutex_recursive_lock>
	    != this->_M_impl._M_finish._M_last - 1)
   d73de:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   d73e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   d73e6:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   d73e8:	4293      	cmp	r3, r2
   d73ea:	f104 0878 	add.w	r8, r4, #120	; 0x78
   d73ee:	f104 0690 	add.w	r6, r4, #144	; 0x90
   d73f2:	f104 0780 	add.w	r7, r4, #128	; 0x80
   d73f6:	d02b      	beq.n	d7450 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d73f8:	b103      	cbz	r3, d73fc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x58>
   d73fa:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d73fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   d7400:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   d7402:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d7404:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   d7408:	4628      	mov	r0, r5
   d740a:	f000 fc8b 	bl	d7d24 <_ZNK14SequentialFile11getQueueLenEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d740e:	4639      	mov	r1, r7
   d7410:	9003      	str	r0, [sp, #12]
   d7412:	4630      	mov	r0, r6
   d7414:	f7ff fe8e 	bl	d7134 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
   d7418:	9002      	str	r0, [sp, #8]
   d741a:	f004 ff49 	bl	dc2b0 <spark_cloud_flag_connected>
   d741e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d7422:	9000      	str	r0, [sp, #0]
   d7424:	492e      	ldr	r1, [pc, #184]	; (d74e0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x13c>)
   d7426:	482d      	ldr	r0, [pc, #180]	; (d74dc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d7428:	f7fd f93c 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d742c:	4628      	mov	r0, r5
   d742e:	f000 fc79 	bl	d7d24 <_ZNK14SequentialFile11getQueueLenEv>
   d7432:	2800      	cmp	r0, #0
   d7434:	d03e      	beq.n	d74b4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>
            writeQueueToFiles();
   d7436:	4620      	mov	r0, r4
   d7438:	f7ff fd5e 	bl	d6ef8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   d743c:	4620      	mov	r0, r4
   d743e:	f7ff fed1 	bl	d71e4 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    WITH_LOCK(*this) {
   d7442:	a805      	add	r0, sp, #20
   d7444:	f7ff fd3a 	bl	d6ebc <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
    return true;
   d7448:	2001      	movs	r0, #1
}
   d744a:	b006      	add	sp, #24
   d744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7450:	4639      	mov	r1, r7
   d7452:	4630      	mov	r0, r6
   d7454:	f7ff fe6e 	bl	d7134 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d7458:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d745c:	4298      	cmp	r0, r3
   d745e:	d102      	bne.n	d7466 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xc2>
	  __throw_length_error(
   d7460:	4820      	ldr	r0, [pc, #128]	; (d74e4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x140>)
   d7462:	f008 f810 	bl	df486 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d7466:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d746a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d746c:	1a9a      	subs	r2, r3, r2
   d746e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   d7470:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d7474:	2b01      	cmp	r3, #1
   d7476:	d804      	bhi.n	d7482 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>
	  _M_reallocate_map(__nodes_to_add, false);
   d7478:	2200      	movs	r2, #0
   d747a:	2101      	movs	r1, #1
   d747c:	4640      	mov	r0, r8
   d747e:	f7ff ff32 	bl	d72e6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7482:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d7486:	f8d4 809c 	ldr.w	r8, [r4, #156]	; 0x9c
   d748a:	f7fc fe04 	bl	d4096 <_Znwj>
   d748e:	f8c8 0004 	str.w	r0, [r8, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d7492:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7496:	b103      	cbz	r3, d749a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf6>
   d7498:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d749a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d749e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d74a0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   d74a4:	685b      	ldr	r3, [r3, #4]
   d74a6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   d74aa:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d74ae:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   d74b2:	e7a6      	b.n	d7402 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x5e>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d74b4:	4639      	mov	r1, r7
   d74b6:	4630      	mov	r0, r6
   d74b8:	f7ff fe3c 	bl	d7134 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d74bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d74be:	4283      	cmp	r3, r0
   d74c0:	d3b9      	bcc.n	d7436 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
   d74c2:	f004 fef5 	bl	dc2b0 <spark_cloud_flag_connected>
   d74c6:	2800      	cmp	r0, #0
   d74c8:	d0b5      	beq.n	d7436 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
            _log.trace("queued to ramQueue");
   d74ca:	4907      	ldr	r1, [pc, #28]	; (d74e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x144>)
   d74cc:	4803      	ldr	r0, [pc, #12]	; (d74dc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d74ce:	f7fd f8e9 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
   d74d2:	e7b3      	b.n	d743c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
   d74d4:	000e291f 	.word	0x000e291f
   d74d8:	000e26b9 	.word	0x000e26b9
   d74dc:	2003e498 	.word	0x2003e498
   d74e0:	000e2711 	.word	0x000e2711
   d74e4:	000e26e1 	.word	0x000e26e1
   d74e8:	000e273d 	.word	0x000e273d

000d74ec <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   d74ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   d74ee:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   d74f2:	4604      	mov	r4, r0
    if (!publishComplete) {
   d74f4:	2b00      	cmp	r3, #0
   d74f6:	d041      	beq.n	d757c <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   d74f8:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
   d74fc:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d7500:	2b00      	cmp	r3, #0
   d7502:	d03d      	beq.n	d7580 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   d7504:	4952      	ldr	r1, [pc, #328]	; (d7650 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   d7506:	4853      	ldr	r0, [pc, #332]	; (d7654 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d7508:	f7fd f8cc 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   d750c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d7510:	b1d3      	cbz	r3, d7548 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   d7512:	1d26      	adds	r6, r4, #4
   d7514:	2100      	movs	r1, #0
   d7516:	4630      	mov	r0, r6
   d7518:	f000 fbb6 	bl	d7c88 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   d751c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d7520:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   d7522:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   d7524:	d10d      	bne.n	d7542 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   d7526:	2101      	movs	r1, #1
   d7528:	4630      	mov	r0, r6
   d752a:	f000 fbad 	bl	d7c88 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   d752e:	2200      	movs	r2, #0
   d7530:	4629      	mov	r1, r5
   d7532:	4630      	mov	r0, r6
   d7534:	f000 f9e4 	bl	d7900 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   d7538:	4947      	ldr	r1, [pc, #284]	; (d7658 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   d753a:	4846      	ldr	r0, [pc, #280]	; (d7654 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d753c:	462a      	mov	r2, r5
   d753e:	f7fd f8b1 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   d7542:	2300      	movs	r3, #0
   d7544:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   d7548:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d754c:	b110      	cbz	r0, d7554 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   d754e:	2143      	movs	r1, #67	; 0x43
   d7550:	f007 ff90 	bl	df474 <_ZdlPvj>
        curEvent = NULL;
   d7554:	2300      	movs	r3, #0
   d7556:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   d755a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d755e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   d7562:	4b3e      	ldr	r3, [pc, #248]	; (d765c <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   d7564:	9300      	str	r3, [sp, #0]
   d7566:	4669      	mov	r1, sp
   d7568:	2300      	movs	r3, #0
   d756a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d756e:	9301      	str	r3, [sp, #4]
   d7570:	f7ff fc74 	bl	d6e5c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7574:	f004 fbf4 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d7578:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   d757c:	b002      	add	sp, #8
   d757e:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   d7580:	4937      	ldr	r1, [pc, #220]	; (d7660 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   d7582:	4834      	ldr	r0, [pc, #208]	; (d7654 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d7584:	f7fd f88e 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   d7588:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   d758c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   d7590:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d7594:	b14b      	cbz	r3, d75aa <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   d7596:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d759a:	b110      	cbz	r0, d75a2 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   d759c:	2143      	movs	r1, #67	; 0x43
   d759e:	f007 ff69 	bl	df474 <_ZdlPvj>
            curEvent = NULL;
   d75a2:	2300      	movs	r3, #0
   d75a4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   d75a8:	e7db      	b.n	d7562 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   d75aa:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d75ac:	9400      	str	r4, [sp, #0]
   d75ae:	f004 fb97 	bl	dbce0 <os_mutex_recursive_lock>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   d75b2:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   d75b6:	4293      	cmp	r3, r2
   d75b8:	d013      	beq.n	d75e2 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf6>
	    _Alloc_traits::construct(this->_M_impl,
   d75ba:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d75be:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   d75c2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d75c6:	3b04      	subs	r3, #4
   d75c8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            WITH_LOCK(*this) {
   d75cc:	4668      	mov	r0, sp
   d75ce:	f7ff fc75 	bl	d6ebc <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
            _log.trace("writing to files after publish failure");
   d75d2:	4924      	ldr	r1, [pc, #144]	; (d7664 <_ZN17PublishQueuePosix16statePublishWaitEv+0x178>)
   d75d4:	481f      	ldr	r0, [pc, #124]	; (d7654 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d75d6:	f7fd f865 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   d75da:	4620      	mov	r0, r4
   d75dc:	f7ff fc8c 	bl	d6ef8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d75e0:	e7bf      	b.n	d7562 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d75e2:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d75e6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d75ea:	f7ff fda3 	bl	d7134 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d75ee:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d75f2:	4298      	cmp	r0, r3
   d75f4:	f104 0578 	add.w	r5, r4, #120	; 0x78
   d75f8:	d102      	bne.n	d7600 <_ZN17PublishQueuePosix16statePublishWaitEv+0x114>
	  __throw_length_error(
   d75fa:	481b      	ldr	r0, [pc, #108]	; (d7668 <_ZN17PublishQueuePosix16statePublishWaitEv+0x17c>)
   d75fc:	f007 ff43 	bl	df486 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   d7600:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   d7604:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   d7606:	429a      	cmp	r2, r3
   d7608:	d104      	bne.n	d7614 <_ZN17PublishQueuePosix16statePublishWaitEv+0x128>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   d760a:	2201      	movs	r2, #1
   d760c:	4611      	mov	r1, r2
   d760e:	4628      	mov	r0, r5
   d7610:	f7ff fe69 	bl	d72e6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7614:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   d7618:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   d761c:	f7fc fd3b 	bl	d4096 <_Znwj>
   d7620:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   d7624:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d7628:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   d762a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   d762e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   d7632:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7636:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d763a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   d763e:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   d7642:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	    _Alloc_traits::construct(this->_M_impl,
   d7646:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d764a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   d764e:	e7bd      	b.n	d75cc <_ZN17PublishQueuePosix16statePublishWaitEv+0xe0>
   d7650:	000e2750 	.word	0x000e2750
   d7654:	2003e498 	.word	0x2003e498
   d7658:	000e2763 	.word	0x000e2763
   d765c:	000d6ff5 	.word	0x000d6ff5
   d7660:	000e2773 	.word	0x000e2773
   d7664:	000e2785 	.word	0x000e2785
   d7668:	000e26e1 	.word	0x000e26e1

000d766c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   d766c:	4b01      	ldr	r3, [pc, #4]	; (d7674 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   d766e:	4a02      	ldr	r2, [pc, #8]	; (d7678 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   d7670:	601a      	str	r2, [r3, #0]
}
   d7672:	4770      	bx	lr
   d7674:	2003e498 	.word	0x2003e498
   d7678:	000e21d4 	.word	0x000e21d4

000d767c <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d767c:	b510      	push	{r4, lr}
   d767e:	4b07      	ldr	r3, [pc, #28]	; (d769c <_ZN17PublishQueuePosixD1Ev+0x20>)
   d7680:	4604      	mov	r4, r0
   d7682:	f840 3bc0 	str.w	r3, [r0], #192
   d7686:	f7fd fd29 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d768a:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d768e:	f7ff fe17 	bl	d72c0 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   d7692:	1d20      	adds	r0, r4, #4
   d7694:	f000 f9b2 	bl	d79fc <_ZN14SequentialFileD1Ev>
}
   d7698:	4620      	mov	r0, r4
   d769a:	bd10      	pop	{r4, pc}
   d769c:	000e27b4 	.word	0x000e27b4

000d76a0 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d76a0:	b510      	push	{r4, lr}
   d76a2:	4604      	mov	r4, r0
}
   d76a4:	f7ff ffea 	bl	d767c <_ZN17PublishQueuePosixD1Ev>
   d76a8:	4620      	mov	r0, r4
   d76aa:	21d0      	movs	r1, #208	; 0xd0
   d76ac:	f007 fee2 	bl	df474 <_ZdlPvj>
   d76b0:	4620      	mov	r0, r4
   d76b2:	bd10      	pop	{r4, pc}

000d76b4 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   d76b4:	2001      	movs	r0, #1
   d76b6:	4770      	bx	lr

000d76b8 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   d76b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d76ba:	4d1f      	ldr	r5, [pc, #124]	; (d7738 <_ZN14SequentialFileC1Ev+0x80>)
   d76bc:	4b1f      	ldr	r3, [pc, #124]	; (d773c <_ZN14SequentialFileC1Ev+0x84>)
   d76be:	4604      	mov	r4, r0
   d76c0:	4629      	mov	r1, r5
   d76c2:	f840 3b04 	str.w	r3, [r0], #4
   d76c6:	f007 f922 	bl	de90e <_ZN6StringC1EPKc>
   d76ca:	491d      	ldr	r1, [pc, #116]	; (d7740 <_ZN14SequentialFileC1Ev+0x88>)
   d76cc:	f104 0014 	add.w	r0, r4, #20
   d76d0:	f007 f91d 	bl	de90e <_ZN6StringC1EPKc>
   d76d4:	4629      	mov	r1, r5
   d76d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d76da:	f007 f918 	bl	de90e <_ZN6StringC1EPKc>
   d76de:	2300      	movs	r3, #0
   d76e0:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d76e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   d76e8:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   d76ec:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   d76f0:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   d76f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	  _M_start(), _M_finish()
   d76f8:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d76fa:	2308      	movs	r3, #8
   d76fc:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d76fe:	2020      	movs	r0, #32
   d7700:	f7fc fcc9 	bl	d4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d7704:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d7706:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d7708:	3d01      	subs	r5, #1
   d770a:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d770c:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   d7710:	4606      	mov	r6, r0
   d7712:	f44f 7000 	mov.w	r0, #512	; 0x200
   d7716:	f7fc fcbe 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d771a:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d771e:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   d7722:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   d7726:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d7728:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d772a:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   d772c:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   d772e:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   d7730:	6667      	str	r7, [r4, #100]	; 0x64

}
   d7732:	4620      	mov	r0, r4
   d7734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7736:	bf00      	nop
   d7738:	000e291f 	.word	0x000e291f
   d773c:	000e28b4 	.word	0x000e28b4
   d7740:	000e27c0 	.word	0x000e27c0

000d7744 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d7744:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   d7746:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d7748:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   d774a:	4628      	mov	r0, r5
   d774c:	f007 f93d 	bl	de9ca <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   d7750:	490e      	ldr	r1, [pc, #56]	; (d778c <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   d7752:	4668      	mov	r0, sp
   d7754:	f007 f8db 	bl	de90e <_ZN6StringC1EPKc>
   d7758:	4669      	mov	r1, sp
   d775a:	4628      	mov	r0, r5
   d775c:	f007 f9c4 	bl	deae8 <_ZNK6String8endsWithERKS_>
   d7760:	4606      	mov	r6, r0
   d7762:	4668      	mov	r0, sp
   d7764:	f007 f888 	bl	de878 <_ZN6StringD1Ev>
   d7768:	b16e      	cbz	r6, d7786 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   d776a:	68e3      	ldr	r3, [r4, #12]
   d776c:	2200      	movs	r2, #0
   d776e:	3b01      	subs	r3, #1
   d7770:	4629      	mov	r1, r5
   d7772:	4668      	mov	r0, sp
   d7774:	f007 f9ce 	bl	deb14 <_ZNK6String9substringEjj>
   d7778:	4669      	mov	r1, sp
   d777a:	4628      	mov	r0, r5
   d777c:	f007 f91d 	bl	de9ba <_ZN6StringaSEOS_>
   d7780:	4668      	mov	r0, sp
   d7782:	f007 f879 	bl	de878 <_ZN6StringD1Ev>
    }
    return *this; 
};
   d7786:	4620      	mov	r0, r4
   d7788:	b004      	add	sp, #16
   d778a:	bd70      	pop	{r4, r5, r6, pc}
   d778c:	000e27c5 	.word	0x000e27c5

000d7790 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   d7790:	b510      	push	{r4, lr}
    if (!queueMutex) {
   d7792:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   d7794:	4604      	mov	r4, r0
    if (!queueMutex) {
   d7796:	b913      	cbnz	r3, d779e <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   d7798:	303c      	adds	r0, #60	; 0x3c
   d779a:	f004 fa79 	bl	dbc90 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   d779e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   d77a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   d77a4:	f004 ba7c 	b.w	dbca0 <os_mutex_lock>

000d77a8 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   d77a8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d77aa:	f004 ba81 	b.w	dbcb0 <os_mutex_unlock>
	...

000d77b0 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   d77b0:	b510      	push	{r4, lr}
   d77b2:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   d77b4:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   d77b6:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   d77b8:	f004 fbe2 	bl	dbf80 <stat>
    if (result == 0) {
   d77bc:	b9d0      	cbnz	r0, d77f4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d77be:	9b01      	ldr	r3, [sp, #4]
   d77c0:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   d77c2:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d77c4:	d506      	bpl.n	d77d4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   d77c6:	4915      	ldr	r1, [pc, #84]	; (d781c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   d77c8:	4815      	ldr	r0, [pc, #84]	; (d7820 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d77ca:	f7fc fe1d 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
        return true;
   d77ce:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   d77d0:	b016      	add	sp, #88	; 0x58
   d77d2:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   d77d4:	4812      	ldr	r0, [pc, #72]	; (d7820 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d77d6:	4913      	ldr	r1, [pc, #76]	; (d7824 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   d77d8:	f7fc ff7b 	bl	d46d2 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   d77dc:	4620      	mov	r0, r4
   d77de:	f009 fbe9 	bl	e0fb4 <unlink>
    result = mkdir(path, 0777);
   d77e2:	f240 11ff 	movw	r1, #511	; 0x1ff
   d77e6:	4620      	mov	r0, r4
   d77e8:	f004 fbd2 	bl	dbf90 <mkdir>
    if (result == 0) {
   d77ec:	b980      	cbnz	r0, d7810 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   d77ee:	490e      	ldr	r1, [pc, #56]	; (d7828 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   d77f0:	4622      	mov	r2, r4
   d77f2:	e7e9      	b.n	d77c8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   d77f4:	f004 fe34 	bl	dc460 <__errno>
   d77f8:	6803      	ldr	r3, [r0, #0]
   d77fa:	2b02      	cmp	r3, #2
   d77fc:	d0f1      	beq.n	d77e2 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   d77fe:	f004 fe2f 	bl	dc460 <__errno>
   d7802:	490a      	ldr	r1, [pc, #40]	; (d782c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   d7804:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   d7806:	4806      	ldr	r0, [pc, #24]	; (d7820 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d7808:	f7fc ff63 	bl	d46d2 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d780c:	2000      	movs	r0, #0
   d780e:	e7df      	b.n	d77d0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   d7810:	f004 fe26 	bl	dc460 <__errno>
   d7814:	4906      	ldr	r1, [pc, #24]	; (d7830 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   d7816:	6802      	ldr	r2, [r0, #0]
   d7818:	e7f5      	b.n	d7806 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   d781a:	bf00      	nop
   d781c:	000e27d2 	.word	0x000e27d2
   d7820:	2003e4a0 	.word	0x2003e4a0
   d7824:	000e27ef 	.word	0x000e27ef
   d7828:	000e2820 	.word	0x000e2820
   d782c:	000e280c 	.word	0x000e280c
   d7830:	000e282f 	.word	0x000e282f

000d7834 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   d7834:	b538      	push	{r3, r4, r5, lr}
   d7836:	4615      	mov	r5, r2
   d7838:	4604      	mov	r4, r0
    String result = name;
   d783a:	f007 f868 	bl	de90e <_ZN6StringC1EPKc>

    if (ext && *ext) {
   d783e:	b14d      	cbz	r5, d7854 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   d7840:	782b      	ldrb	r3, [r5, #0]
   d7842:	b13b      	cbz	r3, d7854 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d7844:	4904      	ldr	r1, [pc, #16]	; (d7858 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   d7846:	4620      	mov	r0, r4
   d7848:	f007 f8e8 	bl	dea1c <_ZN6String6concatEPKc>
   d784c:	4629      	mov	r1, r5
   d784e:	4620      	mov	r0, r4
   d7850:	f007 f8e4 	bl	dea1c <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   d7854:	4620      	mov	r0, r4
   d7856:	bd38      	pop	{r3, r4, r5, pc}
   d7858:	000e2ea4 	.word	0x000e2ea4

000d785c <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   d785c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d785e:	4605      	mov	r5, r0
   d7860:	460e      	mov	r6, r1
   d7862:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   d7864:	6949      	ldr	r1, [r1, #20]
   d7866:	4668      	mov	r0, sp
   d7868:	f007 f974 	bl	deb54 <_ZN6String6formatEPKcz>
        operator const char*() const { return c_str(); }
   d786c:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   d786e:	b904      	cbnz	r4, d7872 <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   d7870:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d7872:	4622      	mov	r2, r4
   d7874:	4628      	mov	r0, r5
   d7876:	f7ff ffdd 	bl	d7834 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   d787a:	4668      	mov	r0, sp
   d787c:	f006 fffc 	bl	de878 <_ZN6StringD1Ev>
}
   d7880:	4628      	mov	r0, r5
   d7882:	b004      	add	sp, #16
   d7884:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7888 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d7888:	b570      	push	{r4, r5, r6, lr}
   d788a:	460c      	mov	r4, r1
   d788c:	b08e      	sub	sp, #56	; 0x38
    String result;
   d788e:	491a      	ldr	r1, [pc, #104]	; (d78f8 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d7890:	e9cd 3200 	strd	r3, r2, [sp]
   d7894:	4605      	mov	r5, r0
    String result;
   d7896:	f007 f83a 	bl	de90e <_ZN6StringC1EPKc>
    result.reserve(dirPath.length() + pattern.length() + 4);
   d789a:	69e0      	ldr	r0, [r4, #28]
   d789c:	68e1      	ldr	r1, [r4, #12]
   d789e:	4401      	add	r1, r0
   d78a0:	3104      	adds	r1, #4
   d78a2:	4628      	mov	r0, r5
   d78a4:	f007 f806 	bl	de8b4 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d78a8:	1d21      	adds	r1, r4, #4
   d78aa:	a806      	add	r0, sp, #24
   d78ac:	f007 f87a 	bl	de9a4 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   d78b0:	4912      	ldr	r1, [pc, #72]	; (d78fc <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   d78b2:	a802      	add	r0, sp, #8
   d78b4:	f007 f82b 	bl	de90e <_ZN6StringC1EPKc>
   d78b8:	a902      	add	r1, sp, #8
   d78ba:	a806      	add	r0, sp, #24
   d78bc:	f007 f8bf 	bl	dea3e <_ZplRK15StringSumHelperRK6String>
   d78c0:	e9dd 3200 	ldrd	r3, r2, [sp]
   d78c4:	4606      	mov	r6, r0
   d78c6:	4621      	mov	r1, r4
   d78c8:	a80a      	add	r0, sp, #40	; 0x28
   d78ca:	f7ff ffc7 	bl	d785c <_ZN14SequentialFile17getNameForFileNumEiPKc>
   d78ce:	a90a      	add	r1, sp, #40	; 0x28
   d78d0:	4630      	mov	r0, r6
   d78d2:	f007 f8b4 	bl	dea3e <_ZplRK15StringSumHelperRK6String>
   d78d6:	4601      	mov	r1, r0
   d78d8:	4628      	mov	r0, r5
   d78da:	f007 f854 	bl	de986 <_ZN6StringaSERKS_>
   d78de:	a80a      	add	r0, sp, #40	; 0x28
   d78e0:	f006 ffca 	bl	de878 <_ZN6StringD1Ev>
   d78e4:	a802      	add	r0, sp, #8
   d78e6:	f006 ffc7 	bl	de878 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d78ea:	a806      	add	r0, sp, #24
   d78ec:	f006 ffc4 	bl	de878 <_ZN6StringD1Ev>
}
   d78f0:	4628      	mov	r0, r5
   d78f2:	b00e      	add	sp, #56	; 0x38
   d78f4:	bd70      	pop	{r4, r5, r6, pc}
   d78f6:	bf00      	nop
   d78f8:	000e291f 	.word	0x000e291f
   d78fc:	000e27c5 	.word	0x000e27c5

000d7900 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d7900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   d7904:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d7906:	b08e      	sub	sp, #56	; 0x38
   d7908:	4605      	mov	r5, r0
   d790a:	460f      	mov	r7, r1
    if (allExtensions) {
   d790c:	2a00      	cmp	r2, #0
   d790e:	d04a      	beq.n	d79a6 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   d7910:	6840      	ldr	r0, [r0, #4]
   d7912:	f004 fb55 	bl	dbfc0 <opendir>
        if (dir) {
   d7916:	4606      	mov	r6, r0
   d7918:	2800      	cmp	r0, #0
   d791a:	d041      	beq.n	d79a0 <_ZN14SequentialFile13removeFileNumEib+0xa0>
                        String path = dirPath + String("/") + ent->d_name;
   d791c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d79d0 <_ZN14SequentialFile13removeFileNumEib+0xd0>
                        _log.trace("removed %s", path.c_str());
   d7920:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d79c8 <_ZN14SequentialFile13removeFileNumEib+0xc8>
   d7924:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d79cc <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   d7928:	4630      	mov	r0, r6
   d792a:	f004 fb51 	bl	dbfd0 <readdir>
                if (!ent) {
   d792e:	2800      	cmp	r0, #0
   d7930:	d033      	beq.n	d799a <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   d7932:	7a82      	ldrb	r2, [r0, #10]
   d7934:	2a08      	cmp	r2, #8
   d7936:	d1f7      	bne.n	d7928 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   d7938:	f100 040b 	add.w	r4, r0, #11
   d793c:	6969      	ldr	r1, [r5, #20]
   d793e:	aa01      	add	r2, sp, #4
   d7940:	4620      	mov	r0, r4
   d7942:	f004 fd65 	bl	dc410 <sscanf>
   d7946:	2801      	cmp	r0, #1
   d7948:	d1ee      	bne.n	d7928 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   d794a:	9b01      	ldr	r3, [sp, #4]
   d794c:	429f      	cmp	r7, r3
   d794e:	d1eb      	bne.n	d7928 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   d7950:	1d29      	adds	r1, r5, #4
   d7952:	a806      	add	r0, sp, #24
   d7954:	f007 f826 	bl	de9a4 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   d7958:	4651      	mov	r1, sl
   d795a:	a80a      	add	r0, sp, #40	; 0x28
   d795c:	f006 ffd7 	bl	de90e <_ZN6StringC1EPKc>
   d7960:	a90a      	add	r1, sp, #40	; 0x28
   d7962:	a806      	add	r0, sp, #24
   d7964:	f007 f86b 	bl	dea3e <_ZplRK15StringSumHelperRK6String>
   d7968:	4621      	mov	r1, r4
   d796a:	f007 f874 	bl	dea56 <_ZplRK15StringSumHelperPKc>
   d796e:	4601      	mov	r1, r0
   d7970:	a802      	add	r0, sp, #8
   d7972:	f007 f817 	bl	de9a4 <_ZN6StringC1ERKS_>
   d7976:	a80a      	add	r0, sp, #40	; 0x28
   d7978:	f006 ff7e 	bl	de878 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d797c:	a806      	add	r0, sp, #24
   d797e:	f006 ff7b 	bl	de878 <_ZN6StringD1Ev>
                        unlink(path);
   d7982:	9802      	ldr	r0, [sp, #8]
   d7984:	f009 fb16 	bl	e0fb4 <unlink>
                        _log.trace("removed %s", path.c_str());
   d7988:	4640      	mov	r0, r8
   d798a:	9a02      	ldr	r2, [sp, #8]
   d798c:	4649      	mov	r1, r9
   d798e:	f7fc fe89 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   d7992:	a802      	add	r0, sp, #8
   d7994:	f006 ff70 	bl	de878 <_ZN6StringD1Ev>
                    continue;
   d7998:	e7c6      	b.n	d7928 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   d799a:	4630      	mov	r0, r6
   d799c:	f004 fb20 	bl	dbfe0 <closedir>
}
   d79a0:	b00e      	add	sp, #56	; 0x38
   d79a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        String path = getPathForFileNum(fileNum); 
   d79a6:	460a      	mov	r2, r1
   d79a8:	4601      	mov	r1, r0
   d79aa:	a80a      	add	r0, sp, #40	; 0x28
   d79ac:	f7ff ff6c 	bl	d7888 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   d79b0:	980a      	ldr	r0, [sp, #40]	; 0x28
   d79b2:	f009 faff 	bl	e0fb4 <unlink>
        _log.trace("removed %s", path.c_str());
   d79b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d79b8:	4903      	ldr	r1, [pc, #12]	; (d79c8 <_ZN14SequentialFile13removeFileNumEib+0xc8>)
   d79ba:	4804      	ldr	r0, [pc, #16]	; (d79cc <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   d79bc:	f7fc fe72 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   d79c0:	a80a      	add	r0, sp, #40	; 0x28
   d79c2:	f006 ff59 	bl	de878 <_ZN6StringD1Ev>
}
   d79c6:	e7eb      	b.n	d79a0 <_ZN14SequentialFile13removeFileNumEib+0xa0>
   d79c8:	000e27c7 	.word	0x000e27c7
   d79cc:	2003e4a0 	.word	0x2003e4a0
   d79d0:	000e27c5 	.word	0x000e27c5

000d79d4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d79d4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d79d6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d79d8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d79da:	b163      	cbz	r3, d79f6 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d79dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d79de:	6945      	ldr	r5, [r0, #20]
   d79e0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d79e2:	42ae      	cmp	r6, r5
   d79e4:	d904      	bls.n	d79f0 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x1c>
	::operator delete(__p);
   d79e6:	f855 0b04 	ldr.w	r0, [r5], #4
   d79ea:	f7fc fb58 	bl	d409e <_ZdlPv>
   d79ee:	e7f8      	b.n	d79e2 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   d79f0:	6820      	ldr	r0, [r4, #0]
   d79f2:	f7fc fb54 	bl	d409e <_ZdlPv>
    }
   d79f6:	4620      	mov	r0, r4
   d79f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d79fc <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   d79fc:	b510      	push	{r4, lr}
   d79fe:	4b09      	ldr	r3, [pc, #36]	; (d7a24 <_ZN14SequentialFileD1Ev+0x28>)
   d7a00:	4604      	mov	r4, r0
   d7a02:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d7a06:	f7ff ffe5 	bl	d79d4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   d7a0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7a0e:	f006 ff33 	bl	de878 <_ZN6StringD1Ev>
   d7a12:	f104 0014 	add.w	r0, r4, #20
   d7a16:	f006 ff2f 	bl	de878 <_ZN6StringD1Ev>
   d7a1a:	1d20      	adds	r0, r4, #4
   d7a1c:	f006 ff2c 	bl	de878 <_ZN6StringD1Ev>
}
   d7a20:	4620      	mov	r0, r4
   d7a22:	bd10      	pop	{r4, pc}
   d7a24:	000e28b4 	.word	0x000e28b4

000d7a28 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   d7a28:	b510      	push	{r4, lr}
   d7a2a:	4604      	mov	r4, r0
}
   d7a2c:	f7ff ffe6 	bl	d79fc <_ZN14SequentialFileD1Ev>
   d7a30:	4620      	mov	r0, r4
   d7a32:	2168      	movs	r1, #104	; 0x68
   d7a34:	f007 fd1e 	bl	df474 <_ZdlPvj>
   d7a38:	4620      	mov	r0, r4
   d7a3a:	bd10      	pop	{r4, pc}

000d7a3c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d7a3c:	68c3      	ldr	r3, [r0, #12]
   d7a3e:	68ca      	ldr	r2, [r1, #12]
   d7a40:	1a9b      	subs	r3, r3, r2
   d7a42:	109b      	asrs	r3, r3, #2
   d7a44:	1e5a      	subs	r2, r3, #1
   d7a46:	e9d0 3000 	ldrd	r3, r0, [r0]
   d7a4a:	1a1b      	subs	r3, r3, r0
   d7a4c:	109b      	asrs	r3, r3, #2
   d7a4e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d7a52:	6888      	ldr	r0, [r1, #8]
   d7a54:	680a      	ldr	r2, [r1, #0]
   d7a56:	1a80      	subs	r0, r0, r2
    }
   d7a58:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d7a5c:	4770      	bx	lr
	...

000d7a60 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
   d7a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a64:	4604      	mov	r4, r0
   d7a66:	4688      	mov	r8, r1
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d7a68:	f100 0108 	add.w	r1, r0, #8
   d7a6c:	3018      	adds	r0, #24
   d7a6e:	f7ff ffe5 	bl	d7a3c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
	if (size() == max_size())
   d7a72:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d7a76:	4298      	cmp	r0, r3
   d7a78:	d102      	bne.n	d7a80 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x20>
	  __throw_length_error(
   d7a7a:	4837      	ldr	r0, [pc, #220]	; (d7b58 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xf8>)
   d7a7c:	f007 fd03 	bl	df486 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d7a80:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d7a82:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d7a84:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d7a86:	1a11      	subs	r1, r2, r0
   d7a88:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d7a8c:	2901      	cmp	r1, #1
   d7a8e:	d821      	bhi.n	d7ad4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x74>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d7a90:	6961      	ldr	r1, [r4, #20]
   d7a92:	1a57      	subs	r7, r2, r1
   d7a94:	10be      	asrs	r6, r7, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d7a96:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d7a98:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   d7a9c:	d936      	bls.n	d7b0c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xac>
					 - __new_num_nodes) / 2
   d7a9e:	1b5d      	subs	r5, r3, r5
   d7aa0:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d7aa2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d7aa6:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d7aa8:	42a9      	cmp	r1, r5
   d7aaa:	eba3 0201 	sub.w	r2, r3, r1
   d7aae:	d927      	bls.n	d7b00 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xa0>
	  if (_Num)
   d7ab0:	4299      	cmp	r1, r3
   d7ab2:	d002      	beq.n	d7aba <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7ab4:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d7ab6:	f008 fa7b 	bl	dffb0 <memmove>
	_M_node = __new_node;
   d7aba:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   d7abc:	682b      	ldr	r3, [r5, #0]
   d7abe:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7ac0:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d7ac4:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d7ac6:	19eb      	adds	r3, r5, r7
	_M_node = __new_node;
   d7ac8:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d7aca:	59eb      	ldr	r3, [r5, r7]
   d7acc:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7ace:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d7ad2:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7ad4:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d7ad8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d7ada:	f7fc fadc 	bl	d4096 <_Znwj>
   d7ade:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d7ae0:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7ae2:	b113      	cbz	r3, d7aea <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x8a>
   d7ae4:	f8d8 2000 	ldr.w	r2, [r8]
   d7ae8:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d7aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7aec:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d7aee:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d7af0:	685b      	ldr	r3, [r3, #4]
   d7af2:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7af4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d7af8:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d7afa:	61a3      	str	r3, [r4, #24]
      }
   d7afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d7b00:	4299      	cmp	r1, r3
   d7b02:	d0da      	beq.n	d7aba <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d7b04:	1d38      	adds	r0, r7, #4
   d7b06:	1a80      	subs	r0, r0, r2
   d7b08:	4428      	add	r0, r5
   d7b0a:	e7d4      	b.n	d7ab6 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x56>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d7b0c:	f103 0902 	add.w	r9, r3, #2
   d7b10:	2b01      	cmp	r3, #1
   d7b12:	bf2c      	ite	cs
   d7b14:	4499      	addcs	r9, r3
   d7b16:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->max_size())
   d7b1a:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   d7b1e:	d301      	bcc.n	d7b24 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xc4>
	  std::__throw_bad_alloc();
   d7b20:	f007 fcae 	bl	df480 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7b24:	ea4f 0089 	mov.w	r0, r9, lsl #2
   d7b28:	f7fc fab5 	bl	d4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   d7b2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d7b2e:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d7b30:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   d7b34:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d7b36:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   d7b38:	4291      	cmp	r1, r2
   d7b3a:	4682      	mov	sl, r0
   d7b3c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d7b40:	d003      	beq.n	d7b4a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7b42:	1a52      	subs	r2, r2, r1
   d7b44:	4628      	mov	r0, r5
   d7b46:	f008 fa33 	bl	dffb0 <memmove>
	::operator delete(__p);
   d7b4a:	6820      	ldr	r0, [r4, #0]
   d7b4c:	f7fc faa7 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d7b50:	e9c4 a900 	strd	sl, r9, [r4]
   d7b54:	e7b1      	b.n	d7aba <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
   d7b56:	bf00      	nop
   d7b58:	000e26e1 	.word	0x000e26e1

000d7b5c <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   d7b5c:	b538      	push	{r3, r4, r5, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   d7b5e:	6a05      	ldr	r5, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   d7b60:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   d7b62:	3d04      	subs	r5, #4
	if (this->_M_impl._M_finish._M_cur
   d7b64:	42aa      	cmp	r2, r5
      push_back(const value_type& __x)
   d7b66:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish._M_cur
   d7b68:	d006      	beq.n	d7b78 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7b6a:	b10a      	cbz	r2, d7b70 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
	    _Alloc_traits::construct(this->_M_impl,
   d7b6c:	6809      	ldr	r1, [r1, #0]
   d7b6e:	6011      	str	r1, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d7b70:	699a      	ldr	r2, [r3, #24]
   d7b72:	3204      	adds	r2, #4
   d7b74:	619a      	str	r2, [r3, #24]
      }
   d7b76:	bd38      	pop	{r3, r4, r5, pc}
	  _M_push_back_aux(__x);
   d7b78:	f7ff ff72 	bl	d7a60 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>
      }
   d7b7c:	e7fb      	b.n	d7b76 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1a>
	...

000d7b80 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   d7b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   d7b84:	68c3      	ldr	r3, [r0, #12]
   d7b86:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   d7b88:	b086      	sub	sp, #24
   d7b8a:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   d7b8c:	d808      	bhi.n	d7ba0 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   d7b8e:	4934      	ldr	r1, [pc, #208]	; (d7c60 <_ZN14SequentialFile7scanDirEv+0xe0>)
   d7b90:	4834      	ldr	r0, [pc, #208]	; (d7c64 <_ZN14SequentialFile7scanDirEv+0xe4>)
   d7b92:	f7fc fd9e 	bl	d46d2 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d7b96:	2600      	movs	r6, #0
}
   d7b98:	4630      	mov	r0, r6
   d7b9a:	b006      	add	sp, #24
   d7b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   d7ba0:	6840      	ldr	r0, [r0, #4]
   d7ba2:	f7ff fe05 	bl	d77b0 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   d7ba6:	4606      	mov	r6, r0
   d7ba8:	2800      	cmp	r0, #0
   d7baa:	d0f4      	beq.n	d7b96 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   d7bac:	6963      	ldr	r3, [r4, #20]
   d7bae:	6862      	ldr	r2, [r4, #4]
   d7bb0:	492d      	ldr	r1, [pc, #180]	; (d7c68 <_ZN14SequentialFile7scanDirEv+0xe8>)
   d7bb2:	482c      	ldr	r0, [pc, #176]	; (d7c64 <_ZN14SequentialFile7scanDirEv+0xe4>)
   d7bb4:	f7fc fd76 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   d7bb8:	6860      	ldr	r0, [r4, #4]
   d7bba:	f004 fa01 	bl	dbfc0 <opendir>
    if (!dir) {
   d7bbe:	4607      	mov	r7, r0
   d7bc0:	2800      	cmp	r0, #0
   d7bc2:	d0e8      	beq.n	d7b96 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   d7bc4:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d7bc6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d7c6c <_ZN14SequentialFile7scanDirEv+0xec>
   d7bca:	f8df 8098 	ldr.w	r8, [pc, #152]	; d7c64 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   d7bce:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   d7bd0:	4638      	mov	r0, r7
   d7bd2:	f004 f9fd 	bl	dbfd0 <readdir>
        if (!ent) {
   d7bd6:	4605      	mov	r5, r0
   d7bd8:	2800      	cmp	r0, #0
   d7bda:	d039      	beq.n	d7c50 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   d7bdc:	7a83      	ldrb	r3, [r0, #10]
   d7bde:	2b08      	cmp	r3, #8
   d7be0:	d1f6      	bne.n	d7bd0 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   d7be2:	350b      	adds	r5, #11
   d7be4:	6961      	ldr	r1, [r4, #20]
   d7be6:	aa01      	add	r2, sp, #4
   d7be8:	4628      	mov	r0, r5
   d7bea:	f004 fc11 	bl	dc410 <sscanf>
   d7bee:	2801      	cmp	r0, #1
   d7bf0:	d1ee      	bne.n	d7bd0 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   d7bf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d7bf4:	b17b      	cbz	r3, d7c16 <_ZN14SequentialFile7scanDirEv+0x96>
   d7bf6:	4629      	mov	r1, r5
   d7bf8:	a802      	add	r0, sp, #8
   d7bfa:	f006 fe88 	bl	de90e <_ZN6StringC1EPKc>
   d7bfe:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d7c02:	a802      	add	r0, sp, #8
   d7c04:	f006 ff70 	bl	deae8 <_ZNK6String8endsWithERKS_>
   d7c08:	4682      	mov	sl, r0
   d7c0a:	a802      	add	r0, sp, #8
   d7c0c:	f006 fe34 	bl	de878 <_ZN6StringD1Ev>
   d7c10:	f1ba 0f00 	cmp.w	sl, #0
   d7c14:	d0dc      	beq.n	d7bd0 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   d7c16:	6823      	ldr	r3, [r4, #0]
   d7c18:	4629      	mov	r1, r5
   d7c1a:	689b      	ldr	r3, [r3, #8]
   d7c1c:	4620      	mov	r0, r4
   d7c1e:	4798      	blx	r3
   d7c20:	2800      	cmp	r0, #0
   d7c22:	d0d5      	beq.n	d7bd0 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   d7c24:	9a01      	ldr	r2, [sp, #4]
   d7c26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7c28:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   d7c2a:	bfb8      	it	lt
   d7c2c:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d7c2e:	462b      	mov	r3, r5
   d7c30:	4649      	mov	r1, r9
   d7c32:	4640      	mov	r0, r8
   d7c34:	f7fc fd36 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   d7c38:	4620      	mov	r0, r4
   d7c3a:	f7ff fda9 	bl	d7790 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   d7c3e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d7c42:	a901      	add	r1, sp, #4
   d7c44:	f7ff ff8a 	bl	d7b5c <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   d7c48:	4620      	mov	r0, r4
   d7c4a:	f7ff fdad 	bl	d77a8 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   d7c4e:	e7bf      	b.n	d7bd0 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   d7c50:	4638      	mov	r0, r7
   d7c52:	f004 f9c5 	bl	dbfe0 <closedir>
    scanDirCompleted = true;
   d7c56:	2301      	movs	r3, #1
   d7c58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   d7c5c:	e79c      	b.n	d7b98 <_ZN14SequentialFile7scanDirEv+0x18>
   d7c5e:	bf00      	nop
   d7c60:	000e2845 	.word	0x000e2845
   d7c64:	2003e4a0 	.word	0x2003e4a0
   d7c68:	000e285a 	.word	0x000e285a
   d7c6c:	000e2876 	.word	0x000e2876

000d7c70 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   d7c70:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   d7c72:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   d7c76:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d7c78:	b90b      	cbnz	r3, d7c7e <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   d7c7a:	f7ff ff81 	bl	d7b80 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   d7c7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d7c80:	3001      	adds	r0, #1
   d7c82:	63a0      	str	r0, [r4, #56]	; 0x38
}
   d7c84:	bd10      	pop	{r4, pc}
	...

000d7c88 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   d7c88:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   d7c8a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   d7c8e:	4604      	mov	r4, r0
   d7c90:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   d7c92:	b90b      	cbnz	r3, d7c98 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   d7c94:	f7ff ff74 	bl	d7b80 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   d7c98:	4620      	mov	r0, r4
   d7c9a:	f7ff fd79 	bl	d7790 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d7c9e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   d7ca0:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d7ca2:	4293      	cmp	r3, r2
   d7ca4:	d01e      	beq.n	d7ce4 <_ZN14SequentialFile16getFileFromQueueEb+0x5c>
        fileNum = queue.front();
   d7ca6:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   d7ca8:	b12e      	cbz	r6, d7cb6 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
	    != this->_M_impl._M_start._M_last - 1)
   d7caa:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d7cac:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d7cae:	4293      	cmp	r3, r2
   d7cb0:	d00c      	beq.n	d7ccc <_ZN14SequentialFile16getFileFromQueueEb+0x44>
	    ++this->_M_impl._M_start._M_cur;
   d7cb2:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d7cb4:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   d7cb6:	4620      	mov	r0, r4
   d7cb8:	f7ff fd76 	bl	d77a8 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   d7cbc:	b125      	cbz	r5, d7cc8 <_ZN14SequentialFile16getFileFromQueueEb+0x40>
        _log.trace("getFileFromQueue returned %d", fileNum);
   d7cbe:	490a      	ldr	r1, [pc, #40]	; (d7ce8 <_ZN14SequentialFile16getFileFromQueueEb+0x60>)
   d7cc0:	480a      	ldr	r0, [pc, #40]	; (d7cec <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   d7cc2:	462a      	mov	r2, r5
   d7cc4:	f7fc fcee 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
}
   d7cc8:	4628      	mov	r0, r5
   d7cca:	bd70      	pop	{r4, r5, r6, pc}
	::operator delete(__p);
   d7ccc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d7cce:	f7fc f9e6 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d7cd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7cd4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d7cd6:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   d7cd8:	685b      	ldr	r3, [r3, #4]
   d7cda:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7cdc:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d7ce0:	6522      	str	r2, [r4, #80]	; 0x50
   d7ce2:	e7e7      	b.n	d7cb4 <_ZN14SequentialFile16getFileFromQueueEb+0x2c>
    int fileNum = 0;
   d7ce4:	2500      	movs	r5, #0
   d7ce6:	e7e6      	b.n	d7cb6 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
   d7ce8:	000e288c 	.word	0x000e288c
   d7cec:	2003e4a0 	.word	0x2003e4a0

000d7cf0 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   d7cf0:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   d7cf2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   d7cf6:	9101      	str	r1, [sp, #4]
   d7cf8:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d7cfa:	b90b      	cbnz	r3, d7d00 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   d7cfc:	f7ff ff40 	bl	d7b80 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   d7d00:	9b01      	ldr	r3, [sp, #4]
   d7d02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d7d04:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   d7d06:	bfb8      	it	lt
   d7d08:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   d7d0a:	4620      	mov	r0, r4
   d7d0c:	f7ff fd40 	bl	d7790 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   d7d10:	a901      	add	r1, sp, #4
   d7d12:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d7d16:	f7ff ff21 	bl	d7b5c <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   d7d1a:	4620      	mov	r0, r4
   d7d1c:	f7ff fd44 	bl	d77a8 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d7d20:	b002      	add	sp, #8
   d7d22:	bd10      	pop	{r4, pc}

000d7d24 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   d7d24:	b538      	push	{r3, r4, r5, lr}
   d7d26:	4604      	mov	r4, r0
    queueMutexLock();
   d7d28:	f7ff fd32 	bl	d7790 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d7d2c:	f104 0148 	add.w	r1, r4, #72	; 0x48
   d7d30:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d7d34:	f7ff fe82 	bl	d7a3c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
   d7d38:	4605      	mov	r5, r0
    queueMutexUnlock();
   d7d3a:	4620      	mov	r0, r4
   d7d3c:	f7ff fd34 	bl	d77a8 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d7d40:	4628      	mov	r0, r5
   d7d42:	bd38      	pop	{r3, r4, r5, pc}

000d7d44 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   d7d44:	4b01      	ldr	r3, [pc, #4]	; (d7d4c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   d7d46:	4a02      	ldr	r2, [pc, #8]	; (d7d50 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   d7d48:	601a      	str	r2, [r3, #0]
}
   d7d4a:	4770      	bx	lr
   d7d4c:	2003e4a0 	.word	0x2003e4a0
   d7d50:	000e21dd 	.word	0x000e21dd

000d7d54 <_ZN11SleepHelper18PersistentDataBase4saveEv>:
        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         * 
         * Save does nothing in this base class, but for PersistentDataFile it saves to a file
         */
        virtual void save() {};
   d7d54:	4770      	bx	lr

000d7d56 <_ZN11SleepHelper18PersistentDataBase11saveOrDeferEv>:
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         * 
         * Save does nothing in this base class, but for PersistentDataFile uses it to determine whether to save immediately
         * or defer until later.
         */
        virtual void saveOrDefer() {}
   d7d56:	4770      	bx	lr

000d7d58 <_ZN11SleepHelper18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void SleepHelper::PersistentDataBase::setup() {
    // Load data at boot
    load();
   d7d58:	6803      	ldr	r3, [r0, #0]
   d7d5a:	685b      	ldr	r3, [r3, #4]
   d7d5c:	4718      	bx	r3

000d7d5e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRNS1_16AppCallbackStateEmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d7d5e:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7d60:	bf08      	it	eq
   d7d62:	6001      	streq	r1, [r0, #0]
	}
   d7d64:	2000      	movs	r0, #0
   d7d66:	4770      	bx	lr

000d7d68 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d7d68:	2a02      	cmp	r2, #2
   d7d6a:	d006      	beq.n	d7d7a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d7d6c:	2a03      	cmp	r2, #3
   d7d6e:	d002      	beq.n	d7d76 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d7d70:	2a01      	cmp	r2, #1
   d7d72:	d100      	bne.n	d7d76 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7d74:	6001      	str	r1, [r0, #0]
	}
   d7d76:	2000      	movs	r0, #0
   d7d78:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7d7a:	680b      	ldr	r3, [r1, #0]
   d7d7c:	6003      	str	r3, [r0, #0]
	}
   d7d7e:	e7fa      	b.n	d7d76 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d7d80 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d7d80:	2a02      	cmp	r2, #2
   d7d82:	d006      	beq.n	d7d92 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   d7d84:	2a03      	cmp	r2, #3
   d7d86:	d002      	beq.n	d7d8e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d7d88:	2a01      	cmp	r2, #1
   d7d8a:	d100      	bne.n	d7d8e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7d8c:	6001      	str	r1, [r0, #0]
	}
   d7d8e:	2000      	movs	r0, #0
   d7d90:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7d92:	680b      	ldr	r3, [r1, #0]
   d7d94:	6003      	str	r3, [r0, #0]
	}
   d7d96:	e7fa      	b.n	d7d8e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

000d7d98 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d7d98:	2a02      	cmp	r2, #2
   d7d9a:	d006      	beq.n	d7daa <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d7d9c:	2a03      	cmp	r2, #3
   d7d9e:	d002      	beq.n	d7da6 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d7da0:	2a01      	cmp	r2, #1
   d7da2:	d100      	bne.n	d7da6 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7da4:	6001      	str	r1, [r0, #0]
	}
   d7da6:	2000      	movs	r0, #0
   d7da8:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7daa:	680b      	ldr	r3, [r1, #0]
   d7dac:	6003      	str	r3, [r0, #0]
	}
   d7dae:	e7fa      	b.n	d7da6 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d7db0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d7db0:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7db2:	bf08      	it	eq
   d7db4:	6001      	streq	r1, [r0, #0]
	}
   d7db6:	2000      	movs	r0, #0
   d7db8:	4770      	bx	lr

000d7dba <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d7dba:	2a02      	cmp	r2, #2
   d7dbc:	d006      	beq.n	d7dcc <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d7dbe:	2a03      	cmp	r2, #3
   d7dc0:	d002      	beq.n	d7dc8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d7dc2:	2a01      	cmp	r2, #1
   d7dc4:	d100      	bne.n	d7dc8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7dc6:	6001      	str	r1, [r0, #0]
	}
   d7dc8:	2000      	movs	r0, #0
   d7dca:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7dcc:	680b      	ldr	r3, [r1, #0]
   d7dce:	6003      	str	r3, [r0, #0]
	}
   d7dd0:	e7fa      	b.n	d7dc8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d7dd2 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d7dd2:	2a02      	cmp	r2, #2
   d7dd4:	d006      	beq.n	d7de4 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d7dd6:	2a03      	cmp	r2, #3
   d7dd8:	d002      	beq.n	d7de0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d7dda:	2a01      	cmp	r2, #1
   d7ddc:	d100      	bne.n	d7de0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7dde:	6001      	str	r1, [r0, #0]
	}
   d7de0:	2000      	movs	r0, #0
   d7de2:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7de4:	680b      	ldr	r3, [r1, #0]
   d7de6:	6003      	str	r3, [r0, #0]
	}
   d7de8:	e7fa      	b.n	d7de0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d7dea <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d7dea:	2a02      	cmp	r2, #2
   d7dec:	d006      	beq.n	d7dfc <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   d7dee:	2a03      	cmp	r2, #3
   d7df0:	d002      	beq.n	d7df8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d7df2:	2a01      	cmp	r2, #1
   d7df4:	d100      	bne.n	d7df8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7df6:	6001      	str	r1, [r0, #0]
	}
   d7df8:	2000      	movs	r0, #0
   d7dfa:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7dfc:	680b      	ldr	r3, [r1, #0]
   d7dfe:	6003      	str	r3, [r0, #0]
	}
   d7e00:	e7fa      	b.n	d7df8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

000d7e02 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d7e02:	2a02      	cmp	r2, #2
   d7e04:	d006      	beq.n	d7e14 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   d7e06:	2a03      	cmp	r2, #3
   d7e08:	d002      	beq.n	d7e10 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d7e0a:	2a01      	cmp	r2, #1
   d7e0c:	d100      	bne.n	d7e10 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7e0e:	6001      	str	r1, [r0, #0]
	}
   d7e10:	2000      	movs	r0, #0
   d7e12:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7e14:	680b      	ldr	r3, [r1, #0]
   d7e16:	6003      	str	r3, [r0, #0]
	}
   d7e18:	e7fa      	b.n	d7e10 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

000d7e1a <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7e1a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7e1c:	4603      	mov	r3, r0
	switch (__op)
   d7e1e:	d102      	bne.n	d7e26 <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d7e20:	6001      	str	r1, [r0, #0]
      }
   d7e22:	2000      	movs	r0, #0
   d7e24:	4770      	bx	lr
	  switch (__op)
   d7e26:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7e28:	bf04      	itt	eq
   d7e2a:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7e2e:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d7e32:	e7f6      	b.n	d7e22 <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7e34 <_ZN16JsonParserStaticILj622ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   d7e34:	b510      	push	{r4, lr}
   d7e36:	4b03      	ldr	r3, [pc, #12]	; (d7e44 <_ZN16JsonParserStaticILj622ELj50EED1Ev+0x10>)
   d7e38:	6003      	str	r3, [r0, #0]
   d7e3a:	4604      	mov	r4, r0
   d7e3c:	f7fd fb52 	bl	d54e4 <_ZN10JsonParserD1Ev>
   d7e40:	4620      	mov	r0, r4
   d7e42:	bd10      	pop	{r4, pc}
   d7e44:	000e2b3c 	.word	0x000e2b3c

000d7e48 <_ZN16JsonParserStaticILj622ELj50EED0Ev>:
   d7e48:	b510      	push	{r4, lr}
   d7e4a:	4604      	mov	r4, r0
   d7e4c:	f7ff fff2 	bl	d7e34 <_ZN16JsonParserStaticILj622ELj50EED1Ev>
   d7e50:	4620      	mov	r0, r4
   d7e52:	f240 51bc 	movw	r1, #1468	; 0x5bc
   d7e56:	f007 fb0d 	bl	df474 <_ZdlPvj>
   d7e5a:	4620      	mov	r0, r4
   d7e5c:	bd10      	pop	{r4, pc}

000d7e5e <_ZN11SleepHelper18PersistentDataFile11saveOrDeferEv>:
         * @brief Either saves data or immediately, or defers until later, based on saveDelayMs
         * 
         * If saveDelayMs == 0, then always saves immediately. Otherwise, waits that amount of time before saving
         * to allow multiple saves to be batch and to not block the updating thread.
         */
        virtual void saveOrDefer() {
   d7e5e:	b510      	push	{r4, lr}
            if (saveDelayMs) {
   d7e60:	69c3      	ldr	r3, [r0, #28]
        virtual void saveOrDefer() {
   d7e62:	4604      	mov	r4, r0
            if (saveDelayMs) {
   d7e64:	b11b      	cbz	r3, d7e6e <_ZN11SleepHelper18PersistentDataFile11saveOrDeferEv+0x10>
   d7e66:	f003 ff7b 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
                lastUpdate = millis();
   d7e6a:	61a0      	str	r0, [r4, #24]
            }
            else {
                save();
            }
        }
   d7e6c:	bd10      	pop	{r4, pc}
                save();
   d7e6e:	6803      	ldr	r3, [r0, #0]
        }
   d7e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                save();
   d7e74:	689b      	ldr	r3, [r3, #8]
   d7e76:	4718      	bx	r3

000d7e78 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiESt8functionIFbS2_S3_EEE9_M_invokeERKSt9_Any_dataS2_S3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7e78:	b510      	push	{r4, lr}
	    return __source._M_access<_Functor*>();
   d7e7a:	6800      	ldr	r0, [r0, #0]
      if (_M_empty())
   d7e7c:	6883      	ldr	r3, [r0, #8]
   d7e7e:	b90b      	cbnz	r3, d7e84 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiESt8functionIFbS2_S3_EEE9_M_invokeERKSt9_Any_dataS2_S3_+0xc>
	__throw_bad_function_call();
   d7e80:	f007 fb04 	bl	df48c <_ZSt25__throw_bad_function_callv>
      }
   d7e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e88:	68c3      	ldr	r3, [r0, #12]
   d7e8a:	4718      	bx	r3

000d7e8c <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper5setupEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7e8c:	460b      	mov	r3, r1
        writer.value(resetReason);
   d7e8e:	6801      	ldr	r1, [r0, #0]
   d7e90:	4618      	mov	r0, r3
   d7e92:	f005 bae9 	b.w	dd468 <_ZN5spark10JSONWriter5valueEi>

000d7e96 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E_E9_M_invokeERKSt9_Any_dataS2_S3_>:
   d7e96:	460b      	mov	r3, r1
        writer.value((int)elapsedMs);
   d7e98:	6801      	ldr	r1, [r0, #0]
   d7e9a:	4618      	mov	r0, r3
   d7e9c:	f005 bae4 	b.w	dd468 <_ZN5spark10JSONWriter5valueEi>

000d7ea0 <_ZN11SleepHelper18PersistentDataBase10initializeEv>:
        isValid = true;
    }   
    return isValid;
}

void SleepHelper::PersistentDataBase::initialize() {
   d7ea0:	b510      	push	{r4, lr}
   d7ea2:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   d7ea4:	68c2      	ldr	r2, [r0, #12]
   d7ea6:	6880      	ldr	r0, [r0, #8]
   d7ea8:	2100      	movs	r1, #0
   d7eaa:	f008 f89b 	bl	dffe4 <memset>
    savedDataHeader->magic = savedDataMagic;
   d7eae:	68a3      	ldr	r3, [r4, #8]
   d7eb0:	6922      	ldr	r2, [r4, #16]
   d7eb2:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   d7eb4:	68a3      	ldr	r3, [r4, #8]
   d7eb6:	8aa2      	ldrh	r2, [r4, #20]
   d7eb8:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   d7eba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   d7ebe:	80da      	strh	r2, [r3, #6]
}
   d7ec0:	bd10      	pop	{r4, pc}

000d7ec2 <_ZN11SleepHelper18PersistentDataBase8validateEj>:
    if (dataSize >= 12 && 
   d7ec2:	290b      	cmp	r1, #11
bool SleepHelper::PersistentDataBase::validate(size_t dataSize) {
   d7ec4:	b510      	push	{r4, lr}
    if (dataSize >= 12 && 
   d7ec6:	d91a      	bls.n	d7efe <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        savedDataHeader->magic == savedDataMagic && 
   d7ec8:	6883      	ldr	r3, [r0, #8]
    if (dataSize >= 12 && 
   d7eca:	6902      	ldr	r2, [r0, #16]
   d7ecc:	681c      	ldr	r4, [r3, #0]
   d7ece:	4294      	cmp	r4, r2
   d7ed0:	d115      	bne.n	d7efe <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        savedDataHeader->magic == savedDataMagic && 
   d7ed2:	889c      	ldrh	r4, [r3, #4]
   d7ed4:	8a82      	ldrh	r2, [r0, #20]
   d7ed6:	4294      	cmp	r4, r2
   d7ed8:	d111      	bne.n	d7efe <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        savedDataHeader->version == savedDataVersion &&
   d7eda:	88dc      	ldrh	r4, [r3, #6]
   d7edc:	b28a      	uxth	r2, r1
   d7ede:	4294      	cmp	r4, r2
   d7ee0:	d80d      	bhi.n	d7efe <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        if ((size_t)dataSize < savedDataSize) {
   d7ee2:	68c2      	ldr	r2, [r0, #12]
   d7ee4:	4291      	cmp	r1, r2
   d7ee6:	d205      	bcs.n	d7ef4 <_ZN11SleepHelper18PersistentDataBase8validateEj+0x32>
                p[ii] = 0;
   d7ee8:	2400      	movs	r4, #0
   d7eea:	545c      	strb	r4, [r3, r1]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   d7eec:	68c2      	ldr	r2, [r0, #12]
   d7eee:	3101      	adds	r1, #1
   d7ef0:	428a      	cmp	r2, r1
   d7ef2:	d8fa      	bhi.n	d7eea <_ZN11SleepHelper18PersistentDataBase8validateEj+0x28>
        savedDataHeader->size = (uint16_t) savedDataSize;
   d7ef4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
        isValid = true;
   d7ef8:	2001      	movs	r0, #1
        savedDataHeader->size = (uint16_t) savedDataSize;
   d7efa:	80da      	strh	r2, [r3, #6]
}
   d7efc:	bd10      	pop	{r4, pc}
    bool isValid = false;
   d7efe:	2000      	movs	r0, #0
   d7f00:	e7fc      	b.n	d7efc <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3a>

000d7f02 <_ZNSt17_Function_handlerIFbvEZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7f02:	b508      	push	{r3, lr}
	return (*_Base::_M_get_pointer(__functor))(
   d7f04:	6800      	ldr	r0, [r0, #0]
    // Call parent class
    SleepHelper::PersistentDataBase::setup();

    SleepHelper::instance().withLoopFunction([this]() {
        // Handle deferred save
        flush(false);
   d7f06:	6803      	ldr	r3, [r0, #0]
   d7f08:	2100      	movs	r1, #0
   d7f0a:	699b      	ldr	r3, [r3, #24]
   d7f0c:	4798      	blx	r3
      }
   d7f0e:	2001      	movs	r0, #1
   d7f10:	bd08      	pop	{r3, pc}

000d7f12 <_ZNSt17_Function_handlerIFbbEZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7f12:	b508      	push	{r3, lr}
	return (*_Base::_M_get_pointer(__functor))(
   d7f14:	6800      	ldr	r0, [r0, #0]
        return true;
    });
    SleepHelper::instance().withSleepOrResetFunction([this](bool) {
        // Make sure data is saved before sleep or reset
        flush(true);
   d7f16:	6803      	ldr	r3, [r0, #0]
   d7f18:	2101      	movs	r1, #1
   d7f1a:	699b      	ldr	r3, [r3, #24]
   d7f1c:	4798      	blx	r3
      }
   d7f1e:	2001      	movs	r0, #1
   d7f20:	bd08      	pop	{r3, pc}

000d7f22 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_5setupEvEUlS2_mE_E9_M_invokeERKSt9_Any_dataS2_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7f22:	b508      	push	{r3, lr}
        return !Time.isValid();
   d7f24:	f006 fff0 	bl	def08 <_ZN9TimeClass7isValidEv>
   d7f28:	f080 0001 	eor.w	r0, r0, #1
      }
   d7f2c:	b2c0      	uxtb	r0, r0
   d7f2e:	bd08      	pop	{r3, pc}

000d7f30 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper21stateHandlerSleepDoneEvEUlS2_S3_E_E9_M_invokeERKSt9_Any_dataS2_S3_>:
        writer.value(wakeReasonInt);
   d7f30:	6802      	ldr	r2, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7f32:	460b      	mov	r3, r1
   d7f34:	4618      	mov	r0, r3
   d7f36:	f8d2 177c 	ldr.w	r1, [r2, #1916]	; 0x77c
   d7f3a:	f005 ba95 	b.w	dd468 <_ZN5spark10JSONWriter5valueEi>

000d7f3e <_ZN11SleepHelper18PersistentDataFile5flushEb>:
            close(fd);
        }
    }
}

void SleepHelper::PersistentDataFile::flush(bool force) {
   d7f3e:	b510      	push	{r4, lr}
    if (lastUpdate) {
   d7f40:	6983      	ldr	r3, [r0, #24]
void SleepHelper::PersistentDataFile::flush(bool force) {
   d7f42:	4604      	mov	r4, r0
    if (lastUpdate) {
   d7f44:	b133      	cbz	r3, d7f54 <_ZN11SleepHelper18PersistentDataFile5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   d7f46:	b131      	cbz	r1, d7f56 <_ZN11SleepHelper18PersistentDataFile5flushEb+0x18>
            save();
   d7f48:	6823      	ldr	r3, [r4, #0]
   d7f4a:	4620      	mov	r0, r4
   d7f4c:	689b      	ldr	r3, [r3, #8]
   d7f4e:	4798      	blx	r3
            lastUpdate = 0;
   d7f50:	2300      	movs	r3, #0
   d7f52:	61a3      	str	r3, [r4, #24]
        }
    }
}
   d7f54:	bd10      	pop	{r4, pc}
   d7f56:	f003 ff03 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   d7f5a:	69a3      	ldr	r3, [r4, #24]
   d7f5c:	1ac0      	subs	r0, r0, r3
   d7f5e:	69e3      	ldr	r3, [r4, #28]
   d7f60:	4298      	cmp	r0, r3
   d7f62:	d2f1      	bcs.n	d7f48 <_ZN11SleepHelper18PersistentDataFile5flushEb+0xa>
   d7f64:	e7f6      	b.n	d7f54 <_ZN11SleepHelper18PersistentDataFile5flushEb+0x16>
	...

000d7f68 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_>:
   d7f68:	b530      	push	{r4, r5, lr}
   d7f6a:	b087      	sub	sp, #28
   d7f6c:	460d      	mov	r5, r1
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   d7f6e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d7f70:	a902      	add	r1, sp, #8
   d7f72:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   d7f74:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   d7f76:	f004 f90b 	bl	dc190 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d7f7a:	bb68      	cbnz	r0, d7fd8 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x70>
        return ret;
    }
    return get(src, val);
   d7f7c:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   d7f7e:	b10c      	cbz	r4, d7f84 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x1c>
   d7f80:	6923      	ldr	r3, [r4, #16]
   d7f82:	b923      	cbnz	r3, d7f8e <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x26>
   d7f84:	4a15      	ldr	r2, [pc, #84]	; (d7fdc <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x74>)
   d7f86:	2100      	movs	r1, #0
   d7f88:	200a      	movs	r0, #10
   d7f8a:	f004 f8c1 	bl	dc110 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d7f8e:	2300      	movs	r3, #0
   d7f90:	f8ad 300e 	strh.w	r3, [sp, #14]
   d7f94:	230c      	movs	r3, #12
   d7f96:	f8ad 300c 	strh.w	r3, [sp, #12]
   d7f9a:	ab01      	add	r3, sp, #4
   d7f9c:	9304      	str	r3, [sp, #16]
   d7f9e:	2304      	movs	r3, #4
   d7fa0:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d7fa2:	aa03      	add	r2, sp, #12
   d7fa4:	6923      	ldr	r3, [r4, #16]
   d7fa6:	2101      	movs	r1, #1
   d7fa8:	4620      	mov	r0, r4
   d7faa:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d7fac:	b9a0      	cbnz	r0, d7fd8 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x70>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d7fae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d7fb2:	ee07 3a90 	vmov	s15, r3
   d7fb6:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
        if (soc > 0) {
   d7fba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d7fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7fc2:	dd09      	ble.n	d7fd8 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x70>
            writer.value(soc, 1);
   d7fc4:	ee17 0a90 	vmov	r0, s15
   d7fc8:	f007 fc4e 	bl	df868 <__aeabi_f2d>
   d7fcc:	ec41 0b10 	vmov	d0, r0, r1
   d7fd0:	2101      	movs	r1, #1
   d7fd2:	4628      	mov	r0, r5
   d7fd4:	f005 fa6c 	bl	dd4b0 <_ZN5spark10JSONWriter5valueEdi>
      }
   d7fd8:	b007      	add	sp, #28
   d7fda:	bd30      	pop	{r4, r5, pc}
   d7fdc:	000dbd51 	.word	0x000dbd51

000d7fe0 <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7fe0:	b410      	push	{r4}
   d7fe2:	6842      	ldr	r2, [r0, #4]
   d7fe4:	4603      	mov	r3, r0
   d7fe6:	1054      	asrs	r4, r2, #1
   d7fe8:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d7fec:	07d2      	lsls	r2, r2, #31
   d7fee:	bf48      	it	mi
   d7ff0:	590a      	ldrmi	r2, [r1, r4]
   d7ff2:	681b      	ldr	r3, [r3, #0]
      }
   d7ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7ff8:	bf48      	it	mi
   d7ffa:	58d3      	ldrmi	r3, [r2, r3]
   d7ffc:	4718      	bx	r3

000d7ffe <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>:
	if (__n > this->max_size())
   d7ffe:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   d8002:	b508      	push	{r3, lr}
	if (__n > this->max_size())
   d8004:	d301      	bcc.n	d800a <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0+0xc>
	  std::__throw_bad_alloc();
   d8006:	f007 fa3b 	bl	df480 <_ZSt17__throw_bad_allocv>
      }
   d800a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d800e:	0100      	lsls	r0, r0, #4
   d8010:	f7fc b841 	b.w	d4096 <_Znwj>

000d8014 <_ZN11SleepHelper23stateHandlerPublishWaitEv>:
   d8014:	4770      	bx	lr
	...

000d8018 <_ZN11SleepHelper14PersistentDataD1Ev>:
        PersistentData() : PersistentDataFile(&sleepHelperData.header, sizeof(SleepHelperData), SAVED_DATA_MAGIC, SAVED_DATA_VERSION) {};

        /**
         * @brief Destructor
         */
        virtual ~PersistentData() {};
   d8018:	b510      	push	{r4, lr}
    class PersistentDataFile : public PersistentDataBase {
   d801a:	4b07      	ldr	r3, [pc, #28]	; (d8038 <_ZN11SleepHelper14PersistentDataD1Ev+0x20>)
        virtual ~PersistentData() {};
   d801c:	4604      	mov	r4, r0
    class PersistentDataFile : public PersistentDataBase {
   d801e:	f840 3b20 	str.w	r3, [r0], #32
   d8022:	f006 fc29 	bl	de878 <_ZN6StringD1Ev>
            if (handle_) {
   d8026:	6860      	ldr	r0, [r4, #4]
    class PersistentDataBase : public SleepHelperRecursiveMutex {
   d8028:	4b04      	ldr	r3, [pc, #16]	; (d803c <_ZN11SleepHelper14PersistentDataD1Ev+0x24>)
   d802a:	6023      	str	r3, [r4, #0]
            if (handle_) {
   d802c:	b108      	cbz	r0, d8032 <_ZN11SleepHelper14PersistentDataD1Ev+0x1a>
                os_mutex_recursive_destroy(handle_);
   d802e:	f003 fe4f 	bl	dbcd0 <os_mutex_recursive_destroy>
        virtual ~PersistentData() {};
   d8032:	4620      	mov	r0, r4
   d8034:	bd10      	pop	{r4, pc}
   d8036:	bf00      	nop
   d8038:	000e2bb8 	.word	0x000e2bb8
   d803c:	000e2b98 	.word	0x000e2b98

000d8040 <_ZN11SleepHelper14PersistentDataD0Ev>:
   d8040:	b510      	push	{r4, lr}
   d8042:	4604      	mov	r4, r0
   d8044:	f7ff ffe8 	bl	d8018 <_ZN11SleepHelper14PersistentDataD1Ev>
   d8048:	4620      	mov	r0, r4
   d804a:	2150      	movs	r1, #80	; 0x50
   d804c:	f007 fa12 	bl	df474 <_ZdlPvj>
   d8050:	4620      	mov	r0, r4
   d8052:	bd10      	pop	{r4, pc}

000d8054 <_ZN11SleepHelper12SettingsFileD1Ev>:
        virtual ~SettingsFile() {};
   d8054:	b570      	push	{r4, r5, r6, lr}
   d8056:	4b10      	ldr	r3, [pc, #64]	; (d8098 <_ZN11SleepHelper12SettingsFileD1Ev+0x44>)
   d8058:	6003      	str	r3, [r0, #0]
   d805a:	4604      	mov	r4, r0
   d805c:	f500 60ba 	add.w	r0, r0, #1488	; 0x5d0
   d8060:	f006 fc0a 	bl	de878 <_ZN6StringD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d8064:	f8d4 55c4 	ldr.w	r5, [r4, #1476]	; 0x5c4
   d8068:	f8d4 65c8 	ldr.w	r6, [r4, #1480]	; 0x5c8
   d806c:	42ae      	cmp	r6, r5
   d806e:	d004      	beq.n	d807a <_ZN11SleepHelper12SettingsFileD1Ev+0x26>
    class function<_Res(_ArgTypes...)>
   d8070:	4628      	mov	r0, r5
   d8072:	f7fd f833 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d8076:	3510      	adds	r5, #16
   d8078:	e7f8      	b.n	d806c <_ZN11SleepHelper12SettingsFileD1Ev+0x18>
	_M_deallocate(_M_impl._M_start,
   d807a:	f8d4 05c4 	ldr.w	r0, [r4, #1476]	; 0x5c4
	if (__p)
   d807e:	b108      	cbz	r0, d8084 <_ZN11SleepHelper12SettingsFileD1Ev+0x30>
	::operator delete(__p);
   d8080:	f7fc f80d 	bl	d409e <_ZdlPv>
   d8084:	f104 0008 	add.w	r0, r4, #8
   d8088:	f7ff fed4 	bl	d7e34 <_ZN16JsonParserStaticILj622ELj50EED1Ev>
            if (handle_) {
   d808c:	6860      	ldr	r0, [r4, #4]
   d808e:	b108      	cbz	r0, d8094 <_ZN11SleepHelper12SettingsFileD1Ev+0x40>
                os_mutex_recursive_destroy(handle_);
   d8090:	f003 fe1e 	bl	dbcd0 <os_mutex_recursive_destroy>
        virtual ~SettingsFile() {};
   d8094:	4620      	mov	r0, r4
   d8096:	bd70      	pop	{r4, r5, r6, pc}
   d8098:	000e2b4c 	.word	0x000e2b4c

000d809c <_ZN11SleepHelper12SettingsFileD0Ev>:
   d809c:	b510      	push	{r4, lr}
   d809e:	4604      	mov	r4, r0
   d80a0:	f7ff ffd8 	bl	d8054 <_ZN11SleepHelper12SettingsFileD1Ev>
   d80a4:	4620      	mov	r0, r4
   d80a6:	f240 51e4 	movw	r1, #1508	; 0x5e4
   d80aa:	f007 f9e3 	bl	df474 <_ZdlPvj>
   d80ae:	4620      	mov	r0, r4
   d80b0:	bd10      	pop	{r4, pc}
	...

000d80b4 <_ZN8particle24SystemSleepConfigurationC1Ev>:
};

class SystemSleepConfiguration: protected SystemSleepConfigurationHelper {
public:
    // Constructor
    SystemSleepConfiguration()
   d80b4:	b510      	push	{r4, lr}
   d80b6:	4604      	mov	r4, r0
            : SystemSleepConfigurationHelper(&config_),
   d80b8:	3004      	adds	r0, #4
        : config_(config) {
   d80ba:	6020      	str	r0, [r4, #0]
              config_(),
              valid_(true) {
   d80bc:	2210      	movs	r2, #16
   d80be:	2100      	movs	r1, #0
   d80c0:	f007 ff90 	bl	dffe4 <memset>
   d80c4:	2301      	movs	r3, #1
   d80c6:	7523      	strb	r3, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d80c8:	4b02      	ldr	r3, [pc, #8]	; (d80d4 <_ZN8particle24SystemSleepConfigurationC1Ev+0x20>)
   d80ca:	6063      	str	r3, [r4, #4]
        config_.version = HAL_SLEEP_VERSION;
        config_.mode = HAL_SLEEP_MODE_NONE;
   d80cc:	2300      	movs	r3, #0
   d80ce:	7223      	strb	r3, [r4, #8]
        config_.flags = 0;
        config_.wakeup_sources = nullptr;
    }
   d80d0:	4620      	mov	r0, r4
   d80d2:	bd10      	pop	{r4, pc}
   d80d4:	00030010 	.word	0x00030010

000d80d8 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d80d8:	b538      	push	{r3, r4, r5, lr}
   d80da:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d80dc:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d80de:	b128      	cbz	r0, d80ec <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d80e0:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d80e2:	210c      	movs	r1, #12
   d80e4:	f007 f9c6 	bl	df474 <_ZdlPvj>
            wakeupSource = next;
   d80e8:	4628      	mov	r0, r5
        while (wakeupSource) {
   d80ea:	e7f8      	b.n	d80de <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d80ec:	4620      	mov	r0, r4
   d80ee:	bd38      	pop	{r3, r4, r5, pc}

000d80f0 <_ZN8particle24SystemSleepConfiguration8durationEm>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d80f0:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d80f2:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d80f4:	4605      	mov	r5, r0
   d80f6:	460e      	mov	r6, r1
        if (valid_) {
   d80f8:	b1cb      	cbz	r3, d812e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d80fa:	6803      	ldr	r3, [r0, #0]
   d80fc:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d80fe:	b123      	cbz	r3, d810a <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d8100:	889a      	ldrh	r2, [r3, #4]
   d8102:	2a04      	cmp	r2, #4
   d8104:	d017      	beq.n	d8136 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d8106:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d8108:	e7f9      	b.n	d80fe <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d810a:	490c      	ldr	r1, [pc, #48]	; (d813c <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d810c:	2010      	movs	r0, #16
   d810e:	f007 f9b3 	bl	df478 <_ZnwjRKSt9nothrow_t>
   d8112:	4604      	mov	r4, r0
   d8114:	b168      	cbz	r0, d8132 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d8116:	2210      	movs	r2, #16
   d8118:	2100      	movs	r1, #0
   d811a:	f007 ff63 	bl	dffe4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d811e:	4b08      	ldr	r3, [pc, #32]	; (d8140 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d8120:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d8122:	2304      	movs	r3, #4
   d8124:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d8126:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d8128:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d812a:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d812e:	4628      	mov	r0, r5
   d8130:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d8132:	7528      	strb	r0, [r5, #20]
                return *this;
   d8134:	e7fb      	b.n	d812e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d8136:	60de      	str	r6, [r3, #12]
                return *this;
   d8138:	e7f9      	b.n	d812e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d813a:	bf00      	nop
   d813c:	000e2f30 	.word	0x000e2f30
   d8140:	00030010 	.word	0x00030010

000d8144 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
   d8144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d8146:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
   d8148:	4605      	mov	r5, r0
   d814a:	460f      	mov	r7, r1
   d814c:	4616      	mov	r6, r2
        if (valid_) {
   d814e:	b1b3      	cbz	r3, d817e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d8150:	6803      	ldr	r3, [r0, #0]
   d8152:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d8154:	b1ab      	cbz	r3, d8182 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
            if (start->type == type) {
   d8156:	889a      	ldrh	r2, [r3, #4]
   d8158:	2a0e      	cmp	r2, #14
   d815a:	d006      	beq.n	d816a <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x26>
            start = start->next;
   d815c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d815e:	e7f9      	b.n	d8154 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x10>
                    if (networkWakeup->flags != flags.value()) {
                        networkWakeup->flags |= flags.value();
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   d8160:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d8162:	b173      	cbz	r3, d8182 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
            if (start->type == type) {
   d8164:	889a      	ldrh	r2, [r3, #4]
   d8166:	2a0e      	cmp	r2, #14
   d8168:	d1fa      	bne.n	d8160 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x1c>
            while (wakeup) {
   d816a:	b153      	cbz	r3, d8182 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
                if (networkWakeup->index == netif) {
   d816c:	7b1a      	ldrb	r2, [r3, #12]
   d816e:	42ba      	cmp	r2, r7
   d8170:	d1f6      	bne.n	d8160 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x1c>
                    if (networkWakeup->flags != flags.value()) {
   d8172:	89da      	ldrh	r2, [r3, #14]
   d8174:	8831      	ldrh	r1, [r6, #0]
   d8176:	428a      	cmp	r2, r1
   d8178:	d001      	beq.n	d817e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
                        networkWakeup->flags |= flags.value();
   d817a:	430a      	orrs	r2, r1
   d817c:	81da      	strh	r2, [r3, #14]
            wakeupSource->index = static_cast<network_interface_index>(netif);
            wakeupSource->flags = flags.value();
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d817e:	4628      	mov	r0, r5
   d8180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   d8182:	490b      	ldr	r1, [pc, #44]	; (d81b0 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x6c>)
   d8184:	2014      	movs	r0, #20
   d8186:	f007 f977 	bl	df478 <_ZnwjRKSt9nothrow_t>
   d818a:	4604      	mov	r4, r0
   d818c:	b170      	cbz	r0, d81ac <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x68>
   d818e:	2214      	movs	r2, #20
   d8190:	2100      	movs	r1, #0
   d8192:	f007 ff27 	bl	dffe4 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d8196:	4b07      	ldr	r3, [pc, #28]	; (d81b4 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x70>)
   d8198:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d819a:	230e      	movs	r3, #14
   d819c:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d819e:	692b      	ldr	r3, [r5, #16]
   d81a0:	60a3      	str	r3, [r4, #8]
            wakeupSource->flags = flags.value();
   d81a2:	8833      	ldrh	r3, [r6, #0]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   d81a4:	7327      	strb	r7, [r4, #12]
            wakeupSource->flags = flags.value();
   d81a6:	81e3      	strh	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d81a8:	612c      	str	r4, [r5, #16]
   d81aa:	e7e8      	b.n	d817e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
                valid_ = false;
   d81ac:	7528      	strb	r0, [r5, #20]
                return *this;
   d81ae:	e7e6      	b.n	d817e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
   d81b0:	000e2f30 	.word	0x000e2f30
   d81b4:	00030010 	.word	0x00030010

000d81b8 <_ZN5spark9JSONValue9parseCopyEPKc>:
inline spark::JSONValue spark::JSONValue::parseCopy(const char *json) {
   d81b8:	b513      	push	{r0, r1, r4, lr}
   d81ba:	4604      	mov	r4, r0
    return parseCopy(json, strlen(json));
   d81bc:	4608      	mov	r0, r1
   d81be:	9101      	str	r1, [sp, #4]
   d81c0:	f007 ff9b 	bl	e00fa <strlen>
   d81c4:	9901      	ldr	r1, [sp, #4]
   d81c6:	4602      	mov	r2, r0
   d81c8:	4620      	mov	r0, r4
   d81ca:	f005 fa3f 	bl	dd64c <_ZN5spark9JSONValue9parseCopyEPKcj>
}
   d81ce:	4620      	mov	r0, r4
   d81d0:	b002      	add	sp, #8
   d81d2:	bd10      	pop	{r4, pc}

000d81d4 <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   d81d4:	b513      	push	{r0, r1, r4, lr}
   d81d6:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   d81d8:	4608      	mov	r0, r1
   d81da:	9101      	str	r1, [sp, #4]
   d81dc:	f007 ff8d 	bl	e00fa <strlen>
   d81e0:	9901      	ldr	r1, [sp, #4]
   d81e2:	4602      	mov	r2, r0
   d81e4:	4620      	mov	r0, r4
}
   d81e6:	b002      	add	sp, #8
   d81e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   d81ec:	f005 b9fa 	b.w	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>

000d81f0 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>:
        void lock() const { 
   d81f0:	b510      	push	{r4, lr}
            if (!handle_) {
   d81f2:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   d81f4:	4604      	mov	r4, r0
            if (!handle_) {
   d81f6:	b90b      	cbnz	r3, d81fc <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   d81f8:	f003 fd62 	bl	dbcc0 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   d81fc:	6820      	ldr	r0, [r4, #0]
        }
   d81fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   d8202:	f003 bd6d 	b.w	dbce0 <os_mutex_recursive_lock>

000d8206 <_ZN11SleepHelper18PersistentDataBase4loadEv>:
bool SleepHelper::PersistentDataBase::load() {
   d8206:	b510      	push	{r4, lr}
   d8208:	4604      	mov	r4, r0
      { _M_device.lock(); }
   d820a:	3004      	adds	r0, #4
   d820c:	f7ff fff0 	bl	d81f0 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   d8210:	6823      	ldr	r3, [r4, #0]
   d8212:	68e1      	ldr	r1, [r4, #12]
   d8214:	691b      	ldr	r3, [r3, #16]
   d8216:	4620      	mov	r0, r4
   d8218:	4798      	blx	r3
   d821a:	b918      	cbnz	r0, d8224 <_ZN11SleepHelper18PersistentDataBase4loadEv+0x1e>
            initialize();
   d821c:	6823      	ldr	r3, [r4, #0]
   d821e:	4620      	mov	r0, r4
   d8220:	695b      	ldr	r3, [r3, #20]
   d8222:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   d8224:	6860      	ldr	r0, [r4, #4]
   d8226:	f003 fd63 	bl	dbcf0 <os_mutex_recursive_unlock>
}
   d822a:	2001      	movs	r0, #1
   d822c:	bd10      	pop	{r4, pc}

000d822e <_ZN11SleepHelper18PersistentDataFile4loadEv>:
bool SleepHelper::PersistentDataFile::load() {
   d822e:	b570      	push	{r4, r5, r6, lr}
   d8230:	4604      	mov	r4, r0
   d8232:	3004      	adds	r0, #4
   d8234:	f7ff ffdc 	bl	d81f0 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDONLY);
   d8238:	6a20      	ldr	r0, [r4, #32]
   d823a:	2100      	movs	r1, #0
   d823c:	f008 fe9c 	bl	e0f78 <open>
        if (fd != -1) {
   d8240:	1c43      	adds	r3, r0, #1
        int fd = open(path, O_RDONLY);
   d8242:	4605      	mov	r5, r0
        if (fd != -1) {
   d8244:	d108      	bne.n	d8258 <_ZN11SleepHelper18PersistentDataFile4loadEv+0x2a>
            initialize();
   d8246:	6823      	ldr	r3, [r4, #0]
   d8248:	4620      	mov	r0, r4
   d824a:	695b      	ldr	r3, [r3, #20]
   d824c:	4798      	blx	r3
   d824e:	6860      	ldr	r0, [r4, #4]
   d8250:	f003 fd4e 	bl	dbcf0 <os_mutex_recursive_unlock>
}
   d8254:	2001      	movs	r0, #1
   d8256:	bd70      	pop	{r4, r5, r6, pc}
            dataSize = read(fd, savedDataHeader, savedDataSize);
   d8258:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   d825c:	f008 fea0 	bl	e0fa0 <read>
            if (validate(dataSize)) {
   d8260:	6823      	ldr	r3, [r4, #0]
            dataSize = read(fd, savedDataHeader, savedDataSize);
   d8262:	4601      	mov	r1, r0
            if (validate(dataSize)) {
   d8264:	691b      	ldr	r3, [r3, #16]
   d8266:	4620      	mov	r0, r4
   d8268:	4798      	blx	r3
   d826a:	4606      	mov	r6, r0
            close(fd);
   d826c:	4628      	mov	r0, r5
   d826e:	f008 fe69 	bl	e0f44 <close>
        if (!loaded) {
   d8272:	2e00      	cmp	r6, #0
   d8274:	d0e7      	beq.n	d8246 <_ZN11SleepHelper18PersistentDataFile4loadEv+0x18>
   d8276:	e7ea      	b.n	d824e <_ZN11SleepHelper18PersistentDataFile4loadEv+0x20>

000d8278 <_ZN11SleepHelper18PersistentDataFile4saveEv>:
void SleepHelper::PersistentDataFile::save() {
   d8278:	b538      	push	{r3, r4, r5, lr}
   d827a:	4604      	mov	r4, r0
   d827c:	3004      	adds	r0, #4
   d827e:	f7ff ffb7 	bl	d81f0 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDWR | O_CREAT | O_TRUNC, 0666);
   d8282:	6a20      	ldr	r0, [r4, #32]
   d8284:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   d8288:	f240 6102 	movw	r1, #1538	; 0x602
   d828c:	f008 fe74 	bl	e0f78 <open>
        if (fd != -1) {            
   d8290:	1c43      	adds	r3, r0, #1
        int fd = open(path, O_RDWR | O_CREAT | O_TRUNC, 0666);
   d8292:	4605      	mov	r5, r0
        if (fd != -1) {            
   d8294:	d006      	beq.n	d82a4 <_ZN11SleepHelper18PersistentDataFile4saveEv+0x2c>
            write(fd, savedDataHeader, savedDataSize);
   d8296:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   d829a:	f008 fe93 	bl	e0fc4 <write>
            close(fd);
   d829e:	4628      	mov	r0, r5
   d82a0:	f008 fe50 	bl	e0f44 <close>
   d82a4:	6860      	ldr	r0, [r4, #4]
}
   d82a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d82aa:	f003 bd21 	b.w	dbcf0 <os_mutex_recursive_unlock>
	...

000d82b0 <_ZN11SleepHelper20eventsEnablePriorityEy>:
    const SleepHelperWakeEvents *ev = _findWakeEvent(flag);
   d82b0:	4a0b      	ldr	r2, [pc, #44]	; (d82e0 <_ZN11SleepHelper20eventsEnablePriorityEy+0x30>)
int SleepHelper::eventsEnablePriority(uint64_t flag) {
   d82b2:	b570      	push	{r4, r5, r6, lr}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d82b4:	2300      	movs	r3, #0
int SleepHelper::eventsEnablePriority(uint64_t flag) {
   d82b6:	4604      	mov	r4, r0
   d82b8:	460d      	mov	r5, r1
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d82ba:	4616      	mov	r6, r2
        if (_wakeEvents[ii].flag == flag) {
   d82bc:	e9d2 0100 	ldrd	r0, r1, [r2]
   d82c0:	428d      	cmp	r5, r1
   d82c2:	bf08      	it	eq
   d82c4:	4284      	cmpeq	r4, r0
   d82c6:	d103      	bne.n	d82d0 <_ZN11SleepHelper20eventsEnablePriorityEy+0x20>
        return ev->priority;
   d82c8:	eb06 1343 	add.w	r3, r6, r3, lsl #5
   d82cc:	6998      	ldr	r0, [r3, #24]
}
   d82ce:	bd70      	pop	{r4, r5, r6, pc}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d82d0:	3301      	adds	r3, #1
   d82d2:	2b04      	cmp	r3, #4
   d82d4:	f102 0220 	add.w	r2, r2, #32
   d82d8:	d1f0      	bne.n	d82bc <_ZN11SleepHelper20eventsEnablePriorityEy+0xc>
        return 0;
   d82da:	2000      	movs	r0, #0
   d82dc:	e7f7      	b.n	d82ce <_ZN11SleepHelper20eventsEnablePriorityEy+0x1e>
   d82de:	bf00      	nop
   d82e0:	2003e4a8 	.word	0x2003e4a8

000d82e4 <_ZN11SleepHelper16eventsEnableNameEy>:
    const SleepHelperWakeEvents *ev = _findWakeEvent(flag);
   d82e4:	4a0b      	ldr	r2, [pc, #44]	; (d8314 <_ZN11SleepHelper16eventsEnableNameEy+0x30>)
const char *SleepHelper::eventsEnableName(uint64_t flag) {
   d82e6:	b570      	push	{r4, r5, r6, lr}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d82e8:	2300      	movs	r3, #0
const char *SleepHelper::eventsEnableName(uint64_t flag) {
   d82ea:	4604      	mov	r4, r0
   d82ec:	460d      	mov	r5, r1
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d82ee:	4616      	mov	r6, r2
        if (_wakeEvents[ii].flag == flag) {
   d82f0:	e9d2 0100 	ldrd	r0, r1, [r2]
   d82f4:	428d      	cmp	r5, r1
   d82f6:	bf08      	it	eq
   d82f8:	4284      	cmpeq	r4, r0
   d82fa:	d103      	bne.n	d8304 <_ZN11SleepHelper16eventsEnableNameEy+0x20>
        operator const char*() const { return c_str(); }
   d82fc:	eb06 1343 	add.w	r3, r6, r3, lsl #5
   d8300:	6898      	ldr	r0, [r3, #8]
}
   d8302:	bd70      	pop	{r4, r5, r6, pc}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d8304:	3301      	adds	r3, #1
   d8306:	2b04      	cmp	r3, #4
   d8308:	f102 0220 	add.w	r2, r2, #32
   d830c:	d1f0      	bne.n	d82f0 <_ZN11SleepHelper16eventsEnableNameEy+0xc>
        return "";
   d830e:	4802      	ldr	r0, [pc, #8]	; (d8318 <_ZN11SleepHelper16eventsEnableNameEy+0x34>)
   d8310:	e7f7      	b.n	d8302 <_ZN11SleepHelper16eventsEnableNameEy+0x1e>
   d8312:	bf00      	nop
   d8314:	2003e4a8 	.word	0x2003e4a8
   d8318:	000e291f 	.word	0x000e291f

000d831c <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev>:
    class AppCallbackWithState {
   d831c:	b570      	push	{r4, r5, r6, lr}
   d831e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   d8320:	68c0      	ldr	r0, [r0, #12]
	if (__p)
   d8322:	b108      	cbz	r0, d8328 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0xc>
   d8324:	f7fb febb 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d8328:	e9d4 5600 	ldrd	r5, r6, [r4]
   d832c:	42ae      	cmp	r6, r5
   d832e:	d004      	beq.n	d833a <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0x1e>
   d8330:	4628      	mov	r0, r5
   d8332:	f7fc fed3 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d8336:	3510      	adds	r5, #16
   d8338:	e7f8      	b.n	d832c <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0x10>
	_M_deallocate(_M_impl._M_start,
   d833a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d833c:	b108      	cbz	r0, d8342 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0x26>
   d833e:	f7fb feae 	bl	d409e <_ZdlPv>
   d8342:	4620      	mov	r0, r4
   d8344:	bd70      	pop	{r4, r5, r6, pc}

000d8346 <_ZN11SleepHelper11PublishDataD1Ev>:
    };

    /**
     * @brief Class to hold data to be published by Particle.publish
     */
    class PublishData {
   d8346:	b510      	push	{r4, lr}
   d8348:	4604      	mov	r4, r0
   d834a:	3010      	adds	r0, #16
   d834c:	f006 fa94 	bl	de878 <_ZN6StringD1Ev>
   d8350:	4620      	mov	r0, r4
   d8352:	f006 fa91 	bl	de878 <_ZN6StringD1Ev>
   d8356:	4620      	mov	r0, r4
   d8358:	bd10      	pop	{r4, pc}
	...

000d835c <_ZN11SleepHelper12EventHistory12removeEventsEv>:
    }

    return bResult;
}

void SleepHelper::EventHistory::removeEvents() {
   d835c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8360:	b0a3      	sub	sp, #140	; 0x8c
   d8362:	4604      	mov	r4, r0
   d8364:	f7ff ff44 	bl	d81f0 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
    WITH_LOCK(*this) {
        const size_t bufSize = 512;
        char *buf = (char *)malloc(bufSize);
   d8368:	f44f 7000 	mov.w	r0, #512	; 0x200
   d836c:	f004 f830 	bl	dc3d0 <malloc>
        if (buf) {
   d8370:	4605      	mov	r5, r0
   d8372:	2800      	cmp	r0, #0
   d8374:	d05b      	beq.n	d842e <_ZN11SleepHelper12EventHistory12removeEventsEv+0xd2>
            int fdsrc = open(path, O_RDONLY);
   d8376:	6860      	ldr	r0, [r4, #4]
   d8378:	2100      	movs	r1, #0
   d837a:	f008 fdfd 	bl	e0f78 <open>
            if (fdsrc != -1) {
   d837e:	1c43      	adds	r3, r0, #1
            int fdsrc = open(path, O_RDONLY);
   d8380:	4606      	mov	r6, r0
            if (fdsrc != -1) {
   d8382:	d051      	beq.n	d8428 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xcc>
                struct stat sb;
                fstat(fdsrc, &sb);
   d8384:	a90c      	add	r1, sp, #48	; 0x30
   d8386:	f008 fde5 	bl	e0f54 <fstat>
                size_t fileSize = sb.st_size;  
   d838a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
                if (removeOffset < fileSize) {
   d838e:	69a1      	ldr	r1, [r4, #24]
   d8390:	4549      	cmp	r1, r9
   d8392:	d252      	bcs.n	d843a <_ZN11SleepHelper12EventHistory12removeEventsEv+0xde>
                    lseek(fdsrc, removeOffset, SEEK_SET);
   d8394:	2200      	movs	r2, #0
   d8396:	4630      	mov	r0, r6
   d8398:	f008 fde4 	bl	e0f64 <lseek>

                    String tempPath = String(path) + ".tmp";
   d839c:	1d21      	adds	r1, r4, #4
   d839e:	a804      	add	r0, sp, #16
   d83a0:	f006 fb00 	bl	de9a4 <_ZN6StringC1ERKS_>
	StringSumHelper(const String &s) : String(s) {}
   d83a4:	a904      	add	r1, sp, #16
   d83a6:	a808      	add	r0, sp, #32
   d83a8:	f006 fafc 	bl	de9a4 <_ZN6StringC1ERKS_>
   d83ac:	4926      	ldr	r1, [pc, #152]	; (d8448 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xec>)
   d83ae:	a808      	add	r0, sp, #32
   d83b0:	f006 fb51 	bl	dea56 <_ZplRK15StringSumHelperPKc>
   d83b4:	4601      	mov	r1, r0
   d83b6:	4668      	mov	r0, sp
   d83b8:	f006 faf4 	bl	de9a4 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d83bc:	a808      	add	r0, sp, #32
   d83be:	f006 fa5b 	bl	de878 <_ZN6StringD1Ev>
   d83c2:	a804      	add	r0, sp, #16
   d83c4:	f006 fa58 	bl	de878 <_ZN6StringD1Ev>
                    int fddst = open(tempPath, O_RDWR | O_CREAT | O_TRUNC, 0666);
   d83c8:	9800      	ldr	r0, [sp, #0]
   d83ca:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   d83ce:	f240 6102 	movw	r1, #1538	; 0x602
   d83d2:	f008 fdd1 	bl	e0f78 <open>
                    if (fddst) {
   d83d6:	4607      	mov	r7, r0
   d83d8:	b1b8      	cbz	r0, d840a <_ZN11SleepHelper12EventHistory12removeEventsEv+0xae>
                        while(removeOffset < fileSize) {
   d83da:	69a3      	ldr	r3, [r4, #24]
   d83dc:	454b      	cmp	r3, r9
   d83de:	d211      	bcs.n	d8404 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xa8>
                            int count = read(fdsrc, buf, bufSize);
   d83e0:	f44f 7200 	mov.w	r2, #512	; 0x200
   d83e4:	4629      	mov	r1, r5
   d83e6:	4630      	mov	r0, r6
   d83e8:	f008 fdda 	bl	e0fa0 <read>
                            if (count > 0) {
   d83ec:	f1b0 0800 	subs.w	r8, r0, #0
   d83f0:	dd08      	ble.n	d8404 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xa8>
                                write(fddst, buf, count);
   d83f2:	4642      	mov	r2, r8
   d83f4:	4629      	mov	r1, r5
   d83f6:	4638      	mov	r0, r7
   d83f8:	f008 fde4 	bl	e0fc4 <write>
                                removeOffset += count;
   d83fc:	69a0      	ldr	r0, [r4, #24]
   d83fe:	4440      	add	r0, r8
   d8400:	61a0      	str	r0, [r4, #24]
                        while(removeOffset < fileSize) {
   d8402:	e7ea      	b.n	d83da <_ZN11SleepHelper12EventHistory12removeEventsEv+0x7e>
                            }
                            else {
                                break;
                            }
                        }
                        close(fddst);
   d8404:	4638      	mov	r0, r7
   d8406:	f008 fd9d 	bl	e0f44 <close>
                    }
                    close(fdsrc);
   d840a:	4630      	mov	r0, r6
   d840c:	f008 fd9a 	bl	e0f44 <close>

                    // Swap src and dst files
                    unlink(path);
   d8410:	6860      	ldr	r0, [r4, #4]
   d8412:	f008 fdcf 	bl	e0fb4 <unlink>
                    rename(tempPath, path);
   d8416:	6861      	ldr	r1, [r4, #4]
   d8418:	9800      	ldr	r0, [sp, #0]
   d841a:	f007 fe0f 	bl	e003c <rename>
                    removeOffset = 0;
   d841e:	2300      	movs	r3, #0
   d8420:	61a3      	str	r3, [r4, #24]
                    String tempPath = String(path) + ".tmp";
   d8422:	4668      	mov	r0, sp
   d8424:	f006 fa28 	bl	de878 <_ZN6StringD1Ev>
                else {
                    unlink(path);
                    hasEvents = false;
                }
            }
            free(buf);
   d8428:	4628      	mov	r0, r5
   d842a:	f003 ffd9 	bl	dc3e0 <free>
            os_mutex_recursive_unlock(handle_); 
   d842e:	6820      	ldr	r0, [r4, #0]
   d8430:	f003 fc5e 	bl	dbcf0 <os_mutex_recursive_unlock>
        }

    }
}
   d8434:	b023      	add	sp, #140	; 0x8c
   d8436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    unlink(path);
   d843a:	6860      	ldr	r0, [r4, #4]
   d843c:	f008 fdba 	bl	e0fb4 <unlink>
                    hasEvents = false;
   d8440:	2300      	movs	r3, #0
   d8442:	7563      	strb	r3, [r4, #21]
   d8444:	e7f0      	b.n	d8428 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xcc>
   d8446:	bf00      	nop
   d8448:	000e28c0 	.word	0x000e28c0

000d844c <_ZN11SleepHelper12EventHistory12getHasEventsEv>:

bool SleepHelper::EventHistory::getHasEvents() { 
   d844c:	b530      	push	{r4, r5, lr}
    if (firstRun) {
   d844e:	7d03      	ldrb	r3, [r0, #20]
bool SleepHelper::EventHistory::getHasEvents() { 
   d8450:	b097      	sub	sp, #92	; 0x5c
   d8452:	4604      	mov	r4, r0
    if (firstRun) {
   d8454:	b163      	cbz	r3, d8470 <_ZN11SleepHelper12EventHistory12getHasEventsEv+0x24>
        firstRun = false;
   d8456:	2500      	movs	r5, #0
   d8458:	7505      	strb	r5, [r0, #20]

        struct stat sb;
        int res = stat(path, &sb);
   d845a:	4669      	mov	r1, sp
   d845c:	6840      	ldr	r0, [r0, #4]
   d845e:	f003 fd8f 	bl	dbf80 <stat>

        hasEvents = (res == 0 && sb.st_size > 0);
   d8462:	b920      	cbnz	r0, d846e <_ZN11SleepHelper12EventHistory12getHasEventsEv+0x22>
   d8464:	9d04      	ldr	r5, [sp, #16]
   d8466:	2d00      	cmp	r5, #0
   d8468:	bfd4      	ite	le
   d846a:	2500      	movle	r5, #0
   d846c:	2501      	movgt	r5, #1
   d846e:	7565      	strb	r5, [r4, #21]
    }
    return hasEvents; 
};
   d8470:	7d60      	ldrb	r0, [r4, #21]
   d8472:	b017      	add	sp, #92	; 0x5c
   d8474:	bd30      	pop	{r4, r5, pc}

000d8476 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d8476:	680b      	ldr	r3, [r1, #0]
   d8478:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d847a:	b113      	cbz	r3, d8482 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d847c:	685a      	ldr	r2, [r3, #4]
   d847e:	3201      	adds	r2, #1
   d8480:	605a      	str	r2, [r3, #4]
      }
   d8482:	4770      	bx	lr

000d8484 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>:
void SleepHelper::JSONCopy(const char *src, JSONWriter &writer) {
    JSONCopy(JSONValue::parseCopy(src), writer);
}

// [static]
void SleepHelper::JSONCopy(const JSONValue &src, JSONWriter &writer) {
   d8484:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8486:	b08f      	sub	sp, #60	; 0x3c
   d8488:	4604      	mov	r4, r0
   d848a:	460d      	mov	r5, r1
    return type() == JSON_TYPE_ARRAY;
   d848c:	f004 fd81 	bl	dcf92 <_ZNK5spark9JSONValue4typeEv>
    // This is inefficient and annoying, but there's no way to insert pre-formatted JSON into a JSONWriter
    if (src.isArray()) {
   d8490:	2805      	cmp	r0, #5
   d8492:	d132      	bne.n	d84fa <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x76>
        writer.beginArray();
   d8494:	4628      	mov	r0, r5
   d8496:	f004 ffb6 	bl	dd406 <_ZN5spark10JSONWriter10beginArrayEv>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d849a:	4621      	mov	r1, r4
        JSONArrayIterator(value.t_, value.d_) {
   d849c:	68a6      	ldr	r6, [r4, #8]
   d849e:	f851 3b04 	ldr.w	r3, [r1], #4
   d84a2:	9304      	str	r3, [sp, #16]
   d84a4:	a805      	add	r0, sp, #20
   d84a6:	f7ff ffe6 	bl	d8476 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d84aa:	aa04      	add	r2, sp, #16
   d84ac:	4631      	mov	r1, r6
   d84ae:	a808      	add	r0, sp, #32
   d84b0:	f004 ff63 	bl	dd37a <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d84b4:	a805      	add	r0, sp, #20
   d84b6:	f7fb ffbe 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

        JSONArrayIterator iter(src);
        while(iter.next()) {
   d84ba:	a808      	add	r0, sp, #32
   d84bc:	f004 ff74 	bl	dd3a8 <_ZN5spark17JSONArrayIterator4nextEv>
   d84c0:	b198      	cbz	r0, d84ea <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x66>
    return JSONValue(v_, d_);
   d84c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d84c4:	9b08      	ldr	r3, [sp, #32]
   d84c6:	9302      	str	r3, [sp, #8]
   d84c8:	a909      	add	r1, sp, #36	; 0x24
   d84ca:	a803      	add	r0, sp, #12
   d84cc:	f7ff ffd3 	bl	d8476 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d84d0:	4621      	mov	r1, r4
   d84d2:	aa02      	add	r2, sp, #8
   d84d4:	a804      	add	r0, sp, #16
   d84d6:	f004 fd4e 	bl	dcf76 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d84da:	a803      	add	r0, sp, #12
   d84dc:	f7fb ffab 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            JSONCopy(iter.value(), writer);
   d84e0:	4629      	mov	r1, r5
   d84e2:	a804      	add	r0, sp, #16
   d84e4:	f7ff ffce 	bl	d8484 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>
   d84e8:	e7e4      	b.n	d84b4 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x30>
        }

        writer.endArray();
   d84ea:	4628      	mov	r0, r5
   d84ec:	f004 ff6c 	bl	dd3c8 <_ZN5spark10JSONWriter8endArrayEv>
   d84f0:	a809      	add	r0, sp, #36	; 0x24
   d84f2:	f7fb ffa0 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        else {
            writer.value(d);
        }
    }
}
   d84f6:	b00f      	add	sp, #60	; 0x3c
   d84f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return type() == JSON_TYPE_OBJECT;
   d84fa:	4620      	mov	r0, r4
   d84fc:	f004 fd49 	bl	dcf92 <_ZNK5spark9JSONValue4typeEv>
    if (src.isObject()) {
   d8500:	2806      	cmp	r0, #6
   d8502:	d130      	bne.n	d8566 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0xe2>
        writer.beginObject();
   d8504:	4628      	mov	r0, r5
   d8506:	f004 ff8a 	bl	dd41e <_ZN5spark10JSONWriter11beginObjectEv>
        JSONObjectIterator iter(src);
   d850a:	4621      	mov	r1, r4
   d850c:	a808      	add	r0, sp, #32
   d850e:	f7fd ff79 	bl	d6404 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        while(iter.next()) {
   d8512:	a808      	add	r0, sp, #32
   d8514:	f004 ff1e 	bl	dd354 <_ZN5spark18JSONObjectIterator4nextEv>
   d8518:	b308      	cbz	r0, d855e <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0xda>
            writer.name((const char *) iter.name());
   d851a:	a908      	add	r1, sp, #32
   d851c:	a804      	add	r0, sp, #16
   d851e:	f7fd ff82 	bl	d6426 <_ZNK5spark18JSONObjectIterator4nameEv>
   d8522:	9906      	ldr	r1, [sp, #24]
   d8524:	4628      	mov	r0, r5
   d8526:	f7ff fe55 	bl	d81d4 <_ZN5spark10JSONWriter4nameEPKc>
   d852a:	a805      	add	r0, sp, #20
   d852c:	f7fb ff83 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONValue(v_, d_);
   d8530:	9c0c      	ldr	r4, [sp, #48]	; 0x30
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8532:	9b08      	ldr	r3, [sp, #32]
   d8534:	9302      	str	r3, [sp, #8]
   d8536:	a909      	add	r1, sp, #36	; 0x24
   d8538:	a803      	add	r0, sp, #12
   d853a:	f7ff ff9c 	bl	d8476 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d853e:	aa02      	add	r2, sp, #8
   d8540:	4621      	mov	r1, r4
   d8542:	a804      	add	r0, sp, #16
   d8544:	f004 fd17 	bl	dcf76 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8548:	a803      	add	r0, sp, #12
   d854a:	f7fb ff74 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            JSONCopy(iter.value(), writer);
   d854e:	a804      	add	r0, sp, #16
   d8550:	4629      	mov	r1, r5
   d8552:	f7ff ff97 	bl	d8484 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>
   d8556:	a805      	add	r0, sp, #20
   d8558:	f7fb ff6d 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        while(iter.next()) {
   d855c:	e7d9      	b.n	d8512 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x8e>
        writer.endObject();
   d855e:	4628      	mov	r0, r5
   d8560:	f004 ff3b 	bl	dd3da <_ZN5spark10JSONWriter9endObjectEv>
   d8564:	e7c4      	b.n	d84f0 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x6c>
    return type() == JSON_TYPE_STRING;
   d8566:	4620      	mov	r0, r4
   d8568:	f004 fd13 	bl	dcf92 <_ZNK5spark9JSONValue4typeEv>
    if (src.isString()) {
   d856c:	2804      	cmp	r0, #4
   d856e:	d11a      	bne.n	d85a6 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x122>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8570:	4621      	mov	r1, r4
    return JSONString(t_, d_);
   d8572:	68a6      	ldr	r6, [r4, #8]
   d8574:	f851 3b04 	ldr.w	r3, [r1], #4
   d8578:	9304      	str	r3, [sp, #16]
   d857a:	a805      	add	r0, sp, #20
   d857c:	f7ff ff7b 	bl	d8476 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d8580:	aa04      	add	r2, sp, #16
   d8582:	4631      	mov	r1, r6
   d8584:	a808      	add	r0, sp, #32
   d8586:	f004 fea9 	bl	dd2dc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d858a:	a805      	add	r0, sp, #20
   d858c:	f7fb ff53 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        writer.value(src.toString().data());
   d8590:	990a      	ldr	r1, [sp, #40]	; 0x28
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d8592:	9101      	str	r1, [sp, #4]
   d8594:	4608      	mov	r0, r1
   d8596:	f007 fdb0 	bl	e00fa <strlen>
   d859a:	9901      	ldr	r1, [sp, #4]
   d859c:	4602      	mov	r2, r0
   d859e:	4628      	mov	r0, r5
   d85a0:	f005 f830 	bl	dd604 <_ZN5spark10JSONWriter5valueEPKcj>
   d85a4:	e7a4      	b.n	d84f0 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x6c>
    return type() == JSON_TYPE_BOOL;
   d85a6:	4620      	mov	r0, r4
   d85a8:	f004 fcf3 	bl	dcf92 <_ZNK5spark9JSONValue4typeEv>
    if (src.isBool()) {
   d85ac:	2802      	cmp	r0, #2
        writer.value(src.toBool());
   d85ae:	4620      	mov	r0, r4
    if (src.isBool()) {
   d85b0:	d106      	bne.n	d85c0 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x13c>
        writer.value(src.toBool());
   d85b2:	f004 fd17 	bl	dcfe4 <_ZNK5spark9JSONValue6toBoolEv>
   d85b6:	4601      	mov	r1, r0
   d85b8:	4628      	mov	r0, r5
   d85ba:	f004 ff3d 	bl	dd438 <_ZN5spark10JSONWriter5valueEb>
   d85be:	e79a      	b.n	d84f6 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>
    return type() == JSON_TYPE_NULL;
   d85c0:	f004 fce7 	bl	dcf92 <_ZNK5spark9JSONValue4typeEv>
    if (src.isNull()) {
   d85c4:	2801      	cmp	r0, #1
   d85c6:	d103      	bne.n	d85d0 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x14c>
        writer.nullValue();
   d85c8:	4628      	mov	r0, r5
   d85ca:	f004 ffa3 	bl	dd514 <_ZN5spark10JSONWriter9nullValueEv>
   d85ce:	e792      	b.n	d84f6 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>
        double d = src.toDouble();
   d85d0:	4620      	mov	r0, r4
   d85d2:	f004 fd69 	bl	dd0a8 <_ZNK5spark9JSONValue8toDoubleEv>
   d85d6:	ec57 6b10 	vmov	r6, r7, d0
        if (d == std::floor(d)) {
   d85da:	f006 ff5d 	bl	df498 <floor>
   d85de:	4630      	mov	r0, r6
   d85e0:	ec53 2b10 	vmov	r2, r3, d0
   d85e4:	4639      	mov	r1, r7
   d85e6:	f007 fbff 	bl	dfde8 <__aeabi_dcmpeq>
   d85ea:	b140      	cbz	r0, d85fe <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x17a>
            writer.value((int)d);
   d85ec:	4639      	mov	r1, r7
   d85ee:	4630      	mov	r0, r6
   d85f0:	f007 fc2c 	bl	dfe4c <__aeabi_d2iz>
   d85f4:	4601      	mov	r1, r0
   d85f6:	4628      	mov	r0, r5
   d85f8:	f004 ff36 	bl	dd468 <_ZN5spark10JSONWriter5valueEi>
   d85fc:	e77b      	b.n	d84f6 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>
            writer.value(d);
   d85fe:	ec47 6b10 	vmov	d0, r6, r7
   d8602:	4628      	mov	r0, r5
   d8604:	f004 ff72 	bl	dd4ec <_ZN5spark10JSONWriter5valueEd>
}
   d8608:	e775      	b.n	d84f6 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>

000d860a <_ZN11SleepHelper8JSONCopyEPKcRN5spark10JSONWriterE>:
void SleepHelper::JSONCopy(const char *src, JSONWriter &writer) {
   d860a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d860c:	460c      	mov	r4, r1
    JSONCopy(JSONValue::parseCopy(src), writer);
   d860e:	4601      	mov	r1, r0
   d8610:	a801      	add	r0, sp, #4
   d8612:	f7ff fdd1 	bl	d81b8 <_ZN5spark9JSONValue9parseCopyEPKc>
   d8616:	4621      	mov	r1, r4
   d8618:	a801      	add	r0, sp, #4
   d861a:	f7ff ff33 	bl	d8484 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>
   d861e:	a802      	add	r0, sp, #8
   d8620:	f7fb ff09 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8624:	b004      	add	sp, #16
   d8626:	bd10      	pop	{r4, pc}

000d8628 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb>:
bool SleepHelper::EventHistory::getEvents(JSONWriter &writer, size_t maxSize, bool bRemoveEvents) {
   d8628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d862c:	b085      	sub	sp, #20
    if (maxSize < 2 || !hasEvents) {
   d862e:	2a01      	cmp	r2, #1
bool SleepHelper::EventHistory::getEvents(JSONWriter &writer, size_t maxSize, bool bRemoveEvents) {
   d8630:	4605      	mov	r5, r0
   d8632:	4688      	mov	r8, r1
   d8634:	4617      	mov	r7, r2
   d8636:	9303      	str	r3, [sp, #12]
    if (maxSize < 2 || !hasEvents) {
   d8638:	d804      	bhi.n	d8644 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x1c>
        return false;
   d863a:	2600      	movs	r6, #0
}
   d863c:	4630      	mov	r0, r6
   d863e:	b005      	add	sp, #20
   d8640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (maxSize < 2 || !hasEvents) {
   d8644:	7d46      	ldrb	r6, [r0, #21]
   d8646:	2e00      	cmp	r6, #0
   d8648:	d0f7      	beq.n	d863a <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x12>
    char *buf = (char *)malloc(maxSize);
   d864a:	4610      	mov	r0, r2
   d864c:	f003 fec0 	bl	dc3d0 <malloc>
    if (!buf) {
   d8650:	4604      	mov	r4, r0
   d8652:	2800      	cmp	r0, #0
   d8654:	d0f1      	beq.n	d863a <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x12>
   d8656:	4628      	mov	r0, r5
   d8658:	f7ff fdca 	bl	d81f0 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDONLY);
   d865c:	6868      	ldr	r0, [r5, #4]
   d865e:	2100      	movs	r1, #0
   d8660:	f008 fc8a 	bl	e0f78 <open>
        if (fd != -1) {
   d8664:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
        int fd = open(path, O_RDONLY);
   d8668:	4681      	mov	r9, r0
        if (fd != -1) {
   d866a:	d026      	beq.n	d86ba <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x92>
            int dataSize = read(fd, buf, maxSize);
   d866c:	463a      	mov	r2, r7
   d866e:	4621      	mov	r1, r4
   d8670:	f008 fc96 	bl	e0fa0 <read>
            if (dataSize > 0) {
   d8674:	f1b0 0a00 	subs.w	sl, r0, #0
   d8678:	dd1d      	ble.n	d86b6 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x8e>
   d867a:	eb04 030a 	add.w	r3, r4, sl
                while(dataSize > 0 && buf[dataSize - 1] != '\n') {
   d867e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   d8682:	2a0a      	cmp	r2, #10
   d8684:	d01b      	beq.n	d86be <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x96>
   d8686:	f1ba 0a01 	subs.w	sl, sl, #1
   d868a:	d1f8      	bne.n	d867e <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x56>
    bool bResult = false;
   d868c:	4656      	mov	r6, sl
   d868e:	e002      	b.n	d8696 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x6e>
                    writer.endArray();
   d8690:	4640      	mov	r0, r8
   d8692:	f004 fe99 	bl	dd3c8 <_ZN5spark10JSONWriter8endArrayEv>
            close(fd);
   d8696:	4648      	mov	r0, r9
   d8698:	f008 fc54 	bl	e0f44 <close>
   d869c:	6828      	ldr	r0, [r5, #0]
   d869e:	f003 fb27 	bl	dbcf0 <os_mutex_recursive_unlock>
    free(buf);
   d86a2:	4620      	mov	r0, r4
   d86a4:	f003 fe9c 	bl	dc3e0 <free>
    if (bRemoveEvents) {
   d86a8:	9b03      	ldr	r3, [sp, #12]
   d86aa:	2b00      	cmp	r3, #0
   d86ac:	d0c6      	beq.n	d863c <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x14>
        removeEvents();
   d86ae:	4628      	mov	r0, r5
   d86b0:	f7ff fe54 	bl	d835c <_ZN11SleepHelper12EventHistory12removeEventsEv>
   d86b4:	e7c2      	b.n	d863c <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x14>
    bool bResult = false;
   d86b6:	2600      	movs	r6, #0
   d86b8:	e7ed      	b.n	d8696 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x6e>
   d86ba:	2600      	movs	r6, #0
   d86bc:	e7ee      	b.n	d869c <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x74>
                    writer.beginArray();
   d86be:	4640      	mov	r0, r8
   d86c0:	f004 fea1 	bl	dd406 <_ZN5spark10JSONWriter10beginArrayEv>
                    char *end = &buf[dataSize];
   d86c4:	eb04 030a 	add.w	r3, r4, sl
   d86c8:	9302      	str	r3, [sp, #8]
   d86ca:	46a2      	mov	sl, r4
                    size_t bytesUsed = 2;
   d86cc:	f04f 0b02 	mov.w	fp, #2
                    while(cur < end) {
   d86d0:	9b02      	ldr	r3, [sp, #8]
   d86d2:	4553      	cmp	r3, sl
   d86d4:	d9dc      	bls.n	d8690 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x68>
                        char *lf = strchr(cur, '\n');
   d86d6:	210a      	movs	r1, #10
   d86d8:	4650      	mov	r0, sl
   d86da:	f007 fcc8 	bl	e006e <strchr>
                        *lf = 0;
   d86de:	f04f 0200 	mov.w	r2, #0
                        char *lf = strchr(cur, '\n');
   d86e2:	9001      	str	r0, [sp, #4]
                        *lf = 0;
   d86e4:	7002      	strb	r2, [r0, #0]
                        bytesUsed += strlen(cur) + 1;
   d86e6:	4650      	mov	r0, sl
   d86e8:	f007 fd07 	bl	e00fa <strlen>
   d86ec:	3001      	adds	r0, #1
   d86ee:	4483      	add	fp, r0
                        if (bytesUsed > maxSize) {
   d86f0:	455f      	cmp	r7, fp
   d86f2:	d3cd      	bcc.n	d8690 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x68>
                        SleepHelper::JSONCopy(cur, writer);                        
   d86f4:	4641      	mov	r1, r8
   d86f6:	4650      	mov	r0, sl
   d86f8:	f7ff ff87 	bl	d860a <_ZN11SleepHelper8JSONCopyEPKcRN5spark10JSONWriterE>
                        cur = lf + 1;
   d86fc:	9b01      	ldr	r3, [sp, #4]
   d86fe:	f103 0a01 	add.w	sl, r3, #1
                        removeOffset = (cur - buf);                        
   d8702:	ebaa 0104 	sub.w	r1, sl, r4
   d8706:	61a9      	str	r1, [r5, #24]
                    while(cur < end) {
   d8708:	e7e2      	b.n	d86d0 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0xa8>
	...

000d870c <_ZN16JsonParserStaticILj622ELj50EEC1Ev>:
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   d870c:	b513      	push	{r0, r1, r4, lr}
   d870e:	2332      	movs	r3, #50	; 0x32
   d8710:	9300      	str	r3, [sp, #0]
   d8712:	f240 226e 	movw	r2, #622	; 0x26e
   d8716:	f500 7327 	add.w	r3, r0, #668	; 0x29c
   d871a:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   d871e:	4604      	mov	r4, r0
   d8720:	f7fc fefc 	bl	d551c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   d8724:	4b02      	ldr	r3, [pc, #8]	; (d8730 <_ZN16JsonParserStaticILj622ELj50EEC1Ev+0x24>)
   d8726:	6023      	str	r3, [r4, #0]
   d8728:	4620      	mov	r0, r4
   d872a:	b002      	add	sp, #8
   d872c:	bd10      	pop	{r4, pc}
   d872e:	bf00      	nop
   d8730:	000e2b3c 	.word	0x000e2b3c

000d8734 <_ZN11SleepHelperC1Ev>:
SleepHelper::SleepHelper() : appLog("app.sleep") {
   d8734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8738:	4b83      	ldr	r3, [pc, #524]	; (d8948 <_ZN11SleepHelperC1Ev+0x214>)
        SettingsFile() {};
   d873a:	4e84      	ldr	r6, [pc, #528]	; (d894c <_ZN11SleepHelperC1Ev+0x218>)
   d873c:	6003      	str	r3, [r0, #0]
   d873e:	4604      	mov	r4, r0
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   d8740:	2500      	movs	r5, #0
        SettingsFile() {};
   d8742:	4b83      	ldr	r3, [pc, #524]	; (d8950 <_ZN11SleepHelperC1Ev+0x21c>)
   d8744:	6043      	str	r3, [r0, #4]
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   d8746:	6085      	str	r5, [r0, #8]
        SettingsFile() {};
   d8748:	f204 58d4 	addw	r8, r4, #1492	; 0x5d4
   d874c:	300c      	adds	r0, #12
   d874e:	f7ff ffdd 	bl	d870c <_ZN16JsonParserStaticILj622ELj50EEC1Ev>
   d8752:	4631      	mov	r1, r6
	: _M_start(), _M_finish(), _M_end_of_storage()
   d8754:	f8c4 55c8 	str.w	r5, [r4, #1480]	; 0x5c8
   d8758:	f8c4 55cc 	str.w	r5, [r4, #1484]	; 0x5cc
   d875c:	f8c4 55d0 	str.w	r5, [r4, #1488]	; 0x5d0
   d8760:	4640      	mov	r0, r8
   d8762:	f006 f8d4 	bl	de90e <_ZN6StringC1EPKc>
        PersistentData() : PersistentDataFile(&sleepHelperData.header, sizeof(SleepHelperData), SAVED_DATA_MAGIC, SAVED_DATA_VERSION) {};
   d8766:	f504 63c3 	add.w	r3, r4, #1560	; 0x618
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   d876a:	f8c4 35f0 	str.w	r3, [r4, #1520]	; 0x5f0
   d876e:	2320      	movs	r3, #32
   d8770:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
   d8774:	4b77      	ldr	r3, [pc, #476]	; (d8954 <_ZN11SleepHelperC1Ev+0x220>)
   d8776:	f8c4 35f8 	str.w	r3, [r4, #1528]	; 0x5f8
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   d877a:	4b77      	ldr	r3, [pc, #476]	; (d8958 <_ZN11SleepHelperC1Ev+0x224>)
   d877c:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   d8780:	f04f 0901 	mov.w	r9, #1
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   d8784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8788:	f504 67c1 	add.w	r7, r4, #1544	; 0x608
   d878c:	4631      	mov	r1, r6
   d878e:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
        SettingsFile() {};
   d8792:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   d8796:	f8c4 55ec 	str.w	r5, [r4, #1516]	; 0x5ec
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   d879a:	f8a4 95fc 	strh.w	r9, [r4, #1532]	; 0x5fc
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   d879e:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
   d87a2:	4638      	mov	r0, r7
   d87a4:	f006 f8b3 	bl	de90e <_ZN6StringC1EPKc>
        PersistentData() : PersistentDataFile(&sleepHelperData.header, sizeof(SleepHelperData), SAVED_DATA_MAGIC, SAVED_DATA_VERSION) {};
   d87a8:	4b6c      	ldr	r3, [pc, #432]	; (d895c <_ZN11SleepHelperC1Ev+0x228>)
   d87aa:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
   d87ae:	f8c4 5638 	str.w	r5, [r4, #1592]	; 0x638
   d87b2:	f8c4 563c 	str.w	r5, [r4, #1596]	; 0x63c
   d87b6:	f8c4 5640 	str.w	r5, [r4, #1600]	; 0x640
   d87ba:	f8c4 5644 	str.w	r5, [r4, #1604]	; 0x644
   d87be:	f8c4 5648 	str.w	r5, [r4, #1608]	; 0x648
   d87c2:	f8c4 564c 	str.w	r5, [r4, #1612]	; 0x64c
   d87c6:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
   d87ca:	f8c4 5654 	str.w	r5, [r4, #1620]	; 0x654
   d87ce:	f8c4 5658 	str.w	r5, [r4, #1624]	; 0x658
   d87d2:	f204 605c 	addw	r0, r4, #1628	; 0x65c
   d87d6:	f7ff fc6d 	bl	d80b4 <_ZN8particle24SystemSleepConfigurationC1Ev>
   d87da:	4961      	ldr	r1, [pc, #388]	; (d8960 <_ZN11SleepHelperC1Ev+0x22c>)
   d87dc:	f8c4 5698 	str.w	r5, [r4, #1688]	; 0x698
   d87e0:	f8c4 569c 	str.w	r5, [r4, #1692]	; 0x69c
   d87e4:	f8c4 56a0 	str.w	r5, [r4, #1696]	; 0x6a0
   d87e8:	f8c4 56a4 	str.w	r5, [r4, #1700]	; 0x6a4
   d87ec:	f8c4 56a8 	str.w	r5, [r4, #1704]	; 0x6a8
   d87f0:	f8c4 56ac 	str.w	r5, [r4, #1708]	; 0x6ac
   d87f4:	f8c4 56b0 	str.w	r5, [r4, #1712]	; 0x6b0
   d87f8:	f8c4 56b4 	str.w	r5, [r4, #1716]	; 0x6b4
   d87fc:	f8c4 56b8 	str.w	r5, [r4, #1720]	; 0x6b8
   d8800:	f8c4 56bc 	str.w	r5, [r4, #1724]	; 0x6bc
   d8804:	f8c4 56c0 	str.w	r5, [r4, #1728]	; 0x6c0
   d8808:	f8c4 56c4 	str.w	r5, [r4, #1732]	; 0x6c4
   d880c:	f8c4 56c8 	str.w	r5, [r4, #1736]	; 0x6c8
   d8810:	f8c4 56cc 	str.w	r5, [r4, #1740]	; 0x6cc
   d8814:	f8c4 56d0 	str.w	r5, [r4, #1744]	; 0x6d0
   d8818:	f8c4 56d4 	str.w	r5, [r4, #1748]	; 0x6d4
   d881c:	f8c4 56d8 	str.w	r5, [r4, #1752]	; 0x6d8
   d8820:	f8c4 56dc 	str.w	r5, [r4, #1756]	; 0x6dc
   d8824:	f8c4 56e0 	str.w	r5, [r4, #1760]	; 0x6e0
   d8828:	f8c4 56e4 	str.w	r5, [r4, #1764]	; 0x6e4
   d882c:	f8c4 56e8 	str.w	r5, [r4, #1768]	; 0x6e8
   d8830:	f8c4 56ec 	str.w	r5, [r4, #1772]	; 0x6ec
   d8834:	f8c4 56f0 	str.w	r5, [r4, #1776]	; 0x6f0
   d8838:	f8c4 56f4 	str.w	r5, [r4, #1780]	; 0x6f4
   d883c:	f8c4 56f8 	str.w	r5, [r4, #1784]	; 0x6f8
   d8840:	f8c4 56fc 	str.w	r5, [r4, #1788]	; 0x6fc
   d8844:	f8c4 5700 	str.w	r5, [r4, #1792]	; 0x700
   d8848:	f8c4 5704 	str.w	r5, [r4, #1796]	; 0x704
   d884c:	f8c4 5708 	str.w	r5, [r4, #1800]	; 0x708
   d8850:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
   d8854:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
   d8858:	f8c4 5714 	str.w	r5, [r4, #1812]	; 0x714
   d885c:	f504 60e5 	add.w	r0, r4, #1832	; 0x728
   d8860:	f8c4 5718 	str.w	r5, [r4, #1816]	; 0x718
   d8864:	f8c4 571c 	str.w	r5, [r4, #1820]	; 0x71c
   d8868:	f8c4 5720 	str.w	r5, [r4, #1824]	; 0x720
   d886c:	f8c4 5724 	str.w	r5, [r4, #1828]	; 0x724
   d8870:	f006 f84d 	bl	de90e <_ZN6StringC1EPKc>
        EventHistory() {};
   d8874:	4631      	mov	r1, r6
   d8876:	f8c4 5738 	str.w	r5, [r4, #1848]	; 0x738
   d887a:	f8c4 573c 	str.w	r5, [r4, #1852]	; 0x73c
   d887e:	f8c4 5740 	str.w	r5, [r4, #1856]	; 0x740
   d8882:	f8c4 5744 	str.w	r5, [r4, #1860]	; 0x744
   d8886:	f8c4 5748 	str.w	r5, [r4, #1864]	; 0x748
   d888a:	f8c4 574c 	str.w	r5, [r4, #1868]	; 0x74c
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   d888e:	f8c4 5750 	str.w	r5, [r4, #1872]	; 0x750
        EventHistory() {};
   d8892:	f204 7054 	addw	r0, r4, #1876	; 0x754
   d8896:	f006 f83a 	bl	de90e <_ZN6StringC1EPKc>
        EventCombiner() {};
   d889a:	4631      	mov	r1, r6
        EventHistory() {};
   d889c:	f8a4 9764 	strh.w	r9, [r4, #1892]	; 0x764
   d88a0:	f8c4 5768 	str.w	r5, [r4, #1896]	; 0x768
        EventCombiner() {};
   d88a4:	f204 706c 	addw	r0, r4, #1900	; 0x76c
   d88a8:	f006 f831 	bl	de90e <_ZN6StringC1EPKc>
   d88ac:	f504 63f2 	add.w	r3, r4, #1936	; 0x790
   d88b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d88b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d88b8:	f8c4 577c 	str.w	r5, [r4, #1916]	; 0x77c
   d88bc:	f8c4 5780 	str.w	r5, [r4, #1920]	; 0x780
   d88c0:	f8c4 5784 	str.w	r5, [r4, #1924]	; 0x784
   d88c4:	f8c4 5788 	str.w	r5, [r4, #1928]	; 0x788
   d88c8:	e9c3 0100 	strd	r0, r1, [r3]
   d88cc:	f504 63f3 	add.w	r3, r4, #1944	; 0x798
   d88d0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   d88d4:	2100      	movs	r1, #0
   d88d6:	e9c3 0100 	strd	r0, r1, [r3]
   d88da:	4b22      	ldr	r3, [pc, #136]	; (d8964 <_ZN11SleepHelperC1Ev+0x230>)
   d88dc:	f8c4 37a0 	str.w	r3, [r4, #1952]	; 0x7a0
   d88e0:	f242 7310 	movw	r3, #10000	; 0x2710
   d88e4:	f8c4 37a4 	str.w	r3, [r4, #1956]	; 0x7a4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d88e8:	4b1f      	ldr	r3, [pc, #124]	; (d8968 <_ZN11SleepHelperC1Ev+0x234>)
   d88ea:	f8c4 37a8 	str.w	r3, [r4, #1960]	; 0x7a8
	    _M_invoker = &_My_handler::_M_invoke;
   d88ee:	4b1f      	ldr	r3, [pc, #124]	; (d896c <_ZN11SleepHelperC1Ev+0x238>)
   d88f0:	f8c4 37b4 	str.w	r3, [r4, #1972]	; 0x7b4
	    _M_manager = &_My_handler::_M_manager;
   d88f4:	4b1e      	ldr	r3, [pc, #120]	; (d8970 <_ZN11SleepHelperC1Ev+0x23c>)
   d88f6:	f8c4 37b0 	str.w	r3, [r4, #1968]	; 0x7b0
   d88fa:	4b1e      	ldr	r3, [pc, #120]	; (d8974 <_ZN11SleepHelperC1Ev+0x240>)
   d88fc:	f8c4 37e0 	str.w	r3, [r4, #2016]	; 0x7e0
   d8900:	4b1d      	ldr	r3, [pc, #116]	; (d8978 <_ZN11SleepHelperC1Ev+0x244>)
   d8902:	f8c4 37e4 	str.w	r3, [r4, #2020]	; 0x7e4
            this->path = path; 
   d8906:	491d      	ldr	r1, [pc, #116]	; (d897c <_ZN11SleepHelperC1Ev+0x248>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d8908:	f8c4 57ac 	str.w	r5, [r4, #1964]	; 0x7ac
   d890c:	f8c4 57b8 	str.w	r5, [r4, #1976]	; 0x7b8
   d8910:	f8c4 57bc 	str.w	r5, [r4, #1980]	; 0x7bc
   d8914:	f8c4 57c0 	str.w	r5, [r4, #1984]	; 0x7c0
   d8918:	f8c4 57c4 	str.w	r5, [r4, #1988]	; 0x7c4
   d891c:	f8c4 57c8 	str.w	r5, [r4, #1992]	; 0x7c8
   d8920:	f8c4 57cc 	str.w	r5, [r4, #1996]	; 0x7cc
   d8924:	f8a4 57d0 	strh.w	r5, [r4, #2000]	; 0x7d0
   d8928:	f8c4 57d4 	str.w	r5, [r4, #2004]	; 0x7d4
   d892c:	f8c4 57d8 	str.w	r5, [r4, #2008]	; 0x7d8
   d8930:	f8c4 57dc 	str.w	r5, [r4, #2012]	; 0x7dc
   d8934:	4640      	mov	r0, r8
   d8936:	f006 f848 	bl	de9ca <_ZN6StringaSEPKc>
            this->path = path; 
   d893a:	4911      	ldr	r1, [pc, #68]	; (d8980 <_ZN11SleepHelperC1Ev+0x24c>)
   d893c:	4638      	mov	r0, r7
   d893e:	f006 f844 	bl	de9ca <_ZN6StringaSEPKc>
}
   d8942:	4620      	mov	r0, r4
   d8944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8948:	000e2b88 	.word	0x000e2b88
   d894c:	000e291f 	.word	0x000e291f
   d8950:	000e2b4c 	.word	0x000e2b4c
   d8954:	d87cb6ce 	.word	0xd87cb6ce
   d8958:	000e2bb8 	.word	0x000e2bb8
   d895c:	000e2b5c 	.word	0x000e2b5c
   d8960:	000e28c5 	.word	0x000e28c5
   d8964:	000be6e0 	.word	0x000be6e0
   d8968:	000d8f59 	.word	0x000d8f59
   d896c:	000d7fe1 	.word	0x000d7fe1
   d8970:	000d7e1b 	.word	0x000d7e1b
   d8974:	2003e538 	.word	0x2003e538
   d8978:	000e28d1 	.word	0x000e28d1
   d897c:	000e28db 	.word	0x000e28db
   d8980:	000e28f3 	.word	0x000e28f3

000d8984 <_ZN11SleepHelper8instanceEv>:
SleepHelper &SleepHelper::instance() {
   d8984:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d8986:	4c07      	ldr	r4, [pc, #28]	; (d89a4 <_ZN11SleepHelper8instanceEv+0x20>)
   d8988:	6823      	ldr	r3, [r4, #0]
   d898a:	b943      	cbnz	r3, d899e <_ZN11SleepHelper8instanceEv+0x1a>
        _instance = new SleepHelper();
   d898c:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
   d8990:	f7fb fb81 	bl	d4096 <_Znwj>
   d8994:	4605      	mov	r5, r0
   d8996:	b108      	cbz	r0, d899c <_ZN11SleepHelper8instanceEv+0x18>
   d8998:	f7ff fecc 	bl	d8734 <_ZN11SleepHelperC1Ev>
   d899c:	6025      	str	r5, [r4, #0]
}
   d899e:	6820      	ldr	r0, [r4, #0]
   d89a0:	bd38      	pop	{r3, r4, r5, pc}
   d89a2:	bf00      	nop
   d89a4:	2003e52c 	.word	0x2003e52c

000d89a8 <_ZN11SleepHelper12EventHistory8addEventEPKc>:
void SleepHelper::EventHistory::addEvent(const char *jsonObj) {
   d89a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d89aa:	460e      	mov	r6, r1
   d89ac:	4605      	mov	r5, r0
    if (SleepHelper::instance().logEnableEnabled(SleepHelper::logEnabledHistoryData)) {
   d89ae:	f7ff ffe9 	bl	d8984 <_ZN11SleepHelper8instanceEv>
     * @param flag The flag bit such as logEnabledPublish. 
     * @return true Logging enabled for this flag
     * @return false Logging disabled for this flag
     */
    bool logEnableEnabled(uint64_t flag) const {
        return (logEnabled & flag) != 0;
   d89b2:	f8d0 179c 	ldr.w	r1, [r0, #1948]	; 0x79c
   d89b6:	2400      	movs	r4, #0
   d89b8:	4622      	mov	r2, r4
   d89ba:	f401 7300 	and.w	r3, r1, #512	; 0x200
   d89be:	4313      	orrs	r3, r2
   d89c0:	d01e      	beq.n	d8a00 <_ZN11SleepHelper12EventHistory8addEventEPKc+0x58>
        SleepHelper::instance().appLog.trace("EventHistory::addEvent");
   d89c2:	f7ff ffdf 	bl	d8984 <_ZN11SleepHelper8instanceEv>
   d89c6:	4921      	ldr	r1, [pc, #132]	; (d8a4c <_ZN11SleepHelper12EventHistory8addEventEPKc+0xa4>)
   d89c8:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   d89cc:	f7fb fe6a 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
        SleepHelper::instance().appLog.write(LOG_LEVEL_TRACE, jsonObj, strlen(jsonObj));
   d89d0:	f7ff ffd8 	bl	d8984 <_ZN11SleepHelper8instanceEv>
   d89d4:	4607      	mov	r7, r0
   d89d6:	4630      	mov	r0, r6
   d89d8:	f007 fb8f 	bl	e00fa <strlen>
        log_write(level, name_, data, size, nullptr);
   d89dc:	9400      	str	r4, [sp, #0]
   d89de:	4603      	mov	r3, r0
   d89e0:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
   d89e4:	4632      	mov	r2, r6
   d89e6:	2001      	movs	r0, #1
   d89e8:	f003 fbba 	bl	dc160 <log_write>
        SleepHelper::instance().appLog.write(LOG_LEVEL_TRACE, "\r\n", 2);
   d89ec:	f7ff ffca 	bl	d8984 <_ZN11SleepHelper8instanceEv>
   d89f0:	9400      	str	r4, [sp, #0]
   d89f2:	f8d0 17e4 	ldr.w	r1, [r0, #2020]	; 0x7e4
   d89f6:	4a16      	ldr	r2, [pc, #88]	; (d8a50 <_ZN11SleepHelper12EventHistory8addEventEPKc+0xa8>)
   d89f8:	2302      	movs	r3, #2
   d89fa:	2001      	movs	r0, #1
   d89fc:	f003 fbb0 	bl	dc160 <log_write>
   d8a00:	4628      	mov	r0, r5
   d8a02:	f7ff fbf5 	bl	d81f0 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDWR | O_CREAT | O_APPEND, 0666);
   d8a06:	6868      	ldr	r0, [r5, #4]
   d8a08:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   d8a0c:	f240 210a 	movw	r1, #522	; 0x20a
   d8a10:	f008 fab2 	bl	e0f78 <open>
        if (fd != -1) {
   d8a14:	1c43      	adds	r3, r0, #1
        int fd = open(path, O_RDWR | O_CREAT | O_APPEND, 0666);
   d8a16:	4604      	mov	r4, r0
        if (fd != -1) {
   d8a18:	d011      	beq.n	d8a3e <_ZN11SleepHelper12EventHistory8addEventEPKc+0x96>
            write(fd, jsonObj, strlen(jsonObj));
   d8a1a:	4630      	mov	r0, r6
   d8a1c:	f007 fb6d 	bl	e00fa <strlen>
   d8a20:	4631      	mov	r1, r6
   d8a22:	4602      	mov	r2, r0
   d8a24:	4620      	mov	r0, r4
   d8a26:	f008 facd 	bl	e0fc4 <write>
            write(fd, "\n", 1);
   d8a2a:	490a      	ldr	r1, [pc, #40]	; (d8a54 <_ZN11SleepHelper12EventHistory8addEventEPKc+0xac>)
   d8a2c:	2201      	movs	r2, #1
   d8a2e:	4620      	mov	r0, r4
   d8a30:	f008 fac8 	bl	e0fc4 <write>
            close(fd);
   d8a34:	4620      	mov	r0, r4
   d8a36:	f008 fa85 	bl	e0f44 <close>
            hasEvents = true;
   d8a3a:	2301      	movs	r3, #1
   d8a3c:	756b      	strb	r3, [r5, #21]
            os_mutex_recursive_unlock(handle_); 
   d8a3e:	6828      	ldr	r0, [r5, #0]
}
   d8a40:	b003      	add	sp, #12
   d8a42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8a46:	f003 b953 	b.w	dbcf0 <os_mutex_recursive_unlock>
   d8a4a:	bf00      	nop
   d8a4c:	000e2906 	.word	0x000e2906
   d8a50:	000e291d 	.word	0x000e291d
   d8a54:	000e291e 	.word	0x000e291e

000d8a58 <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE>:
void SleepHelper::EventHistory::addEvent(std::function<void(JSONWriter &)>callback) {
   d8a58:	b570      	push	{r4, r5, r6, lr}
   d8a5a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
    memset(buf, 0, sizeof(buf));
   d8a5e:	ae06      	add	r6, sp, #24
void SleepHelper::EventHistory::addEvent(std::function<void(JSONWriter &)>callback) {
   d8a60:	460c      	mov	r4, r1
    memset(buf, 0, sizeof(buf));
   d8a62:	f240 226e 	movw	r2, #622	; 0x26e
   d8a66:	2100      	movs	r1, #0
void SleepHelper::EventHistory::addEvent(std::function<void(JSONWriter &)>callback) {
   d8a68:	4605      	mov	r5, r0
    memset(buf, 0, sizeof(buf));
   d8a6a:	4630      	mov	r0, r6
   d8a6c:	f007 faba 	bl	dffe4 <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   d8a70:	4a0f      	ldr	r2, [pc, #60]	; (d8ab0 <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE+0x58>)
   d8a72:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d8a74:	2300      	movs	r3, #0
        n_(0) {
   d8a76:	f240 226d 	movw	r2, #621	; 0x26d
    writer.beginObject();
   d8a7a:	a801      	add	r0, sp, #4
   d8a7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
        state_(BEGIN) {
   d8a80:	f88d 3008 	strb.w	r3, [sp, #8]
        n_(0) {
   d8a84:	9603      	str	r6, [sp, #12]
   d8a86:	f004 fcca 	bl	dd41e <_ZN5spark10JSONWriter11beginObjectEv>
      if (_M_empty())
   d8a8a:	68a3      	ldr	r3, [r4, #8]
   d8a8c:	b90b      	cbnz	r3, d8a92 <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE+0x3a>
	__throw_bad_function_call();
   d8a8e:	f006 fcfd 	bl	df48c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8a92:	68e3      	ldr	r3, [r4, #12]
   d8a94:	a901      	add	r1, sp, #4
   d8a96:	4620      	mov	r0, r4
   d8a98:	4798      	blx	r3
    writer.endObject();
   d8a9a:	a801      	add	r0, sp, #4
   d8a9c:	f004 fc9d 	bl	dd3da <_ZN5spark10JSONWriter9endObjectEv>
    addEvent(buf);
   d8aa0:	4631      	mov	r1, r6
   d8aa2:	4628      	mov	r0, r5
   d8aa4:	f7ff ff80 	bl	d89a8 <_ZN11SleepHelper12EventHistory8addEventEPKc>
}
   d8aa8:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   d8aac:	bd70      	pop	{r4, r5, r6, pc}
   d8aae:	bf00      	nop
   d8ab0:	000e2d4c 	.word	0x000e2d4c

000d8ab4 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>:
        T getValue(size_t offset) const {
   d8ab4:	b538      	push	{r3, r4, r5, lr}
   d8ab6:	4604      	mov	r4, r0
   d8ab8:	3004      	adds	r0, #4
   d8aba:	460d      	mov	r5, r1
   d8abc:	f7ff fb98 	bl	d81f0 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   d8ac0:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   d8ac2:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   d8ac4:	3b04      	subs	r3, #4
   d8ac6:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   d8ac8:	bf26      	itte	cs
   d8aca:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   d8acc:	595d      	ldrcs	r5, [r3, r5]
            T result = 0;
   d8ace:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   d8ad0:	f003 f90e 	bl	dbcf0 <os_mutex_recursive_unlock>
        }
   d8ad4:	4628      	mov	r0, r5
   d8ad6:	bd38      	pop	{r3, r4, r5, pc}

000d8ad8 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>:
        void setValue(size_t offset, T value)  {
   d8ad8:	b570      	push	{r4, r5, r6, lr}
   d8ada:	4604      	mov	r4, r0
   d8adc:	3004      	adds	r0, #4
   d8ade:	460d      	mov	r5, r1
   d8ae0:	4616      	mov	r6, r2
   d8ae2:	f7ff fb85 	bl	d81f0 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   d8ae6:	68e3      	ldr	r3, [r4, #12]
   d8ae8:	3b04      	subs	r3, #4
   d8aea:	42ab      	cmp	r3, r5
   d8aec:	d308      	bcc.n	d8b00 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_+0x28>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   d8aee:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   d8af0:	595a      	ldr	r2, [r3, r5]
   d8af2:	42b2      	cmp	r2, r6
   d8af4:	d004      	beq.n	d8b00 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_+0x28>
                        *(T *)p = value;
   d8af6:	515e      	str	r6, [r3, r5]
                        saveOrDefer();
   d8af8:	6823      	ldr	r3, [r4, #0]
   d8afa:	4620      	mov	r0, r4
   d8afc:	68db      	ldr	r3, [r3, #12]
   d8afe:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   d8b00:	6860      	ldr	r0, [r4, #4]
        }
   d8b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   d8b06:	f003 b8f3 	b.w	dbcf0 <os_mutex_recursive_unlock>

000d8b0a <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   d8b0a:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d8b0c:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   d8b10:	4604      	mov	r4, r0
   d8b12:	42ae      	cmp	r6, r5
   d8b14:	d004      	beq.n	d8b20 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev+0x16>
    class function<_Res(_ArgTypes...)>
   d8b16:	4628      	mov	r0, r5
   d8b18:	f7fc fae0 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d8b1c:	3510      	adds	r5, #16
   d8b1e:	e7f8      	b.n	d8b12 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   d8b20:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d8b22:	b108      	cbz	r0, d8b28 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev+0x1e>
   d8b24:	f7fb fabb 	bl	d409e <_ZdlPv>
      }
   d8b28:	4620      	mov	r0, r4
   d8b2a:	bd70      	pop	{r4, r5, r6, pc}

000d8b2c <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8b2c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8b2e:	2300      	movs	r3, #0
   d8b30:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8b32:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8b34:	4604      	mov	r4, r0
   d8b36:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8b38:	b12b      	cbz	r3, d8b46 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8b3a:	2202      	movs	r2, #2
   d8b3c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8b3e:	68eb      	ldr	r3, [r5, #12]
   d8b40:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8b42:	68ab      	ldr	r3, [r5, #8]
   d8b44:	60a3      	str	r3, [r4, #8]
    }
   d8b46:	4620      	mov	r0, r4
   d8b48:	bd38      	pop	{r3, r4, r5, pc}

000d8b4a <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d8b4a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8b4e:	4604      	mov	r4, r0
	  switch (__op)
   d8b50:	d008      	beq.n	d8b64 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   d8b52:	2a03      	cmp	r2, #3
   d8b54:	d012      	beq.n	d8b7c <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
   d8b56:	2a01      	cmp	r2, #1
   d8b58:	d101      	bne.n	d8b5e <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8b5a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b5c:	6003      	str	r3, [r0, #0]
	}
   d8b5e:	2000      	movs	r0, #0
   d8b60:	b003      	add	sp, #12
   d8b62:	bd30      	pop	{r4, r5, pc}
	  __dest._M_access<_Functor*>() =
   d8b64:	6809      	ldr	r1, [r1, #0]
   d8b66:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8b68:	2010      	movs	r0, #16
   d8b6a:	f7fb fa94 	bl	d4096 <_Znwj>
   d8b6e:	4605      	mov	r5, r0
   d8b70:	b110      	cbz	r0, d8b78 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2e>
   d8b72:	9901      	ldr	r1, [sp, #4]
   d8b74:	f7ff ffda 	bl	d8b2c <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
	  __dest._M_access<_Functor*>() =
   d8b78:	6025      	str	r5, [r4, #0]
	}
   d8b7a:	e7f0      	b.n	d8b5e <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8b7c:	6804      	ldr	r4, [r0, #0]
   d8b7e:	2c00      	cmp	r4, #0
   d8b80:	d0ed      	beq.n	d8b5e <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8b82:	4620      	mov	r0, r4
   d8b84:	f7fc faaa 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8b88:	2110      	movs	r1, #16
   d8b8a:	4620      	mov	r0, r4
   d8b8c:	f006 fc72 	bl	df474 <_ZdlPvj>
   d8b90:	e7e5      	b.n	d8b5e <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

000d8b92 <_ZNSt8functionIFbvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d8b92:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8b94:	2300      	movs	r3, #0
   d8b96:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8b98:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8b9a:	4604      	mov	r4, r0
   d8b9c:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8b9e:	b12b      	cbz	r3, d8bac <_ZNSt8functionIFbvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8ba0:	2202      	movs	r2, #2
   d8ba2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8ba4:	68eb      	ldr	r3, [r5, #12]
   d8ba6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8ba8:	68ab      	ldr	r3, [r5, #8]
   d8baa:	60a3      	str	r3, [r4, #8]
    }
   d8bac:	4620      	mov	r0, r4
   d8bae:	bd38      	pop	{r3, r4, r5, pc}

000d8bb0 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   d8bb0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8bb2:	2300      	movs	r3, #0
   d8bb4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8bb6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8bb8:	4604      	mov	r4, r0
   d8bba:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8bbc:	b12b      	cbz	r3, d8bca <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8bbe:	2202      	movs	r2, #2
   d8bc0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8bc2:	68eb      	ldr	r3, [r5, #12]
   d8bc4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8bc6:	68ab      	ldr	r3, [r5, #8]
   d8bc8:	60a3      	str	r3, [r4, #8]
    }
   d8bca:	4620      	mov	r0, r4
   d8bcc:	bd38      	pop	{r3, r4, r5, pc}

000d8bce <_ZNSt8functionIFbRiS0_EEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
   d8bce:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8bd0:	2300      	movs	r3, #0
   d8bd2:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8bd4:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8bd6:	4604      	mov	r4, r0
   d8bd8:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8bda:	b12b      	cbz	r3, d8be8 <_ZNSt8functionIFbRiS0_EEC1ERKS2_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8bdc:	2202      	movs	r2, #2
   d8bde:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8be0:	68eb      	ldr	r3, [r5, #12]
   d8be2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8be4:	68ab      	ldr	r3, [r5, #8]
   d8be6:	60a3      	str	r3, [r4, #8]
    }
   d8be8:	4620      	mov	r0, r4
   d8bea:	bd38      	pop	{r3, r4, r5, pc}

000d8bec <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_>:
    function<_Res(_ArgTypes...)>::
   d8bec:	b510      	push	{r4, lr}
      if (_M_empty())
   d8bee:	6884      	ldr	r4, [r0, #8]
   d8bf0:	b90c      	cbnz	r4, d8bf6 <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_+0xa>
	__throw_bad_function_call();
   d8bf2:	f006 fc4b 	bl	df48c <_ZSt25__throw_bad_function_callv>
    }
   d8bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8bfa:	68c3      	ldr	r3, [r0, #12]
   d8bfc:	4718      	bx	r3

000d8bfe <_ZNSt17_Function_handlerIFbRN5spark10JSONWriterERiEZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvS2_S3_EEEUlS2_S3_E_E9_M_invokeERKSt9_Any_dataS2_S3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8bfe:	b570      	push	{r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   d8c00:	6804      	ldr	r4, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8c02:	460d      	mov	r5, r1
                const char *name = eventsEnableName(flag);
   d8c04:	e9d4 0100 	ldrd	r0, r1, [r4]
   d8c08:	4616      	mov	r6, r2
   d8c0a:	f7ff fb6b 	bl	d82e4 <_ZN11SleepHelper16eventsEnableNameEy>
   d8c0e:	4601      	mov	r1, r0
                writer.name(name);
   d8c10:	4628      	mov	r0, r5
   d8c12:	f7ff fadf 	bl	d81d4 <_ZN5spark10JSONWriter4nameEPKc>
                priority = eventsEnablePriority(flag);
   d8c16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   d8c1a:	f7ff fb49 	bl	d82b0 <_ZN11SleepHelper20eventsEnablePriorityEy>
                fn(writer, priority);
   d8c1e:	4632      	mov	r2, r6
                priority = eventsEnablePriority(flag);
   d8c20:	6030      	str	r0, [r6, #0]
                fn(writer, priority);
   d8c22:	4629      	mov	r1, r5
   d8c24:	4620      	mov	r0, r4
   d8c26:	f7ff ffe1 	bl	d8bec <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_>
      }
   d8c2a:	2001      	movs	r0, #1
   d8c2c:	bd70      	pop	{r4, r5, r6, pc}

000d8c2e <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8c2e:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8c30:	2300      	movs	r3, #0
   d8c32:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8c34:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8c36:	4604      	mov	r4, r0
   d8c38:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8c3a:	b12b      	cbz	r3, d8c48 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8c3c:	2202      	movs	r2, #2
   d8c3e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8c40:	68eb      	ldr	r3, [r5, #12]
   d8c42:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8c44:	68ab      	ldr	r3, [r5, #8]
   d8c46:	60a3      	str	r3, [r4, #8]
    }
   d8c48:	4620      	mov	r0, r4
   d8c4a:	bd38      	pop	{r3, r4, r5, pc}

000d8c4c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	  switch (__op)
   d8c4c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8c4e:	b570      	push	{r4, r5, r6, lr}
   d8c50:	4604      	mov	r4, r0
	  switch (__op)
   d8c52:	d007      	beq.n	d8c64 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x18>
   d8c54:	2a03      	cmp	r2, #3
   d8c56:	d014      	beq.n	d8c82 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x36>
   d8c58:	2a01      	cmp	r2, #1
   d8c5a:	d101      	bne.n	d8c60 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8c5c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8c5e:	6003      	str	r3, [r0, #0]
	}
   d8c60:	2000      	movs	r0, #0
   d8c62:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8c64:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8c66:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8c68:	f7fb fa15 	bl	d4096 <_Znwj>
   d8c6c:	4605      	mov	r5, r0
   d8c6e:	b130      	cbz	r0, d8c7e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
            wakeEventFunctions.withOneTimeCallback([flag, fn](JSONWriter &writer, int &priority) {
   d8c70:	4631      	mov	r1, r6
   d8c72:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   d8c76:	e8e0 2302 	strd	r2, r3, [r0], #8
   d8c7a:	f7ff ffd8 	bl	d8c2e <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_>
	  __dest._M_access<_Functor*>() =
   d8c7e:	6025      	str	r5, [r4, #0]
	}
   d8c80:	e7ee      	b.n	d8c60 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8c82:	6804      	ldr	r4, [r0, #0]
   d8c84:	2c00      	cmp	r4, #0
   d8c86:	d0eb      	beq.n	d8c60 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8c88:	f104 0008 	add.w	r0, r4, #8
   d8c8c:	f7fc fa26 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8c90:	2118      	movs	r1, #24
   d8c92:	4620      	mov	r0, r4
   d8c94:	f006 fbee 	bl	df474 <_ZdlPvj>
   d8c98:	e7e2      	b.n	d8c60 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>

000d8c9a <_ZNSt8functionIFbbEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d8c9a:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8c9c:	2300      	movs	r3, #0
   d8c9e:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8ca0:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8ca2:	4604      	mov	r4, r0
   d8ca4:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8ca6:	b12b      	cbz	r3, d8cb4 <_ZNSt8functionIFbbEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8ca8:	2202      	movs	r2, #2
   d8caa:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8cac:	68eb      	ldr	r3, [r5, #12]
   d8cae:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8cb0:	68ab      	ldr	r3, [r5, #8]
   d8cb2:	60a3      	str	r3, [r4, #8]
    }
   d8cb4:	4620      	mov	r0, r4
   d8cb6:	bd38      	pop	{r3, r4, r5, pc}

000d8cb8 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   d8cb8:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d8cba:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   d8cbe:	4604      	mov	r4, r0
   d8cc0:	42ae      	cmp	r6, r5
   d8cc2:	d004      	beq.n	d8cce <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev+0x16>
    class function<_Res(_ArgTypes...)>
   d8cc4:	4628      	mov	r0, r5
   d8cc6:	f7fc fa09 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d8cca:	3510      	adds	r5, #16
   d8ccc:	e7f8      	b.n	d8cc0 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   d8cce:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d8cd0:	b108      	cbz	r0, d8cd6 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev+0x1e>
   d8cd2:	f7fb f9e4 	bl	d409e <_ZdlPv>
      }
   d8cd6:	4620      	mov	r0, r4
   d8cd8:	bd70      	pop	{r4, r5, r6, pc}

000d8cda <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb>:
        void forEach(Types... args) {
   d8cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
      : _M_current(__i) { }
   d8cdc:	6804      	ldr	r4, [r0, #0]
   d8cde:	4605      	mov	r5, r0
   d8ce0:	460e      	mov	r6, r1
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   d8ce2:	686b      	ldr	r3, [r5, #4]
   d8ce4:	429c      	cmp	r4, r3
   d8ce6:	d00c      	beq.n	d8d02 <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb+0x28>
   d8ce8:	f88d 6007 	strb.w	r6, [sp, #7]
      if (_M_empty())
   d8cec:	68a3      	ldr	r3, [r4, #8]
   d8cee:	b90b      	cbnz	r3, d8cf4 <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb+0x1a>
	__throw_bad_function_call();
   d8cf0:	f006 fbcc 	bl	df48c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8cf4:	68e3      	ldr	r3, [r4, #12]
   d8cf6:	4620      	mov	r0, r4
   d8cf8:	f10d 0107 	add.w	r1, sp, #7
   d8cfc:	4798      	blx	r3
	++_M_current;
   d8cfe:	3410      	adds	r4, #16
	return *this;
   d8d00:	e7ef      	b.n	d8ce2 <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb+0x8>
        }
   d8d02:	b002      	add	sp, #8
   d8d04:	bd70      	pop	{r4, r5, r6, pc}

000d8d06 <_ZN11SleepHelper18systemEventHandlerEyi>:
    switch(event) {
   d8d06:	2b00      	cmp	r3, #0
   d8d08:	bf08      	it	eq
   d8d0a:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
void SleepHelper::systemEventHandler(system_event_t event, int param) {
   d8d0e:	b538      	push	{r3, r4, r5, lr}
    switch(event) {
   d8d10:	d005      	beq.n	d8d1e <_ZN11SleepHelper18systemEventHandlerEyi+0x18>
   d8d12:	2b00      	cmp	r3, #0
   d8d14:	bf08      	it	eq
   d8d16:	f5b2 2f80 	cmpeq.w	r2, #262144	; 0x40000
   d8d1a:	d006      	beq.n	d8d2a <_ZN11SleepHelper18systemEventHandlerEyi+0x24>
}
   d8d1c:	bd38      	pop	{r3, r4, r5, pc}
            sleepOrResetFunctions.forEach(true);
   d8d1e:	2101      	movs	r1, #1
   d8d20:	f500 60df 	add.w	r0, r0, #1784	; 0x6f8
   d8d24:	f7ff ffd9 	bl	d8cda <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb>
            break;
   d8d28:	e7f8      	b.n	d8d1c <_ZN11SleepHelper18systemEventHandlerEyi+0x16>
            outOfMemory = true;
   d8d2a:	2301      	movs	r3, #1
   d8d2c:	f880 37d0 	strb.w	r3, [r0, #2000]	; 0x7d0
}
   d8d30:	e7f4      	b.n	d8d1c <_ZN11SleepHelper18systemEventHandlerEyi+0x16>

000d8d32 <_ZN11SleepHelper24systemEventHandlerStaticEyi>:
void SleepHelper::systemEventHandlerStatic(system_event_t event, int param) {
   d8d32:	b530      	push	{r4, r5, lr}
   d8d34:	b085      	sub	sp, #20
   d8d36:	4615      	mov	r5, r2
   d8d38:	4604      	mov	r4, r0
   d8d3a:	9103      	str	r1, [sp, #12]
    SleepHelper::instance().systemEventHandler(event, param);
   d8d3c:	f7ff fe22 	bl	d8984 <_ZN11SleepHelper8instanceEv>
   d8d40:	9b03      	ldr	r3, [sp, #12]
   d8d42:	9500      	str	r5, [sp, #0]
   d8d44:	4622      	mov	r2, r4
   d8d46:	f7ff ffde 	bl	d8d06 <_ZN11SleepHelper18systemEventHandlerEyi>
}
   d8d4a:	b005      	add	sp, #20
   d8d4c:	bd30      	pop	{r4, r5, pc}

000d8d4e <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv>:
        bool whileAnyTrue(Types... args) {
   d8d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8d52:	6805      	ldr	r5, [r0, #0]
   d8d54:	68c4      	ldr	r4, [r0, #12]
   d8d56:	4606      	mov	r6, r0
            bool finalRes = false;
   d8d58:	2700      	movs	r7, #0
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   d8d5a:	f06f 0801 	mvn.w	r8, #1
            for(auto it = callbackState.begin(), it2 = callbackFunctions.begin(); it != callbackState.end(); ++it, ++it2) {
   d8d5e:	6933      	ldr	r3, [r6, #16]
   d8d60:	429c      	cmp	r4, r3
   d8d62:	d012      	beq.n	d8d8a <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x3c>
                if (it->callbackState != AppCallbackState::CALLBACK_START_RETURNED_FALSE) {
   d8d64:	6823      	ldr	r3, [r4, #0]
   d8d66:	3302      	adds	r3, #2
   d8d68:	d00a      	beq.n	d8d80 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x32>
      if (_M_empty())
   d8d6a:	68ab      	ldr	r3, [r5, #8]
   d8d6c:	b90b      	cbnz	r3, d8d72 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x24>
	__throw_bad_function_call();
   d8d6e:	f006 fb8d 	bl	df48c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8d72:	68eb      	ldr	r3, [r5, #12]
   d8d74:	4621      	mov	r1, r4
   d8d76:	4628      	mov	r0, r5
   d8d78:	4798      	blx	r3
                    if (res) {
   d8d7a:	b920      	cbnz	r0, d8d86 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x38>
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   d8d7c:	f8c4 8000 	str.w	r8, [r4]
      operator++() _GLIBCXX_NOEXCEPT
   d8d80:	3510      	adds	r5, #16
   d8d82:	3408      	adds	r4, #8
	return *this;
   d8d84:	e7eb      	b.n	d8d5e <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x10>
                        finalRes = true;
   d8d86:	4607      	mov	r7, r0
   d8d88:	e7fa      	b.n	d8d80 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x32>
        }
   d8d8a:	4638      	mov	r0, r7
   d8d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8d90 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm>:
        bool whileAnyFalse(bool defaultResult, Types... args) {
   d8d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8d92:	6804      	ldr	r4, [r0, #0]
   d8d94:	4606      	mov	r6, r0
   d8d96:	4617      	mov	r7, r2
            bool finalRes = defaultResult;
   d8d98:	460d      	mov	r5, r1
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   d8d9a:	6873      	ldr	r3, [r6, #4]
   d8d9c:	42a3      	cmp	r3, r4
   d8d9e:	d00d      	beq.n	d8dbc <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm+0x2c>
   d8da0:	9701      	str	r7, [sp, #4]
      if (_M_empty())
   d8da2:	68a3      	ldr	r3, [r4, #8]
   d8da4:	b90b      	cbnz	r3, d8daa <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm+0x1a>
	__throw_bad_function_call();
   d8da6:	f006 fb71 	bl	df48c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8daa:	68e3      	ldr	r3, [r4, #12]
   d8dac:	4620      	mov	r0, r4
   d8dae:	a901      	add	r1, sp, #4
   d8db0:	4798      	blx	r3
                    finalRes = res;
   d8db2:	2800      	cmp	r0, #0
   d8db4:	bf08      	it	eq
   d8db6:	2500      	moveq	r5, #0
      operator++() _GLIBCXX_NOEXCEPT
   d8db8:	3410      	adds	r4, #16
	return *this;
   d8dba:	e7ee      	b.n	d8d9a <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm+0xa>
        }
   d8dbc:	4628      	mov	r0, r5
   d8dbe:	b003      	add	sp, #12
   d8dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8dc2 <_ZNKSt8functionIFbvEEclEv>:
    function<_Res(_ArgTypes...)>::
   d8dc2:	b510      	push	{r4, lr}
      if (_M_empty())
   d8dc4:	6882      	ldr	r2, [r0, #8]
   d8dc6:	b90a      	cbnz	r2, d8dcc <_ZNKSt8functionIFbvEEclEv+0xa>
	__throw_bad_function_call();
   d8dc8:	f006 fb60 	bl	df48c <_ZSt25__throw_bad_function_callv>
    }
   d8dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8dd0:	68c3      	ldr	r3, [r0, #12]
   d8dd2:	4718      	bx	r3

000d8dd4 <_ZNKSt8functionIFbiEEclEi>:
    function<_Res(_ArgTypes...)>::
   d8dd4:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   d8dd6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8dd8:	9101      	str	r1, [sp, #4]
      if (_M_empty())
   d8dda:	b90a      	cbnz	r2, d8de0 <_ZNKSt8functionIFbiEEclEi+0xc>
	__throw_bad_function_call();
   d8ddc:	f006 fb56 	bl	df48c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8de0:	68c3      	ldr	r3, [r0, #12]
   d8de2:	a901      	add	r1, sp, #4
   d8de4:	4798      	blx	r3
    }
   d8de6:	b003      	add	sp, #12
   d8de8:	f85d fb04 	ldr.w	pc, [sp], #4

000d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d8dec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8dee:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   d8df2:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d8df4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d8df6:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   d8df8:	b90a      	cbnz	r2, d8dfe <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x12>
   d8dfa:	07d9      	lsls	r1, r3, #31
   d8dfc:	d505      	bpl.n	d8e0a <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d8dfe:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   d8e02:	4b0b      	ldr	r3, [pc, #44]	; (d8e30 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x44>)
   d8e04:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8e06:	4b0b      	ldr	r3, [pc, #44]	; (d8e34 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x48>)
   d8e08:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d8e0a:	4621      	mov	r1, r4
   d8e0c:	4668      	mov	r0, sp
   d8e0e:	f7fc fa64 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8e12:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8e14:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8e16:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8e18:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8e1a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d8e1c:	4668      	mov	r0, sp
   d8e1e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8e20:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8e22:	9203      	str	r2, [sp, #12]
   d8e24:	f7fc f95a 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	}
   d8e28:	4620      	mov	r0, r4
   d8e2a:	b004      	add	sp, #16
   d8e2c:	bd10      	pop	{r4, pc}
   d8e2e:	bf00      	nop
   d8e30:	000d7fe1 	.word	0x000d7fe1
   d8e34:	000d7e1b 	.word	0x000d7e1b

000d8e38 <_ZN11SleepHelper25stateHandlerTimeValidWaitEv>:
void SleepHelper::stateHandlerTimeValidWait() {
   d8e38:	b513      	push	{r0, r1, r4, lr}
   d8e3a:	4604      	mov	r4, r0
    if (Time.isValid()) {
   d8e3c:	f006 f864 	bl	def08 <_ZN9TimeClass7isValidEv>
   d8e40:	b140      	cbz	r0, d8e54 <_ZN11SleepHelper25stateHandlerTimeValidWaitEv+0x1c>
        stateHandler = &SleepHelper::stateHandlerConnectedStart;
   d8e42:	4b05      	ldr	r3, [pc, #20]	; (d8e58 <_ZN11SleepHelper25stateHandlerTimeValidWaitEv+0x20>)
   d8e44:	9300      	str	r3, [sp, #0]
   d8e46:	4669      	mov	r1, sp
   d8e48:	2300      	movs	r3, #0
   d8e4a:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d8e4e:	9301      	str	r3, [sp, #4]
   d8e50:	f7ff ffcc 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8e54:	b002      	add	sp, #8
   d8e56:	bd10      	pop	{r4, pc}
   d8e58:	000d95c1 	.word	0x000d95c1

000d8e5c <_ZN11SleepHelper28stateHandlerPublishRateLimitEv>:
void SleepHelper::stateHandlerPublishRateLimit() {
   d8e5c:	b513      	push	{r0, r1, r4, lr}
   d8e5e:	4604      	mov	r4, r0
   d8e60:	f002 ff7e 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime > 1000) {
   d8e64:	f8d4 37b8 	ldr.w	r3, [r4, #1976]	; 0x7b8
   d8e68:	1ac0      	subs	r0, r0, r3
   d8e6a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d8e6e:	d908      	bls.n	d8e82 <_ZN11SleepHelper28stateHandlerPublishRateLimitEv+0x26>
        stateHandler = &SleepHelper::stateHandlerConnected;
   d8e70:	4b05      	ldr	r3, [pc, #20]	; (d8e88 <_ZN11SleepHelper28stateHandlerPublishRateLimitEv+0x2c>)
   d8e72:	9300      	str	r3, [sp, #0]
   d8e74:	4669      	mov	r1, sp
   d8e76:	2300      	movs	r3, #0
   d8e78:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d8e7c:	9301      	str	r3, [sp, #4]
   d8e7e:	f7ff ffb5 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8e82:	b002      	add	sp, #8
   d8e84:	bd10      	pop	{r4, pc}
   d8e86:	bf00      	nop
   d8e88:	000da3f1 	.word	0x000da3f1

000d8e8c <_ZN11SleepHelper26stateHandlerDisconnectWaitEv>:
void SleepHelper::stateHandlerDisconnectWait() {
   d8e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8e8e:	4604      	mov	r4, r0
   d8e90:	f003 fa0e 	bl	dc2b0 <spark_cloud_flag_connected>
    if (Particle.disconnected()) {
   d8e94:	4605      	mov	r5, r0
   d8e96:	b988      	cbnz	r0, d8ebc <_ZN11SleepHelper26stateHandlerDisconnectWaitEv+0x30>
        appLog.info("Disconnecting cellular");
   d8e98:	4909      	ldr	r1, [pc, #36]	; (d8ec0 <_ZN11SleepHelper26stateHandlerDisconnectWaitEv+0x34>)
   d8e9a:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   d8e9e:	f7fb fab3 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
        network.disconnect();
   d8ea2:	f8d4 07e0 	ldr.w	r0, [r4, #2016]	; 0x7e0
   d8ea6:	6803      	ldr	r3, [r0, #0]
   d8ea8:	685b      	ldr	r3, [r3, #4]
   d8eaa:	4798      	blx	r3
        stateHandler = &SleepHelper::stateHandlerWaitCellularDisconnected;
   d8eac:	4b05      	ldr	r3, [pc, #20]	; (d8ec4 <_ZN11SleepHelper26stateHandlerDisconnectWaitEv+0x38>)
   d8eae:	4669      	mov	r1, sp
   d8eb0:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d8eb4:	e9cd 3500 	strd	r3, r5, [sp]
   d8eb8:	f7ff ff98 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8ebc:	b003      	add	sp, #12
   d8ebe:	bd30      	pop	{r4, r5, pc}
   d8ec0:	000e2920 	.word	0x000e2920
   d8ec4:	000d8ec9 	.word	0x000d8ec9

000d8ec8 <_ZN11SleepHelper36stateHandlerWaitCellularDisconnectedEv>:
void SleepHelper::stateHandlerWaitCellularDisconnected() {
   d8ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8eca:	4604      	mov	r4, r0
    if (!network.ready()) {
   d8ecc:	f8d0 07e0 	ldr.w	r0, [r0, #2016]	; 0x7e0
   d8ed0:	6803      	ldr	r3, [r0, #0]
   d8ed2:	68db      	ldr	r3, [r3, #12]
   d8ed4:	4798      	blx	r3
   d8ed6:	4605      	mov	r5, r0
   d8ed8:	b960      	cbnz	r0, d8ef4 <_ZN11SleepHelper36stateHandlerWaitCellularDisconnectedEv+0x2c>
        network.off();
   d8eda:	f8d4 07e0 	ldr.w	r0, [r4, #2016]	; 0x7e0
   d8ede:	6803      	ldr	r3, [r0, #0]
   d8ee0:	695b      	ldr	r3, [r3, #20]
   d8ee2:	4798      	blx	r3
        stateHandler = &SleepHelper::stateHandlerWaitCellularOff;
   d8ee4:	4b04      	ldr	r3, [pc, #16]	; (d8ef8 <_ZN11SleepHelper36stateHandlerWaitCellularDisconnectedEv+0x30>)
   d8ee6:	4669      	mov	r1, sp
   d8ee8:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d8eec:	e9cd 3500 	strd	r3, r5, [sp]
   d8ef0:	f7ff ff7c 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8ef4:	b003      	add	sp, #12
   d8ef6:	bd30      	pop	{r4, r5, pc}
   d8ef8:	000d8efd 	.word	0x000d8efd

000d8efc <_ZN11SleepHelper27stateHandlerWaitCellularOffEv>:
void SleepHelper::stateHandlerWaitCellularOff() {
   d8efc:	b513      	push	{r0, r1, r4, lr}
   d8efe:	4604      	mov	r4, r0
    if (network.isOff()) {
   d8f00:	f8d0 07e0 	ldr.w	r0, [r0, #2016]	; 0x7e0
   d8f04:	6803      	ldr	r3, [r0, #0]
   d8f06:	69db      	ldr	r3, [r3, #28]
   d8f08:	4798      	blx	r3
   d8f0a:	b140      	cbz	r0, d8f1e <_ZN11SleepHelper27stateHandlerWaitCellularOffEv+0x22>
        stateHandler = &SleepHelper::stateHandlerSleep;
   d8f0c:	4b05      	ldr	r3, [pc, #20]	; (d8f24 <_ZN11SleepHelper27stateHandlerWaitCellularOffEv+0x28>)
   d8f0e:	9300      	str	r3, [sp, #0]
   d8f10:	4669      	mov	r1, sp
   d8f12:	2300      	movs	r3, #0
   d8f14:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d8f18:	9301      	str	r3, [sp, #4]
   d8f1a:	f7ff ff67 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8f1e:	b002      	add	sp, #8
   d8f20:	bd10      	pop	{r4, pc}
   d8f22:	bf00      	nop
   d8f24:	000d9139 	.word	0x000d9139

000d8f28 <_ZN11SleepHelper22stateHandlerSleepShortEv>:
void SleepHelper::stateHandlerSleepShort() {
   d8f28:	b513      	push	{r0, r1, r4, lr}
   d8f2a:	4604      	mov	r4, r0
   d8f2c:	f002 ff18 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= sleepParams.sleepTimeMs) {
   d8f30:	f8d4 37b8 	ldr.w	r3, [r4, #1976]	; 0x7b8
   d8f34:	1ac0      	subs	r0, r0, r3
   d8f36:	f8d4 3690 	ldr.w	r3, [r4, #1680]	; 0x690
   d8f3a:	4298      	cmp	r0, r3
   d8f3c:	d308      	bcc.n	d8f50 <_ZN11SleepHelper22stateHandlerSleepShortEv+0x28>
        stateHandler = &SleepHelper::stateHandlerSleepDone;
   d8f3e:	4b05      	ldr	r3, [pc, #20]	; (d8f54 <_ZN11SleepHelper22stateHandlerSleepShortEv+0x2c>)
   d8f40:	9300      	str	r3, [sp, #0]
   d8f42:	4669      	mov	r1, sp
   d8f44:	2300      	movs	r3, #0
   d8f46:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d8f4a:	9301      	str	r3, [sp, #4]
   d8f4c:	f7ff ff4e 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8f50:	b002      	add	sp, #8
   d8f52:	bd10      	pop	{r4, pc}
   d8f54:	000d9665 	.word	0x000d9665

000d8f58 <_ZN11SleepHelper17stateHandlerStartEv>:
void SleepHelper::stateHandlerStart() {
   d8f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    appLog.info("stateHandlerStart");
   d8f5c:	f200 77e4 	addw	r7, r0, #2020	; 0x7e4
void SleepHelper::stateHandlerStart() {
   d8f60:	b085      	sub	sp, #20
    appLog.info("stateHandlerStart");
   d8f62:	493a      	ldr	r1, [pc, #232]	; (d904c <_ZN11SleepHelper17stateHandlerStartEv+0xf4>)
void SleepHelper::stateHandlerStart() {
   d8f64:	4604      	mov	r4, r0
    appLog.info("stateHandlerStart");
   d8f66:	4638      	mov	r0, r7
   d8f68:	f7fb fa4e 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
    if (Time.isValid() && sleepParams.nextFullWakeTime) {        
   d8f6c:	f005 ffcc 	bl	def08 <_ZN9TimeClass7isValidEv>
   d8f70:	b970      	cbnz	r0, d8f90 <_ZN11SleepHelper17stateHandlerStartEv+0x38>
            int maxNoConnectConviction = 0;
   d8f72:	2600      	movs	r6, #0
      : _M_current(__i) { }
   d8f74:	f8d4 56e0 	ldr.w	r5, [r4, #1760]	; 0x6e0
            int maxConnectConviction = 0;
   d8f78:	46b0      	mov	r8, r6
                int connectConviction = 0;
   d8f7a:	46b1      	mov	r9, r6
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   d8f7c:	f8d4 36e4 	ldr.w	r3, [r4, #1764]	; 0x6e4
   d8f80:	42ab      	cmp	r3, r5
   d8f82:	d03d      	beq.n	d9000 <_ZN11SleepHelper17stateHandlerStartEv+0xa8>
                int noConnectConviction = 0;
   d8f84:	e9cd 9901 	strd	r9, r9, [sp, #4]
      if (_M_empty())
   d8f88:	68ab      	ldr	r3, [r5, #8]
   d8f8a:	bb53      	cbnz	r3, d8fe2 <_ZN11SleepHelper17stateHandlerStartEv+0x8a>
	__throw_bad_function_call();
   d8f8c:	f006 fa7e 	bl	df48c <_ZSt25__throw_bad_function_callv>
   d8f90:	f504 65d0 	add.w	r5, r4, #1664	; 0x680
   d8f94:	e9d5 2300 	ldrd	r2, r3, [r5]
   d8f98:	4313      	orrs	r3, r2
   d8f9a:	d0ea      	beq.n	d8f72 <_ZN11SleepHelper17stateHandlerStartEv+0x1a>
        isQuickWake = (Time.now() < sleepParams.nextFullWakeTime);
   d8f9c:	f005 ffd1 	bl	def42 <_ZN9TimeClass3nowEv>
    if (isQuickWake || !shouldConnectFunctions.shouldConnect()) {
   d8fa0:	e9d5 2300 	ldrd	r2, r3, [r5]
        isQuickWake = (Time.now() < sleepParams.nextFullWakeTime);
   d8fa4:	17c1      	asrs	r1, r0, #31
    if (isQuickWake || !shouldConnectFunctions.shouldConnect()) {
   d8fa6:	4290      	cmp	r0, r2
   d8fa8:	eb71 0303 	sbcs.w	r3, r1, r3
   d8fac:	dae1      	bge.n	d8f72 <_ZN11SleepHelper17stateHandlerStartEv+0x1a>
        appLog.info("running in no connection mode");
   d8fae:	4928      	ldr	r1, [pc, #160]	; (d9050 <_ZN11SleepHelper17stateHandlerStartEv+0xf8>)
   d8fb0:	4638      	mov	r0, r7
   d8fb2:	f7fb fa29 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
        SleepHelper::instance().persistentData.setValue_lastQuickWake(Time.now());
   d8fb6:	f7ff fce5 	bl	d8984 <_ZN11SleepHelper8instanceEv>
   d8fba:	4605      	mov	r5, r0
   d8fbc:	f005 ffc1 	bl	def42 <_ZN9TimeClass3nowEv>
            setValue<uint32_t>(offsetof(SleepHelperData, lastQuickWake), (uint32_t)value);
   d8fc0:	2118      	movs	r1, #24
   d8fc2:	4602      	mov	r2, r0
   d8fc4:	f505 60bd 	add.w	r0, r5, #1512	; 0x5e8
   d8fc8:	f7ff fd86 	bl	d8ad8 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d8fcc:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
                it->callbackState = newState;
   d8fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            for(auto it = callbackState.begin(); it != callbackState.end(); ++it) {
   d8fd4:	f8d4 1720 	ldr.w	r1, [r4, #1824]	; 0x720
   d8fd8:	4299      	cmp	r1, r3
   d8fda:	d02d      	beq.n	d9038 <_ZN11SleepHelper17stateHandlerStartEv+0xe0>
                it->callbackState = newState;
   d8fdc:	f843 2b08 	str.w	r2, [r3], #8
	return *this;
   d8fe0:	e7f8      	b.n	d8fd4 <_ZN11SleepHelper17stateHandlerStartEv+0x7c>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8fe2:	68eb      	ldr	r3, [r5, #12]
   d8fe4:	4628      	mov	r0, r5
   d8fe6:	aa02      	add	r2, sp, #8
   d8fe8:	a901      	add	r1, sp, #4
   d8fea:	4798      	blx	r3
                if (connectConviction > maxConnectConviction) {
   d8fec:	9b01      	ldr	r3, [sp, #4]
   d8fee:	4598      	cmp	r8, r3
   d8ff0:	bfb8      	it	lt
   d8ff2:	4698      	movlt	r8, r3
                if (noConnectConviction > maxNoConnectConviction) {
   d8ff4:	9b02      	ldr	r3, [sp, #8]
   d8ff6:	429e      	cmp	r6, r3
   d8ff8:	bfb8      	it	lt
   d8ffa:	461e      	movlt	r6, r3
	++_M_current;
   d8ffc:	3510      	adds	r5, #16
	return *this;
   d8ffe:	e7bd      	b.n	d8f7c <_ZN11SleepHelper17stateHandlerStartEv+0x24>
    if (isQuickWake || !shouldConnectFunctions.shouldConnect()) {
   d9000:	45b0      	cmp	r8, r6
   d9002:	dbd4      	blt.n	d8fae <_ZN11SleepHelper17stateHandlerStartEv+0x56>
    appLog.info("connecting to cloud");
   d9004:	4913      	ldr	r1, [pc, #76]	; (d9054 <_ZN11SleepHelper17stateHandlerStartEv+0xfc>)
   d9006:	4638      	mov	r0, r7
   d9008:	f7fb f9fe 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
    stateHandler = &SleepHelper::stateHandlerConnectWait;
   d900c:	2500      	movs	r5, #0
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d900e:	f003 f947 	bl	dc2a0 <spark_cloud_flag_connect>
   d9012:	4b11      	ldr	r3, [pc, #68]	; (d9058 <_ZN11SleepHelper17stateHandlerStartEv+0x100>)
   d9014:	9302      	str	r3, [sp, #8]
   d9016:	a902      	add	r1, sp, #8
   d9018:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d901c:	9503      	str	r5, [sp, #12]
   d901e:	f7ff fee5 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d9022:	f002 fe9d 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
    networkConnectedMillis = 0;
   d9026:	f8c4 57c4 	str.w	r5, [r4, #1988]	; 0x7c4
    connectAttemptStartMillis = millis();
   d902a:	f8c4 07bc 	str.w	r0, [r4, #1980]	; 0x7bc
    reconnectAttemptStartMillis = 0;
   d902e:	f8c4 57c0 	str.w	r5, [r4, #1984]	; 0x7c0
}
   d9032:	b005      	add	sp, #20
   d9034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        stateHandler = &SleepHelper::stateHandlerNoConnection;
   d9038:	4b08      	ldr	r3, [pc, #32]	; (d905c <_ZN11SleepHelper17stateHandlerStartEv+0x104>)
   d903a:	9302      	str	r3, [sp, #8]
   d903c:	a902      	add	r1, sp, #8
   d903e:	2300      	movs	r3, #0
   d9040:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9044:	9303      	str	r3, [sp, #12]
   d9046:	f7ff fed1 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   d904a:	e7f2      	b.n	d9032 <_ZN11SleepHelper17stateHandlerStartEv+0xda>
   d904c:	000e2937 	.word	0x000e2937
   d9050:	000e2949 	.word	0x000e2949
   d9054:	000e2990 	.word	0x000e2990
   d9058:	000d9061 	.word	0x000d9061
   d905c:	000dafcd 	.word	0x000dafcd

000d9060 <_ZN11SleepHelper23stateHandlerConnectWaitEv>:
void SleepHelper::stateHandlerConnectWait() {
   d9060:	b513      	push	{r0, r1, r4, lr}
   d9062:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9064:	f003 f924 	bl	dc2b0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d9068:	b150      	cbz	r0, d9080 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x20>
        stateHandler = &SleepHelper::stateHandlerTimeValidWait;
   d906a:	4b19      	ldr	r3, [pc, #100]	; (d90d0 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x70>)
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   d906c:	9300      	str	r3, [sp, #0]
   d906e:	4669      	mov	r1, sp
   d9070:	2300      	movs	r3, #0
   d9072:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9076:	9301      	str	r3, [sp, #4]
   d9078:	f7ff feb8 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d907c:	b002      	add	sp, #8
   d907e:	bd10      	pop	{r4, pc}
    if (!networkConnectedMillis && network.ready()) {
   d9080:	f8d4 37c4 	ldr.w	r3, [r4, #1988]	; 0x7c4
   d9084:	b98b      	cbnz	r3, d90aa <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x4a>
   d9086:	f8d4 07e0 	ldr.w	r0, [r4, #2016]	; 0x7e0
   d908a:	6803      	ldr	r3, [r0, #0]
   d908c:	68db      	ldr	r3, [r3, #12]
   d908e:	4798      	blx	r3
   d9090:	b158      	cbz	r0, d90aa <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x4a>
   d9092:	f002 fe65 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
        system_tick_t elapsedMs = networkConnectedMillis - connectAttemptStartMillis;
   d9096:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	; 0x7bc
        networkConnectedMillis = millis();
   d909a:	f8c4 07c4 	str.w	r0, [r4, #1988]	; 0x7c4
        appLog.info("connected to network in %lu ms", elapsedMs);
   d909e:	1a82      	subs	r2, r0, r2
   d90a0:	490c      	ldr	r1, [pc, #48]	; (d90d4 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x74>)
   d90a2:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   d90a6:	f7fb f9af 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
   d90aa:	f002 fe59 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
    system_tick_t elapsedMs = millis() - connectAttemptStartMillis;
   d90ae:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	; 0x7bc
    if (maximumTimeToConnectFunctions.whileAnyFalse(false, elapsedMs)) {
   d90b2:	2100      	movs	r1, #0
   d90b4:	1a82      	subs	r2, r0, r2
   d90b6:	f204 7004 	addw	r0, r4, #1796	; 0x704
   d90ba:	f7ff fe69 	bl	d8d90 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm>
   d90be:	2800      	cmp	r0, #0
   d90c0:	d0dc      	beq.n	d907c <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x1c>
        appLog.info("timed out connecting to cloud");
   d90c2:	4905      	ldr	r1, [pc, #20]	; (d90d8 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x78>)
   d90c4:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   d90c8:	f7fb f99e 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   d90cc:	4b03      	ldr	r3, [pc, #12]	; (d90dc <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x7c>)
   d90ce:	e7cd      	b.n	d906c <_ZN11SleepHelper23stateHandlerConnectWaitEv+0xc>
   d90d0:	000d8e39 	.word	0x000d8e39
   d90d4:	000e2967 	.word	0x000e2967
   d90d8:	000e2986 	.word	0x000e2986
   d90dc:	000db011 	.word	0x000db011

000d90e0 <_ZN11SleepHelper25stateHandlerReconnectWaitEv>:
void SleepHelper::stateHandlerReconnectWait() {
   d90e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d90e2:	4604      	mov	r4, r0
   d90e4:	f003 f8e4 	bl	dc2b0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d90e8:	4605      	mov	r5, r0
   d90ea:	b150      	cbz	r0, d9102 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x22>
        stateHandler = &SleepHelper::stateHandlerConnected;
   d90ec:	4b0f      	ldr	r3, [pc, #60]	; (d912c <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x4c>)
   d90ee:	9300      	str	r3, [sp, #0]
   d90f0:	2300      	movs	r3, #0
   d90f2:	9301      	str	r3, [sp, #4]
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   d90f4:	4669      	mov	r1, sp
   d90f6:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d90fa:	f7ff fe77 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d90fe:	b003      	add	sp, #12
   d9100:	bd30      	pop	{r4, r5, pc}
   d9102:	f002 fe2d 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
    system_tick_t elapsedMs = millis() - reconnectAttemptStartMillis;
   d9106:	f8d4 27c0 	ldr.w	r2, [r4, #1984]	; 0x7c0
    if (maximumTimeToConnectFunctions.whileAnyFalse(false, elapsedMs)) {
   d910a:	4629      	mov	r1, r5
   d910c:	1a82      	subs	r2, r0, r2
   d910e:	f204 7004 	addw	r0, r4, #1796	; 0x704
   d9112:	f7ff fe3d 	bl	d8d90 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm>
   d9116:	2800      	cmp	r0, #0
   d9118:	d0f1      	beq.n	d90fe <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x1e>
        appLog.info("timed out reconnecting to cloud");
   d911a:	4905      	ldr	r1, [pc, #20]	; (d9130 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x50>)
   d911c:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   d9120:	f7fb f972 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   d9124:	4b03      	ldr	r3, [pc, #12]	; (d9134 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x54>)
   d9126:	e9cd 3500 	strd	r3, r5, [sp]
   d912a:	e7e3      	b.n	d90f4 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x14>
   d912c:	000da3f1 	.word	0x000da3f1
   d9130:	000e29a4 	.word	0x000e29a4
   d9134:	000db011 	.word	0x000db011

000d9138 <_ZN11SleepHelper17stateHandlerSleepEv>:
void SleepHelper::stateHandlerSleep() {
   d9138:	b5f0      	push	{r4, r5, r6, r7, lr}
    appLog.info("stateHandlerSleep");
   d913a:	f200 75e4 	addw	r5, r0, #2020	; 0x7e4
void SleepHelper::stateHandlerSleep() {
   d913e:	4604      	mov	r4, r0
   d9140:	b087      	sub	sp, #28
    appLog.info("stateHandlerSleep");
   d9142:	4937      	ldr	r1, [pc, #220]	; (d9220 <_ZN11SleepHelper17stateHandlerSleepEv+0xe8>)
   d9144:	4628      	mov	r0, r5
   d9146:	f7fb f95f 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
    sleepOrResetFunctions.forEach(false);
   d914a:	2100      	movs	r1, #0
   d914c:	f504 60df 	add.w	r0, r4, #1784	; 0x6f8
   d9150:	f7ff fdc3 	bl	d8cda <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb>
        return hal_timer_millis(nullptr);
   d9154:	2000      	movs	r0, #0
   d9156:	f002 fe13 	bl	dbd80 <hal_timer_millis>
    int adjustmentMs = System.millis() - sleepParams.calculatedMillis;
   d915a:	f8d4 2688 	ldr.w	r2, [r4, #1672]	; 0x688
    if (adjustmentMs < (int)sleepParams.sleepTimeMs) {
   d915e:	f8d4 1690 	ldr.w	r1, [r4, #1680]	; 0x690
    int adjustmentMs = System.millis() - sleepParams.calculatedMillis;
   d9162:	1a87      	subs	r7, r0, r2
    if (adjustmentMs < (int)sleepParams.sleepTimeMs) {
   d9164:	42b9      	cmp	r1, r7
   d9166:	dd28      	ble.n	d91ba <_ZN11SleepHelper17stateHandlerSleepEv+0x82>
        sleepParams.sleepTimeMs -= adjustmentMs;
   d9168:	440a      	add	r2, r1
   d916a:	1a11      	subs	r1, r2, r0
   d916c:	f8c4 1690 	str.w	r1, [r4, #1680]	; 0x690
        sleepConfig.duration(sleepParams.sleepTimeMs);
   d9170:	f204 605c 	addw	r0, r4, #1628	; 0x65c
   d9174:	f7fe ffbc 	bl	d80f0 <_ZN8particle24SystemSleepConfiguration8durationEm>
    if (sleepParams.sleepTimeMs >= minimumSleepTimeMs) {
   d9178:	f8d4 2690 	ldr.w	r2, [r4, #1680]	; 0x690
   d917c:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	; 0x7a4
    wakeReasonInt = 0; // SystemSleepWakeupReason::UNKNOWN
   d9180:	2600      	movs	r6, #0
    if (sleepParams.sleepTimeMs >= minimumSleepTimeMs) {
   d9182:	429a      	cmp	r2, r3
    wakeReasonInt = 0; // SystemSleepWakeupReason::UNKNOWN
   d9184:	f8c4 677c 	str.w	r6, [r4, #1916]	; 0x77c
    if (sleepParams.sleepTimeMs >= minimumSleepTimeMs) {
   d9188:	d335      	bcc.n	d91f6 <_ZN11SleepHelper17stateHandlerSleepEv+0xbe>
        appLog.info("sleeping for %d sec adjustmentMs=%d", (int)(sleepParams.sleepTimeMs / 1000), adjustmentMs);
   d918a:	4628      	mov	r0, r5
   d918c:	463b      	mov	r3, r7
   d918e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d9192:	fbb2 f2f1 	udiv	r2, r2, r1
   d9196:	4923      	ldr	r1, [pc, #140]	; (d9224 <_ZN11SleepHelper17stateHandlerSleepEv+0xec>)
   d9198:	f7fb f936 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
        SystemSleepResult sleepResult = System.sleep(sleepConfig);
   d919c:	f204 615c 	addw	r1, r4, #1628	; 0x65c
   d91a0:	a803      	add	r0, sp, #12
   d91a2:	f005 fd35 	bl	dec10 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
      : _M_current(__i) { }
   d91a6:	f8d4 5650 	ldr.w	r5, [r4, #1616]	; 0x650
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   d91aa:	f8d4 3654 	ldr.w	r3, [r4, #1620]	; 0x654
   d91ae:	42ab      	cmp	r3, r5
   d91b0:	d00d      	beq.n	d91ce <_ZN11SleepHelper17stateHandlerSleepEv+0x96>
      if (_M_empty())
   d91b2:	68ab      	ldr	r3, [r5, #8]
   d91b4:	b92b      	cbnz	r3, d91c2 <_ZN11SleepHelper17stateHandlerSleepEv+0x8a>
	__throw_bad_function_call();
   d91b6:	f006 f969 	bl	df48c <_ZSt25__throw_bad_function_callv>
        sleepParams.sleepTimeMs = 0;
   d91ba:	2300      	movs	r3, #0
   d91bc:	f8c4 3690 	str.w	r3, [r4, #1680]	; 0x690
   d91c0:	e7da      	b.n	d9178 <_ZN11SleepHelper17stateHandlerSleepEv+0x40>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d91c2:	68eb      	ldr	r3, [r5, #12]
   d91c4:	4628      	mov	r0, r5
   d91c6:	a903      	add	r1, sp, #12
   d91c8:	4798      	blx	r3
	++_M_current;
   d91ca:	3510      	adds	r5, #16
	return *this;
   d91cc:	e7ed      	b.n	d91aa <_ZN11SleepHelper17stateHandlerSleepEv+0x72>
        wakeReasonInt = (int) sleepResult.wakeupReason();
   d91ce:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d91d0:	b103      	cbz	r3, d91d4 <_ZN11SleepHelper17stateHandlerSleepEv+0x9c>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   d91d2:	889b      	ldrh	r3, [r3, #4]
   d91d4:	f8c4 377c 	str.w	r3, [r4, #1916]	; 0x77c
        stateHandler = &SleepHelper::stateHandlerSleepDone;
   d91d8:	4b13      	ldr	r3, [pc, #76]	; (d9228 <_ZN11SleepHelper17stateHandlerSleepEv+0xf0>)
   d91da:	9301      	str	r3, [sp, #4]
   d91dc:	a901      	add	r1, sp, #4
   d91de:	2300      	movs	r3, #0
   d91e0:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d91e4:	9302      	str	r3, [sp, #8]
   d91e6:	f7ff fe01 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        if (wakeupSource_) {
   d91ea:	9803      	ldr	r0, [sp, #12]
   d91ec:	b108      	cbz	r0, d91f2 <_ZN11SleepHelper17stateHandlerSleepEv+0xba>
            free(wakeupSource_);
   d91ee:	f003 f8f7 	bl	dc3e0 <free>
}
   d91f2:	b007      	add	sp, #28
   d91f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        appLog.info("period too short to sleep %d", (int)sleepParams.sleepTimeMs);
   d91f6:	490d      	ldr	r1, [pc, #52]	; (d922c <_ZN11SleepHelper17stateHandlerSleepEv+0xf4>)
   d91f8:	4628      	mov	r0, r5
   d91fa:	f7fb f905 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
        wakeReasonInt = WAKEUP_REASON_NO_SLEEP;
   d91fe:	4b0c      	ldr	r3, [pc, #48]	; (d9230 <_ZN11SleepHelper17stateHandlerSleepEv+0xf8>)
   d9200:	f8c4 377c 	str.w	r3, [r4, #1916]	; 0x77c
        stateHandler = &SleepHelper::stateHandlerSleepShort;
   d9204:	4b0b      	ldr	r3, [pc, #44]	; (d9234 <_ZN11SleepHelper17stateHandlerSleepEv+0xfc>)
   d9206:	a903      	add	r1, sp, #12
   d9208:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d920c:	e9cd 3603 	strd	r3, r6, [sp, #12]
   d9210:	f7ff fdec 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d9214:	f002 fda4 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   d9218:	f8c4 07b8 	str.w	r0, [r4, #1976]	; 0x7b8
}
   d921c:	e7e9      	b.n	d91f2 <_ZN11SleepHelper17stateHandlerSleepEv+0xba>
   d921e:	bf00      	nop
   d9220:	000e29c4 	.word	0x000e29c4
   d9224:	000e29d6 	.word	0x000e29d6
   d9228:	000d9665 	.word	0x000d9665
   d922c:	000e29fa 	.word	0x000e29fa
   d9230:	00010002 	.word	0x00010002
   d9234:	000d8f29 	.word	0x000d8f29

000d9238 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9238:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
            if (succeeded) {
   d923c:	780b      	ldrb	r3, [r1, #0]
   d923e:	4605      	mov	r5, r0
   d9240:	b373      	cbz	r3, d92a0 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x68>
                appLog.info("removing item from publishData");
   d9242:	6800      	ldr	r0, [r0, #0]
   d9244:	491d      	ldr	r1, [pc, #116]	; (d92bc <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x84>)
   d9246:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   d924a:	f7fb f8dd 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
            [this](bool succeeded, const char *event_name, const char *event_data, const void *event_context) {
   d924e:	682f      	ldr	r7, [r5, #0]
      : _M_current(__i) { }
   d9250:	f8d7 4780 	ldr.w	r4, [r7, #1920]	; 0x780
   d9254:	f8d7 3784 	ldr.w	r3, [r7, #1924]	; 0x784
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
   d9258:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (__position + 1 != end())
   d925c:	429a      	cmp	r2, r3
   d925e:	d018      	beq.n	d9292 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x5a>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   d9260:	4e17      	ldr	r6, [pc, #92]	; (d92c0 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x88>)
   d9262:	1a9b      	subs	r3, r3, r2
   d9264:	109b      	asrs	r3, r3, #2
   d9266:	435e      	muls	r6, r3
   d9268:	2e00      	cmp	r6, #0
   d926a:	dd12      	ble.n	d9292 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x5a>
    class PublishData {
   d926c:	f104 0824 	add.w	r8, r4, #36	; 0x24
   d9270:	4641      	mov	r1, r8
   d9272:	4620      	mov	r0, r4
   d9274:	f005 fba1 	bl	de9ba <_ZN6StringaSEOS_>
   d9278:	f104 0134 	add.w	r1, r4, #52	; 0x34
   d927c:	f104 0010 	add.w	r0, r4, #16
   d9280:	f005 fb9b 	bl	de9ba <_ZN6StringaSEOS_>
   d9284:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   d9288:	f884 3020 	strb.w	r3, [r4, #32]
   d928c:	3e01      	subs	r6, #1
	      ++__result;
   d928e:	4644      	mov	r4, r8
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   d9290:	e7ea      	b.n	d9268 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x30>
      --this->_M_impl._M_finish;
   d9292:	f8d7 0784 	ldr.w	r0, [r7, #1924]	; 0x784
   d9296:	3824      	subs	r0, #36	; 0x24
   d9298:	f8c7 0784 	str.w	r0, [r7, #1924]	; 0x784

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d929c:	f7ff f853 	bl	d8346 <_ZN11SleepHelper11PublishDataD1Ev>
            stateHandler = &SleepHelper::stateHandlerPublishRateLimit;
   d92a0:	6828      	ldr	r0, [r5, #0]
   d92a2:	4b08      	ldr	r3, [pc, #32]	; (d92c4 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x8c>)
   d92a4:	9300      	str	r3, [sp, #0]
   d92a6:	4669      	mov	r1, sp
   d92a8:	2300      	movs	r3, #0
   d92aa:	f500 60f5 	add.w	r0, r0, #1960	; 0x7a8
   d92ae:	9301      	str	r3, [sp, #4]
   d92b0:	f7ff fd9c 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
      }
   d92b4:	b002      	add	sp, #8
   d92b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d92ba:	bf00      	nop
   d92bc:	000e2a17 	.word	0x000e2a17
   d92c0:	38e38e39 	.word	0x38e38e39
   d92c4:	000d8e5d 	.word	0x000d8e5d

000d92c8 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d92c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_My_handler::_M_not_empty_function(__f))
   d92ca:	688b      	ldr	r3, [r1, #8]
    _Function_base() : _M_manager(nullptr) { }
   d92cc:	2700      	movs	r7, #0
      function<_Res(_ArgTypes...)>::
   d92ce:	4606      	mov	r6, r0
   d92d0:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
   d92d2:	6087      	str	r7, [r0, #8]
	if (_My_handler::_M_not_empty_function(__f))
   d92d4:	b1b3      	cbz	r3, d9304 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x3c>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d92d6:	2010      	movs	r0, #16
   d92d8:	f7fa fedd 	bl	d4096 <_Znwj>
   d92dc:	4604      	mov	r4, r0
   d92de:	b160      	cbz	r0, d92fa <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x32>
    _Function_base() : _M_manager(nullptr) { }
   d92e0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d92e2:	4601      	mov	r1, r0
   d92e4:	4628      	mov	r0, r5
   d92e6:	f7fb fff8 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92ea:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d92ec:	68a2      	ldr	r2, [r4, #8]
   d92ee:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d92f0:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d92f2:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92f4:	68eb      	ldr	r3, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d92f6:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d92f8:	60ea      	str	r2, [r5, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   d92fa:	4b03      	ldr	r3, [pc, #12]	; (d9308 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x40>)
   d92fc:	60f3      	str	r3, [r6, #12]
	    _M_manager = &_My_handler::_M_manager;
   d92fe:	4b03      	ldr	r3, [pc, #12]	; (d930c <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x44>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9300:	6034      	str	r4, [r6, #0]
	    _M_manager = &_My_handler::_M_manager;
   d9302:	60b3      	str	r3, [r6, #8]
      }
   d9304:	4630      	mov	r0, r6
   d9306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9308:	000d7e79 	.word	0x000d7e79
   d930c:	000d8b4b 	.word	0x000d8b4b

000d9310 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d9310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9314:	4607      	mov	r7, r0
   d9316:	4688      	mov	r8, r1
   d9318:	4616      	mov	r6, r2
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
   d931a:	4615      	mov	r5, r2
   d931c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d931e:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d9322:	4544      	cmp	r4, r8
   d9324:	d014      	beq.n	d9350 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x40>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9326:	b16d      	cbz	r5, d9344 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x34>
   d9328:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d932c:	4629      	mov	r1, r5
   d932e:	4620      	mov	r0, r4
   d9330:	f7fb ffd3 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9334:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d9336:	68aa      	ldr	r2, [r5, #8]
   d9338:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d933a:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d933c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d933e:	68ea      	ldr	r2, [r5, #12]
   d9340:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9342:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d9344:	4620      	mov	r0, r4
   d9346:	f7fb fec9 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d934a:	3410      	adds	r4, #16
   d934c:	3510      	adds	r5, #16
   d934e:	e7e8      	b.n	d9322 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x12>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
   d9350:	1be0      	subs	r0, r4, r7
    }
   d9352:	4430      	add	r0, r6
   d9354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9358 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d9358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d935c:	4607      	mov	r7, r0
   d935e:	4688      	mov	r8, r1
   d9360:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d9362:	4615      	mov	r5, r2
   d9364:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d9366:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d936a:	4544      	cmp	r4, r8
   d936c:	d014      	beq.n	d9398 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0+0x40>
   d936e:	b16d      	cbz	r5, d938c <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0+0x34>
   d9370:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d9374:	4629      	mov	r1, r5
   d9376:	4620      	mov	r0, r4
   d9378:	f7fb ffaf 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d937c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d937e:	68aa      	ldr	r2, [r5, #8]
   d9380:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9382:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9384:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9386:	68ea      	ldr	r2, [r5, #12]
   d9388:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d938a:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d938c:	4620      	mov	r0, r4
   d938e:	f7fb fea5 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d9392:	3410      	adds	r4, #16
   d9394:	3510      	adds	r5, #16
   d9396:	e7e8      	b.n	d936a <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0+0x12>
      return __cur;
   d9398:	1be0      	subs	r0, r4, r7
    }
   d939a:	4430      	add	r0, r6
   d939c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d93a0 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d93a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d93a4:	4607      	mov	r7, r0
   d93a6:	4688      	mov	r8, r1
   d93a8:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d93aa:	4615      	mov	r5, r2
   d93ac:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d93ae:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d93b2:	4544      	cmp	r4, r8
   d93b4:	d014      	beq.n	d93e0 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
   d93b6:	b16d      	cbz	r5, d93d4 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   d93b8:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d93bc:	4629      	mov	r1, r5
   d93be:	4620      	mov	r0, r4
   d93c0:	f7fb ff8b 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d93c4:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d93c6:	68aa      	ldr	r2, [r5, #8]
   d93c8:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d93ca:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d93cc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d93ce:	68ea      	ldr	r2, [r5, #12]
   d93d0:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d93d2:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d93d4:	4620      	mov	r0, r4
   d93d6:	f7fb fe81 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d93da:	3410      	adds	r4, #16
   d93dc:	3510      	adds	r5, #16
   d93de:	e7e8      	b.n	d93b2 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   d93e0:	1be0      	subs	r0, r4, r7
    }
   d93e2:	4430      	add	r0, r6
   d93e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d93e8 <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d93e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d93ec:	4607      	mov	r7, r0
   d93ee:	4688      	mov	r8, r1
   d93f0:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d93f2:	4615      	mov	r5, r2
   d93f4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d93f6:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d93fa:	4544      	cmp	r4, r8
   d93fc:	d014      	beq.n	d9428 <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
   d93fe:	b16d      	cbz	r5, d941c <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   d9400:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d9404:	4629      	mov	r1, r5
   d9406:	4620      	mov	r0, r4
   d9408:	f7fb ff67 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d940c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d940e:	68aa      	ldr	r2, [r5, #8]
   d9410:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9412:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9414:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9416:	68ea      	ldr	r2, [r5, #12]
   d9418:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d941a:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d941c:	4620      	mov	r0, r4
   d941e:	f7fb fe5d 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d9422:	3410      	adds	r4, #16
   d9424:	3510      	adds	r5, #16
   d9426:	e7e8      	b.n	d93fa <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   d9428:	1be0      	subs	r0, r4, r7
    }
   d942a:	4430      	add	r0, r6
   d942c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9430 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d9430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9434:	4607      	mov	r7, r0
   d9436:	4688      	mov	r8, r1
   d9438:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d943a:	4615      	mov	r5, r2
   d943c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d943e:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d9442:	4544      	cmp	r4, r8
   d9444:	d014      	beq.n	d9470 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0+0x40>
   d9446:	b16d      	cbz	r5, d9464 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0+0x34>
   d9448:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d944c:	4629      	mov	r1, r5
   d944e:	4620      	mov	r0, r4
   d9450:	f7fb ff43 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9454:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d9456:	68aa      	ldr	r2, [r5, #8]
   d9458:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d945a:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d945c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d945e:	68ea      	ldr	r2, [r5, #12]
   d9460:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9462:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d9464:	4620      	mov	r0, r4
   d9466:	f7fb fe39 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d946a:	3410      	adds	r4, #16
   d946c:	3510      	adds	r5, #16
   d946e:	e7e8      	b.n	d9442 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0+0x12>
      return __cur;
   d9470:	1be0      	subs	r0, r4, r7
    }
   d9472:	4430      	add	r0, r6
   d9474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9478 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d9478:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d947c:	e9d0 7900 	ldrd	r7, r9, [r0]
   d9480:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d9482:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d9486:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9488:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d948c:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d9490:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9492:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d9496:	d102      	bne.n	d949e <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d9498:	481a      	ldr	r0, [pc, #104]	; (d9504 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x8c>)
   d949a:	f005 fff4 	bl	df486 <_ZSt20__throw_length_errorPKc>
   d949e:	2c01      	cmp	r4, #1
   d94a0:	4622      	mov	r2, r4
   d94a2:	bf38      	it	cc
   d94a4:	2201      	movcc	r2, #1
   d94a6:	18a4      	adds	r4, r4, r2
   d94a8:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d94ac:	d228      	bcs.n	d9500 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d94ae:	b14c      	cbz	r4, d94c4 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x4c>
   d94b0:	429c      	cmp	r4, r3
   d94b2:	bf28      	it	cs
   d94b4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d94b6:	0120      	lsls	r0, r4, #4
   d94b8:	9101      	str	r1, [sp, #4]
   d94ba:	f7fa fdec 	bl	d4096 <_Znwj>
   d94be:	9901      	ldr	r1, [sp, #4]
   d94c0:	4605      	mov	r5, r0
   d94c2:	e000      	b.n	d94c6 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x4e>
   d94c4:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d94c6:	eb15 000a 	adds.w	r0, r5, sl
   d94ca:	d001      	beq.n	d94d0 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x58>
   d94cc:	f7ff fb2e 	bl	d8b2c <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
   d94d0:	4641      	mov	r1, r8
   d94d2:	462a      	mov	r2, r5
   d94d4:	4638      	mov	r0, r7
   d94d6:	f7ff ffab 	bl	d9430 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0>
   d94da:	4649      	mov	r1, r9
   d94dc:	f100 0210 	add.w	r2, r0, #16
   d94e0:	4640      	mov	r0, r8
   d94e2:	f7ff ffa5 	bl	d9430 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0>
   d94e6:	4680      	mov	r8, r0
	if (__p)
   d94e8:	b117      	cbz	r7, d94f0 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x78>
	::operator delete(__p);
   d94ea:	4638      	mov	r0, r7
   d94ec:	f7fa fdd7 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d94f0:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d94f4:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d94f8:	60b4      	str	r4, [r6, #8]
    }
   d94fa:	b002      	add	sp, #8
   d94fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d9500:	461c      	mov	r4, r3
   d9502:	e7d8      	b.n	d94b6 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x3e>
   d9504:	000e24e3 	.word	0x000e24e3

000d9508 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>:
    SleepHelper &withWakeEventFlagOneTimeFunction(uint64_t flag, std::function<void(JSONWriter &, int &)> fn) {
   d9508:	b570      	push	{r4, r5, r6, lr}
        if ((eventsEnabled & flag) != 0) {
   d950a:	f8d0 4794 	ldr.w	r4, [r0, #1940]	; 0x794
   d950e:	f8d0 6790 	ldr.w	r6, [r0, #1936]	; 0x790
    SleepHelper &withWakeEventFlagOneTimeFunction(uint64_t flag, std::function<void(JSONWriter &, int &)> fn) {
   d9512:	4605      	mov	r5, r0
        if ((eventsEnabled & flag) != 0) {
   d9514:	ea03 0104 	and.w	r1, r3, r4
   d9518:	ea02 0006 	and.w	r0, r2, r6
   d951c:	4301      	orrs	r1, r0
    SleepHelper &withWakeEventFlagOneTimeFunction(uint64_t flag, std::function<void(JSONWriter &, int &)> fn) {
   d951e:	b08e      	sub	sp, #56	; 0x38
        if ((eventsEnabled & flag) != 0) {
   d9520:	d03f      	beq.n	d95a2 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x9a>
            });
   d9522:	9912      	ldr	r1, [sp, #72]	; 0x48
   d9524:	a80a      	add	r0, sp, #40	; 0x28
   d9526:	e9cd 2308 	strd	r2, r3, [sp, #32]
    _Function_base() : _M_manager(nullptr) { }
   d952a:	2600      	movs	r6, #0
   d952c:	f7ff fb7f 	bl	d8c2e <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9530:	2018      	movs	r0, #24
    _Function_base() : _M_manager(nullptr) { }
   d9532:	9602      	str	r6, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9534:	f7fa fdaf 	bl	d4096 <_Znwj>
   d9538:	4604      	mov	r4, r0
   d953a:	b188      	cbz	r0, d9560 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x58>
            wakeEventFunctions.withOneTimeCallback([flag, fn](JSONWriter &writer, int &priority) {
   d953c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    _Function_base() : _M_manager(nullptr) { }
   d9540:	6106      	str	r6, [r0, #16]
   d9542:	e9c0 2300 	strd	r2, r3, [r0]
	std::swap(_M_functor, __x._M_functor);
   d9546:	f100 0108 	add.w	r1, r0, #8
   d954a:	a80a      	add	r0, sp, #40	; 0x28
   d954c:	f7fb fec5 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      __a = _GLIBCXX_MOVE(__b);
   d9552:	6922      	ldr	r2, [r4, #16]
   d9554:	920c      	str	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d9556:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9558:	6962      	ldr	r2, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d955a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d955c:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d955e:	920d      	str	r2, [sp, #52]	; 0x34
	    _M_invoker = &_My_handler::_M_invoke;
   d9560:	4b15      	ldr	r3, [pc, #84]	; (d95b8 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0xb0>)
   d9562:	9303      	str	r3, [sp, #12]
            oneTimeCallbacks.add(fn); 
   d9564:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   d9566:	4b15      	ldr	r3, [pc, #84]	; (d95bc <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0xb4>)
   d9568:	9302      	str	r3, [sp, #8]
   d956a:	a804      	add	r0, sp, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d956c:	9400      	str	r4, [sp, #0]
   d956e:	f7ff fadd 	bl	d8b2c <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d9572:	f8d5 0748 	ldr.w	r0, [r5, #1864]	; 0x748
   d9576:	f8d5 374c 	ldr.w	r3, [r5, #1868]	; 0x74c
   d957a:	4298      	cmp	r0, r3
   d957c:	d014      	beq.n	d95a8 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0xa0>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d957e:	b110      	cbz	r0, d9586 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x7e>
   d9580:	a904      	add	r1, sp, #16
   d9582:	f7ff fad3 	bl	d8b2c <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
	    ++this->_M_impl._M_finish;
   d9586:	f8d5 3748 	ldr.w	r3, [r5, #1864]	; 0x748
   d958a:	3310      	adds	r3, #16
   d958c:	f8c5 3748 	str.w	r3, [r5, #1864]	; 0x748
    class function<_Res(_ArgTypes...)>
   d9590:	a804      	add	r0, sp, #16
   d9592:	f7fb fda3 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d9596:	4668      	mov	r0, sp
   d9598:	f7fb fda0 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d959c:	a80a      	add	r0, sp, #40	; 0x28
   d959e:	f7fb fd9d 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
    }
   d95a2:	4628      	mov	r0, r5
   d95a4:	b00e      	add	sp, #56	; 0x38
   d95a6:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   d95a8:	4601      	mov	r1, r0
   d95aa:	aa04      	add	r2, sp, #16
   d95ac:	f205 7044 	addw	r0, r5, #1860	; 0x744
   d95b0:	f7ff ff62 	bl	d9478 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_>
   d95b4:	e7ec      	b.n	d9590 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x88>
   d95b6:	bf00      	nop
   d95b8:	000d8bff 	.word	0x000d8bff
   d95bc:	000d8c4d 	.word	0x000d8c4d

000d95c0 <_ZN11SleepHelper26stateHandlerConnectedStartEv>:
void SleepHelper::stateHandlerConnectedStart() {
   d95c0:	b530      	push	{r4, r5, lr}
   d95c2:	b087      	sub	sp, #28
   d95c4:	4604      	mov	r4, r0
   d95c6:	f002 fbcb 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
    connectedStartMillis = millis();
   d95ca:	f8c4 07c8 	str.w	r0, [r4, #1992]	; 0x7c8
    SleepHelper::instance().persistentData.setValue_lastFullWake(Time.now());
   d95ce:	f7ff f9d9 	bl	d8984 <_ZN11SleepHelper8instanceEv>
   d95d2:	4605      	mov	r5, r0
   d95d4:	f005 fcb5 	bl	def42 <_ZN9TimeClass3nowEv>
            setValue<uint32_t>(offsetof(SleepHelperData, lastFullWake), (uint32_t)value);
   d95d8:	2114      	movs	r1, #20
   d95da:	4602      	mov	r2, r0
   d95dc:	f505 60bd 	add.w	r0, r5, #1512	; 0x5e8
   d95e0:	f7ff fa7a 	bl	d8ad8 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>
    system_tick_t elapsedMs = connectedStartMillis - connectAttemptStartMillis;
   d95e4:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	; 0x7bc
   d95e8:	f8d4 57c8 	ldr.w	r5, [r4, #1992]	; 0x7c8
    appLog.info("connected to cloud in %lu ms", elapsedMs);
   d95ec:	4917      	ldr	r1, [pc, #92]	; (d964c <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x8c>)
    system_tick_t elapsedMs = connectedStartMillis - connectAttemptStartMillis;
   d95ee:	1aad      	subs	r5, r5, r2
    appLog.info("connected to cloud in %lu ms", elapsedMs);
   d95f0:	462a      	mov	r2, r5
   d95f2:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   d95f6:	f7fa ff07 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
	    _M_invoker = &_My_handler::_M_invoke;
   d95fa:	4b15      	ldr	r3, [pc, #84]	; (d9650 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x90>)
   d95fc:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d95fe:	4b15      	ldr	r3, [pc, #84]	; (d9654 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x94>)
   d9600:	9304      	str	r3, [sp, #16]
    });
   d9602:	ab02      	add	r3, sp, #8
   d9604:	9300      	str	r3, [sp, #0]
   d9606:	2202      	movs	r2, #2
   d9608:	2300      	movs	r3, #0
   d960a:	4620      	mov	r0, r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d960c:	9502      	str	r5, [sp, #8]
   d960e:	f7ff ff7b 	bl	d9508 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   d9612:	a802      	add	r0, sp, #8
   d9614:	f7fb fd62 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   d9618:	4b0f      	ldr	r3, [pc, #60]	; (d9658 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x98>)
   d961a:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d961c:	4b0f      	ldr	r3, [pc, #60]	; (d965c <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x9c>)
   d961e:	9304      	str	r3, [sp, #16]
    });
   d9620:	ab02      	add	r3, sp, #8
   d9622:	2208      	movs	r2, #8
   d9624:	9300      	str	r3, [sp, #0]
   d9626:	4620      	mov	r0, r4
   d9628:	2300      	movs	r3, #0
   d962a:	f7ff ff6d 	bl	d9508 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   d962e:	a802      	add	r0, sp, #8
   d9630:	f7fb fd54 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
    stateHandler = &SleepHelper::stateHandlerConnectedWakeEvents;
   d9634:	4b0a      	ldr	r3, [pc, #40]	; (d9660 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0xa0>)
   d9636:	9302      	str	r3, [sp, #8]
   d9638:	a902      	add	r1, sp, #8
   d963a:	2300      	movs	r3, #0
   d963c:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   d9640:	9303      	str	r3, [sp, #12]
   d9642:	f7ff fbd3 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d9646:	b007      	add	sp, #28
   d9648:	bd30      	pop	{r4, r5, pc}
   d964a:	bf00      	nop
   d964c:	000e2a36 	.word	0x000e2a36
   d9650:	000d7e97 	.word	0x000d7e97
   d9654:	000d7d99 	.word	0x000d7d99
   d9658:	000d7f69 	.word	0x000d7f69
   d965c:	000d7db1 	.word	0x000d7db1
   d9660:	000dab1d 	.word	0x000dab1d

000d9664 <_ZN11SleepHelper21stateHandlerSleepDoneEv>:
void SleepHelper::stateHandlerSleepDone() {
   d9664:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9666:	b087      	sub	sp, #28
   d9668:	4604      	mov	r4, r0
    stateHandler = &SleepHelper::stateHandlerStart;
   d966a:	4b14      	ldr	r3, [pc, #80]	; (d96bc <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x58>)
   d966c:	9302      	str	r3, [sp, #8]
   d966e:	ae02      	add	r6, sp, #8
   d9670:	2300      	movs	r3, #0
   d9672:	4631      	mov	r1, r6
   d9674:	f500 60f5 	add.w	r0, r0, #1960	; 0x7a8
   d9678:	9303      	str	r3, [sp, #12]
   d967a:	f7ff fbb7 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
    wakeOrBootFunctions.forEach(wakeReasonInt);
   d967e:	f8d4 777c 	ldr.w	r7, [r4, #1916]	; 0x77c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d9682:	f8d4 56ec 	ldr.w	r5, [r4, #1772]	; 0x6ec
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   d9686:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
   d968a:	42ab      	cmp	r3, r5
   d968c:	d005      	beq.n	d969a <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x36>
                (*it)(args...);
   d968e:	4628      	mov	r0, r5
   d9690:	4639      	mov	r1, r7
   d9692:	f7ff fb9f 	bl	d8dd4 <_ZNKSt8functionIFbiEEclEi>
      operator++() _GLIBCXX_NOEXCEPT
   d9696:	3510      	adds	r5, #16
	return *this;
   d9698:	e7f5      	b.n	d9686 <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x22>
	    _M_invoker = &_My_handler::_M_invoke;
   d969a:	4b09      	ldr	r3, [pc, #36]	; (d96c0 <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x5c>)
   d969c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d969e:	4b09      	ldr	r3, [pc, #36]	; (d96c4 <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x60>)
   d96a0:	9304      	str	r3, [sp, #16]
    });     
   d96a2:	2201      	movs	r2, #1
   d96a4:	2300      	movs	r3, #0
   d96a6:	9600      	str	r6, [sp, #0]
   d96a8:	4620      	mov	r0, r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d96aa:	9402      	str	r4, [sp, #8]
   d96ac:	f7ff ff2c 	bl	d9508 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   d96b0:	4630      	mov	r0, r6
   d96b2:	f7fb fd13 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
}
   d96b6:	b007      	add	sp, #28
   d96b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d96ba:	bf00      	nop
   d96bc:	000d8f59 	.word	0x000d8f59
   d96c0:	000d7f31 	.word	0x000d7f31
   d96c4:	000d7dd3 	.word	0x000d7dd3

000d96c8 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d96c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d96cc:	e9d0 7900 	ldrd	r7, r9, [r0]
   d96d0:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d96d2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d96d6:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d96d8:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d96dc:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d96e0:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d96e2:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d96e6:	d102      	bne.n	d96ee <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d96e8:	481a      	ldr	r0, [pc, #104]	; (d9754 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   d96ea:	f005 fecc 	bl	df486 <_ZSt20__throw_length_errorPKc>
   d96ee:	2c01      	cmp	r4, #1
   d96f0:	4622      	mov	r2, r4
   d96f2:	bf38      	it	cc
   d96f4:	2201      	movcc	r2, #1
   d96f6:	18a4      	adds	r4, r4, r2
   d96f8:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d96fc:	d228      	bcs.n	d9750 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d96fe:	b14c      	cbz	r4, d9714 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   d9700:	429c      	cmp	r4, r3
   d9702:	bf28      	it	cs
   d9704:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9706:	0120      	lsls	r0, r4, #4
   d9708:	9101      	str	r1, [sp, #4]
   d970a:	f7fa fcc4 	bl	d4096 <_Znwj>
   d970e:	9901      	ldr	r1, [sp, #4]
   d9710:	4605      	mov	r5, r0
   d9712:	e000      	b.n	d9716 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   d9714:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9716:	eb15 000a 	adds.w	r0, r5, sl
   d971a:	d001      	beq.n	d9720 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   d971c:	f7ff fa39 	bl	d8b92 <_ZNSt8functionIFbvEEC1ERKS1_>
   d9720:	4641      	mov	r1, r8
   d9722:	462a      	mov	r2, r5
   d9724:	4638      	mov	r0, r7
   d9726:	f7ff fe3b 	bl	d93a0 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d972a:	4649      	mov	r1, r9
   d972c:	f100 0210 	add.w	r2, r0, #16
   d9730:	4640      	mov	r0, r8
   d9732:	f7ff fe35 	bl	d93a0 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d9736:	4680      	mov	r8, r0
	if (__p)
   d9738:	b117      	cbz	r7, d9740 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   d973a:	4638      	mov	r0, r7
   d973c:	f7fa fcaf 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d9740:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d9744:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d9748:	60b4      	str	r4, [r6, #8]
    }
   d974a:	b002      	add	sp, #8
   d974c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d9750:	461c      	mov	r4, r3
   d9752:	e7d8      	b.n	d9706 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   d9754:	000e24e3 	.word	0x000e24e3

000d9758 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d9758:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d975c:	e9d0 7900 	ldrd	r7, r9, [r0]
   d9760:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d9762:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d9766:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9768:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d976c:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d9770:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9772:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d9776:	d102      	bne.n	d977e <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d9778:	481a      	ldr	r0, [pc, #104]	; (d97e4 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
   d977a:	f005 fe84 	bl	df486 <_ZSt20__throw_length_errorPKc>
   d977e:	2c01      	cmp	r4, #1
   d9780:	4622      	mov	r2, r4
   d9782:	bf38      	it	cc
   d9784:	2201      	movcc	r2, #1
   d9786:	18a4      	adds	r4, r4, r2
   d9788:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d978c:	d228      	bcs.n	d97e0 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d978e:	b14c      	cbz	r4, d97a4 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4c>
   d9790:	429c      	cmp	r4, r3
   d9792:	bf28      	it	cs
   d9794:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9796:	0120      	lsls	r0, r4, #4
   d9798:	9101      	str	r1, [sp, #4]
   d979a:	f7fa fc7c 	bl	d4096 <_Znwj>
   d979e:	9901      	ldr	r1, [sp, #4]
   d97a0:	4605      	mov	r5, r0
   d97a2:	e000      	b.n	d97a6 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4e>
   d97a4:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d97a6:	eb15 000a 	adds.w	r0, r5, sl
   d97aa:	d001      	beq.n	d97b0 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x58>
   d97ac:	f7ff fa00 	bl	d8bb0 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
   d97b0:	4641      	mov	r1, r8
   d97b2:	462a      	mov	r2, r5
   d97b4:	4638      	mov	r0, r7
   d97b6:	f7ff fdab 	bl	d9310 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d97ba:	4649      	mov	r1, r9
   d97bc:	f100 0210 	add.w	r2, r0, #16
   d97c0:	4640      	mov	r0, r8
   d97c2:	f7ff fda5 	bl	d9310 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d97c6:	4680      	mov	r8, r0
	if (__p)
   d97c8:	b117      	cbz	r7, d97d0 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x78>
	::operator delete(__p);
   d97ca:	4638      	mov	r0, r7
   d97cc:	f7fa fc67 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d97d0:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d97d4:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d97d8:	60b4      	str	r4, [r6, #8]
    }
   d97da:	b002      	add	sp, #8
   d97dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d97e0:	461c      	mov	r4, r3
   d97e2:	e7d8      	b.n	d9796 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3e>
   d97e4:	000e24e3 	.word	0x000e24e3

000d97e8 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d97e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d97ec:	e9d0 7900 	ldrd	r7, r9, [r0]
   d97f0:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d97f2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d97f6:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d97f8:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d97fc:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d9800:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9802:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d9806:	d102      	bne.n	d980e <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d9808:	481a      	ldr	r0, [pc, #104]	; (d9874 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x8c>)
   d980a:	f005 fe3c 	bl	df486 <_ZSt20__throw_length_errorPKc>
   d980e:	2c01      	cmp	r4, #1
   d9810:	4622      	mov	r2, r4
   d9812:	bf38      	it	cc
   d9814:	2201      	movcc	r2, #1
   d9816:	18a4      	adds	r4, r4, r2
   d9818:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d981c:	d228      	bcs.n	d9870 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d981e:	b14c      	cbz	r4, d9834 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x4c>
   d9820:	429c      	cmp	r4, r3
   d9822:	bf28      	it	cs
   d9824:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9826:	0120      	lsls	r0, r4, #4
   d9828:	9101      	str	r1, [sp, #4]
   d982a:	f7fa fc34 	bl	d4096 <_Znwj>
   d982e:	9901      	ldr	r1, [sp, #4]
   d9830:	4605      	mov	r5, r0
   d9832:	e000      	b.n	d9836 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x4e>
   d9834:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9836:	eb15 000a 	adds.w	r0, r5, sl
   d983a:	d001      	beq.n	d9840 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x58>
   d983c:	f7ff f9c7 	bl	d8bce <_ZNSt8functionIFbRiS0_EEC1ERKS2_>
   d9840:	4641      	mov	r1, r8
   d9842:	462a      	mov	r2, r5
   d9844:	4638      	mov	r0, r7
   d9846:	f7ff fd87 	bl	d9358 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0>
   d984a:	4649      	mov	r1, r9
   d984c:	f100 0210 	add.w	r2, r0, #16
   d9850:	4640      	mov	r0, r8
   d9852:	f7ff fd81 	bl	d9358 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0>
   d9856:	4680      	mov	r8, r0
	if (__p)
   d9858:	b117      	cbz	r7, d9860 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x78>
	::operator delete(__p);
   d985a:	4638      	mov	r0, r7
   d985c:	f7fa fc1f 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d9860:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d9864:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d9868:	60b4      	str	r4, [r6, #8]
    }
   d986a:	b002      	add	sp, #8
   d986c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d9870:	461c      	mov	r4, r3
   d9872:	e7d8      	b.n	d9826 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x3e>
   d9874:	000e24e3 	.word	0x000e24e3

000d9878 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d9878:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d987c:	e9d0 7900 	ldrd	r7, r9, [r0]
   d9880:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d9882:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d9886:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9888:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d988c:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d9890:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9892:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d9896:	d102      	bne.n	d989e <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d9898:	481a      	ldr	r0, [pc, #104]	; (d9904 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   d989a:	f005 fdf4 	bl	df486 <_ZSt20__throw_length_errorPKc>
   d989e:	2c01      	cmp	r4, #1
   d98a0:	4622      	mov	r2, r4
   d98a2:	bf38      	it	cc
   d98a4:	2201      	movcc	r2, #1
   d98a6:	18a4      	adds	r4, r4, r2
   d98a8:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d98ac:	d228      	bcs.n	d9900 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d98ae:	b14c      	cbz	r4, d98c4 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   d98b0:	429c      	cmp	r4, r3
   d98b2:	bf28      	it	cs
   d98b4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d98b6:	0120      	lsls	r0, r4, #4
   d98b8:	9101      	str	r1, [sp, #4]
   d98ba:	f7fa fbec 	bl	d4096 <_Znwj>
   d98be:	9901      	ldr	r1, [sp, #4]
   d98c0:	4605      	mov	r5, r0
   d98c2:	e000      	b.n	d98c6 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   d98c4:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d98c6:	eb15 000a 	adds.w	r0, r5, sl
   d98ca:	d001      	beq.n	d98d0 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   d98cc:	f7ff f9e5 	bl	d8c9a <_ZNSt8functionIFbbEEC1ERKS1_>
   d98d0:	4641      	mov	r1, r8
   d98d2:	462a      	mov	r2, r5
   d98d4:	4638      	mov	r0, r7
   d98d6:	f7ff fd87 	bl	d93e8 <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d98da:	4649      	mov	r1, r9
   d98dc:	f100 0210 	add.w	r2, r0, #16
   d98e0:	4640      	mov	r0, r8
   d98e2:	f7ff fd81 	bl	d93e8 <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d98e6:	4680      	mov	r8, r0
	if (__p)
   d98e8:	b117      	cbz	r7, d98f0 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   d98ea:	4638      	mov	r0, r7
   d98ec:	f7fa fbd7 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d98f0:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d98f4:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d98f8:	60b4      	str	r4, [r6, #8]
    }
   d98fa:	b002      	add	sp, #8
   d98fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d9900:	461c      	mov	r4, r3
   d9902:	e7d8      	b.n	d98b6 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   d9904:	000e24e3 	.word	0x000e24e3

000d9908 <_ZN11SleepHelper18PersistentDataFile5setupEv>:
void SleepHelper::PersistentDataFile::setup() {
   d9908:	b530      	push	{r4, r5, lr}
   d990a:	b089      	sub	sp, #36	; 0x24
   d990c:	4605      	mov	r5, r0
    SleepHelper::PersistentDataBase::setup();
   d990e:	f7fe fa23 	bl	d7d58 <_ZN11SleepHelper18PersistentDataBase5setupEv>
    SleepHelper::instance().withLoopFunction([this]() {
   d9912:	f7ff f837 	bl	d8984 <_ZN11SleepHelper8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   d9916:	4b28      	ldr	r3, [pc, #160]	; (d99b8 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xb0>)
   d9918:	9303      	str	r3, [sp, #12]
   d991a:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   d991c:	4b27      	ldr	r3, [pc, #156]	; (d99bc <_ZN11SleepHelper18PersistentDataFile5setupEv+0xb4>)
   d991e:	9302      	str	r3, [sp, #8]
        loopFunctions.add(fn); 
   d9920:	4669      	mov	r1, sp
   d9922:	a804      	add	r0, sp, #16
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d9924:	9500      	str	r5, [sp, #0]
   d9926:	f7ff f934 	bl	d8b92 <_ZNSt8functionIFbvEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d992a:	f8d4 06a8 	ldr.w	r0, [r4, #1704]	; 0x6a8
   d992e:	f8d4 36ac 	ldr.w	r3, [r4, #1708]	; 0x6ac
   d9932:	4298      	cmp	r0, r3
   d9934:	d031      	beq.n	d999a <_ZN11SleepHelper18PersistentDataFile5setupEv+0x92>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9936:	b110      	cbz	r0, d993e <_ZN11SleepHelper18PersistentDataFile5setupEv+0x36>
   d9938:	a904      	add	r1, sp, #16
   d993a:	f7ff f92a 	bl	d8b92 <_ZNSt8functionIFbvEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   d993e:	f8d4 36a8 	ldr.w	r3, [r4, #1704]	; 0x6a8
   d9942:	3310      	adds	r3, #16
   d9944:	f8c4 36a8 	str.w	r3, [r4, #1704]	; 0x6a8
    class function<_Res(_ArgTypes...)>
   d9948:	a804      	add	r0, sp, #16
   d994a:	f7fb fbc7 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d994e:	4668      	mov	r0, sp
   d9950:	f7fb fbc4 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
    SleepHelper::instance().withSleepOrResetFunction([this](bool) {
   d9954:	f7ff f816 	bl	d8984 <_ZN11SleepHelper8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   d9958:	4b19      	ldr	r3, [pc, #100]	; (d99c0 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xb8>)
   d995a:	9303      	str	r3, [sp, #12]
   d995c:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   d995e:	4b19      	ldr	r3, [pc, #100]	; (d99c4 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xbc>)
   d9960:	9302      	str	r3, [sp, #8]
        sleepOrResetFunctions.add(fn); 
   d9962:	4669      	mov	r1, sp
   d9964:	a804      	add	r0, sp, #16
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d9966:	9500      	str	r5, [sp, #0]
   d9968:	f7ff f997 	bl	d8c9a <_ZNSt8functionIFbbEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d996c:	f8d4 06fc 	ldr.w	r0, [r4, #1788]	; 0x6fc
   d9970:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
   d9974:	4298      	cmp	r0, r3
   d9976:	d017      	beq.n	d99a8 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xa0>
   d9978:	b110      	cbz	r0, d9980 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x78>
   d997a:	a904      	add	r1, sp, #16
   d997c:	f7ff f98d 	bl	d8c9a <_ZNSt8functionIFbbEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   d9980:	f8d4 36fc 	ldr.w	r3, [r4, #1788]	; 0x6fc
   d9984:	3310      	adds	r3, #16
   d9986:	f8c4 36fc 	str.w	r3, [r4, #1788]	; 0x6fc
    class function<_Res(_ArgTypes...)>
   d998a:	a804      	add	r0, sp, #16
   d998c:	f7fb fba6 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d9990:	4668      	mov	r0, sp
   d9992:	f7fb fba3 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
}
   d9996:	b009      	add	sp, #36	; 0x24
   d9998:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d999a:	4601      	mov	r1, r0
   d999c:	aa04      	add	r2, sp, #16
   d999e:	f204 60a4 	addw	r0, r4, #1700	; 0x6a4
   d99a2:	f7ff fe91 	bl	d96c8 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   d99a6:	e7cf      	b.n	d9948 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x40>
   d99a8:	4601      	mov	r1, r0
   d99aa:	aa04      	add	r2, sp, #16
   d99ac:	f504 60df 	add.w	r0, r4, #1784	; 0x6f8
   d99b0:	f7ff ff62 	bl	d9878 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   d99b4:	e7e9      	b.n	d998a <_ZN11SleepHelper18PersistentDataFile5setupEv+0x82>
   d99b6:	bf00      	nop
   d99b8:	000d7f03 	.word	0x000d7f03
   d99bc:	000d7deb 	.word	0x000d7deb
   d99c0:	000d7f13 	.word	0x000d7f13
   d99c4:	000d7e03 	.word	0x000d7e03

000d99c8 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
   d99c8:	b538      	push	{r3, r4, r5, lr}
   d99ca:	4603      	mov	r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d99cc:	e9d3 3500 	ldrd	r3, r5, [r3]
   d99d0:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
   d99d2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d99d6:	112c      	asrs	r4, r5, #4
	if (max_size() - size() < __n)
   d99d8:	eba3 1525 	sub.w	r5, r3, r5, asr #4
   d99dc:	428d      	cmp	r5, r1
      _M_check_len(size_type __n, const char* __s) const
   d99de:	4610      	mov	r0, r2
	if (max_size() - size() < __n)
   d99e0:	d201      	bcs.n	d99e6 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
   d99e2:	f005 fd50 	bl	df486 <_ZSt20__throw_length_errorPKc>
   d99e6:	42a1      	cmp	r1, r4
   d99e8:	bf38      	it	cc
   d99ea:	4621      	movcc	r1, r4
   d99ec:	1860      	adds	r0, r4, r1
   d99ee:	d203      	bcs.n	d99f8 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc+0x30>
   d99f0:	4298      	cmp	r0, r3
   d99f2:	bf28      	it	cs
   d99f4:	4618      	movcs	r0, r3
      }
   d99f6:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d99f8:	4618      	mov	r0, r3
   d99fa:	e7fc      	b.n	d99f6 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc+0x2e>

000d99fc <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>:
        class EventInfo {
   d99fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9a00:	460e      	mov	r6, r1
   d9a02:	4605      	mov	r5, r0
   d9a04:	f004 ffce 	bl	de9a4 <_ZN6StringC1ERKS_>
   d9a08:	6933      	ldr	r3, [r6, #16]
   d9a0a:	612b      	str	r3, [r5, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9a0c:	e9d6 3705 	ldrd	r3, r7, [r6, #20]
   d9a10:	1aff      	subs	r7, r7, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d9a12:	1138      	asrs	r0, r7, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
   d9a14:	f04f 0300 	mov.w	r3, #0
   d9a18:	e9c5 3305 	strd	r3, r3, [r5, #20]
   d9a1c:	61eb      	str	r3, [r5, #28]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d9a1e:	d001      	beq.n	d9a24 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x28>
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
   d9a20:	f7fe faed 	bl	d7ffe <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d9a24:	e9c5 0005 	strd	r0, r0, [r5, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d9a28:	4407      	add	r7, r0
   d9a2a:	61ef      	str	r7, [r5, #28]
   d9a2c:	e9d6 9705 	ldrd	r9, r7, [r6, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d9a30:	4604      	mov	r4, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d9a32:	464e      	mov	r6, r9
	  _ForwardIterator __cur = __result;
   d9a34:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d9a36:	42b7      	cmp	r7, r6
   d9a38:	d00a      	beq.n	d9a50 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x54>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d9a3a:	f1b8 0f00 	cmp.w	r8, #0
   d9a3e:	d003      	beq.n	d9a48 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x4c>
   d9a40:	4631      	mov	r1, r6
   d9a42:	4640      	mov	r0, r8
   d9a44:	f004 ffae 	bl	de9a4 <_ZN6StringC1ERKS_>
   d9a48:	f108 0810 	add.w	r8, r8, #16
   d9a4c:	3610      	adds	r6, #16
   d9a4e:	e7f2      	b.n	d9a36 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x3a>
	this->_M_impl._M_finish =
   d9a50:	eba7 0709 	sub.w	r7, r7, r9
   d9a54:	443c      	add	r4, r7
   d9a56:	61ac      	str	r4, [r5, #24]
   d9a58:	4628      	mov	r0, r5
   d9a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d9a60 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d9a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9a64:	e9d0 8a00 	ldrd	r8, sl, [r0]
   d9a68:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   d9a6a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9a6e:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
   d9a72:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   d9a76:	4607      	mov	r7, r0
   d9a78:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9a7a:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   d9a7e:	d102      	bne.n	d9a86 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d9a80:	4825      	ldr	r0, [pc, #148]	; (d9b18 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb8>)
   d9a82:	f005 fd00 	bl	df486 <_ZSt20__throw_length_errorPKc>
   d9a86:	2c01      	cmp	r4, #1
   d9a88:	4622      	mov	r2, r4
   d9a8a:	bf38      	it	cc
   d9a8c:	2201      	movcc	r2, #1
   d9a8e:	18a4      	adds	r4, r4, r2
   d9a90:	eba1 0608 	sub.w	r6, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d9a94:	d23d      	bcs.n	d9b12 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d9a96:	b13c      	cbz	r4, d9aa8 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
   d9a98:	429c      	cmp	r4, r3
   d9a9a:	bf28      	it	cs
   d9a9c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9a9e:	00e0      	lsls	r0, r4, #3
   d9aa0:	f7fa faf9 	bl	d4096 <_Znwj>
   d9aa4:	4605      	mov	r5, r0
   d9aa6:	e000      	b.n	d9aaa <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x4a>
   d9aa8:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9aaa:	19ab      	adds	r3, r5, r6
   d9aac:	bf1c      	itt	ne
   d9aae:	e9db 0100 	ldrdne	r0, r1, [fp]
   d9ab2:	e9c3 0100 	strdne	r0, r1, [r3]
   d9ab6:	2300      	movs	r3, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d9ab8:	eb08 0203 	add.w	r2, r8, r3
   d9abc:	4591      	cmp	r9, r2
   d9abe:	d00a      	beq.n	d9ad6 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x76>
   d9ac0:	eb15 0c03 	adds.w	ip, r5, r3
   d9ac4:	bf18      	it	ne
   d9ac6:	e9d2 0100 	ldrdne	r0, r1, [r2]
   d9aca:	f103 0308 	add.w	r3, r3, #8
   d9ace:	bf18      	it	ne
   d9ad0:	e9cc 0100 	strdne	r0, r1, [ip]
   d9ad4:	e7f0      	b.n	d9ab8 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x58>
	      ++__new_finish;
   d9ad6:	3608      	adds	r6, #8
   d9ad8:	442e      	add	r6, r5
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d9ada:	4632      	mov	r2, r6
   d9adc:	464b      	mov	r3, r9
      for (; __first != __last; ++__first, (void)++__cur)
   d9ade:	4553      	cmp	r3, sl
   d9ae0:	f102 0208 	add.w	r2, r2, #8
   d9ae4:	d005      	beq.n	d9af2 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x92>
   d9ae6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d9aea:	3308      	adds	r3, #8
   d9aec:	e902 0003 	stmdb	r2, {r0, r1}
   d9af0:	e7f5      	b.n	d9ade <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7e>
   d9af2:	eba3 0309 	sub.w	r3, r3, r9
   d9af6:	441e      	add	r6, r3
	if (__p)
   d9af8:	f1b8 0f00 	cmp.w	r8, #0
   d9afc:	d002      	beq.n	d9b04 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>
	::operator delete(__p);
   d9afe:	4640      	mov	r0, r8
   d9b00:	f7fa facd 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d9b04:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   d9b08:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d9b0c:	60bc      	str	r4, [r7, #8]
    }
   d9b0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d9b12:	461c      	mov	r4, r3
   d9b14:	e7c3      	b.n	d9a9e <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
   d9b16:	bf00      	nop
   d9b18:	000e24e3 	.word	0x000e24e3

000d9b1c <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE>:
    SleepHelper &withSleepReadyFunction(std::function<bool(AppCallbackState &, system_tick_t)> fn) {
   d9b1c:	b510      	push	{r4, lr}
   d9b1e:	4604      	mov	r4, r0
   d9b20:	b086      	sub	sp, #24
        sleepReadyFunctions.add(fn); 
   d9b22:	a802      	add	r0, sp, #8
   d9b24:	f7ff f844 	bl	d8bb0 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d9b28:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
   d9b2c:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
   d9b30:	4298      	cmp	r0, r3
   d9b32:	d024      	beq.n	d9b7e <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x62>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9b34:	b110      	cbz	r0, d9b3c <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x20>
   d9b36:	a902      	add	r1, sp, #8
   d9b38:	f7ff f83a 	bl	d8bb0 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   d9b3c:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
   d9b40:	3310      	adds	r3, #16
   d9b42:	f8c4 36cc 	str.w	r3, [r4, #1740]	; 0x6cc
    class AppCallbackState {
   d9b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9b4a:	2200      	movs	r2, #0
   d9b4c:	e9cd 3200 	strd	r3, r2, [sp]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d9b50:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
   d9b54:	f8d4 26dc 	ldr.w	r2, [r4, #1756]	; 0x6dc
   d9b58:	4293      	cmp	r3, r2
   d9b5a:	d017      	beq.n	d9b8c <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x70>
   d9b5c:	b123      	cbz	r3, d9b68 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x4c>
   d9b5e:	2100      	movs	r1, #0
   d9b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9b64:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   d9b68:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
   d9b6c:	3308      	adds	r3, #8
   d9b6e:	f8c4 36d8 	str.w	r3, [r4, #1752]	; 0x6d8
   d9b72:	a802      	add	r0, sp, #8
   d9b74:	f7fb fab2 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
    }
   d9b78:	4620      	mov	r0, r4
   d9b7a:	b006      	add	sp, #24
   d9b7c:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   d9b7e:	4601      	mov	r1, r0
   d9b80:	aa02      	add	r2, sp, #8
   d9b82:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
   d9b86:	f7ff fde7 	bl	d9758 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   d9b8a:	e7dc      	b.n	d9b46 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x2a>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   d9b8c:	466a      	mov	r2, sp
   d9b8e:	4619      	mov	r1, r3
   d9b90:	f204 60d4 	addw	r0, r4, #1748	; 0x6d4
   d9b94:	f7ff ff64 	bl	d9a60 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
   d9b98:	e7eb      	b.n	d9b72 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x56>
	...

000d9b9c <_ZN11SleepHelper5setupEv>:
void SleepHelper::setup() {
   d9b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9ba0:	b08a      	sub	sp, #40	; 0x28
        int reason = RESET_REASON_NONE;
   d9ba2:	2300      	movs	r3, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d9ba4:	ad06      	add	r5, sp, #24
   d9ba6:	4604      	mov	r4, r0
   d9ba8:	461a      	mov	r2, r3
   d9baa:	4619      	mov	r1, r3
   d9bac:	4628      	mov	r0, r5
        int reason = RESET_REASON_NONE;
   d9bae:	9306      	str	r3, [sp, #24]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d9bb0:	f002 f8b6 	bl	dbd20 <HAL_Core_Get_Last_Reset_Info>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d9bb4:	4a3e      	ldr	r2, [pc, #248]	; (d9cb0 <_ZN11SleepHelper5setupEv+0x114>)
   d9bb6:	483f      	ldr	r0, [pc, #252]	; (d9cb4 <_ZN11SleepHelper5setupEv+0x118>)
        return reason;
   d9bb8:	f8dd 8018 	ldr.w	r8, [sp, #24]
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d9bbc:	2300      	movs	r3, #0
   d9bbe:	2100      	movs	r1, #0
   d9bc0:	f002 fb08 	bl	dc1d4 <system_subscribe_event>
     * @brief Get the quick wake schedule
     * 
     * @return LocalTimeSchedule& 
     */
    LocalTimeSchedule &getScheduleQuick() {
        return scheduleManager.getScheduleByName("quick");
   d9bc4:	f504 66c7 	add.w	r6, r4, #1592	; 0x638
    persistentData.setup();
   d9bc8:	f504 60bd 	add.w	r0, r4, #1512	; 0x5e8
   d9bcc:	f7ff fe9c 	bl	d9908 <_ZN11SleepHelper18PersistentDataFile5setupEv>
   d9bd0:	4939      	ldr	r1, [pc, #228]	; (d9cb8 <_ZN11SleepHelper5setupEv+0x11c>)
   d9bd2:	4630      	mov	r0, r6
   d9bd4:	f7fc ff9a 	bl	d6b0c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        this->flags = flags;
   d9bd8:	2701      	movs	r7, #1
     * 
     * @return LocalTimeSchedule& 
     * 
     */
    LocalTimeSchedule &getScheduleDataCapture() {
        return scheduleManager.getScheduleByName("data");
   d9bda:	4938      	ldr	r1, [pc, #224]	; (d9cbc <_ZN11SleepHelper5setupEv+0x120>)
   d9bdc:	6107      	str	r7, [r0, #16]
   d9bde:	4630      	mov	r0, r6
   d9be0:	f7fc ff94 	bl	d6b0c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        return scheduleManager.getScheduleByName("full");
   d9be4:	4936      	ldr	r1, [pc, #216]	; (d9cc0 <_ZN11SleepHelper5setupEv+0x124>)
   d9be6:	6107      	str	r7, [r0, #16]
   d9be8:	4630      	mov	r0, r6
   d9bea:	f7fc ff8f 	bl	d6b0c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
   d9bee:	2302      	movs	r3, #2
   d9bf0:	6103      	str	r3, [r0, #16]
	BackgroundPublishRK::instance().start();
   d9bf2:	f7fb fab7 	bl	d5164 <_ZN19BackgroundPublishRK8instanceEv>
   d9bf6:	f7fb fbd9 	bl	d53ac <_ZN19BackgroundPublishRK5startEv>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d9bfa:	f8d4 6698 	ldr.w	r6, [r4, #1688]	; 0x698
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   d9bfe:	f8d4 369c 	ldr.w	r3, [r4, #1692]	; 0x69c
   d9c02:	42b3      	cmp	r3, r6
   d9c04:	d004      	beq.n	d9c10 <_ZN11SleepHelper5setupEv+0x74>
                (*it)(args...);
   d9c06:	4630      	mov	r0, r6
   d9c08:	f7ff f8db 	bl	d8dc2 <_ZNKSt8functionIFbvEEclEv>
      operator++() _GLIBCXX_NOEXCEPT
   d9c0c:	3610      	adds	r6, #16
	return *this;
   d9c0e:	e7f6      	b.n	d9bfe <_ZN11SleepHelper5setupEv+0x62>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d9c10:	f8d4 66ec 	ldr.w	r6, [r4, #1772]	; 0x6ec
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   d9c14:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
   d9c18:	42b3      	cmp	r3, r6
   d9c1a:	d006      	beq.n	d9c2a <_ZN11SleepHelper5setupEv+0x8e>
                (*it)(args...);
   d9c1c:	4630      	mov	r0, r6
   d9c1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   d9c22:	f7ff f8d7 	bl	d8dd4 <_ZNKSt8functionIFbiEEclEi>
      operator++() _GLIBCXX_NOEXCEPT
   d9c26:	3610      	adds	r6, #16
	return *this;
   d9c28:	e7f4      	b.n	d9c14 <_ZN11SleepHelper5setupEv+0x78>
	    _M_invoker = &_My_handler::_M_invoke;
   d9c2a:	4b26      	ldr	r3, [pc, #152]	; (d9cc4 <_ZN11SleepHelper5setupEv+0x128>)
   d9c2c:	9309      	str	r3, [sp, #36]	; 0x24
    });
   d9c2e:	4629      	mov	r1, r5
	    _M_manager = &_My_handler::_M_manager;
   d9c30:	4b25      	ldr	r3, [pc, #148]	; (d9cc8 <_ZN11SleepHelper5setupEv+0x12c>)
   d9c32:	9308      	str	r3, [sp, #32]
   d9c34:	4620      	mov	r0, r4
   d9c36:	f7ff ff71 	bl	d9b1c <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE>
    class function<_Res(_ArgTypes...)>
   d9c3a:	4628      	mov	r0, r5
   d9c3c:	f7fb fa4e 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   d9c40:	4b22      	ldr	r3, [pc, #136]	; (d9ccc <_ZN11SleepHelper5setupEv+0x130>)
   d9c42:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d9c44:	4b22      	ldr	r3, [pc, #136]	; (d9cd0 <_ZN11SleepHelper5setupEv+0x134>)
   d9c46:	9308      	str	r3, [sp, #32]
    });
   d9c48:	2204      	movs	r2, #4
   d9c4a:	2300      	movs	r3, #0
   d9c4c:	9500      	str	r5, [sp, #0]
   d9c4e:	4620      	mov	r0, r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d9c50:	f8cd 8018 	str.w	r8, [sp, #24]
   d9c54:	f7ff fc58 	bl	d9508 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   d9c58:	4628      	mov	r0, r5
   d9c5a:	f7fb fa3f 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   d9c5e:	4b1d      	ldr	r3, [pc, #116]	; (d9cd4 <_ZN11SleepHelper5setupEv+0x138>)
   d9c60:	9305      	str	r3, [sp, #20]
        shouldConnectFunctions.add(fn); 
   d9c62:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d9c64:	4b1c      	ldr	r3, [pc, #112]	; (d9cd8 <_ZN11SleepHelper5setupEv+0x13c>)
   d9c66:	9304      	str	r3, [sp, #16]
   d9c68:	4628      	mov	r0, r5
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d9c6a:	9402      	str	r4, [sp, #8]
   d9c6c:	f7fe ffaf 	bl	d8bce <_ZNSt8functionIFbRiS0_EEC1ERKS2_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d9c70:	f8d4 06e4 	ldr.w	r0, [r4, #1764]	; 0x6e4
   d9c74:	f8d4 36e8 	ldr.w	r3, [r4, #1768]	; 0x6e8
   d9c78:	4298      	cmp	r0, r3
   d9c7a:	d011      	beq.n	d9ca0 <_ZN11SleepHelper5setupEv+0x104>
   d9c7c:	b110      	cbz	r0, d9c84 <_ZN11SleepHelper5setupEv+0xe8>
   d9c7e:	4629      	mov	r1, r5
   d9c80:	f7fe ffa5 	bl	d8bce <_ZNSt8functionIFbRiS0_EEC1ERKS2_>
	    ++this->_M_impl._M_finish;
   d9c84:	f8d4 36e4 	ldr.w	r3, [r4, #1764]	; 0x6e4
   d9c88:	3310      	adds	r3, #16
   d9c8a:	f8c4 36e4 	str.w	r3, [r4, #1764]	; 0x6e4
    class function<_Res(_ArgTypes...)>
   d9c8e:	4628      	mov	r0, r5
   d9c90:	f7fb fa24 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   d9c94:	a802      	add	r0, sp, #8
   d9c96:	f7fb fa21 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
}
   d9c9a:	b00a      	add	sp, #40	; 0x28
   d9c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  _M_realloc_insert(end(), __x);
   d9ca0:	4601      	mov	r1, r0
   d9ca2:	462a      	mov	r2, r5
   d9ca4:	f504 60dc 	add.w	r0, r4, #1760	; 0x6e0
   d9ca8:	f7ff fd9e 	bl	d97e8 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
   d9cac:	e7ef      	b.n	d9c8e <_ZN11SleepHelper5setupEv+0xf2>
   d9cae:	bf00      	nop
   d9cb0:	000d8d33 	.word	0x000d8d33
   d9cb4:	00040b00 	.word	0x00040b00
   d9cb8:	000e2a53 	.word	0x000e2a53
   d9cbc:	000e259f 	.word	0x000e259f
   d9cc0:	000e2a59 	.word	0x000e2a59
   d9cc4:	000d7f23 	.word	0x000d7f23
   d9cc8:	000d7d5f 	.word	0x000d7d5f
   d9ccc:	000d7e8d 	.word	0x000d7e8d
   d9cd0:	000d7d69 	.word	0x000d7d69
   d9cd4:	000dade9 	.word	0x000dade9
   d9cd8:	000d7d81 	.word	0x000d7d81

000d9cdc <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
   d9cdc:	b538      	push	{r3, r4, r5, lr}
   d9cde:	4604      	mov	r4, r0
   d9ce0:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   d9ce2:	42ac      	cmp	r4, r5
   d9ce4:	d004      	beq.n	d9cf0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_+0x14>
    { __pointer->~_Tp(); }
   d9ce6:	4620      	mov	r0, r4
   d9ce8:	f004 fdc6 	bl	de878 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   d9cec:	3410      	adds	r4, #16
   d9cee:	e7f8      	b.n	d9ce2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   d9cf0:	bd38      	pop	{r3, r4, r5, pc}

000d9cf2 <_ZNSt6vectorI6StringSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   d9cf2:	b510      	push	{r4, lr}
   d9cf4:	4604      	mov	r4, r0
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   d9cf6:	e9d0 0100 	ldrd	r0, r1, [r0]
   d9cfa:	f7ff ffef 	bl	d9cdc <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   d9cfe:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d9d00:	b108      	cbz	r0, d9d06 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x14>
	::operator delete(__p);
   d9d02:	f7fa f9cc 	bl	d409e <_ZdlPv>
      }
   d9d06:	4620      	mov	r0, r4
   d9d08:	bd10      	pop	{r4, pc}

000d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>:
        class EventInfo {
   d9d0a:	b510      	push	{r4, lr}
   d9d0c:	4604      	mov	r4, r0
   d9d0e:	3014      	adds	r0, #20
   d9d10:	f7ff ffef 	bl	d9cf2 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   d9d14:	4620      	mov	r0, r4
   d9d16:	f004 fdaf 	bl	de878 <_ZN6StringD1Ev>
   d9d1a:	4620      	mov	r0, r4
   d9d1c:	bd10      	pop	{r4, pc}
	...

000d9d20 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d9d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9d24:	e9d0 8a00 	ldrd	r8, sl, [r0]
   d9d28:	460f      	mov	r7, r1
	if (max_size() - size() < __n)
   d9d2a:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
   d9d2e:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9d30:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
   d9d34:	ebb3 1f62 	cmp.w	r3, r2, asr #5
   d9d38:	4681      	mov	r9, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9d3a:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
   d9d3e:	d102      	bne.n	d9d46 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d9d40:	482b      	ldr	r0, [pc, #172]	; (d9df0 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xd0>)
   d9d42:	f005 fba0 	bl	df486 <_ZSt20__throw_length_errorPKc>
   d9d46:	2c01      	cmp	r4, #1
   d9d48:	4622      	mov	r2, r4
   d9d4a:	bf38      	it	cc
   d9d4c:	2201      	movcc	r2, #1
   d9d4e:	18a4      	adds	r4, r4, r2
   d9d50:	eba7 0608 	sub.w	r6, r7, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d9d54:	d24a      	bcs.n	d9dec <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xcc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d9d56:	b14c      	cbz	r4, d9d6c <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   d9d58:	429c      	cmp	r4, r3
   d9d5a:	bf28      	it	cs
   d9d5c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9d5e:	0160      	lsls	r0, r4, #5
   d9d60:	9101      	str	r1, [sp, #4]
   d9d62:	f7fa f998 	bl	d4096 <_Znwj>
   d9d66:	9901      	ldr	r1, [sp, #4]
   d9d68:	4605      	mov	r5, r0
   d9d6a:	e000      	b.n	d9d6e <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   d9d6c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9d6e:	19a8      	adds	r0, r5, r6
   d9d70:	d001      	beq.n	d9d76 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x56>
   d9d72:	f7ff fe43 	bl	d99fc <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   d9d76:	46ab      	mov	fp, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d9d78:	4646      	mov	r6, r8
	      for (; __first != __last; ++__first, (void)++__cur)
   d9d7a:	42b7      	cmp	r7, r6
   d9d7c:	d00a      	beq.n	d9d94 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x74>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d9d7e:	f1bb 0f00 	cmp.w	fp, #0
   d9d82:	d003      	beq.n	d9d8c <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x6c>
   d9d84:	4631      	mov	r1, r6
   d9d86:	4658      	mov	r0, fp
   d9d88:	f7ff fe38 	bl	d99fc <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   d9d8c:	3620      	adds	r6, #32
   d9d8e:	f10b 0b20 	add.w	fp, fp, #32
   d9d92:	e7f2      	b.n	d9d7a <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x5a>
	      ++__new_finish;
   d9d94:	eba6 0708 	sub.w	r7, r6, r8
   d9d98:	3720      	adds	r7, #32
   d9d9a:	442f      	add	r7, r5
	  _ForwardIterator __cur = __result;
   d9d9c:	463b      	mov	r3, r7
   d9d9e:	46b3      	mov	fp, r6
	      for (; __first != __last; ++__first, (void)++__cur)
   d9da0:	45d3      	cmp	fp, sl
   d9da2:	d10a      	bne.n	d9dba <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x9a>
   d9da4:	ebaa 0606 	sub.w	r6, sl, r6
   d9da8:	4437      	add	r7, r6
   d9daa:	4646      	mov	r6, r8
	  for (; __first != __last; ++__first)
   d9dac:	4556      	cmp	r6, sl
   d9dae:	d00e      	beq.n	d9dce <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xae>
    { __pointer->~_Tp(); }
   d9db0:	4630      	mov	r0, r6
   d9db2:	f7ff ffaa 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
	  for (; __first != __last; ++__first)
   d9db6:	3620      	adds	r6, #32
   d9db8:	e7f8      	b.n	d9dac <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d9dba:	4659      	mov	r1, fp
   d9dbc:	4618      	mov	r0, r3
   d9dbe:	9301      	str	r3, [sp, #4]
   d9dc0:	f7ff fe1c 	bl	d99fc <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   d9dc4:	9b01      	ldr	r3, [sp, #4]
   d9dc6:	f10b 0b20 	add.w	fp, fp, #32
   d9dca:	3320      	adds	r3, #32
   d9dcc:	e7e8      	b.n	d9da0 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x80>
	if (__p)
   d9dce:	f1b8 0f00 	cmp.w	r8, #0
   d9dd2:	d002      	beq.n	d9dda <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xba>
	::operator delete(__p);
   d9dd4:	4640      	mov	r0, r8
   d9dd6:	f7fa f962 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d9dda:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
   d9dde:	e9c9 5700 	strd	r5, r7, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d9de2:	f8c9 4008 	str.w	r4, [r9, #8]
    }
   d9de6:	b003      	add	sp, #12
   d9de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d9dec:	461c      	mov	r4, r3
   d9dee:	e7b6      	b.n	d9d5e <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   d9df0:	000e24e3 	.word	0x000e24e3

000d9df4 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
   d9df4:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d9df6:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d9dfa:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d9dfc:	4604      	mov	r4, r0
   d9dfe:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d9e00:	d007      	beq.n	d9e12 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9e02:	b113      	cbz	r3, d9e0a <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_+0x16>
   d9e04:	4618      	mov	r0, r3
   d9e06:	f7ff fdf9 	bl	d99fc <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
	    ++this->_M_impl._M_finish;
   d9e0a:	6863      	ldr	r3, [r4, #4]
   d9e0c:	3320      	adds	r3, #32
   d9e0e:	6063      	str	r3, [r4, #4]
      }
   d9e10:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d9e12:	4619      	mov	r1, r3
   d9e14:	f7ff ff84 	bl	d9d20 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
   d9e18:	e7fa      	b.n	d9e10 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_+0x1c>

000d9e1a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>:
      { }

      template<typename _Iterator1, typename _Iterator2>
        _GLIBCXX14_CONSTEXPR
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
   d9e1a:	b510      	push	{r4, lr}
   d9e1c:	b090      	sub	sp, #64	; 0x40
   d9e1e:	460c      	mov	r4, r1
        { return bool(_M_comp(*__it1, *__it2)); }
   d9e20:	4601      	mov	r1, r0
   d9e22:	a808      	add	r0, sp, #32
   d9e24:	f7ff fdea 	bl	d99fc <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   d9e28:	4621      	mov	r1, r4
   d9e2a:	4668      	mov	r0, sp
   d9e2c:	f7ff fde6 	bl	d99fc <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
            return a.priority > b.priority;
   d9e30:	9c04      	ldr	r4, [sp, #16]
   d9e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9e34:	4668      	mov	r0, sp
   d9e36:	42a3      	cmp	r3, r4
   d9e38:	bfd4      	ite	le
   d9e3a:	2400      	movle	r4, #0
   d9e3c:	2401      	movgt	r4, #1
   d9e3e:	f7ff ff64 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   d9e42:	a808      	add	r0, sp, #32
   d9e44:	f7ff ff61 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   d9e48:	4620      	mov	r0, r4
   d9e4a:	b010      	add	sp, #64	; 0x40
   d9e4c:	bd10      	pop	{r4, pc}

000d9e4e <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   d9e4e:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d9e50:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   d9e54:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   d9e56:	42ae      	cmp	r6, r5
   d9e58:	d004      	beq.n	d9e64 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev+0x16>
    { __pointer->~_Tp(); }
   d9e5a:	4628      	mov	r0, r5
   d9e5c:	f7ff ff55 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
	  for (; __first != __last; ++__first)
   d9e60:	3520      	adds	r5, #32
   d9e62:	e7f8      	b.n	d9e56 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   d9e64:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d9e66:	b108      	cbz	r0, d9e6c <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev+0x1e>
	::operator delete(__p);
   d9e68:	f7fa f919 	bl	d409e <_ZdlPv>
      }
   d9e6c:	4620      	mov	r0, r4
   d9e6e:	bd70      	pop	{r4, r5, r6, pc}

000d9e70 <_ZNSt6vectorI6StringSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
   d9e70:	b538      	push	{r3, r4, r5, lr}
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   d9e72:	e9d0 5100 	ldrd	r5, r1, [r0]
   d9e76:	428d      	cmp	r5, r1
      clear() _GLIBCXX_NOEXCEPT
   d9e78:	4604      	mov	r4, r0
	if (size_type __n = this->_M_impl._M_finish - __pos)
   d9e7a:	d003      	beq.n	d9e84 <_ZNSt6vectorI6StringSaIS0_EE5clearEv+0x14>
	__destroy(__first, __last);
   d9e7c:	4628      	mov	r0, r5
   d9e7e:	f7ff ff2d 	bl	d9cdc <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   d9e82:	6065      	str	r5, [r4, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
   d9e84:	bd38      	pop	{r3, r4, r5, pc}

000d9e86 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>:
   d9e86:	b538      	push	{r3, r4, r5, lr}
   d9e88:	460c      	mov	r4, r1
   d9e8a:	4605      	mov	r5, r0
   d9e8c:	f004 fd70 	bl	de970 <_ZN6StringC1EOS_>
   d9e90:	6923      	ldr	r3, [r4, #16]
   d9e92:	612b      	str	r3, [r5, #16]
	  _M_end_of_storage(__x._M_end_of_storage)
   d9e94:	6963      	ldr	r3, [r4, #20]
   d9e96:	616b      	str	r3, [r5, #20]
   d9e98:	69a3      	ldr	r3, [r4, #24]
   d9e9a:	61ab      	str	r3, [r5, #24]
   d9e9c:	69e3      	ldr	r3, [r4, #28]
   d9e9e:	61eb      	str	r3, [r5, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   d9ea0:	2300      	movs	r3, #0
   d9ea2:	e9c4 3306 	strd	r3, r3, [r4, #24]
   d9ea6:	6163      	str	r3, [r4, #20]
   d9ea8:	4628      	mov	r0, r5
   d9eaa:	bd38      	pop	{r3, r4, r5, pc}

000d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>:
   d9eac:	b530      	push	{r4, r5, lr}
   d9eae:	460d      	mov	r5, r1
   d9eb0:	4604      	mov	r4, r0
   d9eb2:	b085      	sub	sp, #20
   d9eb4:	f004 fd81 	bl	de9ba <_ZN6StringaSEOS_>
   d9eb8:	692b      	ldr	r3, [r5, #16]
   d9eba:	6123      	str	r3, [r4, #16]
	  _M_start = __x._M_start;
   d9ebc:	6968      	ldr	r0, [r5, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
   d9ebe:	69e3      	ldr	r3, [r4, #28]
   d9ec0:	9303      	str	r3, [sp, #12]
	  _M_finish = __x._M_finish;
   d9ec2:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
	  _M_start = __x._M_start;
   d9ec6:	6160      	str	r0, [r4, #20]
	  _M_finish = __x._M_finish;
   d9ec8:	69a8      	ldr	r0, [r5, #24]
   d9eca:	61a0      	str	r0, [r4, #24]
	  _M_end_of_storage = __x._M_end_of_storage;
   d9ecc:	69e8      	ldr	r0, [r5, #28]
   d9ece:	61e0      	str	r0, [r4, #28]
	  _M_start = __x._M_start;
   d9ed0:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
   d9ed2:	e9c5 3305 	strd	r3, r3, [r5, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
   d9ed6:	61eb      	str	r3, [r5, #28]
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
      {
	vector __tmp(get_allocator());
   d9ed8:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   d9eda:	e9cd 1201 	strd	r1, r2, [sp, #4]
	vector __tmp(get_allocator());
   d9ede:	f7ff ff08 	bl	d9cf2 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   d9ee2:	4620      	mov	r0, r4
   d9ee4:	b005      	add	sp, #20
   d9ee6:	bd30      	pop	{r4, r5, pc}

000d9ee8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0>:
    }

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   d9ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9eec:	4698      	mov	r8, r3
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
   d9eee:	1e53      	subs	r3, r2, #1
   d9ef0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   d9ef4:	b099      	sub	sp, #100	; 0x64
   d9ef6:	4605      	mov	r5, r0
   d9ef8:	460f      	mov	r7, r1
   d9efa:	4616      	mov	r6, r2
      while (__secondChild < (__len - 1) / 2)
   d9efc:	ea4f 0a63 	mov.w	sl, r3, asr #1
   d9f00:	460c      	mov	r4, r1
   d9f02:	45a2      	cmp	sl, r4
   d9f04:	ea4f 1944 	mov.w	r9, r4, lsl #5
   d9f08:	dd13      	ble.n	d9f32 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x4a>
	{
	  __secondChild = 2 * (__secondChild + 1);
   d9f0a:	1c60      	adds	r0, r4, #1
   d9f0c:	0044      	lsls	r4, r0, #1
	  if (__comp(__first + __secondChild,
   d9f0e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d9f12:	eb05 114b 	add.w	r1, r5, fp, lsl #5
   d9f16:	eb05 1080 	add.w	r0, r5, r0, lsl #6
   d9f1a:	f7ff ff7e 	bl	d9e1a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
		     __first + (__secondChild - 1)))
	    __secondChild--;
   d9f1e:	2800      	cmp	r0, #0
   d9f20:	bf18      	it	ne
   d9f22:	465c      	movne	r4, fp
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   d9f24:	eb05 1144 	add.w	r1, r5, r4, lsl #5
   d9f28:	eb05 0009 	add.w	r0, r5, r9
   d9f2c:	f7ff ffbe 	bl	d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      while (__secondChild < (__len - 1) / 2)
   d9f30:	e7e7      	b.n	d9f02 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x1a>
	  __holeIndex = __secondChild;
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   d9f32:	07f3      	lsls	r3, r6, #31
   d9f34:	d40d      	bmi.n	d9f52 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x6a>
   d9f36:	3e02      	subs	r6, #2
   d9f38:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   d9f3c:	ebb4 0f66 	cmp.w	r4, r6, asr #1
   d9f40:	d107      	bne.n	d9f52 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x6a>
	{
	  __secondChild = 2 * (__secondChild + 1);
   d9f42:	0064      	lsls	r4, r4, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   d9f44:	3401      	adds	r4, #1
   d9f46:	eb05 1144 	add.w	r1, r5, r4, lsl #5
   d9f4a:	eb05 0009 	add.w	r0, r5, r9
   d9f4e:	f7ff ffad 	bl	d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
   d9f52:	4641      	mov	r1, r8
   d9f54:	4668      	mov	r0, sp
      _Distance __parent = (__holeIndex - 1) / 2;
   d9f56:	1e66      	subs	r6, r4, #1
      std::__push_heap(__first, __holeIndex, __topIndex,
   d9f58:	f7ff ff95 	bl	d9e86 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
      _Distance __parent = (__holeIndex - 1) / 2;
   d9f5c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   d9f60:	1076      	asrs	r6, r6, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   d9f62:	42a7      	cmp	r7, r4
   d9f64:	eb05 1844 	add.w	r8, r5, r4, lsl #5
   d9f68:	da1f      	bge.n	d9faa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0xc2>
      { return __normal_iterator(_M_current + __n); }
   d9f6a:	eb05 1446 	add.w	r4, r5, r6, lsl #5
#endif

      template<typename _Iterator, typename _Value>
	bool
	operator()(_Iterator __it, _Value& __val)
	{ return bool(_M_comp(*__it, __val)); }
   d9f6e:	4621      	mov	r1, r4
   d9f70:	a808      	add	r0, sp, #32
   d9f72:	f7ff fd43 	bl	d99fc <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   d9f76:	4669      	mov	r1, sp
   d9f78:	a810      	add	r0, sp, #64	; 0x40
   d9f7a:	f7ff fd3f 	bl	d99fc <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   d9f7e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   d9f82:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   d9f86:	a810      	add	r0, sp, #64	; 0x40
   d9f88:	f7ff febf 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   d9f8c:	a808      	add	r0, sp, #32
   d9f8e:	f7ff febc 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   d9f92:	45ca      	cmp	sl, r9
   d9f94:	dd09      	ble.n	d9faa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0xc2>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   d9f96:	4621      	mov	r1, r4
   d9f98:	4640      	mov	r0, r8
   d9f9a:	f7ff ff87 	bl	d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	  __parent = (__holeIndex - 1) / 2;
   d9f9e:	1e73      	subs	r3, r6, #1
   d9fa0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
	  __holeIndex = __parent;
   d9fa4:	4634      	mov	r4, r6
	  __parent = (__holeIndex - 1) / 2;
   d9fa6:	105e      	asrs	r6, r3, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   d9fa8:	e7db      	b.n	d9f62 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x7a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   d9faa:	4669      	mov	r1, sp
   d9fac:	4640      	mov	r0, r8
   d9fae:	f7ff ff7d 	bl	d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      std::__push_heap(__first, __holeIndex, __topIndex,
   d9fb2:	4668      	mov	r0, sp
   d9fb4:	f7ff fea9 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
		       _GLIBCXX_MOVE(__value), __cmp);
    }
   d9fb8:	b019      	add	sp, #100	; 0x64
   d9fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9fbe <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_SI_RT0_.isra.0>:

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
   d9fbe:	b570      	push	{r4, r5, r6, lr}
   d9fc0:	b092      	sub	sp, #72	; 0x48
   d9fc2:	4605      	mov	r5, r0
   d9fc4:	4616      	mov	r6, r2
   d9fc6:	460c      	mov	r4, r1
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
   d9fc8:	a802      	add	r0, sp, #8
   d9fca:	4611      	mov	r1, r2
   d9fcc:	f7ff ff5b 	bl	d9e86 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
      *__result = _GLIBCXX_MOVE(*__first);
   d9fd0:	4629      	mov	r1, r5
   d9fd2:	4630      	mov	r0, r6
   d9fd4:	f7ff ff6a 	bl	d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   d9fd8:	1b62      	subs	r2, r4, r5
   d9fda:	1152      	asrs	r2, r2, #5
      std::__adjust_heap(__first, _DistanceType(0),
   d9fdc:	a902      	add	r1, sp, #8
   d9fde:	a80a      	add	r0, sp, #40	; 0x28
   d9fe0:	9201      	str	r2, [sp, #4]
   d9fe2:	f7ff ff50 	bl	d9e86 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
   d9fe6:	9a01      	ldr	r2, [sp, #4]
   d9fe8:	ab0a      	add	r3, sp, #40	; 0x28
   d9fea:	2100      	movs	r1, #0
   d9fec:	4628      	mov	r0, r5
   d9fee:	f7ff ff7b 	bl	d9ee8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0>
   d9ff2:	a80a      	add	r0, sp, #40	; 0x28
   d9ff4:	f7ff fe89 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
   d9ff8:	a802      	add	r0, sp, #8
   d9ffa:	f7ff fe86 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
			 _DistanceType(__last - __first),
			 _GLIBCXX_MOVE(__value), __comp);
    }
   d9ffe:	b012      	add	sp, #72	; 0x48
   da000:	bd70      	pop	{r4, r5, r6, pc}

000da002 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
   da002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da006:	b098      	sub	sp, #96	; 0x60
   da008:	4604      	mov	r4, r0
			      _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
   da00a:	4601      	mov	r1, r0
   da00c:	4668      	mov	r0, sp
   da00e:	f7ff ff3a 	bl	d9e86 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
	--_M_current;
   da012:	3c20      	subs	r4, #32
#endif

      template<typename _Value, typename _Iterator>
	bool
	operator()(_Value& __val, _Iterator __it)
	{ return bool(_M_comp(__val, *__it)); }
   da014:	4669      	mov	r1, sp
   da016:	a808      	add	r0, sp, #32
   da018:	f7ff fcf0 	bl	d99fc <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   da01c:	4621      	mov	r1, r4
   da01e:	a810      	add	r0, sp, #64	; 0x40
   da020:	f7ff fcec 	bl	d99fc <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   da024:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   da028:	9f14      	ldr	r7, [sp, #80]	; 0x50
   da02a:	a810      	add	r0, sp, #64	; 0x40
   da02c:	f7ff fe6d 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   da030:	a808      	add	r0, sp, #32
   da032:	f7ff fe6a 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
   da036:	45b8      	cmp	r8, r7
   da038:	4626      	mov	r6, r4
   da03a:	f104 0520 	add.w	r5, r4, #32
   da03e:	f1a4 0420 	sub.w	r4, r4, #32
   da042:	dd04      	ble.n	da04e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0+0x4c>
	{
	  *__last = _GLIBCXX_MOVE(*__next);
   da044:	4631      	mov	r1, r6
   da046:	4628      	mov	r0, r5
   da048:	f7ff ff30 	bl	d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	return *this;
   da04c:	e7e2      	b.n	da014 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0+0x12>
	  __last = __next;
	  --__next;
	}
      *__last = _GLIBCXX_MOVE(__val);
   da04e:	4669      	mov	r1, sp
   da050:	4628      	mov	r0, r5
   da052:	f7ff ff2b 	bl	d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	__val = _GLIBCXX_MOVE(*__last);
   da056:	4668      	mov	r0, sp
   da058:	f7ff fe57 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
    }
   da05c:	b018      	add	sp, #96	; 0x60
   da05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da062 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
   da062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
   da066:	4281      	cmp	r1, r0
    __insertion_sort(_RandomAccessIterator __first,
   da068:	b088      	sub	sp, #32
   da06a:	4605      	mov	r5, r0
   da06c:	460f      	mov	r7, r1
      if (__first == __last) return;
   da06e:	d026      	beq.n	da0be <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x5c>
      { return __normal_iterator(_M_current + __n); }
   da070:	f100 0420 	add.w	r4, r0, #32

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   da074:	42a7      	cmp	r7, r4
   da076:	d022      	beq.n	da0be <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x5c>
	{
	  if (__comp(__i, __first))
   da078:	4629      	mov	r1, r5
   da07a:	4620      	mov	r0, r4
   da07c:	f7ff fecd 	bl	d9e1a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   da080:	f104 0820 	add.w	r8, r4, #32
   da084:	b1b8      	cbz	r0, da0b6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x54>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
   da086:	4621      	mov	r1, r4
   da088:	4668      	mov	r0, sp
   da08a:	f7ff fefc 	bl	d9e86 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
	  for (__n = __last - __first; __n > 0; --__n)
   da08e:	1b66      	subs	r6, r4, r5
   da090:	1176      	asrs	r6, r6, #5
   da092:	2e00      	cmp	r6, #0
   da094:	dd06      	ble.n	da0a4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x42>
	    *--__result = std::move(*--__last);
   da096:	4620      	mov	r0, r4
   da098:	3c20      	subs	r4, #32
   da09a:	4621      	mov	r1, r4
   da09c:	f7ff ff06 	bl	d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	  for (__n = __last - __first; __n > 0; --__n)
   da0a0:	3e01      	subs	r6, #1
   da0a2:	e7f6      	b.n	da092 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x30>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
	      *__first = _GLIBCXX_MOVE(__val);
   da0a4:	4669      	mov	r1, sp
   da0a6:	4628      	mov	r0, r5
   da0a8:	f7ff ff00 	bl	d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
		__val = _GLIBCXX_MOVE(*__i);
   da0ac:	4668      	mov	r0, sp
   da0ae:	f7ff fe2c 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
	++_M_current;
   da0b2:	4644      	mov	r4, r8
	return *this;
   da0b4:	e7de      	b.n	da074 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x12>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
   da0b6:	4620      	mov	r0, r4
   da0b8:	f7ff ffa3 	bl	da002 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0>
   da0bc:	e7f9      	b.n	da0b2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x50>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
   da0be:	b008      	add	sp, #32
   da0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da0c4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   da0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da0c8:	4606      	mov	r6, r0
   da0ca:	4688      	mov	r8, r1
   da0cc:	4615      	mov	r5, r2
	  _ForwardIterator __cur = __result;
   da0ce:	4617      	mov	r7, r2
   da0d0:	4604      	mov	r4, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   da0d2:	4544      	cmp	r4, r8
   da0d4:	d007      	beq.n	da0e6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_+0x22>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   da0d6:	b11f      	cbz	r7, da0e0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_+0x1c>
   da0d8:	4621      	mov	r1, r4
   da0da:	4638      	mov	r0, r7
   da0dc:	f004 fc62 	bl	de9a4 <_ZN6StringC1ERKS_>
   da0e0:	3410      	adds	r4, #16
   da0e2:	3710      	adds	r7, #16
   da0e4:	e7f5      	b.n	da0d2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_+0xe>
	      return __cur;
   da0e6:	1ba0      	subs	r0, r4, r6
	}
   da0e8:	4428      	add	r0, r5
   da0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000da0f0 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   da0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da0f4:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   da0f8:	429e      	cmp	r6, r3
      push_back(const value_type& __x)
   da0fa:	4604      	mov	r4, r0
   da0fc:	468a      	mov	sl, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da0fe:	d008      	beq.n	da112 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da100:	b116      	cbz	r6, da108 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x18>
   da102:	4630      	mov	r0, r6
   da104:	f004 fc4e 	bl	de9a4 <_ZN6StringC1ERKS_>
	    ++this->_M_impl._M_finish;
   da108:	6863      	ldr	r3, [r4, #4]
   da10a:	3310      	adds	r3, #16
   da10c:	6063      	str	r3, [r4, #4]
      }
   da10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      const size_type __len =
   da112:	4a18      	ldr	r2, [pc, #96]	; (da174 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x84>)
   da114:	2101      	movs	r1, #1
   da116:	f7ff fc57 	bl	d99c8 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
   da11a:	f8d4 8000 	ldr.w	r8, [r4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   da11e:	4607      	mov	r7, r0
    { return __lhs.base() - __rhs.base(); }
   da120:	eba6 0908 	sub.w	r9, r6, r8
   da124:	b320      	cbz	r0, da170 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x80>
   da126:	f7fd ff6a 	bl	d7ffe <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>
   da12a:	4605      	mov	r5, r0
   da12c:	eb15 0009 	adds.w	r0, r5, r9
   da130:	d002      	beq.n	da138 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x48>
   da132:	4651      	mov	r1, sl
   da134:	f004 fc36 	bl	de9a4 <_ZN6StringC1ERKS_>
	__uninit_copy(__first, __last, __result);
   da138:	462a      	mov	r2, r5
   da13a:	4631      	mov	r1, r6
   da13c:	4640      	mov	r0, r8
   da13e:	f7ff ffc1 	bl	da0c4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
   da142:	4631      	mov	r1, r6
   da144:	f100 0210 	add.w	r2, r0, #16
   da148:	4630      	mov	r0, r6
   da14a:	f7ff ffbb 	bl	da0c4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
	__destroy(__first, __last);
   da14e:	4631      	mov	r1, r6
   da150:	4681      	mov	r9, r0
   da152:	4640      	mov	r0, r8
   da154:	f7ff fdc2 	bl	d9cdc <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	if (__p)
   da158:	f1b8 0f00 	cmp.w	r8, #0
   da15c:	d002      	beq.n	da164 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x74>
	::operator delete(__p);
   da15e:	4640      	mov	r0, r8
   da160:	f7f9 ff9d 	bl	d409e <_ZdlPv>
      this->_M_impl._M_finish = __new_finish;
   da164:	e9c4 5900 	strd	r5, r9, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   da168:	eb05 1507 	add.w	r5, r5, r7, lsl #4
   da16c:	60a5      	str	r5, [r4, #8]
      }
   da16e:	e7ce      	b.n	da10e <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x1e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   da170:	4605      	mov	r5, r0
   da172:	e7db      	b.n	da12c <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x3c>
   da174:	000e24e3 	.word	0x000e24e3

000da178 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
   da178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da17c:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   da180:	429e      	cmp	r6, r3
      vector<_Tp, _Alloc>::
   da182:	4604      	mov	r4, r0
   da184:	468a      	mov	sl, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da186:	d008      	beq.n	da19a <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da188:	b116      	cbz	r6, da190 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x18>
   da18a:	4630      	mov	r0, r6
   da18c:	f004 fbf0 	bl	de970 <_ZN6StringC1EOS_>
	    ++this->_M_impl._M_finish;
   da190:	6863      	ldr	r3, [r4, #4]
   da192:	3310      	adds	r3, #16
   da194:	6063      	str	r3, [r4, #4]
      }
   da196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      const size_type __len =
   da19a:	4a18      	ldr	r2, [pc, #96]	; (da1fc <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x84>)
   da19c:	2101      	movs	r1, #1
   da19e:	f7ff fc13 	bl	d99c8 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
   da1a2:	f8d4 8000 	ldr.w	r8, [r4]
   da1a6:	4607      	mov	r7, r0
   da1a8:	eba6 0908 	sub.w	r9, r6, r8
   da1ac:	b320      	cbz	r0, da1f8 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x80>
   da1ae:	f7fd ff26 	bl	d7ffe <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>
   da1b2:	4605      	mov	r5, r0
   da1b4:	eb15 0009 	adds.w	r0, r5, r9
   da1b8:	d002      	beq.n	da1c0 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x48>
   da1ba:	4651      	mov	r1, sl
   da1bc:	f004 fbd8 	bl	de970 <_ZN6StringC1EOS_>
   da1c0:	462a      	mov	r2, r5
   da1c2:	4631      	mov	r1, r6
   da1c4:	4640      	mov	r0, r8
   da1c6:	f7ff ff7d 	bl	da0c4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
   da1ca:	4631      	mov	r1, r6
   da1cc:	f100 0210 	add.w	r2, r0, #16
   da1d0:	4630      	mov	r0, r6
   da1d2:	f7ff ff77 	bl	da0c4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
   da1d6:	4631      	mov	r1, r6
   da1d8:	4681      	mov	r9, r0
   da1da:	4640      	mov	r0, r8
   da1dc:	f7ff fd7e 	bl	d9cdc <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	if (__p)
   da1e0:	f1b8 0f00 	cmp.w	r8, #0
   da1e4:	d002      	beq.n	da1ec <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x74>
	::operator delete(__p);
   da1e6:	4640      	mov	r0, r8
   da1e8:	f7f9 ff59 	bl	d409e <_ZdlPv>
      this->_M_impl._M_finish = __new_finish;
   da1ec:	e9c4 5900 	strd	r5, r9, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   da1f0:	eb05 1507 	add.w	r5, r5, r7, lsl #4
   da1f4:	60a5      	str	r5, [r4, #8]
      }
   da1f6:	e7ce      	b.n	da196 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x1e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   da1f8:	4605      	mov	r5, r0
   da1fa:	e7db      	b.n	da1b4 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3c>
   da1fc:	000e24e3 	.word	0x000e24e3

000da200 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE>:
void SleepHelper::EventCombiner::generateEventInternal(std::function<void(JSONWriter &, int &)> callback, char *buf, size_t maxSize, std::vector<EventInfo> &infoArray) {
   da200:	b5f0      	push	{r4, r5, r6, r7, lr}
   da202:	4614      	mov	r4, r2
   da204:	b0a1      	sub	sp, #132	; 0x84
    memset(buf, 0, maxSize);
   da206:	461a      	mov	r2, r3
void SleepHelper::EventCombiner::generateEventInternal(std::function<void(JSONWriter &, int &)> callback, char *buf, size_t maxSize, std::vector<EventInfo> &infoArray) {
   da208:	460f      	mov	r7, r1
    memset(buf, 0, maxSize);
   da20a:	4620      	mov	r0, r4
   da20c:	2100      	movs	r1, #0
        state_(BEGIN) {
   da20e:	2500      	movs	r5, #0
void SleepHelper::EventCombiner::generateEventInternal(std::function<void(JSONWriter &, int &)> callback, char *buf, size_t maxSize, std::vector<EventInfo> &infoArray) {
   da210:	461e      	mov	r6, r3
    memset(buf, 0, maxSize);
   da212:	f005 fee7 	bl	dffe4 <memset>
        n_(0) {
   da216:	4b30      	ldr	r3, [pc, #192]	; (da2d8 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd8>)
   da218:	930d      	str	r3, [sp, #52]	; 0x34
    writer.beginObject();
   da21a:	a80d      	add	r0, sp, #52	; 0x34
   da21c:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
        state_(BEGIN) {
   da220:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
        n_(0) {
   da224:	9511      	str	r5, [sp, #68]	; 0x44
    int priority = 0;
   da226:	9501      	str	r5, [sp, #4]
    writer.beginObject();
   da228:	f003 f8f9 	bl	dd41e <_ZN5spark10JSONWriter11beginObjectEv>
    callback(writer, priority);
   da22c:	aa01      	add	r2, sp, #4
   da22e:	a90d      	add	r1, sp, #52	; 0x34
   da230:	4638      	mov	r0, r7
   da232:	f7fe fcdb 	bl	d8bec <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_>
    writer.endObject();
   da236:	a80d      	add	r0, sp, #52	; 0x34
   da238:	f003 f8cf 	bl	dd3da <_ZN5spark10JSONWriter9endObjectEv>
    if (priority > 0 && strlen(buf) > 2) {
   da23c:	9b01      	ldr	r3, [sp, #4]
   da23e:	42ab      	cmp	r3, r5
   da240:	dd48      	ble.n	da2d4 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd4>
   da242:	4620      	mov	r0, r4
   da244:	f005 ff59 	bl	e00fa <strlen>
   da248:	2802      	cmp	r0, #2
   da24a:	d943      	bls.n	da2d4 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd4>
        if (writer.dataSize() <= writer.bufferSize()) {
   da24c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   da250:	429a      	cmp	r2, r3
   da252:	d33f      	bcc.n	da2d4 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd4>
   da254:	4921      	ldr	r1, [pc, #132]	; (da2dc <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xdc>)
   da256:	a818      	add	r0, sp, #96	; 0x60
   da258:	f004 fb59 	bl	de90e <_ZN6StringC1EPKc>
            eventInfo.priority = priority;
   da25c:	9b01      	ldr	r3, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   da25e:	951f      	str	r5, [sp, #124]	; 0x7c
            JSONValue outerObj = JSONValue::parseCopy(buf);
   da260:	4621      	mov	r1, r4
   da262:	a802      	add	r0, sp, #8
   da264:	e9cd 551d 	strd	r5, r5, [sp, #116]	; 0x74
            eventInfo.priority = priority;
   da268:	931c      	str	r3, [sp, #112]	; 0x70
            JSONValue outerObj = JSONValue::parseCopy(buf);
   da26a:	f7fd ffa5 	bl	d81b8 <_ZN5spark9JSONValue9parseCopyEPKc>
            JSONObjectIterator iter(outerObj);
   da26e:	a902      	add	r1, sp, #8
   da270:	a812      	add	r0, sp, #72	; 0x48
   da272:	f7fc f8c7 	bl	d6404 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
            while(iter.next()) {
   da276:	a812      	add	r0, sp, #72	; 0x48
   da278:	f003 f86c 	bl	dd354 <_ZN5spark18JSONObjectIterator4nextEv>
   da27c:	4605      	mov	r5, r0
   da27e:	b190      	cbz	r0, da2a6 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xa6>
                eventInfo.keys.push_back((const char *)iter.name());
   da280:	a912      	add	r1, sp, #72	; 0x48
   da282:	a805      	add	r0, sp, #20
   da284:	f7fc f8cf 	bl	d6426 <_ZNK5spark18JSONObjectIterator4nameEv>
   da288:	9907      	ldr	r1, [sp, #28]
   da28a:	a809      	add	r0, sp, #36	; 0x24
   da28c:	f004 fb3f 	bl	de90e <_ZN6StringC1EPKc>
      { emplace_back(std::move(__x)); }
   da290:	a909      	add	r1, sp, #36	; 0x24
   da292:	a81d      	add	r0, sp, #116	; 0x74
   da294:	f7ff ff70 	bl	da178 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   da298:	a809      	add	r0, sp, #36	; 0x24
   da29a:	f004 faed 	bl	de878 <_ZN6StringD1Ev>
   da29e:	a806      	add	r0, sp, #24
   da2a0:	f7fa f8c9 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            while(iter.next()) {
   da2a4:	e7e7      	b.n	da276 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0x76>
            buf[strlen(buf) - 1] = 0;
   da2a6:	4620      	mov	r0, r4
   da2a8:	f005 ff27 	bl	e00fa <strlen>
   da2ac:	4420      	add	r0, r4
            eventInfo.json = &buf[1];
   da2ae:	1c61      	adds	r1, r4, #1
            buf[strlen(buf) - 1] = 0;
   da2b0:	f800 5c01 	strb.w	r5, [r0, #-1]
            eventInfo.json = &buf[1];
   da2b4:	a818      	add	r0, sp, #96	; 0x60
   da2b6:	f004 fb88 	bl	de9ca <_ZN6StringaSEPKc>
            infoArray.push_back(eventInfo);
   da2ba:	a918      	add	r1, sp, #96	; 0x60
   da2bc:	9826      	ldr	r0, [sp, #152]	; 0x98
   da2be:	f7ff fd99 	bl	d9df4 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_>
   da2c2:	a813      	add	r0, sp, #76	; 0x4c
   da2c4:	f7fa f8b7 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da2c8:	a803      	add	r0, sp, #12
   da2ca:	f7fa f8b4 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            EventInfo eventInfo;
   da2ce:	a818      	add	r0, sp, #96	; 0x60
   da2d0:	f7ff fd1b 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
}
   da2d4:	b021      	add	sp, #132	; 0x84
   da2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da2d8:	000e2d4c 	.word	0x000e2d4c
   da2dc:	000e291f 	.word	0x000e291f

000da2e0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   da2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da2e4:	4607      	mov	r7, r0
   da2e6:	4688      	mov	r8, r1
   da2e8:	4616      	mov	r6, r2
	  _ForwardIterator __cur = __result;
   da2ea:	4615      	mov	r5, r2
   da2ec:	4604      	mov	r4, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   da2ee:	4544      	cmp	r4, r8
   da2f0:	d011      	beq.n	da316 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0x36>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   da2f2:	b16d      	cbz	r5, da310 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0x30>
    class PublishData {
   da2f4:	4621      	mov	r1, r4
   da2f6:	4628      	mov	r0, r5
   da2f8:	f004 fb54 	bl	de9a4 <_ZN6StringC1ERKS_>
   da2fc:	f104 0110 	add.w	r1, r4, #16
   da300:	f105 0010 	add.w	r0, r5, #16
   da304:	f004 fb4e 	bl	de9a4 <_ZN6StringC1ERKS_>
   da308:	f894 3020 	ldrb.w	r3, [r4, #32]
   da30c:	f885 3020 	strb.w	r3, [r5, #32]
   da310:	3424      	adds	r4, #36	; 0x24
   da312:	3524      	adds	r5, #36	; 0x24
   da314:	e7eb      	b.n	da2ee <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0xe>
	      return __cur;
   da316:	1be0      	subs	r0, r4, r7
   da318:	0884      	lsrs	r4, r0, #2
   da31a:	4804      	ldr	r0, [pc, #16]	; (da32c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0x4c>)
   da31c:	4344      	muls	r4, r0
   da31e:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
	}
   da322:	2024      	movs	r0, #36	; 0x24
   da324:	fb00 6004 	mla	r0, r0, r4, r6
   da328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da32c:	38e38e39 	.word	0x38e38e39

000da330 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
   da330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da334:	e9d0 9800 	ldrd	r9, r8, [r0]
   da338:	eba8 0409 	sub.w	r4, r8, r9
   da33c:	10a3      	asrs	r3, r4, #2
   da33e:	4c29      	ldr	r4, [pc, #164]	; (da3e4 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb4>)
   da340:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   da342:	4b29      	ldr	r3, [pc, #164]	; (da3e8 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb8>)
   da344:	429c      	cmp	r4, r3
   da346:	4605      	mov	r5, r0
   da348:	460e      	mov	r6, r1
   da34a:	4617      	mov	r7, r2
   da34c:	d102      	bne.n	da354 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   da34e:	4827      	ldr	r0, [pc, #156]	; (da3ec <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xbc>)
   da350:	f005 f899 	bl	df486 <_ZSt20__throw_length_errorPKc>
   da354:	2c01      	cmp	r4, #1
   da356:	4622      	mov	r2, r4
   da358:	bf38      	it	cc
   da35a:	2201      	movcc	r2, #1
   da35c:	18a4      	adds	r4, r4, r2
   da35e:	eba1 0b09 	sub.w	fp, r1, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   da362:	d23d      	bcs.n	da3e0 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   da364:	b144      	cbz	r4, da378 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
   da366:	429c      	cmp	r4, r3
   da368:	bf28      	it	cs
   da36a:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da36c:	2024      	movs	r0, #36	; 0x24
   da36e:	4360      	muls	r0, r4
   da370:	f7f9 fe91 	bl	d4096 <_Znwj>
   da374:	4682      	mov	sl, r0
   da376:	e000      	b.n	da37a <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x4a>
   da378:	46a2      	mov	sl, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da37a:	eb1a 0b0b 	adds.w	fp, sl, fp
   da37e:	d00d      	beq.n	da39c <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6c>
   da380:	4639      	mov	r1, r7
   da382:	4658      	mov	r0, fp
   da384:	f004 faf4 	bl	de970 <_ZN6StringC1EOS_>
   da388:	f107 0110 	add.w	r1, r7, #16
   da38c:	f10b 0010 	add.w	r0, fp, #16
   da390:	f004 faee 	bl	de970 <_ZN6StringC1EOS_>
   da394:	f897 3020 	ldrb.w	r3, [r7, #32]
   da398:	f88b 3020 	strb.w	r3, [fp, #32]
	__uninit_copy(__first, __last, __result);
   da39c:	4631      	mov	r1, r6
   da39e:	4652      	mov	r2, sl
   da3a0:	4648      	mov	r0, r9
   da3a2:	f7ff ff9d 	bl	da2e0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_>
   da3a6:	4641      	mov	r1, r8
   da3a8:	f100 0224 	add.w	r2, r0, #36	; 0x24
   da3ac:	4630      	mov	r0, r6
   da3ae:	f7ff ff97 	bl	da2e0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   da3b2:	464e      	mov	r6, r9
   da3b4:	4607      	mov	r7, r0
	  for (; __first != __last; ++__first)
   da3b6:	4546      	cmp	r6, r8
   da3b8:	d004      	beq.n	da3c4 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
    { __pointer->~_Tp(); }
   da3ba:	4630      	mov	r0, r6
   da3bc:	f7fd ffc3 	bl	d8346 <_ZN11SleepHelper11PublishDataD1Ev>
	  for (; __first != __last; ++__first)
   da3c0:	3624      	adds	r6, #36	; 0x24
   da3c2:	e7f8      	b.n	da3b6 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x86>
	if (__p)
   da3c4:	f1b9 0f00 	cmp.w	r9, #0
   da3c8:	d002      	beq.n	da3d0 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
	::operator delete(__p);
   da3ca:	4648      	mov	r0, r9
   da3cc:	f7f9 fe67 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   da3d0:	2024      	movs	r0, #36	; 0x24
   da3d2:	fb00 a404 	mla	r4, r0, r4, sl
      this->_M_impl._M_finish = __new_finish;
   da3d6:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   da3da:	60ac      	str	r4, [r5, #8]
    }
   da3dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   da3e0:	461c      	mov	r4, r3
   da3e2:	e7c3      	b.n	da36c <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3c>
   da3e4:	38e38e39 	.word	0x38e38e39
   da3e8:	038e38e3 	.word	0x038e38e3
   da3ec:	000e24e3 	.word	0x000e24e3

000da3f0 <_ZN11SleepHelper21stateHandlerConnectedEv>:
void SleepHelper::stateHandlerConnected() {
   da3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da3f4:	b091      	sub	sp, #68	; 0x44
   da3f6:	4604      	mov	r4, r0
   da3f8:	f001 ff5a 	bl	dc2b0 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   da3fc:	4605      	mov	r5, r0
   da3fe:	b960      	cbnz	r0, da41a <_ZN11SleepHelper21stateHandlerConnectedEv+0x2a>
   da400:	f001 fcae 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &SleepHelper::stateHandlerReconnectWait;
   da404:	4b77      	ldr	r3, [pc, #476]	; (da5e4 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1f4>)
        reconnectAttemptStartMillis = millis();
   da406:	f8c4 07c0 	str.w	r0, [r4, #1984]	; 0x7c0
        stateHandler = &SleepHelper::stateHandlerReconnectWait;
   da40a:	e9cd 3507 	strd	r3, r5, [sp, #28]
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   da40e:	a907      	add	r1, sp, #28
   da410:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da414:	f7fe fcea 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   da418:	e0a8      	b.n	da56c <_ZN11SleepHelper21stateHandlerConnectedEv+0x17c>
    if (wakeEventName.length() > 0) {
   da41a:	f8d4 3730 	ldr.w	r3, [r4, #1840]	; 0x730
   da41e:	2b00      	cmp	r3, #0
   da420:	d042      	beq.n	da4a8 <_ZN11SleepHelper21stateHandlerConnectedEv+0xb8>
        if (!lastEventHistoryCheckMillis || millis() - lastEventHistoryCheckMillis >= 1000) {
   da422:	f8d4 37cc 	ldr.w	r3, [r4, #1996]	; 0x7cc
   da426:	bbbb      	cbnz	r3, da498 <_ZN11SleepHelper21stateHandlerConnectedEv+0xa8>
   da428:	f001 fc9a 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
   da42c:	4f6e      	ldr	r7, [pc, #440]	; (da5e8 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1f8>)
   da42e:	f8d4 67d4 	ldr.w	r6, [r4, #2004]	; 0x7d4
            lastEventHistoryCheckMillis = millis();
   da432:	f8c4 07cc 	str.w	r0, [r4, #1996]	; 0x7cc
            for(auto it = wakeEventPayload.begin(); it != wakeEventPayload.end(); ++it) {
   da436:	f8d4 37d8 	ldr.w	r3, [r4, #2008]	; 0x7d8
   da43a:	42b3      	cmp	r3, r6
   da43c:	f000 80a0 	beq.w	da580 <_ZN11SleepHelper21stateHandlerConnectedEv+0x190>
        operator const char*() const { return c_str(); }
   da440:	6835      	ldr	r5, [r6, #0]
        PublishData(const char *eventName, const char *eventData) : eventName(eventName), eventData(eventData) {}
   da442:	f8d4 1728 	ldr.w	r1, [r4, #1832]	; 0x728
   da446:	a807      	add	r0, sp, #28
   da448:	f004 fa61 	bl	de90e <_ZN6StringC1EPKc>
   da44c:	4629      	mov	r1, r5
   da44e:	a80b      	add	r0, sp, #44	; 0x2c
   da450:	f004 fa5d 	bl	de90e <_ZN6StringC1EPKc>
   da454:	783b      	ldrb	r3, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   da456:	f8d4 5784 	ldr.w	r5, [r4, #1924]	; 0x784
        val_(flag.value()) {
   da45a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   da45e:	f8d4 3788 	ldr.w	r3, [r4, #1928]	; 0x788
   da462:	429d      	cmp	r5, r3
   da464:	f000 8085 	beq.w	da572 <_ZN11SleepHelper21stateHandlerConnectedEv+0x182>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da468:	b165      	cbz	r5, da484 <_ZN11SleepHelper21stateHandlerConnectedEv+0x94>
    class PublishData {
   da46a:	a907      	add	r1, sp, #28
   da46c:	4628      	mov	r0, r5
   da46e:	f004 fa7f 	bl	de970 <_ZN6StringC1EOS_>
   da472:	a90b      	add	r1, sp, #44	; 0x2c
   da474:	f105 0010 	add.w	r0, r5, #16
   da478:	f004 fa7a 	bl	de970 <_ZN6StringC1EOS_>
   da47c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   da480:	f885 3020 	strb.w	r3, [r5, #32]
	    ++this->_M_impl._M_finish;
   da484:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
   da488:	3324      	adds	r3, #36	; 0x24
   da48a:	f8c4 3784 	str.w	r3, [r4, #1924]	; 0x784
                publishData.push_back(PublishData(wakeEventName, *it));            
   da48e:	a807      	add	r0, sp, #28
   da490:	f7fd ff59 	bl	d8346 <_ZN11SleepHelper11PublishDataD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   da494:	3610      	adds	r6, #16
	return *this;
   da496:	e7ce      	b.n	da436 <_ZN11SleepHelper21stateHandlerConnectedEv+0x46>
   da498:	f001 fc62 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
        if (!lastEventHistoryCheckMillis || millis() - lastEventHistoryCheckMillis >= 1000) {
   da49c:	f8d4 37cc 	ldr.w	r3, [r4, #1996]	; 0x7cc
   da4a0:	1ac0      	subs	r0, r0, r3
   da4a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   da4a6:	d2bf      	bcs.n	da428 <_ZN11SleepHelper21stateHandlerConnectedEv+0x38>
      { return begin() == end(); }
   da4a8:	f8d4 5780 	ldr.w	r5, [r4, #1920]	; 0x780
    if (!publishData.empty()) {
   da4ac:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
   da4b0:	429d      	cmp	r5, r3
   da4b2:	d06a      	beq.n	da58a <_ZN11SleepHelper21stateHandlerConnectedEv+0x19a>
   da4b4:	4629      	mov	r1, r5
   da4b6:	a807      	add	r0, sp, #28
   da4b8:	f004 fa74 	bl	de9a4 <_ZN6StringC1ERKS_>
   da4bc:	f105 0110 	add.w	r1, r5, #16
   da4c0:	a80b      	add	r0, sp, #44	; 0x2c
   da4c2:	f004 fa6f 	bl	de9a4 <_ZN6StringC1ERKS_>
   da4c6:	f895 3020 	ldrb.w	r3, [r5, #32]
   da4ca:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   da4ce:	f001 fc47 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &SleepHelper::stateHandlerPublishWait;
   da4d2:	f504 67f5 	add.w	r7, r4, #1960	; 0x7a8
   da4d6:	ad03      	add	r5, sp, #12
   da4d8:	4b44      	ldr	r3, [pc, #272]	; (da5ec <_ZN11SleepHelper21stateHandlerConnectedEv+0x1fc>)
        stateTime = millis();
   da4da:	f8c4 07b8 	str.w	r0, [r4, #1976]	; 0x7b8
        stateHandler = &SleepHelper::stateHandlerPublishWait;
   da4de:	2600      	movs	r6, #0
   da4e0:	4629      	mov	r1, r5
   da4e2:	4638      	mov	r0, r7
   da4e4:	9303      	str	r3, [sp, #12]
   da4e6:	9604      	str	r6, [sp, #16]
   da4e8:	f7fe fc80 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return (logEnabled & flag) != 0;
   da4ec:	f8d4 179c 	ldr.w	r1, [r4, #1948]	; 0x79c
   da4f0:	4632      	mov	r2, r6
   da4f2:	f401 7380 	and.w	r3, r1, #256	; 0x100
        if (logEnableEnabled(logEnabledPublishData)) {
   da4f6:	4313      	orrs	r3, r2
   da4f8:	d019      	beq.n	da52e <_ZN11SleepHelper21stateHandlerConnectedEv+0x13e>
            appLog.trace("publishing name=%s flags=0x%x", event.eventName.c_str(), (int)event.flags.value());
   da4fa:	9a07      	ldr	r2, [sp, #28]
   da4fc:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   da500:	493b      	ldr	r1, [pc, #236]	; (da5f0 <_ZN11SleepHelper21stateHandlerConnectedEv+0x200>)
   da502:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   da506:	f7fa f8cd 	bl	d46a4 <_ZNK5spark6Logger5traceEPKcz>
            appLog.write(LOG_LEVEL_TRACE, event.eventData.c_str(), event.eventData.length());
   da50a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    if (data) {
   da50c:	b132      	cbz	r2, da51c <_ZN11SleepHelper21stateHandlerConnectedEv+0x12c>
        log_write(level, name_, data, size, nullptr);
   da50e:	9600      	str	r6, [sp, #0]
   da510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da512:	f8d4 17e4 	ldr.w	r1, [r4, #2020]	; 0x7e4
   da516:	2001      	movs	r0, #1
   da518:	f001 fe22 	bl	dc160 <log_write>
   da51c:	2300      	movs	r3, #0
   da51e:	9300      	str	r3, [sp, #0]
   da520:	4a34      	ldr	r2, [pc, #208]	; (da5f4 <_ZN11SleepHelper21stateHandlerConnectedEv+0x204>)
   da522:	f8d4 17e4 	ldr.w	r1, [r4, #2020]	; 0x7e4
   da526:	2302      	movs	r3, #2
   da528:	2001      	movs	r0, #1
   da52a:	f001 fe19 	bl	dc160 <log_write>
        bool bResult = BackgroundPublishRK::instance().publish(event.eventName, event.eventData, event.flags, 
   da52e:	f7fa fe19 	bl	d5164 <_ZN19BackgroundPublishRK8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   da532:	4b31      	ldr	r3, [pc, #196]	; (da5f8 <_ZN11SleepHelper21stateHandlerConnectedEv+0x208>)
   da534:	9306      	str	r3, [sp, #24]
	    _M_manager = &_My_handler::_M_manager;
   da536:	4b31      	ldr	r3, [pc, #196]	; (da5fc <_ZN11SleepHelper21stateHandlerConnectedEv+0x20c>)
   da538:	9305      	str	r3, [sp, #20]
   da53a:	2300      	movs	r3, #0
   da53c:	e9cd 5300 	strd	r5, r3, [sp]
   da540:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da542:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   da546:	9907      	ldr	r1, [sp, #28]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da548:	9403      	str	r4, [sp, #12]
   da54a:	f7fa ff55 	bl	d53f8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
   da54e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   da550:	4628      	mov	r0, r5
   da552:	f7fa fdc3 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
        if (!bResult) {
   da556:	b934      	cbnz	r4, da566 <_ZN11SleepHelper21stateHandlerConnectedEv+0x176>
            stateHandler = &SleepHelper::stateHandlerConnected;
   da558:	4b29      	ldr	r3, [pc, #164]	; (da600 <_ZN11SleepHelper21stateHandlerConnectedEv+0x210>)
   da55a:	4629      	mov	r1, r5
   da55c:	4638      	mov	r0, r7
   da55e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   da562:	f7fe fc43 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        PublishData event = publishData.front();
   da566:	a807      	add	r0, sp, #28
   da568:	f7fd feed 	bl	d8346 <_ZN11SleepHelper11PublishDataD1Ev>
}
   da56c:	b011      	add	sp, #68	; 0x44
   da56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   da572:	aa07      	add	r2, sp, #28
   da574:	4629      	mov	r1, r5
   da576:	f504 60f0 	add.w	r0, r4, #1920	; 0x780
   da57a:	f7ff fed9 	bl	da330 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
   da57e:	e786      	b.n	da48e <_ZN11SleepHelper21stateHandlerConnectedEv+0x9e>
            wakeEventPayload.clear();
   da580:	f204 70d4 	addw	r0, r4, #2004	; 0x7d4
   da584:	f7ff fc74 	bl	d9e70 <_ZNSt6vectorI6StringSaIS0_EE5clearEv>
   da588:	e78e      	b.n	da4a8 <_ZN11SleepHelper21stateHandlerConnectedEv+0xb8>
   da58a:	f001 fbe9 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
    system_tick_t elapsedMs = millis() - connectedStartMillis;
   da58e:	f8d4 37c8 	ldr.w	r3, [r4, #1992]	; 0x7c8
   da592:	f8d4 56d4 	ldr.w	r5, [r4, #1748]	; 0x6d4
   da596:	f8d4 66c8 	ldr.w	r6, [r4, #1736]	; 0x6c8
   da59a:	eba0 0803 	sub.w	r8, r0, r3
            bool finalRes = false;
   da59e:	2700      	movs	r7, #0
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   da5a0:	f06f 0901 	mvn.w	r9, #1
            for(auto it = callbackState.begin(), it2 = callbackFunctions.begin(); it != callbackState.end(); ++it, ++it2) {
   da5a4:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
   da5a8:	42ab      	cmp	r3, r5
   da5aa:	d015      	beq.n	da5d8 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1e8>
                if (it->callbackState != AppCallbackState::CALLBACK_START_RETURNED_FALSE) {
   da5ac:	682b      	ldr	r3, [r5, #0]
   da5ae:	3302      	adds	r3, #2
   da5b0:	d00d      	beq.n	da5ce <_ZN11SleepHelper21stateHandlerConnectedEv+0x1de>
   da5b2:	f8cd 801c 	str.w	r8, [sp, #28]
      if (_M_empty())
   da5b6:	68b3      	ldr	r3, [r6, #8]
   da5b8:	b90b      	cbnz	r3, da5be <_ZN11SleepHelper21stateHandlerConnectedEv+0x1ce>
	__throw_bad_function_call();
   da5ba:	f004 ff67 	bl	df48c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da5be:	68f3      	ldr	r3, [r6, #12]
   da5c0:	aa07      	add	r2, sp, #28
   da5c2:	4629      	mov	r1, r5
   da5c4:	4630      	mov	r0, r6
   da5c6:	4798      	blx	r3
                    if (res) {
   da5c8:	b920      	cbnz	r0, da5d4 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1e4>
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   da5ca:	f8c5 9000 	str.w	r9, [r5]
      operator++() _GLIBCXX_NOEXCEPT
   da5ce:	3508      	adds	r5, #8
   da5d0:	3610      	adds	r6, #16
	return *this;
   da5d2:	e7e7      	b.n	da5a4 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1b4>
                        finalRes = true;
   da5d4:	4607      	mov	r7, r0
   da5d6:	e7fa      	b.n	da5ce <_ZN11SleepHelper21stateHandlerConnectedEv+0x1de>
    if (!sleepReadyFunctions.whileAnyTrue(elapsedMs)) {
   da5d8:	2f00      	cmp	r7, #0
   da5da:	d1c7      	bne.n	da56c <_ZN11SleepHelper21stateHandlerConnectedEv+0x17c>
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   da5dc:	4b09      	ldr	r3, [pc, #36]	; (da604 <_ZN11SleepHelper21stateHandlerConnectedEv+0x214>)
   da5de:	e9cd 3707 	strd	r3, r7, [sp, #28]
   da5e2:	e714      	b.n	da40e <_ZN11SleepHelper21stateHandlerConnectedEv+0x1e>
   da5e4:	000d90e1 	.word	0x000d90e1
   da5e8:	2003e528 	.word	0x2003e528
   da5ec:	000d8015 	.word	0x000d8015
   da5f0:	000e2a5e 	.word	0x000e2a5e
   da5f4:	000e291d 	.word	0x000e291d
   da5f8:	000d9239 	.word	0x000d9239
   da5fc:	000d7dbb 	.word	0x000d7dbb
   da600:	000da3f1 	.word	0x000da3f1
   da604:	000db011 	.word	0x000db011

000da608 <_ZSt4swapIN11SleepHelper13EventCombiner9EventInfoEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
   da608:	b530      	push	{r4, r5, lr}
   da60a:	b089      	sub	sp, #36	; 0x24
   da60c:	460c      	mov	r4, r1
   da60e:	4605      	mov	r5, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da610:	4601      	mov	r1, r0
   da612:	4668      	mov	r0, sp
   da614:	f7ff fc37 	bl	d9e86 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
      __a = _GLIBCXX_MOVE(__b);
   da618:	4621      	mov	r1, r4
   da61a:	4628      	mov	r0, r5
   da61c:	f7ff fc46 	bl	d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      __b = _GLIBCXX_MOVE(__tmp);
   da620:	4669      	mov	r1, sp
   da622:	4620      	mov	r0, r4
   da624:	f7ff fc42 	bl	d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da628:	4668      	mov	r0, sp
   da62a:	f7ff fb6e 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
    }
   da62e:	b009      	add	sp, #36	; 0x24
   da630:	bd30      	pop	{r4, r5, pc}

000da632 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
   da632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da636:	4604      	mov	r4, r0
   da638:	b091      	sub	sp, #68	; 0x44
   da63a:	4617      	mov	r7, r2
   da63c:	469a      	mov	sl, r3
   da63e:	460d      	mov	r5, r1
      { return __normal_iterator(_M_current + __n); }
   da640:	f100 0820 	add.w	r8, r0, #32
    { return __lhs.base() - __rhs.base(); }
   da644:	1b2e      	subs	r6, r5, r4
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
   da646:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da64a:	dd75      	ble.n	da738 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x106>
   da64c:	ea4f 1966 	mov.w	r9, r6, asr #5
	{
	  if (__depth_limit == 0)
   da650:	bb47      	cbnz	r7, da6a4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x72>

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
   da652:	f1a9 0602 	sub.w	r6, r9, #2
   da656:	1076      	asrs	r6, r6, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   da658:	eb04 1146 	add.w	r1, r4, r6, lsl #5
   da65c:	4668      	mov	r0, sp
   da65e:	f7ff fc12 	bl	d9e86 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
   da662:	4669      	mov	r1, sp
   da664:	a808      	add	r0, sp, #32
   da666:	f7ff fc0e 	bl	d9e86 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
   da66a:	4620      	mov	r0, r4
   da66c:	ab08      	add	r3, sp, #32
   da66e:	464a      	mov	r2, r9
   da670:	4631      	mov	r1, r6
   da672:	f7ff fc39 	bl	d9ee8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0>
   da676:	a808      	add	r0, sp, #32
   da678:	f7ff fb47 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
			     __comp);
	  if (__parent == 0)
   da67c:	b96e      	cbnz	r6, da69a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x68>
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   da67e:	4668      	mov	r0, sp
   da680:	f7ff fb43 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   da684:	1b2b      	subs	r3, r5, r4
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
   da686:	2b20      	cmp	r3, #32
   da688:	f1a5 0520 	sub.w	r5, r5, #32
   da68c:	dd54      	ble.n	da738 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x106>
	{
	  --__last;
	  std::__pop_heap(__first, __last, __last, __comp);
   da68e:	462a      	mov	r2, r5
   da690:	4629      	mov	r1, r5
   da692:	4620      	mov	r0, r4
   da694:	f7ff fc93 	bl	d9fbe <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_SI_RT0_.isra.0>
      while (__last - __first > 1)
   da698:	e7f4      	b.n	da684 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x52>
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   da69a:	4668      	mov	r0, sp
	  __parent--;
   da69c:	3e01      	subs	r6, #1
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   da69e:	f7ff fb34 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   da6a2:	e7d9      	b.n	da658 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x26>
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
   da6a4:	11b6      	asrs	r6, r6, #6
      { return __normal_iterator(_M_current + __n); }
   da6a6:	eb04 1646 	add.w	r6, r4, r6, lsl #5
      if (__comp(__a, __b))
   da6aa:	4631      	mov	r1, r6
   da6ac:	4640      	mov	r0, r8
   da6ae:	f7ff fbb4 	bl	d9e1a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
      { return __normal_iterator(_M_current - __n); }
   da6b2:	f1a5 0920 	sub.w	r9, r5, #32
	    {
	      std::__partial_sort(__first, __last, __last, __comp);
	      return;
	    }
	  --__depth_limit;
   da6b6:	3f01      	subs	r7, #1
	  if (__comp(__b, __c))
   da6b8:	4649      	mov	r1, r9
      if (__comp(__a, __b))
   da6ba:	b160      	cbz	r0, da6d6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xa4>
	  if (__comp(__b, __c))
   da6bc:	4630      	mov	r0, r6
   da6be:	f7ff fbac 	bl	d9e1a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   da6c2:	b108      	cbz	r0, da6c8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x96>
      swap(*__a, *__b);
   da6c4:	4631      	mov	r1, r6
   da6c6:	e00b      	b.n	da6e0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xae>
	  else if (__comp(__a, __c))
   da6c8:	4649      	mov	r1, r9
   da6ca:	4640      	mov	r0, r8
   da6cc:	f7ff fba5 	bl	d9e1a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   da6d0:	b128      	cbz	r0, da6de <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xac>
   da6d2:	4649      	mov	r1, r9
   da6d4:	e004      	b.n	da6e0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xae>
      else if (__comp(__a, __c))
   da6d6:	4640      	mov	r0, r8
   da6d8:	f7ff fb9f 	bl	d9e1a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   da6dc:	b1f8      	cbz	r0, da71e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xec>
   da6de:	4641      	mov	r1, r8
   da6e0:	4620      	mov	r0, r4
   da6e2:	f7ff ff91 	bl	da608 <_ZSt4swapIN11SleepHelper13EventCombiner9EventInfoEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
    __unguarded_partition(_RandomAccessIterator __first,
   da6e6:	4646      	mov	r6, r8
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
   da6e8:	46a9      	mov	r9, r5
	  while (__comp(__first, __pivot))
   da6ea:	4621      	mov	r1, r4
   da6ec:	4630      	mov	r0, r6
   da6ee:	f7ff fb94 	bl	d9e1a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   da6f2:	b9f8      	cbnz	r0, da734 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x102>
   da6f4:	f1a9 0b20 	sub.w	fp, r9, #32
	  while (__comp(__pivot, __last))
   da6f8:	4659      	mov	r1, fp
   da6fa:	4620      	mov	r0, r4
   da6fc:	f7ff fb8d 	bl	d9e1a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   da700:	46d9      	mov	r9, fp
   da702:	f1ab 0b20 	sub.w	fp, fp, #32
   da706:	2800      	cmp	r0, #0
   da708:	d1f6      	bne.n	da6f8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xc6>
	  if (!(__first < __last))
   da70a:	454e      	cmp	r6, r9
   da70c:	d30e      	bcc.n	da72c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xfa>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   da70e:	4629      	mov	r1, r5
   da710:	4653      	mov	r3, sl
   da712:	463a      	mov	r2, r7
   da714:	4630      	mov	r0, r6
   da716:	f7ff ff8c 	bl	da632 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_>
      while (__last - __first > int(_S_threshold))
   da71a:	4635      	mov	r5, r6
   da71c:	e792      	b.n	da644 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x12>
      else if (__comp(__b, __c))
   da71e:	4649      	mov	r1, r9
   da720:	4630      	mov	r0, r6
   da722:	f7ff fb7a 	bl	d9e1a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   da726:	2800      	cmp	r0, #0
   da728:	d0cc      	beq.n	da6c4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x92>
   da72a:	e7d2      	b.n	da6d2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xa0>
   da72c:	4649      	mov	r1, r9
   da72e:	4630      	mov	r0, r6
   da730:	f7ff ff6a 	bl	da608 <_ZSt4swapIN11SleepHelper13EventCombiner9EventInfoEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
      operator++() _GLIBCXX_NOEXCEPT
   da734:	3620      	adds	r6, #32
   da736:	e7d8      	b.n	da6ea <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xb8>
	  __last = __cut;
	}
    }
   da738:	b011      	add	sp, #68	; 0x44
   da73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000da740 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj>:
void SleepHelper::EventCombiner::generateEvents(std::vector<String> &events, size_t maxSize) {
   da740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da744:	4617      	mov	r7, r2
   da746:	b09f      	sub	sp, #124	; 0x7c
   da748:	4604      	mov	r4, r0
    events.clear();
   da74a:	4608      	mov	r0, r1
void SleepHelper::EventCombiner::generateEvents(std::vector<String> &events, size_t maxSize) {
   da74c:	4688      	mov	r8, r1
    events.clear();
   da74e:	f7ff fb8f 	bl	d9e70 <_ZNSt6vectorI6StringSaIS0_EE5clearEv>
	: _M_start(), _M_finish(), _M_end_of_storage()
   da752:	2300      	movs	r3, #0
    char *buf = (char *)malloc(maxSize + 1);
   da754:	1c78      	adds	r0, r7, #1
   da756:	e9cd 3307 	strd	r3, r3, [sp, #28]
   da75a:	9309      	str	r3, [sp, #36]	; 0x24
   da75c:	f001 fe38 	bl	dc3d0 <malloc>
    if (!buf) {
   da760:	4606      	mov	r6, r0
   da762:	b928      	cbnz	r0, da770 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x30>
    std::vector<EventInfo> infoArray;
   da764:	a807      	add	r0, sp, #28
   da766:	f7ff fb72 	bl	d9e4e <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev>
}
   da76a:	b01f      	add	sp, #124	; 0x7c
   da76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      : _M_current(__i) { }
   da770:	6925      	ldr	r5, [r4, #16]
        generateEventInternal(*it, buf, maxSize, infoArray);        
   da772:	f10d 091c 	add.w	r9, sp, #28
    for(auto it = oneTimeCallbacks.callbackFunctions.rbegin(); it != oneTimeCallbacks.callbackFunctions.rend(); ++it) {
   da776:	68e3      	ldr	r3, [r4, #12]
   da778:	429d      	cmp	r5, r3
   da77a:	d017      	beq.n	da7ac <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x6c>
	--_M_current;
   da77c:	3d10      	subs	r5, #16
        generateEventInternal(*it, buf, maxSize, infoArray);        
   da77e:	4629      	mov	r1, r5
   da780:	a811      	add	r0, sp, #68	; 0x44
   da782:	f7fe f9d3 	bl	d8b2c <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
   da786:	a911      	add	r1, sp, #68	; 0x44
   da788:	a816      	add	r0, sp, #88	; 0x58
   da78a:	f7fe fd9d 	bl	d92c8 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_>
   da78e:	463b      	mov	r3, r7
   da790:	4632      	mov	r2, r6
   da792:	a916      	add	r1, sp, #88	; 0x58
   da794:	4620      	mov	r0, r4
   da796:	f8cd 9000 	str.w	r9, [sp]
   da79a:	f7ff fd31 	bl	da200 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE>
    class function<_Res(_ArgTypes...)>
   da79e:	a816      	add	r0, sp, #88	; 0x58
   da7a0:	f7fa fc9c 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   da7a4:	a811      	add	r0, sp, #68	; 0x44
   da7a6:	f7fa fc99 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	return *this;
   da7aa:	e7e4      	b.n	da776 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x36>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   da7ac:	6825      	ldr	r5, [r4, #0]
        generateEventInternal(*it, buf, maxSize, infoArray);        
   da7ae:	f10d 091c 	add.w	r9, sp, #28
    for(auto it = callbacks.callbackFunctions.begin(); it != callbacks.callbackFunctions.end(); ++it) {
   da7b2:	6863      	ldr	r3, [r4, #4]
   da7b4:	42ab      	cmp	r3, r5
   da7b6:	d017      	beq.n	da7e8 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0xa8>
        generateEventInternal(*it, buf, maxSize, infoArray);        
   da7b8:	4629      	mov	r1, r5
   da7ba:	a811      	add	r0, sp, #68	; 0x44
   da7bc:	f7fe f9b6 	bl	d8b2c <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
   da7c0:	a911      	add	r1, sp, #68	; 0x44
   da7c2:	a816      	add	r0, sp, #88	; 0x58
   da7c4:	f7fe fd80 	bl	d92c8 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_>
   da7c8:	463b      	mov	r3, r7
   da7ca:	4632      	mov	r2, r6
   da7cc:	a916      	add	r1, sp, #88	; 0x58
   da7ce:	4620      	mov	r0, r4
   da7d0:	f8cd 9000 	str.w	r9, [sp]
   da7d4:	f7ff fd14 	bl	da200 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE>
   da7d8:	a816      	add	r0, sp, #88	; 0x58
   da7da:	f7fa fc7f 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   da7de:	a811      	add	r0, sp, #68	; 0x44
   da7e0:	f7fa fc7c 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   da7e4:	3510      	adds	r5, #16
	return *this;
   da7e6:	e7e4      	b.n	da7b2 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x72>
    if (eventHistory.getHasEvents()) {
   da7e8:	f104 0a18 	add.w	sl, r4, #24
   da7ec:	4650      	mov	r0, sl
   da7ee:	f7fd fe2d 	bl	d844c <_ZN11SleepHelper12EventHistory12getHasEventsEv>
   da7f2:	9003      	str	r0, [sp, #12]
   da7f4:	2800      	cmp	r0, #0
   da7f6:	d040      	beq.n	da87a <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x13a>
        memset(buf, 0, maxSize);
   da7f8:	463a      	mov	r2, r7
   da7fa:	2100      	movs	r1, #0
   da7fc:	4630      	mov	r0, r6
   da7fe:	f005 fbf1 	bl	dffe4 <memset>
        state_(BEGIN) {
   da802:	2500      	movs	r5, #0
        n_(0) {
   da804:	4bc1      	ldr	r3, [pc, #772]	; (dab0c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3cc>)
   da806:	9311      	str	r3, [sp, #68]	; 0x44
        writer.beginObject();
   da808:	a811      	add	r0, sp, #68	; 0x44
   da80a:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
        state_(BEGIN) {
   da80e:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
        n_(0) {
   da812:	9515      	str	r5, [sp, #84]	; 0x54
   da814:	f002 fe03 	bl	dd41e <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name.c_str(), name.length());
   da818:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   da81a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   da81c:	a811      	add	r0, sp, #68	; 0x44
   da81e:	f002 fee1 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
        if (eventHistory.getEvents(writer, maxSize - overhead, false)) {
   da822:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   da824:	1ffa      	subs	r2, r7, #7
   da826:	1a52      	subs	r2, r2, r1
   da828:	462b      	mov	r3, r5
   da82a:	a911      	add	r1, sp, #68	; 0x44
   da82c:	4650      	mov	r0, sl
   da82e:	f7fd fefb 	bl	d8628 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb>
   da832:	9003      	str	r0, [sp, #12]
   da834:	b308      	cbz	r0, da87a <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x13a>
        class EventInfo {
   da836:	49b6      	ldr	r1, [pc, #728]	; (dab10 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3d0>)
   da838:	a816      	add	r0, sp, #88	; 0x58
   da83a:	f004 f868 	bl	de90e <_ZN6StringC1EPKc>
            eventInfo.priority = 1;
   da83e:	2301      	movs	r3, #1
            eventInfo.keys.push_back(eventHistoryKey);
   da840:	f104 0134 	add.w	r1, r4, #52	; 0x34
   da844:	a81b      	add	r0, sp, #108	; 0x6c
            eventInfo.priority = 1;
   da846:	931a      	str	r3, [sp, #104]	; 0x68
   da848:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
   da84c:	951d      	str	r5, [sp, #116]	; 0x74
            eventInfo.keys.push_back(eventHistoryKey);
   da84e:	f7ff fc4f 	bl	da0f0 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_>
            writer.endObject();
   da852:	a811      	add	r0, sp, #68	; 0x44
   da854:	f002 fdc1 	bl	dd3da <_ZN5spark10JSONWriter9endObjectEv>
            buf[strlen(buf) - 1] = 0;
   da858:	4630      	mov	r0, r6
   da85a:	f005 fc4e 	bl	e00fa <strlen>
   da85e:	4430      	add	r0, r6
            eventInfo.json = &buf[1];
   da860:	1c71      	adds	r1, r6, #1
            buf[strlen(buf) - 1] = 0;
   da862:	f800 5c01 	strb.w	r5, [r0, #-1]
            eventInfo.json = &buf[1];
   da866:	a816      	add	r0, sp, #88	; 0x58
   da868:	f004 f8af 	bl	de9ca <_ZN6StringaSEPKc>
            infoArray.push_back(eventInfo);
   da86c:	a807      	add	r0, sp, #28
   da86e:	a916      	add	r1, sp, #88	; 0x58
   da870:	f7ff fac0 	bl	d9df4 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_>
            EventInfo eventInfo;
   da874:	a816      	add	r0, sp, #88	; 0x58
   da876:	f7ff fa48 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
      { return begin() == end(); }
   da87a:	e9dd 9b07 	ldrd	r9, fp, [sp, #28]
    if (!infoArray.empty()) {
   da87e:	45d9      	cmp	r9, fp
   da880:	f000 80bf 	beq.w	daa02 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2c2>
    { return __lhs.base() - __rhs.base(); }
   da884:	ebab 0509 	sub.w	r5, fp, r9
   da888:	116a      	asrs	r2, r5, #5

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
   da88a:	fab2 f282 	clz	r2, r2
   da88e:	f1c2 021f 	rsb	r2, r2, #31
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
	   _Compare __comp)
    {
      if (__first != __last)
	{
	  std::__introsort_loop(__first, __last,
   da892:	f04f 0300 	mov.w	r3, #0
   da896:	0052      	lsls	r2, r2, #1
   da898:	4659      	mov	r1, fp
   da89a:	4648      	mov	r0, r9
   da89c:	f7ff fec9 	bl	da632 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_>
      if (__last - __first > int(_S_threshold))
   da8a0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   da8a4:	dd0c      	ble.n	da8c0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x180>
      { return __normal_iterator(_M_current + __n); }
   da8a6:	f509 7500 	add.w	r5, r9, #512	; 0x200
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   da8aa:	4629      	mov	r1, r5
   da8ac:	4648      	mov	r0, r9
   da8ae:	f7ff fbd8 	bl	da062 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   da8b2:	45ab      	cmp	fp, r5
   da8b4:	d008      	beq.n	da8c8 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x188>
	std::__unguarded_linear_insert(__i,
   da8b6:	4628      	mov	r0, r5
   da8b8:	f7ff fba3 	bl	da002 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0>
      operator++() _GLIBCXX_NOEXCEPT
   da8bc:	3520      	adds	r5, #32
	return *this;
   da8be:	e7f8      	b.n	da8b2 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x172>
	std::__insertion_sort(__first, __last, __comp);
   da8c0:	4659      	mov	r1, fp
   da8c2:	4648      	mov	r0, r9
   da8c4:	f7ff fbcd 	bl	da062 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   da8c8:	2300      	movs	r3, #0
   da8ca:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
      : _M_current(__i) { }
   da8ce:	f8dd b01c 	ldr.w	fp, [sp, #28]
   da8d2:	9313      	str	r3, [sp, #76]	; 0x4c
        for(auto it = infoArray.begin(); it != infoArray.end(); ) {
   da8d4:	9b08      	ldr	r3, [sp, #32]
   da8d6:	459b      	cmp	fp, r3
   da8d8:	d036      	beq.n	da948 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x208>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   da8da:	f8db 9014 	ldr.w	r9, [fp, #20]
            bool keyExists = false;
   da8de:	2500      	movs	r5, #0
            for(auto it2 = it->keys.begin(); it2 != it->keys.end(); ++it2) {
   da8e0:	f8db 3018 	ldr.w	r3, [fp, #24]
   da8e4:	4599      	cmp	r9, r3
   da8e6:	d014      	beq.n	da912 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1d2>
   da8e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
                for(auto it3 = keysAdded.begin(); it3 != keysAdded.end(); ++it3) {
   da8ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   da8ec:	4293      	cmp	r3, r2
   da8ee:	d009      	beq.n	da904 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1c4>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   da8f0:	4618      	mov	r0, r3
   da8f2:	4649      	mov	r1, r9
   da8f4:	9304      	str	r3, [sp, #16]
   da8f6:	f004 f8d8 	bl	deaaa <_ZNK6String6equalsERKS_>
   da8fa:	9b04      	ldr	r3, [sp, #16]
   da8fc:	3310      	adds	r3, #16
                    if (*it3 == *it2) {
   da8fe:	2800      	cmp	r0, #0
   da900:	d0f3      	beq.n	da8ea <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1aa>
                        keyExists = true;
   da902:	2501      	movs	r5, #1
                keysAdded.push_back(*it2);
   da904:	4649      	mov	r1, r9
   da906:	a811      	add	r0, sp, #68	; 0x44
   da908:	f7ff fbf2 	bl	da0f0 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_>
      operator++() _GLIBCXX_NOEXCEPT
   da90c:	f109 0910 	add.w	r9, r9, #16
	return *this;
   da910:	e7e6      	b.n	da8e0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1a0>
            if (keyExists) {
   da912:	f10b 0320 	add.w	r3, fp, #32
   da916:	b1ad      	cbz	r5, da944 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x204>
   da918:	9d08      	ldr	r5, [sp, #32]
      if (__position + 1 != end())
   da91a:	429d      	cmp	r5, r3
   da91c:	d00c      	beq.n	da938 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1f8>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   da91e:	1aed      	subs	r5, r5, r3
   da920:	116d      	asrs	r5, r5, #5
   da922:	4658      	mov	r0, fp
   da924:	2d00      	cmp	r5, #0
   da926:	f100 0920 	add.w	r9, r0, #32
   da92a:	dd05      	ble.n	da938 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1f8>
	      *__result = std::move(*__first);
   da92c:	4649      	mov	r1, r9
   da92e:	f7ff fabd 	bl	d9eac <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   da932:	3d01      	subs	r5, #1
	      ++__result;
   da934:	4648      	mov	r0, r9
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   da936:	e7f5      	b.n	da924 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1e4>
      --this->_M_impl._M_finish;
   da938:	9808      	ldr	r0, [sp, #32]
   da93a:	3820      	subs	r0, #32
   da93c:	9008      	str	r0, [sp, #32]
	{ __p->~_Up(); }
   da93e:	f7ff f9e4 	bl	d9d0a <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   da942:	465b      	mov	r3, fp
   da944:	469b      	mov	fp, r3
   da946:	e7c5      	b.n	da8d4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x194>
        char *end = &buf[maxSize - 2]; // Room for leading , and trailing }
   da948:	1ebb      	subs	r3, r7, #2
   da94a:	18f3      	adds	r3, r6, r3
        *cur++ = '{';
   da94c:	46b3      	mov	fp, r6
        char *end = &buf[maxSize - 2]; // Room for leading , and trailing }
   da94e:	9305      	str	r3, [sp, #20]
        *cur++ = '{';
   da950:	237b      	movs	r3, #123	; 0x7b
   da952:	f80b 3b01 	strb.w	r3, [fp], #1
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   da956:	9b07      	ldr	r3, [sp, #28]
   da958:	f103 0920 	add.w	r9, r3, #32
        bool firstEventBuffer = true;
   da95c:	2301      	movs	r3, #1
        *cur++ = '{';
   da95e:	465d      	mov	r5, fp
        bool firstEventBuffer = true;
   da960:	9304      	str	r3, [sp, #16]
        for(auto it = infoArray.begin(); it != infoArray.end(); ++it) {
   da962:	9808      	ldr	r0, [sp, #32]
   da964:	f1a9 0120 	sub.w	r1, r9, #32
   da968:	4288      	cmp	r0, r1
   da96a:	d036      	beq.n	da9da <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x29a>
            if (&cur[strlen(it->json)] >= end) {
   da96c:	f859 0c20 	ldr.w	r0, [r9, #-32]
   da970:	f005 fbc3 	bl	e00fa <strlen>
   da974:	9b05      	ldr	r3, [sp, #20]
   da976:	4428      	add	r0, r5
   da978:	4283      	cmp	r3, r0
   da97a:	d81a      	bhi.n	da9b2 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x272>
                if (cur > &buf[1]) {
   da97c:	455d      	cmp	r5, fp
   da97e:	d911      	bls.n	da9a4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x264>
                    *cur++ = '}';
   da980:	f04f 037d 	mov.w	r3, #125	; 0x7d
   da984:	702b      	strb	r3, [r5, #0]
                    *cur = 0;
   da986:	f04f 0300 	mov.w	r3, #0
   da98a:	706b      	strb	r3, [r5, #1]
                    events.push_back(buf);
   da98c:	4631      	mov	r1, r6
   da98e:	a816      	add	r0, sp, #88	; 0x58
   da990:	f003 ffbd 	bl	de90e <_ZN6StringC1EPKc>
      { emplace_back(std::move(__x)); }
   da994:	a916      	add	r1, sp, #88	; 0x58
   da996:	4640      	mov	r0, r8
   da998:	f7ff fbee 	bl	da178 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   da99c:	a816      	add	r0, sp, #88	; 0x58
   da99e:	f003 ff6b 	bl	de878 <_ZN6StringD1Ev>
   da9a2:	465d      	mov	r5, fp
            if (!firstEventBuffer && it->priority < 50) {
   da9a4:	f859 1c10 	ldr.w	r1, [r9, #-16]
   da9a8:	2931      	cmp	r1, #49	; 0x31
   da9aa:	dd16      	ble.n	da9da <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x29a>
   da9ac:	2300      	movs	r3, #0
   da9ae:	9304      	str	r3, [sp, #16]
   da9b0:	e002      	b.n	da9b8 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x278>
   da9b2:	9b04      	ldr	r3, [sp, #16]
   da9b4:	2b00      	cmp	r3, #0
   da9b6:	d0f5      	beq.n	da9a4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x264>
            if (cur != &buf[1]) {
   da9b8:	45ab      	cmp	fp, r5
                *cur++ = ',';
   da9ba:	bf1c      	itt	ne
   da9bc:	212c      	movne	r1, #44	; 0x2c
   da9be:	f805 1b01 	strbne.w	r1, [r5], #1
            strcpy(cur, it->json);
   da9c2:	f859 1c20 	ldr.w	r1, [r9, #-32]
   da9c6:	4628      	mov	r0, r5
   da9c8:	f005 fb72 	bl	e00b0 <strcpy>
            cur += strlen(cur);
   da9cc:	4628      	mov	r0, r5
   da9ce:	f005 fb94 	bl	e00fa <strlen>
   da9d2:	f109 0920 	add.w	r9, r9, #32
   da9d6:	4405      	add	r5, r0
	return *this;
   da9d8:	e7c3      	b.n	da962 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x222>
        if (cur > &buf[1]) {
   da9da:	455d      	cmp	r5, fp
   da9dc:	d90e      	bls.n	da9fc <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2bc>
            *cur++ = '}';
   da9de:	237d      	movs	r3, #125	; 0x7d
   da9e0:	702b      	strb	r3, [r5, #0]
            *cur = 0;
   da9e2:	2300      	movs	r3, #0
   da9e4:	706b      	strb	r3, [r5, #1]
            events.push_back(buf);
   da9e6:	4631      	mov	r1, r6
   da9e8:	a816      	add	r0, sp, #88	; 0x58
   da9ea:	f003 ff90 	bl	de90e <_ZN6StringC1EPKc>
   da9ee:	4640      	mov	r0, r8
   da9f0:	a916      	add	r1, sp, #88	; 0x58
   da9f2:	f7ff fbc1 	bl	da178 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   da9f6:	a816      	add	r0, sp, #88	; 0x58
   da9f8:	f003 ff3e 	bl	de878 <_ZN6StringD1Ev>
        std::vector<String> keysAdded;
   da9fc:	a811      	add	r0, sp, #68	; 0x44
   da9fe:	f7ff f978 	bl	d9cf2 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
    if (doRemoveEvents) {
   daa02:	9b03      	ldr	r3, [sp, #12]
   daa04:	2b00      	cmp	r3, #0
   daa06:	d039      	beq.n	daa7c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x33c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   daa08:	f8d8 5000 	ldr.w	r5, [r8]
        doRemoveEvents = false;
   daa0c:	f04f 0b00 	mov.w	fp, #0
        for(auto it = events.begin(); it != events.end(); ++it) {
   daa10:	f8d8 3004 	ldr.w	r3, [r8, #4]
   daa14:	42ab      	cmp	r3, r5
   daa16:	d02b      	beq.n	daa70 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x330>
            JSONValue obj = JSONValue::parseCopy(*it);
   daa18:	6829      	ldr	r1, [r5, #0]
   daa1a:	a80a      	add	r0, sp, #40	; 0x28
   daa1c:	f7fd fbcc 	bl	d81b8 <_ZN5spark9JSONValue9parseCopyEPKc>
            JSONObjectIterator iter(obj);
   daa20:	a90a      	add	r1, sp, #40	; 0x28
   daa22:	a816      	add	r0, sp, #88	; 0x58
   daa24:	f7fb fcee 	bl	d6404 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
            while(iter.next()) {
   daa28:	a816      	add	r0, sp, #88	; 0x58
   daa2a:	f002 fc93 	bl	dd354 <_ZN5spark18JSONObjectIterator4nextEv>
   daa2e:	4681      	mov	r9, r0
   daa30:	b1b0      	cbz	r0, daa60 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x320>
                String key = (const char *)iter.name();
   daa32:	a916      	add	r1, sp, #88	; 0x58
   daa34:	a811      	add	r0, sp, #68	; 0x44
   daa36:	f7fb fcf6 	bl	d6426 <_ZNK5spark18JSONObjectIterator4nameEv>
   daa3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   daa3c:	a80d      	add	r0, sp, #52	; 0x34
   daa3e:	f003 ff66 	bl	de90e <_ZN6StringC1EPKc>
   daa42:	a812      	add	r0, sp, #72	; 0x48
   daa44:	f7f9 fcf7 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   daa48:	f104 0134 	add.w	r1, r4, #52	; 0x34
   daa4c:	a80d      	add	r0, sp, #52	; 0x34
   daa4e:	f004 f82c 	bl	deaaa <_ZNK6String6equalsERKS_>
                    doRemoveEvents = true;
   daa52:	2800      	cmp	r0, #0
   daa54:	bf18      	it	ne
   daa56:	46cb      	movne	fp, r9
                String key = (const char *)iter.name();
   daa58:	a80d      	add	r0, sp, #52	; 0x34
   daa5a:	f003 ff0d 	bl	de878 <_ZN6StringD1Ev>
            while(iter.next()) {
   daa5e:	e7e3      	b.n	daa28 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2e8>
   daa60:	a817      	add	r0, sp, #92	; 0x5c
   daa62:	f7f9 fce8 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   daa66:	a80b      	add	r0, sp, #44	; 0x2c
   daa68:	f7f9 fce5 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   daa6c:	3510      	adds	r5, #16
	return *this;
   daa6e:	e7cf      	b.n	daa10 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2d0>
        if (doRemoveEvents) {
   daa70:	f1bb 0f00 	cmp.w	fp, #0
   daa74:	d002      	beq.n	daa7c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x33c>
            eventHistory.removeEvents();
   daa76:	4650      	mov	r0, sl
   daa78:	f7fd fc70 	bl	d835c <_ZN11SleepHelper12EventHistory12removeEventsEv>
        n_(0) {
   daa7c:	f8df 908c 	ldr.w	r9, [pc, #140]	; dab0c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3cc>
        memset(buf, 0, maxSize);
   daa80:	2500      	movs	r5, #0
    while(eventHistory.getHasEvents()) {
   daa82:	4650      	mov	r0, sl
   daa84:	f7fd fce2 	bl	d844c <_ZN11SleepHelper12EventHistory12getHasEventsEv>
   daa88:	b378      	cbz	r0, daaea <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3aa>
        memset(buf, 0, maxSize);
   daa8a:	463a      	mov	r2, r7
   daa8c:	2100      	movs	r1, #0
   daa8e:	4630      	mov	r0, r6
   daa90:	f005 faa8 	bl	dffe4 <memset>
        writer.beginObject();
   daa94:	a816      	add	r0, sp, #88	; 0x58
   daa96:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
        state_(BEGIN) {
   daa9a:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
        n_(0) {
   daa9e:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
   daaa2:	951a      	str	r5, [sp, #104]	; 0x68
   daaa4:	f002 fcbb 	bl	dd41e <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name.c_str(), name.length());
   daaa8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   daaaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   daaac:	a816      	add	r0, sp, #88	; 0x58
   daaae:	f002 fd99 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
        if (eventHistory.getEvents(writer, maxSize - eventHistoryKey.length() - 6, false)) {        
   daab2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   daab4:	1fba      	subs	r2, r7, #6
   daab6:	1a52      	subs	r2, r2, r1
   daab8:	2300      	movs	r3, #0
   daaba:	a916      	add	r1, sp, #88	; 0x58
   daabc:	4650      	mov	r0, sl
   daabe:	f7fd fdb3 	bl	d8628 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb>
   daac2:	2800      	cmp	r0, #0
   daac4:	d0dd      	beq.n	daa82 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x342>
            writer.endObject();
   daac6:	a816      	add	r0, sp, #88	; 0x58
   daac8:	f002 fc87 	bl	dd3da <_ZN5spark10JSONWriter9endObjectEv>
            events.push_back(buf);
   daacc:	4631      	mov	r1, r6
   daace:	a811      	add	r0, sp, #68	; 0x44
   daad0:	f003 ff1d 	bl	de90e <_ZN6StringC1EPKc>
   daad4:	a911      	add	r1, sp, #68	; 0x44
   daad6:	4640      	mov	r0, r8
   daad8:	f7ff fb4e 	bl	da178 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   daadc:	a811      	add	r0, sp, #68	; 0x44
   daade:	f003 fecb 	bl	de878 <_ZN6StringD1Ev>
            eventHistory.removeEvents();
   daae2:	4650      	mov	r0, sl
   daae4:	f7fd fc3a 	bl	d835c <_ZN11SleepHelper12EventHistory12removeEventsEv>
    while(eventHistory.getHasEvents()) {
   daae8:	e7cb      	b.n	daa82 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x342>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   daaea:	e9d4 7803 	ldrd	r7, r8, [r4, #12]
   daaee:	4547      	cmp	r7, r8
   daaf0:	d007      	beq.n	dab02 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3c2>
   daaf2:	463d      	mov	r5, r7
   daaf4:	4628      	mov	r0, r5
   daaf6:	3510      	adds	r5, #16
   daaf8:	f7fa faf0 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   daafc:	45a8      	cmp	r8, r5
   daafe:	d1f9      	bne.n	daaf4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3b4>
	    this->_M_impl._M_finish = __pos;
   dab00:	6127      	str	r7, [r4, #16]
    free(buf);
   dab02:	4630      	mov	r0, r6
   dab04:	f001 fc6c 	bl	dc3e0 <free>
   dab08:	e62c      	b.n	da764 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x24>
   dab0a:	bf00      	nop
   dab0c:	000e2d4c 	.word	0x000e2d4c
   dab10:	000e291f 	.word	0x000e291f

000dab14 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EE>:
    generateEvents(events, maxSize);
   dab14:	f240 226e 	movw	r2, #622	; 0x26e
   dab18:	f7ff be12 	b.w	da740 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj>

000dab1c <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv>:
void SleepHelper::stateHandlerConnectedWakeEvents() {
   dab1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (dataCaptureActive) {
   dab1e:	f890 57d1 	ldrb.w	r5, [r0, #2001]	; 0x7d1
void SleepHelper::stateHandlerConnectedWakeEvents() {
   dab22:	4604      	mov	r4, r0
    if (dataCaptureActive) {
   dab24:	b9dd      	cbnz	r5, dab5e <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x42>
    wakeEventFunctions.generateEvents(wakeEventPayload);
   dab26:	f200 71d4 	addw	r1, r0, #2004	; 0x7d4
   dab2a:	f500 60e7 	add.w	r0, r0, #1848	; 0x738
   dab2e:	f7ff fff1 	bl	dab14 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EE>
    lastEventHistoryCheckMillis = 0;
   dab32:	f8d4 36d4 	ldr.w	r3, [r4, #1748]	; 0x6d4
   dab36:	f8c4 57cc 	str.w	r5, [r4, #1996]	; 0x7cc
                it->callbackState = newState;
   dab3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            for(auto it = callbackState.begin(); it != callbackState.end(); ++it) {
   dab3e:	f8d4 16d8 	ldr.w	r1, [r4, #1752]	; 0x6d8
   dab42:	4299      	cmp	r1, r3
   dab44:	d002      	beq.n	dab4c <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x30>
                it->callbackState = newState;
   dab46:	f843 2b08 	str.w	r2, [r3], #8
   dab4a:	e7f8      	b.n	dab3e <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x22>
    stateHandler = &SleepHelper::stateHandlerConnected;
   dab4c:	4b05      	ldr	r3, [pc, #20]	; (dab64 <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x48>)
   dab4e:	9300      	str	r3, [sp, #0]
   dab50:	4669      	mov	r1, sp
   dab52:	2300      	movs	r3, #0
   dab54:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dab58:	9301      	str	r3, [sp, #4]
   dab5a:	f7fe f947 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dab5e:	b003      	add	sp, #12
   dab60:	bd30      	pop	{r4, r5, pc}
   dab62:	bf00      	nop
   dab64:	000da3f1 	.word	0x000da3f1

000dab68 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE>:
}
   dab68:	b538      	push	{r3, r4, r5, lr}
};
   dab6a:	4c16      	ldr	r4, [pc, #88]	; (dabc4 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x5c>)
        val_(val) {
   dab6c:	4b16      	ldr	r3, [pc, #88]	; (dabc8 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x60>)
   dab6e:	4917      	ldr	r1, [pc, #92]	; (dabcc <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x64>)
   dab70:	2201      	movs	r2, #1
   dab72:	701a      	strb	r2, [r3, #0]
   dab74:	4620      	mov	r0, r4
   dab76:	2201      	movs	r2, #1
   dab78:	2300      	movs	r3, #0
   dab7a:	e8e0 2302 	strd	r2, r3, [r0], #8
   dab7e:	f003 fec6 	bl	de90e <_ZN6StringC1EPKc>
   dab82:	2532      	movs	r5, #50	; 0x32
   dab84:	2202      	movs	r2, #2
   dab86:	2300      	movs	r3, #0
   dab88:	4911      	ldr	r1, [pc, #68]	; (dabd0 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x68>)
   dab8a:	61a5      	str	r5, [r4, #24]
   dab8c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   dab90:	e9c4 2308 	strd	r2, r3, [r4, #32]
   dab94:	f003 febb 	bl	de90e <_ZN6StringC1EPKc>
   dab98:	2204      	movs	r2, #4
   dab9a:	2300      	movs	r3, #0
   dab9c:	490d      	ldr	r1, [pc, #52]	; (dabd4 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x6c>)
   dab9e:	63a5      	str	r5, [r4, #56]	; 0x38
   daba0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   daba4:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   daba8:	f003 feb1 	bl	de90e <_ZN6StringC1EPKc>
   dabac:	2208      	movs	r2, #8
   dabae:	2300      	movs	r3, #0
   dabb0:	4909      	ldr	r1, [pc, #36]	; (dabd8 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x70>)
   dabb2:	65a5      	str	r5, [r4, #88]	; 0x58
   dabb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   dabb8:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
   dabbc:	f003 fea7 	bl	de90e <_ZN6StringC1EPKc>
   dabc0:	67a5      	str	r5, [r4, #120]	; 0x78
}
   dabc2:	bd38      	pop	{r3, r4, r5, pc}
   dabc4:	2003e4a8 	.word	0x2003e4a8
   dabc8:	2003e528 	.word	0x2003e528
   dabcc:	000e2a7c 	.word	0x000e2a7c
   dabd0:	000e2a7f 	.word	0x000e2a7f
   dabd4:	000e2a83 	.word	0x000e2a83
   dabd8:	000e2a86 	.word	0x000e2a86

000dabdc <_ZN11SleepHelperD1Ev>:
SleepHelper::~SleepHelper() {
   dabdc:	4b7b      	ldr	r3, [pc, #492]	; (dadcc <_ZN11SleepHelperD1Ev+0x1f0>)
   dabde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dabe2:	4604      	mov	r4, r0
   dabe4:	6003      	str	r3, [r0, #0]
   dabe6:	f200 70d4 	addw	r0, r0, #2004	; 0x7d4
   dabea:	f7ff f882 	bl	d9cf2 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   dabee:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dabf2:	f7fa fa73 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dabf6:	f8d4 5780 	ldr.w	r5, [r4, #1920]	; 0x780
   dabfa:	f8d4 6784 	ldr.w	r6, [r4, #1924]	; 0x784
   dabfe:	42ae      	cmp	r6, r5
   dac00:	d004      	beq.n	dac0c <_ZN11SleepHelperD1Ev+0x30>
    { __pointer->~_Tp(); }
   dac02:	4628      	mov	r0, r5
   dac04:	f7fd fb9f 	bl	d8346 <_ZN11SleepHelper11PublishDataD1Ev>
	  for (; __first != __last; ++__first)
   dac08:	3524      	adds	r5, #36	; 0x24
   dac0a:	e7f8      	b.n	dabfe <_ZN11SleepHelperD1Ev+0x22>
	_M_deallocate(_M_impl._M_start,
   dac0c:	f8d4 0780 	ldr.w	r0, [r4, #1920]	; 0x780
	if (__p)
   dac10:	b108      	cbz	r0, dac16 <_ZN11SleepHelperD1Ev+0x3a>
	::operator delete(__p);
   dac12:	f7f9 fa44 	bl	d409e <_ZdlPv>
    class EventCombiner {
   dac16:	f204 706c 	addw	r0, r4, #1900	; 0x76c
   dac1a:	f003 fe2d 	bl	de878 <_ZN6StringD1Ev>
    class EventHistory : public SleepHelperRecursiveMutex {
   dac1e:	f204 7054 	addw	r0, r4, #1876	; 0x754
   dac22:	f003 fe29 	bl	de878 <_ZN6StringD1Ev>
            if (handle_) {
   dac26:	f8d4 0750 	ldr.w	r0, [r4, #1872]	; 0x750
   dac2a:	f504 65e7 	add.w	r5, r4, #1848	; 0x738
   dac2e:	b108      	cbz	r0, dac34 <_ZN11SleepHelperD1Ev+0x58>
                os_mutex_recursive_destroy(handle_);
   dac30:	f001 f84e 	bl	dbcd0 <os_mutex_recursive_destroy>
    class AppCallback {
   dac34:	f204 7044 	addw	r0, r4, #1860	; 0x744
   dac38:	f7fd ff67 	bl	d8b0a <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev>
   dac3c:	4628      	mov	r0, r5
   dac3e:	f7fd ff64 	bl	d8b0a <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev>
   dac42:	f504 60e5 	add.w	r0, r4, #1832	; 0x728
   dac46:	f003 fe17 	bl	de878 <_ZN6StringD1Ev>
   dac4a:	f504 60e2 	add.w	r0, r4, #1808	; 0x710
   dac4e:	f7fd fb65 	bl	d831c <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dac52:	f8d4 5704 	ldr.w	r5, [r4, #1796]	; 0x704
   dac56:	f8d4 6708 	ldr.w	r6, [r4, #1800]	; 0x708
   dac5a:	42ae      	cmp	r6, r5
   dac5c:	d004      	beq.n	dac68 <_ZN11SleepHelperD1Ev+0x8c>
   dac5e:	4628      	mov	r0, r5
   dac60:	f7fa fa3c 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   dac64:	3510      	adds	r5, #16
   dac66:	e7f8      	b.n	dac5a <_ZN11SleepHelperD1Ev+0x7e>
	_M_deallocate(_M_impl._M_start,
   dac68:	f8d4 0704 	ldr.w	r0, [r4, #1796]	; 0x704
	if (__p)
   dac6c:	b108      	cbz	r0, dac72 <_ZN11SleepHelperD1Ev+0x96>
   dac6e:	f7f9 fa16 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dac72:	f8d4 56f8 	ldr.w	r5, [r4, #1784]	; 0x6f8
   dac76:	f8d4 66fc 	ldr.w	r6, [r4, #1788]	; 0x6fc
   dac7a:	42ae      	cmp	r6, r5
   dac7c:	d004      	beq.n	dac88 <_ZN11SleepHelperD1Ev+0xac>
   dac7e:	4628      	mov	r0, r5
   dac80:	f7fa fa2c 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   dac84:	3510      	adds	r5, #16
   dac86:	e7f8      	b.n	dac7a <_ZN11SleepHelperD1Ev+0x9e>
	_M_deallocate(_M_impl._M_start,
   dac88:	f8d4 06f8 	ldr.w	r0, [r4, #1784]	; 0x6f8
	if (__p)
   dac8c:	b108      	cbz	r0, dac92 <_ZN11SleepHelperD1Ev+0xb6>
   dac8e:	f7f9 fa06 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dac92:	f8d4 56ec 	ldr.w	r5, [r4, #1772]	; 0x6ec
   dac96:	f8d4 66f0 	ldr.w	r6, [r4, #1776]	; 0x6f0
   dac9a:	42ae      	cmp	r6, r5
   dac9c:	d004      	beq.n	daca8 <_ZN11SleepHelperD1Ev+0xcc>
   dac9e:	4628      	mov	r0, r5
   daca0:	f7fa fa1c 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   daca4:	3510      	adds	r5, #16
   daca6:	e7f8      	b.n	dac9a <_ZN11SleepHelperD1Ev+0xbe>
	_M_deallocate(_M_impl._M_start,
   daca8:	f8d4 06ec 	ldr.w	r0, [r4, #1772]	; 0x6ec
	if (__p)
   dacac:	b108      	cbz	r0, dacb2 <_ZN11SleepHelperD1Ev+0xd6>
   dacae:	f7f9 f9f6 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dacb2:	f8d4 56e0 	ldr.w	r5, [r4, #1760]	; 0x6e0
   dacb6:	f8d4 66e4 	ldr.w	r6, [r4, #1764]	; 0x6e4
   dacba:	42ae      	cmp	r6, r5
   dacbc:	d004      	beq.n	dacc8 <_ZN11SleepHelperD1Ev+0xec>
   dacbe:	4628      	mov	r0, r5
   dacc0:	f7fa fa0c 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   dacc4:	3510      	adds	r5, #16
   dacc6:	e7f8      	b.n	dacba <_ZN11SleepHelperD1Ev+0xde>
	_M_deallocate(_M_impl._M_start,
   dacc8:	f8d4 06e0 	ldr.w	r0, [r4, #1760]	; 0x6e0
	if (__p)
   daccc:	b108      	cbz	r0, dacd2 <_ZN11SleepHelperD1Ev+0xf6>
   dacce:	f7f9 f9e6 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   dacd2:	f8d4 06d4 	ldr.w	r0, [r4, #1748]	; 0x6d4
	if (__p)
   dacd6:	b108      	cbz	r0, dacdc <_ZN11SleepHelperD1Ev+0x100>
   dacd8:	f7f9 f9e1 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dacdc:	f8d4 56c8 	ldr.w	r5, [r4, #1736]	; 0x6c8
   dace0:	f8d4 66cc 	ldr.w	r6, [r4, #1740]	; 0x6cc
   dace4:	42ae      	cmp	r6, r5
   dace6:	d004      	beq.n	dacf2 <_ZN11SleepHelperD1Ev+0x116>
   dace8:	4628      	mov	r0, r5
   dacea:	f7fa f9f7 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   dacee:	3510      	adds	r5, #16
   dacf0:	e7f8      	b.n	dace4 <_ZN11SleepHelperD1Ev+0x108>
	_M_deallocate(_M_impl._M_start,
   dacf2:	f8d4 06c8 	ldr.w	r0, [r4, #1736]	; 0x6c8
	if (__p)
   dacf6:	b108      	cbz	r0, dacfc <_ZN11SleepHelperD1Ev+0x120>
   dacf8:	f7f9 f9d1 	bl	d409e <_ZdlPv>
   dacfc:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   dad00:	f7fd fb0c 	bl	d831c <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev>
   dad04:	f204 60a4 	addw	r0, r4, #1700	; 0x6a4
   dad08:	f7fd ffd6 	bl	d8cb8 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev>
   dad0c:	f504 60d3 	add.w	r0, r4, #1688	; 0x698
   dad10:	f7fd ffd2 	bl	d8cb8 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev>
   dad14:	f204 605c 	addw	r0, r4, #1628	; 0x65c
   dad18:	f7fd f9de 	bl	d80d8 <_ZN8particle24SystemSleepConfigurationD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dad1c:	f8d4 5650 	ldr.w	r5, [r4, #1616]	; 0x650
   dad20:	f8d4 6654 	ldr.w	r6, [r4, #1620]	; 0x654
   dad24:	42ae      	cmp	r6, r5
   dad26:	d004      	beq.n	dad32 <_ZN11SleepHelperD1Ev+0x156>
   dad28:	4628      	mov	r0, r5
   dad2a:	f7fa f9d7 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   dad2e:	3510      	adds	r5, #16
   dad30:	e7f8      	b.n	dad24 <_ZN11SleepHelperD1Ev+0x148>
	_M_deallocate(_M_impl._M_start,
   dad32:	f8d4 0650 	ldr.w	r0, [r4, #1616]	; 0x650
	if (__p)
   dad36:	b108      	cbz	r0, dad3c <_ZN11SleepHelperD1Ev+0x160>
   dad38:	f7f9 f9b1 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dad3c:	f8d4 5644 	ldr.w	r5, [r4, #1604]	; 0x644
   dad40:	f8d4 6648 	ldr.w	r6, [r4, #1608]	; 0x648
   dad44:	42ae      	cmp	r6, r5
   dad46:	d004      	beq.n	dad52 <_ZN11SleepHelperD1Ev+0x176>
   dad48:	4628      	mov	r0, r5
   dad4a:	f7fa f9c7 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   dad4e:	3510      	adds	r5, #16
   dad50:	e7f8      	b.n	dad44 <_ZN11SleepHelperD1Ev+0x168>
	_M_deallocate(_M_impl._M_start,
   dad52:	f8d4 0644 	ldr.w	r0, [r4, #1604]	; 0x644
	if (__p)
   dad56:	b108      	cbz	r0, dad5c <_ZN11SleepHelperD1Ev+0x180>
   dad58:	f7f9 f9a1 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dad5c:	f8d4 6638 	ldr.w	r6, [r4, #1592]	; 0x638
   dad60:	f8d4 763c 	ldr.w	r7, [r4, #1596]	; 0x63c
   dad64:	42b7      	cmp	r7, r6
   dad66:	d022      	beq.n	dadae <_ZN11SleepHelperD1Ev+0x1d2>
   dad68:	e9d6 5808 	ldrd	r5, r8, [r6, #32]
   dad6c:	45a8      	cmp	r8, r5
   dad6e:	d015      	beq.n	dad9c <_ZN11SleepHelperD1Ev+0x1c0>
class LocalTimeScheduleItem {
   dad70:	f105 0038 	add.w	r0, r5, #56	; 0x38
   dad74:	f003 fd80 	bl	de878 <_ZN6StringD1Ev>
class LocalTimeRange : public LocalTimeRestrictedDate {
   dad78:	f105 0024 	add.w	r0, r5, #36	; 0x24
   dad7c:	f7fa fbde 	bl	d553c <_ZN12LocalTimeHMSD1Ev>
   dad80:	f105 001c 	add.w	r0, r5, #28
   dad84:	f7fa fbda 	bl	d553c <_ZN12LocalTimeHMSD1Ev>
	_M_deallocate(_M_impl._M_start,
   dad88:	6928      	ldr	r0, [r5, #16]
	if (__p)
   dad8a:	b108      	cbz	r0, dad90 <_ZN11SleepHelperD1Ev+0x1b4>
   dad8c:	f7f9 f987 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   dad90:	6868      	ldr	r0, [r5, #4]
	if (__p)
   dad92:	b108      	cbz	r0, dad98 <_ZN11SleepHelperD1Ev+0x1bc>
   dad94:	f7f9 f983 	bl	d409e <_ZdlPv>
   dad98:	354c      	adds	r5, #76	; 0x4c
   dad9a:	e7e7      	b.n	dad6c <_ZN11SleepHelperD1Ev+0x190>
	_M_deallocate(_M_impl._M_start,
   dad9c:	6a30      	ldr	r0, [r6, #32]
	if (__p)
   dad9e:	b108      	cbz	r0, dada4 <_ZN11SleepHelperD1Ev+0x1c8>
   dada0:	f7f9 f97d 	bl	d409e <_ZdlPv>
class LocalTimeSchedule {
   dada4:	4630      	mov	r0, r6
   dada6:	f003 fd67 	bl	de878 <_ZN6StringD1Ev>
   dadaa:	3630      	adds	r6, #48	; 0x30
   dadac:	e7da      	b.n	dad64 <_ZN11SleepHelperD1Ev+0x188>
	_M_deallocate(_M_impl._M_start,
   dadae:	f8d4 0638 	ldr.w	r0, [r4, #1592]	; 0x638
	if (__p)
   dadb2:	b108      	cbz	r0, dadb8 <_ZN11SleepHelperD1Ev+0x1dc>
   dadb4:	f7f9 f973 	bl	d409e <_ZdlPv>
   dadb8:	f504 60bd 	add.w	r0, r4, #1512	; 0x5e8
   dadbc:	f7fd f92c 	bl	d8018 <_ZN11SleepHelper14PersistentDataD1Ev>
   dadc0:	1d20      	adds	r0, r4, #4
   dadc2:	f7fd f947 	bl	d8054 <_ZN11SleepHelper12SettingsFileD1Ev>
}
   dadc6:	4620      	mov	r0, r4
   dadc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dadcc:	000e2b88 	.word	0x000e2b88

000dadd0 <_ZN11SleepHelperD0Ev>:
SleepHelper::~SleepHelper() {
   dadd0:	b510      	push	{r4, lr}
   dadd2:	4604      	mov	r4, r0
}
   dadd4:	f7ff ff02 	bl	dabdc <_ZN11SleepHelperD1Ev>
   dadd8:	4620      	mov	r0, r4
   dadda:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
   dadde:	f004 fb49 	bl	df474 <_ZdlPvj>
   dade2:	4620      	mov	r0, r4
   dade4:	bd10      	pop	{r4, pc}
	...

000dade8 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dade8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dadea:	b0bd      	sub	sp, #244	; 0xf4
   dadec:	4604      	mov	r4, r0
   dadee:	460d      	mov	r5, r1
        if (!Time.isValid()) {
   dadf0:	f004 f88a 	bl	def08 <_ZN9TimeClass7isValidEv>
   dadf4:	b950      	cbnz	r0, dae0c <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x24>
            appLog.info("no RTC time, doing full wake");
   dadf6:	6820      	ldr	r0, [r4, #0]
   dadf8:	491e      	ldr	r1, [pc, #120]	; (dae74 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x8c>)
   dadfa:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   dadfe:	f7f9 fb03 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
            connectConviction = 80;
   dae02:	2350      	movs	r3, #80	; 0x50
   dae04:	602b      	str	r3, [r5, #0]
      }
   dae06:	2001      	movs	r0, #1
   dae08:	b03d      	add	sp, #244	; 0xf4
   dae0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        time_t t = SleepHelper::instance().persistentData.getValue_lastFullWake();
   dae0c:	f7fd fdba 	bl	d8984 <_ZN11SleepHelper8instanceEv>
            return (time_t) getValue<uint32_t>(offsetof(SleepHelperData, lastFullWake));
   dae10:	2114      	movs	r1, #20
   dae12:	f500 60bd 	add.w	r0, r0, #1512	; 0x5e8
   dae16:	f7fd fe4d 	bl	d8ab4 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>
   dae1a:	2700      	movs	r7, #0
   dae1c:	4606      	mov	r6, r0
        if (t == 0) {
   dae1e:	b918      	cbnz	r0, dae28 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x40>
            t = Time.now();
   dae20:	f004 f88f 	bl	def42 <_ZN9TimeClass3nowEv>
   dae24:	4606      	mov	r6, r0
   dae26:	17c7      	asrs	r7, r0, #31
class LocalTimeConvert {
   dae28:	2306      	movs	r3, #6
   dae2a:	a801      	add	r0, sp, #4
   dae2c:	9300      	str	r3, [sp, #0]
   dae2e:	f7fa fe61 	bl	d5af4 <_ZN22LocalTimePosixTimezoneC1Ev>
        conv.withTime(t).convert();
   dae32:	4668      	mov	r0, sp
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   dae34:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
   dae38:	f7fb f862 	bl	d5f00 <_ZN16LocalTimeConvert7convertEv>
        t = scheduleManager.getNextFullWake(conv);
   dae3c:	6820      	ldr	r0, [r4, #0]
   dae3e:	4669      	mov	r1, sp
   dae40:	f500 60c7 	add.w	r0, r0, #1592	; 0x638
   dae44:	f7fb fbef 	bl	d6626 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert>
   dae48:	460f      	mov	r7, r1
   dae4a:	4606      	mov	r6, r0
        if (t <= Time.now()) {
   dae4c:	f004 f879 	bl	def42 <_ZN9TimeClass3nowEv>
   dae50:	17c1      	asrs	r1, r0, #31
   dae52:	42b0      	cmp	r0, r6
   dae54:	eb71 0307 	sbcs.w	r3, r1, r7
   dae58:	db07      	blt.n	dae6a <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x82>
            appLog.info("time to do full wake");
   dae5a:	6820      	ldr	r0, [r4, #0]
   dae5c:	4906      	ldr	r1, [pc, #24]	; (dae78 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x90>)
   dae5e:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   dae62:	f7f9 fad1 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
            connectConviction = 80;
   dae66:	2350      	movs	r3, #80	; 0x50
   dae68:	602b      	str	r3, [r5, #0]
class LocalTimeConvert {
   dae6a:	a801      	add	r0, sp, #4
   dae6c:	f7fa fb7e 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
   dae70:	e7c9      	b.n	dae06 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x1e>
   dae72:	bf00      	nop
   dae74:	000e2a8a 	.word	0x000e2a8a
   dae78:	000e2aa7 	.word	0x000e2aa7

000dae7c <_ZN11SleepHelper22calculateSleepSettingsEb>:
void SleepHelper::calculateSleepSettings(bool isConnected) {
   dae7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dae80:	b0bf      	sub	sp, #252	; 0xfc
   dae82:	4604      	mov	r4, r0
    sleepConfig = SystemSleepConfiguration();
   dae84:	f200 685c 	addw	r8, r0, #1628	; 0x65c
   dae88:	a802      	add	r0, sp, #8
void SleepHelper::calculateSleepSettings(bool isConnected) {
   dae8a:	460e      	mov	r6, r1
        memcpy(&config_, &config.config_, sizeof(hal_sleep_config_t));
   dae8c:	ad03      	add	r5, sp, #12
    sleepConfig = SystemSleepConfiguration();
   dae8e:	f7fd f911 	bl	d80b4 <_ZN8particle24SystemSleepConfigurationC1Ev>
        valid_ = config.valid_;
   dae92:	f89d 301c 	ldrb.w	r3, [sp, #28]
   dae96:	f884 3670 	strb.w	r3, [r4, #1648]	; 0x670
        memcpy(&config_, &config.config_, sizeof(hal_sleep_config_t));
   dae9a:	f504 62cc 	add.w	r2, r4, #1632	; 0x660
   dae9e:	af07      	add	r7, sp, #28
   daea0:	46a9      	mov	r9, r5
   daea2:	462b      	mov	r3, r5
   daea4:	cb03      	ldmia	r3!, {r0, r1}
   daea6:	42bb      	cmp	r3, r7
   daea8:	6010      	str	r0, [r2, #0]
   daeaa:	6051      	str	r1, [r2, #4]
   daeac:	461d      	mov	r5, r3
   daeae:	f102 0208 	add.w	r2, r2, #8
   daeb2:	d1f6      	bne.n	daea2 <_ZN11SleepHelper22calculateSleepSettingsEb+0x26>
        config.config_.wakeup_sources = nullptr;
   daeb4:	2300      	movs	r3, #0
   daeb6:	a802      	add	r0, sp, #8
   daeb8:	9306      	str	r3, [sp, #24]
   daeba:	f7fd f90d 	bl	d80d8 <_ZN8particle24SystemSleepConfigurationD1Ev>
        if (valid_) {
   daebe:	f894 3670 	ldrb.w	r3, [r4, #1648]	; 0x670
   daec2:	b113      	cbz	r3, daeca <_ZN11SleepHelper22calculateSleepSettingsEb+0x4e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   daec4:	2302      	movs	r3, #2
   daec6:	f884 3664 	strb.w	r3, [r4, #1636]	; 0x664
    sleepParams.sleepTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(15min).count();
   daeca:	4b3f      	ldr	r3, [pc, #252]	; (dafc8 <_ZN11SleepHelper22calculateSleepSettingsEb+0x14c>)
    sleepParams.isConnected = isConnected;
   daecc:	f884 6678 	strb.w	r6, [r4, #1656]	; 0x678
    sleepParams.sleepTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(15min).count();
   daed0:	f8c4 3690 	str.w	r3, [r4, #1680]	; 0x690
   daed4:	4648      	mov	r0, r9
   daed6:	2306      	movs	r3, #6
   daed8:	9302      	str	r3, [sp, #8]
   daeda:	f7fa fe0b 	bl	d5af4 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   daede:	f004 f830 	bl	def42 <_ZN9TimeClass3nowEv>
   daee2:	17c1      	asrs	r1, r0, #31
   daee4:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    time_t nextWake = scheduleManager.getNextWake(conv);
   daee8:	f504 65c7 	add.w	r5, r4, #1592	; 0x638
    conv.withCurrentTime().convert();
   daeec:	a802      	add	r0, sp, #8
   daeee:	f7fb f807 	bl	d5f00 <_ZN16LocalTimeConvert7convertEv>
    time_t nextWake = scheduleManager.getNextWake(conv);
   daef2:	a902      	add	r1, sp, #8
   daef4:	4628      	mov	r0, r5
   daef6:	f7fb fb69 	bl	d65cc <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert>
   daefa:	4606      	mov	r6, r0
   daefc:	460f      	mov	r7, r1
    if (nextWake != 0) {
   daefe:	ea56 0307 	orrs.w	r3, r6, r7
   daf02:	d007      	beq.n	daf14 <_ZN11SleepHelper22calculateSleepSettingsEb+0x98>
        sleepParams.sleepTimeMs = (nextWake - Time.now()) * 1000;
   daf04:	f004 f81d 	bl	def42 <_ZN9TimeClass3nowEv>
   daf08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   daf0c:	1a36      	subs	r6, r6, r0
   daf0e:	435e      	muls	r6, r3
   daf10:	f8c4 6690 	str.w	r6, [r4, #1680]	; 0x690
    sleepParams.nextFullWakeTime = scheduleManager.getNextFullWake(conv);
   daf14:	a902      	add	r1, sp, #8
   daf16:	4628      	mov	r0, r5
   daf18:	f7fb fb85 	bl	d6626 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert>
   daf1c:	f504 63d0 	add.w	r3, r4, #1664	; 0x680
   daf20:	4606      	mov	r6, r0
   daf22:	460f      	mov	r7, r1
   daf24:	e9c3 6700 	strd	r6, r7, [r3]
    if (sleepParams.nextFullWakeTime != 0) {
   daf28:	ea56 0307 	orrs.w	r3, r6, r7
   daf2c:	d007      	beq.n	daf3e <_ZN11SleepHelper22calculateSleepSettingsEb+0xc2>
        sleepParams.timeUntilNextFullWakeMs = (sleepParams.nextFullWakeTime - Time.now()) * 1000;
   daf2e:	f004 f808 	bl	def42 <_ZN9TimeClass3nowEv>
   daf32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   daf36:	1a36      	subs	r6, r6, r0
   daf38:	435e      	muls	r6, r3
   daf3a:	f8c4 667c 	str.w	r6, [r4, #1660]	; 0x67c
    sleepParams.disconnectCellular = (sleepParams.timeUntilNextFullWakeMs >= minimumCellularOffTimeMs);
   daf3e:	f8d4 367c 	ldr.w	r3, [r4, #1660]	; 0x67c
   daf42:	f8d4 27a0 	ldr.w	r2, [r4, #1952]	; 0x7a0
      : _M_current(__i) { }
   daf46:	f8d4 5644 	ldr.w	r5, [r4, #1604]	; 0x644
   daf4a:	4293      	cmp	r3, r2
   daf4c:	bf34      	ite	cc
   daf4e:	2300      	movcc	r3, #0
   daf50:	2301      	movcs	r3, #1
   daf52:	f884 3694 	strb.w	r3, [r4, #1684]	; 0x694
    sleepConfigurationFunctions.forEach(sleepConfig, sleepParams);
   daf56:	f504 66cf 	add.w	r6, r4, #1656	; 0x678
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   daf5a:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
   daf5e:	42ab      	cmp	r3, r5
   daf60:	d00a      	beq.n	daf78 <_ZN11SleepHelper22calculateSleepSettingsEb+0xfc>
      if (_M_empty())
   daf62:	68ab      	ldr	r3, [r5, #8]
   daf64:	b90b      	cbnz	r3, daf6a <_ZN11SleepHelper22calculateSleepSettingsEb+0xee>
	__throw_bad_function_call();
   daf66:	f004 fa91 	bl	df48c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   daf6a:	68eb      	ldr	r3, [r5, #12]
   daf6c:	4628      	mov	r0, r5
   daf6e:	4632      	mov	r2, r6
   daf70:	4641      	mov	r1, r8
   daf72:	4798      	blx	r3
	++_M_current;
   daf74:	3510      	adds	r5, #16
	return *this;
   daf76:	e7f0      	b.n	daf5a <_ZN11SleepHelper22calculateSleepSettingsEb+0xde>
    if (sleepParams.sleepTimeMs < 1000) {
   daf78:	f8d4 3690 	ldr.w	r3, [r4, #1680]	; 0x690
   daf7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        sleepParams.sleepTimeMs = 1000;
   daf80:	bf3c      	itt	cc
   daf82:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
   daf86:	f8c4 3690 	strcc.w	r3, [r4, #1680]	; 0x690
        return hal_timer_millis(nullptr);
   daf8a:	2000      	movs	r0, #0
   daf8c:	f000 fef8 	bl	dbd80 <hal_timer_millis>
    sleepParams.calculatedMillis = System.millis();
   daf90:	f504 63d1 	add.w	r3, r4, #1672	; 0x688
   daf94:	e9c3 0100 	strd	r0, r1, [r3]
    if (sleepParams.isConnected && !sleepParams.disconnectCellular) {
   daf98:	f894 3678 	ldrb.w	r3, [r4, #1656]	; 0x678
   daf9c:	b14b      	cbz	r3, dafb2 <_ZN11SleepHelper22calculateSleepSettingsEb+0x136>
   daf9e:	f894 3694 	ldrb.w	r3, [r4, #1684]	; 0x694
   dafa2:	b933      	cbnz	r3, dafb2 <_ZN11SleepHelper22calculateSleepSettingsEb+0x136>
        sleepConfig.network(NETWORK_INTERFACE_CELLULAR);
   dafa4:	aa01      	add	r2, sp, #4
   dafa6:	2104      	movs	r1, #4
   dafa8:	4640      	mov	r0, r8
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   dafaa:	f8ad 3004 	strh.w	r3, [sp, #4]
   dafae:	f7fd f8c9 	bl	d8144 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE>
    sleepConfig.duration(sleepParams.sleepTimeMs);
   dafb2:	f8d4 1690 	ldr.w	r1, [r4, #1680]	; 0x690
   dafb6:	4640      	mov	r0, r8
   dafb8:	f7fd f89a 	bl	d80f0 <_ZN8particle24SystemSleepConfiguration8durationEm>
class LocalTimeConvert {
   dafbc:	4648      	mov	r0, r9
   dafbe:	f7fa fad5 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   dafc2:	b03f      	add	sp, #252	; 0xfc
   dafc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dafc8:	000dbba0 	.word	0x000dbba0

000dafcc <_ZN11SleepHelper24stateHandlerNoConnectionEv>:
void SleepHelper::stateHandlerNoConnection() {
   dafcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (dataCaptureActive) {
   dafce:	f890 37d1 	ldrb.w	r3, [r0, #2001]	; 0x7d1
void SleepHelper::stateHandlerNoConnection() {
   dafd2:	4604      	mov	r4, r0
    if (dataCaptureActive) {
   dafd4:	b9b3      	cbnz	r3, db004 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x38>
    if (!noConnectionFunctions.whileAnyTrue()) {
   dafd6:	f500 60e2 	add.w	r0, r0, #1808	; 0x710
   dafda:	f7fd feb8 	bl	d8d4e <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv>
   dafde:	4605      	mov	r5, r0
   dafe0:	b980      	cbnz	r0, db004 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x38>
        appLog.info("done with no connection mode, preparing to sleep");
   dafe2:	4909      	ldr	r1, [pc, #36]	; (db008 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x3c>)
   dafe4:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dafe8:	f7f9 fa0e 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
        calculateSleepSettings(false);
   dafec:	4629      	mov	r1, r5
   dafee:	4620      	mov	r0, r4
   daff0:	f7ff ff44 	bl	dae7c <_ZN11SleepHelper22calculateSleepSettingsEb>
        stateHandler = &SleepHelper::stateHandlerSleep;
   daff4:	4b05      	ldr	r3, [pc, #20]	; (db00c <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x40>)
   daff6:	4669      	mov	r1, sp
   daff8:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   daffc:	e9cd 3500 	strd	r3, r5, [sp]
   db000:	f7fd fef4 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   db004:	b003      	add	sp, #12
   db006:	bd30      	pop	{r4, r5, pc}
   db008:	000e2abc 	.word	0x000e2abc
   db00c:	000d9139 	.word	0x000d9139

000db010 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv>:
void SleepHelper::stateHandlerDisconnectBeforeSleep() {
   db010:	b530      	push	{r4, r5, lr}
   db012:	4604      	mov	r4, r0
   db014:	b085      	sub	sp, #20
    calculateSleepSettings(true);
   db016:	2101      	movs	r1, #1
   db018:	f7ff ff30 	bl	dae7c <_ZN11SleepHelper22calculateSleepSettingsEb>
    if (!sleepParams.disconnectCellular) {
   db01c:	f504 65f5 	add.w	r5, r4, #1960	; 0x7a8
   db020:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   db024:	f894 4694 	ldrb.w	r4, [r4, #1684]	; 0x694
   db028:	b95c      	cbnz	r4, db042 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x32>
        appLog.info("sleep cycle is short, using cellular standby");
   db02a:	490f      	ldr	r1, [pc, #60]	; (db068 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x58>)
   db02c:	f7f9 f9ec 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &SleepHelper::stateHandlerSleep;
   db030:	4b0e      	ldr	r3, [pc, #56]	; (db06c <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x5c>)
   db032:	e9cd 3401 	strd	r3, r4, [sp, #4]
    stateHandler = &SleepHelper::stateHandlerDisconnectWait;
   db036:	a901      	add	r1, sp, #4
   db038:	4628      	mov	r0, r5
   db03a:	f7fd fed7 	bl	d8dec <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   db03e:	b005      	add	sp, #20
   db040:	bd30      	pop	{r4, r5, pc}
    appLog.info("disconnecting from cloud");
   db042:	490b      	ldr	r1, [pc, #44]	; (db070 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x60>)
   db044:	f7f9 f9e0 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   db048:	2203      	movs	r2, #3
   db04a:	f241 3388 	movw	r3, #5000	; 0x1388
   db04e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    Particle.disconnect(CloudDisconnectOptions().graceful(true).timeout(5000)); // 5 seconds
   db052:	a801      	add	r0, sp, #4
    graceful_ = enabled;
   db054:	2301      	movs	r3, #1
   db056:	f8ad 300c 	strh.w	r3, [sp, #12]
   db05a:	f001 fb09 	bl	dc670 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    stateHandler = &SleepHelper::stateHandlerDisconnectWait;
   db05e:	4b05      	ldr	r3, [pc, #20]	; (db074 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x64>)
   db060:	9301      	str	r3, [sp, #4]
   db062:	2300      	movs	r3, #0
   db064:	9302      	str	r3, [sp, #8]
   db066:	e7e6      	b.n	db036 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x26>
   db068:	000e2aed 	.word	0x000e2aed
   db06c:	000d9139 	.word	0x000d9139
   db070:	000e2b1a 	.word	0x000e2b1a
   db074:	000d8e8d 	.word	0x000d8e8d

000db078 <_ZN11SleepHelper18dataCaptureHandlerEv>:
void SleepHelper::dataCaptureHandler() {
   db078:	b570      	push	{r4, r5, r6, lr}
    if (dataCaptureFunctions.isEmpty()) {
   db07a:	f8d0 26b0 	ldr.w	r2, [r0, #1712]	; 0x6b0
   db07e:	f8d0 36b4 	ldr.w	r3, [r0, #1716]	; 0x6b4
   db082:	429a      	cmp	r2, r3
void SleepHelper::dataCaptureHandler() {
   db084:	b0bc      	sub	sp, #240	; 0xf0
   db086:	4604      	mov	r4, r0
    if (dataCaptureFunctions.isEmpty()) {
   db088:	d00c      	beq.n	db0a4 <_ZN11SleepHelper18dataCaptureHandlerEv+0x2c>
    if (!Time.isValid()) {
   db08a:	f003 ff3d 	bl	def08 <_ZN9TimeClass7isValidEv>
   db08e:	b148      	cbz	r0, db0a4 <_ZN11SleepHelper18dataCaptureHandlerEv+0x2c>
    if (dataCaptureActive) {
   db090:	f894 37d1 	ldrb.w	r3, [r4, #2001]	; 0x7d1
   db094:	b143      	cbz	r3, db0a8 <_ZN11SleepHelper18dataCaptureHandlerEv+0x30>
        if (!dataCaptureFunctions.whileAnyTrue()) {
   db096:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   db09a:	f7fd fe58 	bl	d8d4e <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv>
   db09e:	b908      	cbnz	r0, db0a4 <_ZN11SleepHelper18dataCaptureHandlerEv+0x2c>
            dataCaptureActive = false;
   db0a0:	f884 07d1 	strb.w	r0, [r4, #2001]	; 0x7d1
}
   db0a4:	b03c      	add	sp, #240	; 0xf0
   db0a6:	bd70      	pop	{r4, r5, r6, pc}
            return (time_t) getValue<uint32_t>(offsetof(SleepHelperData, nextDataCapture));
   db0a8:	f504 66bd 	add.w	r6, r4, #1512	; 0x5e8
   db0ac:	211c      	movs	r1, #28
   db0ae:	4630      	mov	r0, r6
   db0b0:	f7fd fd00 	bl	d8ab4 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>
        if (!persistentData.getValue_nextDataCapture()) {
   db0b4:	b1d0      	cbz	r0, db0ec <_ZN11SleepHelper18dataCaptureHandlerEv+0x74>
   db0b6:	211c      	movs	r1, #28
   db0b8:	4630      	mov	r0, r6
   db0ba:	f7fd fcfb 	bl	d8ab4 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>
   db0be:	4605      	mov	r5, r0
            if (persistentData.getValue_nextDataCapture() <= Time.now()) {
   db0c0:	f003 ff3f 	bl	def42 <_ZN9TimeClass3nowEv>
   db0c4:	2300      	movs	r3, #0
   db0c6:	17c1      	asrs	r1, r0, #31
   db0c8:	42a8      	cmp	r0, r5
   db0ca:	eb71 0303 	sbcs.w	r3, r1, r3
   db0ce:	dbe9      	blt.n	db0a4 <_ZN11SleepHelper18dataCaptureHandlerEv+0x2c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   db0d0:	f8d4 36bc 	ldr.w	r3, [r4, #1724]	; 0x6bc
                it->callbackState = newState;
   db0d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            for(auto it = callbackState.begin(); it != callbackState.end(); ++it) {
   db0d8:	f8d4 16c0 	ldr.w	r1, [r4, #1728]	; 0x6c0
   db0dc:	428b      	cmp	r3, r1
   db0de:	d002      	beq.n	db0e6 <_ZN11SleepHelper18dataCaptureHandlerEv+0x6e>
                it->callbackState = newState;
   db0e0:	f843 2b08 	str.w	r2, [r3], #8
	return *this;
   db0e4:	e7f8      	b.n	db0d8 <_ZN11SleepHelper18dataCaptureHandlerEv+0x60>
                dataCaptureActive = true;
   db0e6:	2301      	movs	r3, #1
   db0e8:	f884 37d1 	strb.w	r3, [r4, #2001]	; 0x7d1
   db0ec:	2306      	movs	r3, #6
   db0ee:	a801      	add	r0, sp, #4
   db0f0:	9300      	str	r3, [sp, #0]
   db0f2:	f7fa fcff 	bl	d5af4 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   db0f6:	f003 ff24 	bl	def42 <_ZN9TimeClass3nowEv>
   db0fa:	17c1      	asrs	r1, r0, #31
   db0fc:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
            conv.withCurrentTime().convert();
   db100:	4668      	mov	r0, sp
   db102:	f7fa fefd 	bl	d5f00 <_ZN16LocalTimeConvert7convertEv>
            time_t t = scheduleManager.getNextDataCapture(conv);
   db106:	4669      	mov	r1, sp
   db108:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   db10c:	f7fb faba 	bl	d6684 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert>
   db110:	4602      	mov	r2, r0
   db112:	460b      	mov	r3, r1
            if (t != 0) {
   db114:	ea52 0103 	orrs.w	r1, r2, r3
   db118:	d003      	beq.n	db122 <_ZN11SleepHelper18dataCaptureHandlerEv+0xaa>
            setValue<uint32_t>(offsetof(SleepHelperData, nextDataCapture), (uint32_t)value);
   db11a:	211c      	movs	r1, #28
   db11c:	4630      	mov	r0, r6
   db11e:	f7fd fcdb 	bl	d8ad8 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>
class LocalTimeConvert {
   db122:	a801      	add	r0, sp, #4
   db124:	f7fa fa22 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
   db128:	e7bc      	b.n	db0a4 <_ZN11SleepHelper18dataCaptureHandlerEv+0x2c>

000db12a <_ZN11SleepHelper4loopEv>:
void SleepHelper::loop() {
   db12a:	b570      	push	{r4, r5, r6, lr}
   db12c:	f8d0 56a4 	ldr.w	r5, [r0, #1700]	; 0x6a4
   db130:	4604      	mov	r4, r0
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   db132:	f8d4 36a8 	ldr.w	r3, [r4, #1704]	; 0x6a8
   db136:	42ab      	cmp	r3, r5
   db138:	d004      	beq.n	db144 <_ZN11SleepHelper4loopEv+0x1a>
                (*it)(args...);
   db13a:	4628      	mov	r0, r5
   db13c:	f7fd fe41 	bl	d8dc2 <_ZNKSt8functionIFbvEEclEv>
      operator++() _GLIBCXX_NOEXCEPT
   db140:	3510      	adds	r5, #16
	return *this;
   db142:	e7f6      	b.n	db132 <_ZN11SleepHelper4loopEv+0x8>
    dataCaptureHandler();
   db144:	4620      	mov	r0, r4
   db146:	f7ff ff97 	bl	db078 <_ZN11SleepHelper18dataCaptureHandlerEv>
      if (_M_empty())
   db14a:	f8d4 37b0 	ldr.w	r3, [r4, #1968]	; 0x7b0
   db14e:	b90b      	cbnz	r3, db154 <_ZN11SleepHelper4loopEv+0x2a>
	__throw_bad_function_call();
   db150:	f004 f99c 	bl	df48c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db154:	f8d4 37b4 	ldr.w	r3, [r4, #1972]	; 0x7b4
   db158:	4621      	mov	r1, r4
   db15a:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
}
   db15e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db162:	4718      	bx	r3

000db164 <_ZNSt17_Function_handlerIFbmEZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E9_M_invokeERKSt9_Any_dataOm>:
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
	{ return __r; }
   db164:	6800      	ldr	r0, [r0, #0]
            return (ms >= timeMs.count());
   db166:	680a      	ldr	r2, [r1, #0]
   db168:	e9d0 0100 	ldrd	r0, r1, [r0]
   db16c:	2300      	movs	r3, #0
   db16e:	4282      	cmp	r2, r0
   db170:	418b      	sbcs	r3, r1
      }
   db172:	bfac      	ite	ge
   db174:	2001      	movge	r0, #1
   db176:	2000      	movlt	r0, #0
   db178:	4770      	bx	lr

000db17a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   db17a:	2a02      	cmp	r2, #2
   db17c:	d006      	beq.n	db18c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
   db17e:	2a03      	cmp	r2, #3
   db180:	d002      	beq.n	db188 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
   db182:	2a01      	cmp	r2, #1
   db184:	d100      	bne.n	db188 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db186:	6001      	str	r1, [r0, #0]
	}
   db188:	2000      	movs	r0, #0
   db18a:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   db18c:	680b      	ldr	r3, [r1, #0]
   db18e:	6003      	str	r3, [r0, #0]
	}
   db190:	e7fa      	b.n	db188 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>

000db192 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   db192:	2a02      	cmp	r2, #2
   db194:	d006      	beq.n	db1a4 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x12>
   db196:	2a03      	cmp	r2, #3
   db198:	d002      	beq.n	db1a0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
   db19a:	2a01      	cmp	r2, #1
   db19c:	d100      	bne.n	db1a0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db19e:	6001      	str	r1, [r0, #0]
	}
   db1a0:	2000      	movs	r0, #0
   db1a2:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   db1a4:	680b      	ldr	r3, [r1, #0]
   db1a6:	6003      	str	r3, [r0, #0]
	}
   db1a8:	e7fa      	b.n	db1a0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>

000db1aa <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUliE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   db1aa:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db1ac:	bf08      	it	eq
   db1ae:	6001      	streq	r1, [r0, #0]
	}
   db1b0:	2000      	movs	r0, #0
   db1b2:	4770      	bx	lr

000db1b4 <_ZNSt14_Function_base13_Base_managerIZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES3_EUlRN5spark10JSONWriterEE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   db1b4:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db1b6:	bf08      	it	eq
   db1b8:	6001      	streq	r1, [r0, #0]
	}
   db1ba:	2000      	movs	r0, #0
   db1bc:	4770      	bx	lr

000db1be <_ZNSt14_Function_base13_Base_managerIZ17sleepHelperConfigvEUlRN11SleepHelper16AppCallbackStateEE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   db1be:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db1c0:	bf08      	it	eq
   db1c2:	6001      	streq	r1, [r0, #0]
	}
   db1c4:	2000      	movs	r0, #0
   db1c6:	4770      	bx	lr

000db1c8 <_ZNSt14_Function_base13_Base_managerIZ17sleepHelperConfigvEUlRK17SystemSleepResultE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   db1c8:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db1ca:	bf08      	it	eq
   db1cc:	6001      	streq	r1, [r0, #0]
	}
   db1ce:	2000      	movs	r0, #0
   db1d0:	4770      	bx	lr

000db1d2 <_ZNSt17_Function_handlerIFbRK17SystemSleepResultEZ17sleepHelperConfigvEUlS2_E0_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db1d2:	b508      	push	{r3, lr}
                Log.info(dataStr);          // Visibility to the payload in the webhook
            }
            return false;
        })
        .withWakeFunction([](const SystemSleepResult &sleepResult) {
            delay(2000);                       // Delay so we can capture in serial monitor
   db1d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   db1d8:	f001 f972 	bl	dc4c0 <delay>
      }
   db1dc:	2001      	movs	r0, #1
   db1de:	bd08      	pop	{r3, pc}

000db1e0 <_ZNSt17_Function_handlerIFbbEZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db1e0:	b508      	push	{r3, lr}
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   db1e2:	2100      	movs	r1, #0
   db1e4:	6800      	ldr	r0, [r0, #0]
   db1e6:	f7f9 fb7b 	bl	d48e0 <_ZN6AB18056setWDTEi>
      }
   db1ea:	2001      	movs	r0, #1
   db1ec:	bd08      	pop	{r3, pc}

000db1ee <_ZNSt17_Function_handlerIFbRK17SystemSleepResultEZN11SleepHelper14withAB1805_WDTER6AB1805EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db1ee:	b508      	push	{r3, lr}
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   db1f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   db1f4:	6800      	ldr	r0, [r0, #0]
   db1f6:	f7f9 fb73 	bl	d48e0 <_ZN6AB18056setWDTEi>
      }
   db1fa:	2001      	movs	r0, #1
   db1fc:	bd08      	pop	{r3, pc}

000db1fe <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db1fe:	b538      	push	{r3, r4, r5, lr}
            if (state.callbackState == AppCallbackState::CALLBACK_STATE_START) { 
   db200:	680b      	ldr	r3, [r1, #0]
   db202:	3301      	adds	r3, #1
   db204:	460d      	mov	r5, r1
   db206:	d109      	bne.n	db21c <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x1e>
                PublishQueuePosix::instance().setPausePublishing(false);
   db208:	f7fb fe18 	bl	d6e3c <_ZN17PublishQueuePosix8instanceEv>
    void setPausePublishing(bool value) { pausePublishing = value; }
   db20c:	2400      	movs	r4, #0
                state.callbackState = 1;
   db20e:	2301      	movs	r3, #1
   db210:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
   db214:	602b      	str	r3, [r5, #0]
      }
   db216:	f084 0001 	eor.w	r0, r4, #1
   db21a:	bd38      	pop	{r3, r4, r5, pc}
   db21c:	6803      	ldr	r3, [r0, #0]
   db21e:	e9d3 0100 	ldrd	r0, r1, [r3]
                if (maxTimeToPublish.count() != 0 && ms >= maxTimeToPublish.count()) {
   db222:	ea50 0301 	orrs.w	r3, r0, r1
   db226:	d009      	beq.n	db23c <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x3e>
   db228:	6812      	ldr	r2, [r2, #0]
   db22a:	2300      	movs	r3, #0
   db22c:	4282      	cmp	r2, r0
   db22e:	418b      	sbcs	r3, r1
   db230:	db04      	blt.n	db23c <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x3e>
                    PublishQueuePosix::instance().setPausePublishing(true);
   db232:	f7fb fe03 	bl	d6e3c <_ZN17PublishQueuePosix8instanceEv>
   db236:	2301      	movs	r3, #1
   db238:	f880 30b2 	strb.w	r3, [r0, #178]	; 0xb2
                canSleep = PublishQueuePosix::instance().getCanSleep();
   db23c:	f7fb fdfe 	bl	d6e3c <_ZN17PublishQueuePosix8instanceEv>
   db240:	f890 40b3 	ldrb.w	r4, [r0, #179]	; 0xb3
                if (canSleep) {
   db244:	2c00      	cmp	r4, #0
   db246:	d0e6      	beq.n	db216 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x18>
                    PublishQueuePosix::instance().setPausePublishing(true);
   db248:	f7fb fdf8 	bl	d6e3c <_ZN17PublishQueuePosix8instanceEv>
   db24c:	2301      	movs	r3, #1
   db24e:	f880 30b2 	strb.w	r3, [r0, #178]	; 0xb2
                    PublishQueuePosix::instance().writeQueueToFiles();
   db252:	f7fb fdf3 	bl	d6e3c <_ZN17PublishQueuePosix8instanceEv>
   db256:	f7fb fe4f 	bl	d6ef8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   db25a:	e7dc      	b.n	db216 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x18>

000db25c <_ZNSt17_Function_handlerIFbiEZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUliE_E9_M_invokeERKSt9_Any_dataOi>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db25c:	b508      	push	{r3, lr}
            PublishQueuePosix::instance().setPausePublishing(true);
   db25e:	f7fb fded 	bl	d6e3c <_ZN17PublishQueuePosix8instanceEv>
   db262:	2301      	movs	r3, #1
   db264:	f880 30b2 	strb.w	r3, [r0, #178]	; 0xb2
      }
   db268:	4618      	mov	r0, r3
   db26a:	bd08      	pop	{r3, pc}

000db26c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   db26c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   db26e:	b538      	push	{r3, r4, r5, lr}
   db270:	4604      	mov	r4, r0
	  switch (__op)
   db272:	d007      	beq.n	db284 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x18>
   db274:	2a03      	cmp	r2, #3
   db276:	d010      	beq.n	db29a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2e>
   db278:	2a01      	cmp	r2, #1
   db27a:	d101      	bne.n	db280 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   db27c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db27e:	6003      	str	r3, [r0, #0]
	}
   db280:	2000      	movs	r0, #0
   db282:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   db284:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   db286:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   db288:	f7f8 ff05 	bl	d4096 <_Znwj>
   db28c:	b118      	cbz	r0, db296 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2a>
   db28e:	e9d5 2300 	ldrd	r2, r3, [r5]
   db292:	e9c0 2300 	strd	r2, r3, [r0]
	  __dest._M_access<_Functor*>() =
   db296:	6020      	str	r0, [r4, #0]
	}
   db298:	e7f2      	b.n	db280 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   db29a:	6800      	ldr	r0, [r0, #0]
   db29c:	2800      	cmp	r0, #0
   db29e:	d0ef      	beq.n	db280 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
   db2a0:	2108      	movs	r1, #8
   db2a2:	f004 f8e7 	bl	df474 <_ZdlPvj>
   db2a6:	e7eb      	b.n	db280 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

000db2a8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	  switch (__op)
   db2a8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   db2aa:	b538      	push	{r3, r4, r5, lr}
   db2ac:	4604      	mov	r4, r0
	  switch (__op)
   db2ae:	d007      	beq.n	db2c0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x18>
   db2b0:	2a03      	cmp	r2, #3
   db2b2:	d010      	beq.n	db2d6 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2e>
   db2b4:	2a01      	cmp	r2, #1
   db2b6:	d101      	bne.n	db2bc <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   db2b8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db2ba:	6003      	str	r3, [r0, #0]
	}
   db2bc:	2000      	movs	r0, #0
   db2be:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   db2c0:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   db2c2:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   db2c4:	f7f8 fee7 	bl	d4096 <_Znwj>
   db2c8:	b118      	cbz	r0, db2d2 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
   db2ca:	e9d5 2300 	ldrd	r2, r3, [r5]
   db2ce:	e9c0 2300 	strd	r2, r3, [r0]
	  __dest._M_access<_Functor*>() =
   db2d2:	6020      	str	r0, [r4, #0]
	}
   db2d4:	e7f2      	b.n	db2bc <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   db2d6:	6800      	ldr	r0, [r0, #0]
   db2d8:	2800      	cmp	r0, #0
   db2da:	d0ef      	beq.n	db2bc <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   db2dc:	2108      	movs	r1, #8
   db2de:	f004 f8c9 	bl	df474 <_ZdlPvj>
   db2e2:	e7eb      	b.n	db2bc <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>

000db2e4 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db2e4:	b538      	push	{r3, r4, r5, lr}
   db2e6:	460c      	mov	r4, r1
    return this->name(name, strlen(name));
   db2e8:	2201      	movs	r2, #1
   db2ea:	490e      	ldr	r1, [pc, #56]	; (db324 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x40>)
   db2ec:	4620      	mov	r0, r4
   db2ee:	f002 f979 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
   db2f2:	4605      	mov	r5, r0
                    writer.name("t").value((int) Time.now());
   db2f4:	f003 fe25 	bl	def42 <_ZN9TimeClass3nowEv>
   db2f8:	4601      	mov	r1, r0
   db2fa:	4628      	mov	r0, r5
   db2fc:	f002 f8b4 	bl	dd468 <_ZN5spark10JSONWriter5valueEi>
   db300:	4909      	ldr	r1, [pc, #36]	; (db328 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x44>)
   db302:	2201      	movs	r2, #1
   db304:	4620      	mov	r0, r4
   db306:	f002 f96d 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
   db30a:	4604      	mov	r4, r0
                    writer.name("c").value(readTempC(), 1);
   db30c:	f7f9 f976 	bl	d45fc <_Z9readTempCv>
   db310:	f004 fa88 	bl	df824 <__aeabi_ui2d>
   db314:	ec41 0b10 	vmov	d0, r0, r1
   db318:	4620      	mov	r0, r4
   db31a:	2101      	movs	r1, #1
      }
   db31c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db320:	f002 b8c6 	b.w	dd4b0 <_ZN5spark10JSONWriter5valueEdi>
   db324:	000e2904 	.word	0x000e2904
   db328:	000e2a88 	.word	0x000e2a88

000db32c <_ZN23LocalTimeRestrictedDateD1Ev>:
class LocalTimeRestrictedDate {
   db32c:	b510      	push	{r4, lr}
   db32e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   db330:	6900      	ldr	r0, [r0, #16]
	if (__p)
   db332:	b108      	cbz	r0, db338 <_ZN23LocalTimeRestrictedDateD1Ev+0xc>
   db334:	f7f8 feb3 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   db338:	6860      	ldr	r0, [r4, #4]
	if (__p)
   db33a:	b108      	cbz	r0, db340 <_ZN23LocalTimeRestrictedDateD1Ev+0x14>
   db33c:	f7f8 feaf 	bl	d409e <_ZdlPv>
   db340:	4620      	mov	r0, r4
   db342:	bd10      	pop	{r4, pc}

000db344 <_ZN14LocalTimeRangeC1Ev>:
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   db344:	b510      	push	{r4, lr}
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   db346:	237f      	movs	r3, #127	; 0x7f
   db348:	7003      	strb	r3, [r0, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
   db34a:	2300      	movs	r3, #0
   db34c:	e9c0 3301 	strd	r3, r3, [r0, #4]
   db350:	e9c0 3303 	strd	r3, r3, [r0, #12]
   db354:	e9c0 3305 	strd	r3, r3, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   db358:	4604      	mov	r4, r0
   db35a:	4905      	ldr	r1, [pc, #20]	; (db370 <_ZN14LocalTimeRangeC1Ev+0x2c>)
   db35c:	301c      	adds	r0, #28
   db35e:	f7fa fa9f 	bl	d58a0 <_ZN12LocalTimeHMSC1EPKc>
   db362:	4904      	ldr	r1, [pc, #16]	; (db374 <_ZN14LocalTimeRangeC1Ev+0x30>)
   db364:	f104 0024 	add.w	r0, r4, #36	; 0x24
   db368:	f7fa fa9a 	bl	d58a0 <_ZN12LocalTimeHMSC1EPKc>
    }
   db36c:	4620      	mov	r0, r4
   db36e:	bd10      	pop	{r4, pc}
   db370:	000e24c5 	.word	0x000e24c5
   db374:	000e24ce 	.word	0x000e24ce

000db378 <_ZN14LocalTimeRangeD1Ev>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   db378:	b510      	push	{r4, lr}
   db37a:	4604      	mov	r4, r0
   db37c:	3024      	adds	r0, #36	; 0x24
   db37e:	f7fa f8dd 	bl	d553c <_ZN12LocalTimeHMSD1Ev>
   db382:	f104 001c 	add.w	r0, r4, #28
   db386:	f7fa f8d9 	bl	d553c <_ZN12LocalTimeHMSD1Ev>
   db38a:	4620      	mov	r0, r4
   db38c:	f7ff ffce 	bl	db32c <_ZN23LocalTimeRestrictedDateD1Ev>
   db390:	4620      	mov	r0, r4
   db392:	bd10      	pop	{r4, pc}

000db394 <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   db394:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db396:	2300      	movs	r3, #0
   db398:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db39a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db39c:	4604      	mov	r4, r0
   db39e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db3a0:	b12b      	cbz	r3, db3ae <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db3a2:	2202      	movs	r2, #2
   db3a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db3a6:	68eb      	ldr	r3, [r5, #12]
   db3a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db3aa:	68ab      	ldr	r3, [r5, #8]
   db3ac:	60a3      	str	r3, [r4, #8]
    }
   db3ae:	4620      	mov	r0, r4
   db3b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000db3b4 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   db3b4:	b510      	push	{r4, lr}
   db3b6:	b08e      	sub	sp, #56	; 0x38
            if (Time.isValid()) {
   db3b8:	f003 fda6 	bl	def08 <_ZN9TimeClass7isValidEv>
   db3bc:	2800      	cmp	r0, #0
   db3be:	d03a      	beq.n	db436 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x82>
                SleepHelper::instance().addEvent([](JSONWriter &writer) {
   db3c0:	f7fd fae0 	bl	d8984 <_ZN11SleepHelper8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   db3c4:	4b1d      	ldr	r3, [pc, #116]	; (db43c <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x88>)
   db3c6:	9305      	str	r3, [sp, #20]
   db3c8:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   db3ca:	4b1d      	ldr	r3, [pc, #116]	; (db440 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x8c>)
   db3cc:	9304      	str	r3, [sp, #16]
        wakeEventFunctions.addEvent(callback);
   db3ce:	a902      	add	r1, sp, #8
   db3d0:	a806      	add	r0, sp, #24
   db3d2:	f7ff ffdf 	bl	db394 <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_>
            eventHistory.addEvent(callback);
   db3d6:	a906      	add	r1, sp, #24
   db3d8:	a80a      	add	r0, sp, #40	; 0x28
   db3da:	f7ff ffdb 	bl	db394 <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_>
   db3de:	a90a      	add	r1, sp, #40	; 0x28
   db3e0:	f504 60ea 	add.w	r0, r4, #1872	; 0x750
   db3e4:	f7fd fb38 	bl	d8a58 <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE>
    class function<_Res(_ArgTypes...)>
   db3e8:	a80a      	add	r0, sp, #40	; 0x28
   db3ea:	f7f9 fe77 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   db3ee:	a806      	add	r0, sp, #24
   db3f0:	f7f9 fe74 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   db3f4:	a802      	add	r0, sp, #8
   db3f6:	f7f9 fe71 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
                snprintf(dataStr,sizeof(dataStr),"t: %4.2f",current.tempC);
   db3fa:	4b12      	ldr	r3, [pc, #72]	; (db444 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x90>)
   db3fc:	6818      	ldr	r0, [r3, #0]
   db3fe:	f004 fa33 	bl	df868 <__aeabi_f2d>
   db402:	4a11      	ldr	r2, [pc, #68]	; (db448 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x94>)
   db404:	e9cd 0100 	strd	r0, r1, [sp]
   db408:	2110      	movs	r1, #16
   db40a:	a80a      	add	r0, sp, #40	; 0x28
   db40c:	f001 f808 	bl	dc420 <snprintf>
                PublishQueuePosix::instance().publish("Test", dataStr, PRIVATE);
   db410:	f7fb fd14 	bl	d6e3c <_ZN17PublishQueuePosix8instanceEv>
inline particle::Flags<TagT, ValueT>::Flags() :
   db414:	4b0d      	ldr	r3, [pc, #52]	; (db44c <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x98>)
		return publishCommon(eventName, data, 60, flags1, flags2);
   db416:	2100      	movs	r1, #0
   db418:	781a      	ldrb	r2, [r3, #0]
   db41a:	6803      	ldr	r3, [r0, #0]
   db41c:	f88d 1004 	strb.w	r1, [sp, #4]
   db420:	f88d 2000 	strb.w	r2, [sp]
   db424:	681c      	ldr	r4, [r3, #0]
   db426:	490a      	ldr	r1, [pc, #40]	; (db450 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x9c>)
   db428:	233c      	movs	r3, #60	; 0x3c
   db42a:	aa0a      	add	r2, sp, #40	; 0x28
   db42c:	47a0      	blx	r4
                Log.info(dataStr);          // Visibility to the payload in the webhook
   db42e:	4809      	ldr	r0, [pc, #36]	; (db454 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xa0>)
   db430:	a90a      	add	r1, sp, #40	; 0x28
   db432:	f7f8 ffe9 	bl	d4408 <_ZNK5spark6Logger4infoEPKcz>
      }
   db436:	2000      	movs	r0, #0
   db438:	b00e      	add	sp, #56	; 0x38
   db43a:	bd10      	pop	{r4, pc}
   db43c:	000db2e5 	.word	0x000db2e5
   db440:	000db1b5 	.word	0x000db1b5
   db444:	2003e420 	.word	0x2003e420
   db448:	000e2bd8 	.word	0x000e2bd8
   db44c:	2003e530 	.word	0x2003e530
   db450:	000e2be1 	.word	0x000e2be1
   db454:	2003e57c 	.word	0x2003e57c

000db458 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   db458:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db45a:	2300      	movs	r3, #0
   db45c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db45e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db460:	4604      	mov	r4, r0
   db462:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db464:	b12b      	cbz	r3, db472 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db466:	2202      	movs	r2, #2
   db468:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db46a:	68eb      	ldr	r3, [r5, #12]
   db46c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db46e:	68ab      	ldr	r3, [r5, #8]
   db470:	60a3      	str	r3, [r4, #8]
    }
   db472:	4620      	mov	r0, r4
   db474:	bd38      	pop	{r3, r4, r5, pc}

000db476 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   db476:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db478:	2300      	movs	r3, #0
   db47a:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db47c:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db47e:	4604      	mov	r4, r0
   db480:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db482:	b12b      	cbz	r3, db490 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db484:	2202      	movs	r2, #2
   db486:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db488:	68eb      	ldr	r3, [r5, #12]
   db48a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db48c:	68ab      	ldr	r3, [r5, #8]
   db48e:	60a3      	str	r3, [r4, #8]
    }
   db490:	4620      	mov	r0, r4
   db492:	bd38      	pop	{r3, r4, r5, pc}

000db494 <_ZNSt8functionIFbiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   db494:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db496:	2300      	movs	r3, #0
   db498:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db49a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db49c:	4604      	mov	r4, r0
   db49e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db4a0:	b12b      	cbz	r3, db4ae <_ZNSt8functionIFbiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db4a2:	2202      	movs	r2, #2
   db4a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db4a6:	68eb      	ldr	r3, [r5, #12]
   db4a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db4aa:	68ab      	ldr	r3, [r5, #8]
   db4ac:	60a3      	str	r3, [r4, #8]
    }
   db4ae:	4620      	mov	r0, r4
   db4b0:	bd38      	pop	{r3, r4, r5, pc}

000db4b2 <_ZNSt8functionIFbmEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   db4b2:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   db4b4:	2300      	movs	r3, #0
   db4b6:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   db4b8:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   db4ba:	4604      	mov	r4, r0
   db4bc:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   db4be:	b12b      	cbz	r3, db4cc <_ZNSt8functionIFbmEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db4c0:	2202      	movs	r2, #2
   db4c2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db4c4:	68eb      	ldr	r3, [r5, #12]
   db4c6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db4c8:	68ab      	ldr	r3, [r5, #8]
   db4ca:	60a3      	str	r3, [r4, #8]
    }
   db4cc:	4620      	mov	r0, r4
   db4ce:	bd38      	pop	{r3, r4, r5, pc}

000db4d0 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   db4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db4d4:	4607      	mov	r7, r0
   db4d6:	4688      	mov	r8, r1
   db4d8:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   db4da:	4615      	mov	r5, r2
   db4dc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   db4de:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   db4e2:	4544      	cmp	r4, r8
   db4e4:	d014      	beq.n	db510 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db4e6:	b16d      	cbz	r5, db504 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   db4e8:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   db4ec:	4629      	mov	r1, r5
   db4ee:	4620      	mov	r0, r4
   db4f0:	f7f9 fef3 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db4f4:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   db4f6:	68aa      	ldr	r2, [r5, #8]
   db4f8:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db4fa:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db4fc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   db4fe:	68ea      	ldr	r2, [r5, #12]
   db500:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db502:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   db504:	4620      	mov	r0, r4
   db506:	f7f9 fde9 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   db50a:	3410      	adds	r4, #16
   db50c:	3510      	adds	r5, #16
   db50e:	e7e8      	b.n	db4e2 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   db510:	1be0      	subs	r0, r4, r7
    }
   db512:	4430      	add	r0, r6
   db514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db518 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   db518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db51c:	4607      	mov	r7, r0
   db51e:	4688      	mov	r8, r1
   db520:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   db522:	4615      	mov	r5, r2
   db524:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   db526:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   db52a:	4544      	cmp	r4, r8
   db52c:	d014      	beq.n	db558 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x40>
   db52e:	b16d      	cbz	r5, db54c <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x34>
   db530:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   db534:	4629      	mov	r1, r5
   db536:	4620      	mov	r0, r4
   db538:	f7f9 fecf 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db53c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   db53e:	68aa      	ldr	r2, [r5, #8]
   db540:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db542:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db544:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   db546:	68ea      	ldr	r2, [r5, #12]
   db548:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db54a:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   db54c:	4620      	mov	r0, r4
   db54e:	f7f9 fdc5 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   db552:	3410      	adds	r4, #16
   db554:	3510      	adds	r5, #16
   db556:	e7e8      	b.n	db52a <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x12>
      return __cur;
   db558:	1be0      	subs	r0, r4, r7
    }
   db55a:	4430      	add	r0, r6
   db55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db560 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   db560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db564:	4607      	mov	r7, r0
   db566:	4688      	mov	r8, r1
   db568:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   db56a:	4615      	mov	r5, r2
   db56c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   db56e:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   db572:	4544      	cmp	r4, r8
   db574:	d014      	beq.n	db5a0 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
   db576:	b16d      	cbz	r5, db594 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   db578:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   db57c:	4629      	mov	r1, r5
   db57e:	4620      	mov	r0, r4
   db580:	f7f9 feab 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db584:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   db586:	68aa      	ldr	r2, [r5, #8]
   db588:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db58a:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db58c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   db58e:	68ea      	ldr	r2, [r5, #12]
   db590:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db592:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   db594:	4620      	mov	r0, r4
   db596:	f7f9 fda1 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   db59a:	3410      	adds	r4, #16
   db59c:	3510      	adds	r5, #16
   db59e:	e7e8      	b.n	db572 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   db5a0:	1be0      	subs	r0, r4, r7
    }
   db5a2:	4430      	add	r0, r6
   db5a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db5a8 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   db5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db5ac:	4607      	mov	r7, r0
   db5ae:	4688      	mov	r8, r1
   db5b0:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   db5b2:	4615      	mov	r5, r2
   db5b4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   db5b6:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   db5ba:	4544      	cmp	r4, r8
   db5bc:	d014      	beq.n	db5e8 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x40>
   db5be:	b16d      	cbz	r5, db5dc <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x34>
   db5c0:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   db5c4:	4629      	mov	r1, r5
   db5c6:	4620      	mov	r0, r4
   db5c8:	f7f9 fe87 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db5cc:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   db5ce:	68aa      	ldr	r2, [r5, #8]
   db5d0:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db5d2:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db5d4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   db5d6:	68ea      	ldr	r2, [r5, #12]
   db5d8:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db5da:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   db5dc:	4620      	mov	r0, r4
   db5de:	f7f9 fd7d 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   db5e2:	3410      	adds	r4, #16
   db5e4:	3510      	adds	r5, #16
   db5e6:	e7e8      	b.n	db5ba <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x12>
      return __cur;
   db5e8:	1be0      	subs	r0, r4, r7
    }
   db5ea:	4430      	add	r0, r6
   db5ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db5f0 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
   db5f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db5f4:	e9d0 7900 	ldrd	r7, r9, [r0]
   db5f8:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   db5fa:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   db5fe:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db600:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   db604:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   db608:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db60a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   db60e:	d102      	bne.n	db616 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   db610:	481a      	ldr	r0, [pc, #104]	; (db67c <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
   db612:	f003 ff38 	bl	df486 <_ZSt20__throw_length_errorPKc>
   db616:	2c01      	cmp	r4, #1
   db618:	4622      	mov	r2, r4
   db61a:	bf38      	it	cc
   db61c:	2201      	movcc	r2, #1
   db61e:	18a4      	adds	r4, r4, r2
   db620:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db624:	d228      	bcs.n	db678 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db626:	b14c      	cbz	r4, db63c <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4c>
   db628:	429c      	cmp	r4, r3
   db62a:	bf28      	it	cs
   db62c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   db62e:	0120      	lsls	r0, r4, #4
   db630:	9101      	str	r1, [sp, #4]
   db632:	f7f8 fd30 	bl	d4096 <_Znwj>
   db636:	9901      	ldr	r1, [sp, #4]
   db638:	4605      	mov	r5, r0
   db63a:	e000      	b.n	db63e <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4e>
   db63c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db63e:	eb15 000a 	adds.w	r0, r5, sl
   db642:	d001      	beq.n	db648 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x58>
   db644:	f7ff ff08 	bl	db458 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
      return __relocate_a_1(std::__niter_base(__first),
   db648:	4641      	mov	r1, r8
   db64a:	462a      	mov	r2, r5
   db64c:	4638      	mov	r0, r7
   db64e:	f7ff ff63 	bl	db518 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   db652:	4649      	mov	r1, r9
   db654:	f100 0210 	add.w	r2, r0, #16
   db658:	4640      	mov	r0, r8
   db65a:	f7ff ff5d 	bl	db518 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   db65e:	4680      	mov	r8, r0
	if (__p)
   db660:	b117      	cbz	r7, db668 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x78>
	::operator delete(__p);
   db662:	4638      	mov	r0, r7
   db664:	f7f8 fd1b 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db668:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   db66c:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db670:	60b4      	str	r4, [r6, #8]
    }
   db672:	b002      	add	sp, #8
   db674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db678:	461c      	mov	r4, r3
   db67a:	e7d8      	b.n	db62e <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3e>
   db67c:	000e24e3 	.word	0x000e24e3

000db680 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE9push_backERKS5_>:
      push_back(const value_type& __x)
   db680:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db682:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   db686:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   db688:	4604      	mov	r4, r0
   db68a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db68c:	d007      	beq.n	db69e <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE9push_backERKS5_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db68e:	b113      	cbz	r3, db696 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE9push_backERKS5_+0x16>
   db690:	4618      	mov	r0, r3
   db692:	f7ff fee1 	bl	db458 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   db696:	6863      	ldr	r3, [r4, #4]
   db698:	3310      	adds	r3, #16
   db69a:	6063      	str	r3, [r4, #4]
      }
   db69c:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   db69e:	4619      	mov	r1, r3
   db6a0:	f7ff ffa6 	bl	db5f0 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
   db6a4:	e7fa      	b.n	db69c <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE9push_backERKS5_+0x1c>
	...

000db6a8 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
   db6a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db6ac:	e9d0 7900 	ldrd	r7, r9, [r0]
   db6b0:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   db6b2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   db6b6:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db6b8:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   db6bc:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   db6c0:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db6c2:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   db6c6:	d102      	bne.n	db6ce <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   db6c8:	481a      	ldr	r0, [pc, #104]	; (db734 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
   db6ca:	f003 fedc 	bl	df486 <_ZSt20__throw_length_errorPKc>
   db6ce:	2c01      	cmp	r4, #1
   db6d0:	4622      	mov	r2, r4
   db6d2:	bf38      	it	cc
   db6d4:	2201      	movcc	r2, #1
   db6d6:	18a4      	adds	r4, r4, r2
   db6d8:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db6dc:	d228      	bcs.n	db730 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db6de:	b14c      	cbz	r4, db6f4 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4c>
   db6e0:	429c      	cmp	r4, r3
   db6e2:	bf28      	it	cs
   db6e4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   db6e6:	0120      	lsls	r0, r4, #4
   db6e8:	9101      	str	r1, [sp, #4]
   db6ea:	f7f8 fcd4 	bl	d4096 <_Znwj>
   db6ee:	9901      	ldr	r1, [sp, #4]
   db6f0:	4605      	mov	r5, r0
   db6f2:	e000      	b.n	db6f6 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4e>
   db6f4:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db6f6:	eb15 000a 	adds.w	r0, r5, sl
   db6fa:	d001      	beq.n	db700 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x58>
   db6fc:	f7ff febb 	bl	db476 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>
   db700:	4641      	mov	r1, r8
   db702:	462a      	mov	r2, r5
   db704:	4638      	mov	r0, r7
   db706:	f7ff ff4f 	bl	db5a8 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   db70a:	4649      	mov	r1, r9
   db70c:	f100 0210 	add.w	r2, r0, #16
   db710:	4640      	mov	r0, r8
   db712:	f7ff ff49 	bl	db5a8 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   db716:	4680      	mov	r8, r0
	if (__p)
   db718:	b117      	cbz	r7, db720 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x78>
	::operator delete(__p);
   db71a:	4638      	mov	r0, r7
   db71c:	f7f8 fcbf 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db720:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   db724:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db728:	60b4      	str	r4, [r6, #8]
    }
   db72a:	b002      	add	sp, #8
   db72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db730:	461c      	mov	r4, r3
   db732:	e7d8      	b.n	db6e6 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3e>
   db734:	000e24e3 	.word	0x000e24e3

000db738 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   db738:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db73c:	e9d0 7900 	ldrd	r7, r9, [r0]
   db740:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   db742:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   db746:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db748:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   db74c:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   db750:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db752:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   db756:	d102      	bne.n	db75e <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   db758:	481a      	ldr	r0, [pc, #104]	; (db7c4 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   db75a:	f003 fe94 	bl	df486 <_ZSt20__throw_length_errorPKc>
   db75e:	2c01      	cmp	r4, #1
   db760:	4622      	mov	r2, r4
   db762:	bf38      	it	cc
   db764:	2201      	movcc	r2, #1
   db766:	18a4      	adds	r4, r4, r2
   db768:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db76c:	d228      	bcs.n	db7c0 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db76e:	b14c      	cbz	r4, db784 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   db770:	429c      	cmp	r4, r3
   db772:	bf28      	it	cs
   db774:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   db776:	0120      	lsls	r0, r4, #4
   db778:	9101      	str	r1, [sp, #4]
   db77a:	f7f8 fc8c 	bl	d4096 <_Znwj>
   db77e:	9901      	ldr	r1, [sp, #4]
   db780:	4605      	mov	r5, r0
   db782:	e000      	b.n	db786 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   db784:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db786:	eb15 000a 	adds.w	r0, r5, sl
   db78a:	d001      	beq.n	db790 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   db78c:	f7ff fe82 	bl	db494 <_ZNSt8functionIFbiEEC1ERKS1_>
   db790:	4641      	mov	r1, r8
   db792:	462a      	mov	r2, r5
   db794:	4638      	mov	r0, r7
   db796:	f7ff fee3 	bl	db560 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   db79a:	4649      	mov	r1, r9
   db79c:	f100 0210 	add.w	r2, r0, #16
   db7a0:	4640      	mov	r0, r8
   db7a2:	f7ff fedd 	bl	db560 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   db7a6:	4680      	mov	r8, r0
	if (__p)
   db7a8:	b117      	cbz	r7, db7b0 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   db7aa:	4638      	mov	r0, r7
   db7ac:	f7f8 fc77 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db7b0:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   db7b4:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db7b8:	60b4      	str	r4, [r6, #8]
    }
   db7ba:	b002      	add	sp, #8
   db7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db7c0:	461c      	mov	r4, r3
   db7c2:	e7d8      	b.n	db776 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   db7c4:	000e24e3 	.word	0x000e24e3

000db7c8 <_ZN11SleepHelper14withAB1805_WDTER6AB1805>:
    SleepHelper &withAB1805_WDT(AB1805 &ab1805) {
   db7c8:	b530      	push	{r4, r5, lr}
   db7ca:	b089      	sub	sp, #36	; 0x24
	    _M_invoker = &_My_handler::_M_invoke;
   db7cc:	4b1e      	ldr	r3, [pc, #120]	; (db848 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x80>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db7ce:	9100      	str	r1, [sp, #0]
   db7d0:	4604      	mov	r4, r0
   db7d2:	460d      	mov	r5, r1
	    _M_invoker = &_My_handler::_M_invoke;
   db7d4:	9303      	str	r3, [sp, #12]
        wakeFunctions.add(fn); 
   db7d6:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   db7d8:	4b1c      	ldr	r3, [pc, #112]	; (db84c <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x84>)
   db7da:	9302      	str	r3, [sp, #8]
   db7dc:	a804      	add	r0, sp, #16
   db7de:	f7ff fe3b 	bl	db458 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
            callbackFunctions.push_back(callback);
   db7e2:	a904      	add	r1, sp, #16
   db7e4:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
   db7e8:	f7ff ff4a 	bl	db680 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE9push_backERKS5_>
    class function<_Res(_ArgTypes...)>
   db7ec:	a804      	add	r0, sp, #16
   db7ee:	f7f9 fc75 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   db7f2:	4668      	mov	r0, sp
   db7f4:	f7f9 fc72 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   db7f8:	4b15      	ldr	r3, [pc, #84]	; (db850 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x88>)
   db7fa:	9303      	str	r3, [sp, #12]
        sleepOrResetFunctions.add(fn); 
   db7fc:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   db7fe:	4b15      	ldr	r3, [pc, #84]	; (db854 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x8c>)
   db800:	9302      	str	r3, [sp, #8]
   db802:	a804      	add	r0, sp, #16
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db804:	9500      	str	r5, [sp, #0]
   db806:	f7fd fa48 	bl	d8c9a <_ZNSt8functionIFbbEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db80a:	f8d4 06fc 	ldr.w	r0, [r4, #1788]	; 0x6fc
   db80e:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
   db812:	4298      	cmp	r0, r3
   db814:	d011      	beq.n	db83a <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x72>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db816:	b110      	cbz	r0, db81e <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x56>
   db818:	a904      	add	r1, sp, #16
   db81a:	f7fd fa3e 	bl	d8c9a <_ZNSt8functionIFbbEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   db81e:	f8d4 36fc 	ldr.w	r3, [r4, #1788]	; 0x6fc
   db822:	3310      	adds	r3, #16
   db824:	f8c4 36fc 	str.w	r3, [r4, #1788]	; 0x6fc
    class function<_Res(_ArgTypes...)>
   db828:	a804      	add	r0, sp, #16
   db82a:	f7f9 fc57 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   db82e:	4668      	mov	r0, sp
   db830:	f7f9 fc54 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
    }
   db834:	4620      	mov	r0, r4
   db836:	b009      	add	sp, #36	; 0x24
   db838:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   db83a:	4601      	mov	r1, r0
   db83c:	aa04      	add	r2, sp, #16
   db83e:	f504 60df 	add.w	r0, r4, #1784	; 0x6f8
   db842:	f7fe f819 	bl	d9878 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   db846:	e7ef      	b.n	db828 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x60>
   db848:	000db1ef 	.word	0x000db1ef
   db84c:	000db17b 	.word	0x000db17b
   db850:	000db1e1 	.word	0x000db1e1
   db854:	000db193 	.word	0x000db193

000db858 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   db858:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db85c:	e9d0 7900 	ldrd	r7, r9, [r0]
   db860:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   db862:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   db866:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db868:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   db86c:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   db870:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db872:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   db876:	d102      	bne.n	db87e <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   db878:	481a      	ldr	r0, [pc, #104]	; (db8e4 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   db87a:	f003 fe04 	bl	df486 <_ZSt20__throw_length_errorPKc>
   db87e:	2c01      	cmp	r4, #1
   db880:	4622      	mov	r2, r4
   db882:	bf38      	it	cc
   db884:	2201      	movcc	r2, #1
   db886:	18a4      	adds	r4, r4, r2
   db888:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db88c:	d228      	bcs.n	db8e0 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db88e:	b14c      	cbz	r4, db8a4 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   db890:	429c      	cmp	r4, r3
   db892:	bf28      	it	cs
   db894:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   db896:	0120      	lsls	r0, r4, #4
   db898:	9101      	str	r1, [sp, #4]
   db89a:	f7f8 fbfc 	bl	d4096 <_Znwj>
   db89e:	9901      	ldr	r1, [sp, #4]
   db8a0:	4605      	mov	r5, r0
   db8a2:	e000      	b.n	db8a6 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   db8a4:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db8a6:	eb15 000a 	adds.w	r0, r5, sl
   db8aa:	d001      	beq.n	db8b0 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   db8ac:	f7ff fe01 	bl	db4b2 <_ZNSt8functionIFbmEEC1ERKS1_>
   db8b0:	4641      	mov	r1, r8
   db8b2:	462a      	mov	r2, r5
   db8b4:	4638      	mov	r0, r7
   db8b6:	f7ff fe0b 	bl	db4d0 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   db8ba:	4649      	mov	r1, r9
   db8bc:	f100 0210 	add.w	r2, r0, #16
   db8c0:	4640      	mov	r0, r8
   db8c2:	f7ff fe05 	bl	db4d0 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   db8c6:	4680      	mov	r8, r0
	if (__p)
   db8c8:	b117      	cbz	r7, db8d0 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   db8ca:	4638      	mov	r0, r7
   db8cc:	f7f8 fbe7 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db8d0:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   db8d4:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db8d8:	60b4      	str	r4, [r6, #8]
    }
   db8da:	b002      	add	sp, #8
   db8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db8e0:	461c      	mov	r4, r3
   db8e2:	e7d8      	b.n	db896 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   db8e4:	000e24e3 	.word	0x000e24e3

000db8e8 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
   db8e8:	b510      	push	{r4, lr}
   db8ea:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db8ec:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
   db8f0:	428c      	cmp	r4, r1
      vector<_Tp, _Alloc>::
   db8f2:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db8f4:	d008      	beq.n	db908 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db8f6:	b11c      	cbz	r4, db900 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x18>
   db8f8:	e892 0003 	ldmia.w	r2, {r0, r1}
   db8fc:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   db900:	685a      	ldr	r2, [r3, #4]
   db902:	3208      	adds	r2, #8
   db904:	605a      	str	r2, [r3, #4]
      }
   db906:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   db908:	4621      	mov	r1, r4
   db90a:	f7fe f8a9 	bl	d9a60 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
   db90e:	e7fa      	b.n	db906 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x1e>

000db910 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE>:
    SleepHelper &withPublishQueuePosixRK(std::chrono::milliseconds maxTimeToPublish = 0ms) {
   db910:	b570      	push	{r4, r5, r6, lr}
   db912:	b08a      	sub	sp, #40	; 0x28
   db914:	4604      	mov	r4, r0
   db916:	461d      	mov	r5, r3
	    _M_invoker = &_My_handler::_M_invoke;
   db918:	4b2f      	ldr	r3, [pc, #188]	; (db9d8 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0xc8>)
   db91a:	9305      	str	r3, [sp, #20]
        wakeOrBootFunctions.add(fn); 
   db91c:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   db91e:	4b2f      	ldr	r3, [pc, #188]	; (db9dc <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0xcc>)
   db920:	9304      	str	r3, [sp, #16]
   db922:	a806      	add	r0, sp, #24
    SleepHelper &withPublishQueuePosixRK(std::chrono::milliseconds maxTimeToPublish = 0ms) {
   db924:	4616      	mov	r6, r2
        wakeOrBootFunctions.add(fn); 
   db926:	f7ff fdb5 	bl	db494 <_ZNSt8functionIFbiEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db92a:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
   db92e:	f8d4 36f4 	ldr.w	r3, [r4, #1780]	; 0x6f4
   db932:	4298      	cmp	r0, r3
   db934:	d041      	beq.n	db9ba <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0xaa>
   db936:	b110      	cbz	r0, db93e <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x2e>
   db938:	a906      	add	r1, sp, #24
   db93a:	f7ff fdab 	bl	db494 <_ZNSt8functionIFbiEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   db93e:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
   db942:	3310      	adds	r3, #16
   db944:	f8c4 36f0 	str.w	r3, [r4, #1776]	; 0x6f0
    class function<_Res(_ArgTypes...)>
   db948:	a806      	add	r0, sp, #24
   db94a:	f7f9 fbc7 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   db94e:	a802      	add	r0, sp, #8
   db950:	f7f9 fbc4 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
    _Function_base() : _M_manager(nullptr) { }
   db954:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db956:	2008      	movs	r0, #8
    _Function_base() : _M_manager(nullptr) { }
   db958:	9304      	str	r3, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db95a:	f7f8 fb9c 	bl	d4096 <_Znwj>
   db95e:	b108      	cbz	r0, db964 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x54>
   db960:	e9c0 6500 	strd	r6, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   db964:	4b1e      	ldr	r3, [pc, #120]	; (db9e0 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0xd0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db966:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   db968:	9305      	str	r3, [sp, #20]
        sleepReadyFunctions.add(fn); 
   db96a:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   db96c:	4b1d      	ldr	r3, [pc, #116]	; (db9e4 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0xd4>)
   db96e:	9304      	str	r3, [sp, #16]
   db970:	a806      	add	r0, sp, #24
   db972:	f7fd f91d 	bl	d8bb0 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db976:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
   db97a:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
   db97e:	4298      	cmp	r0, r3
   db980:	d022      	beq.n	db9c8 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0xb8>
   db982:	b110      	cbz	r0, db98a <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x7a>
   db984:	a906      	add	r1, sp, #24
   db986:	f7fd f913 	bl	d8bb0 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   db98a:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
   db98e:	3310      	adds	r3, #16
   db990:	f8c4 36cc 	str.w	r3, [r4, #1740]	; 0x6cc
    class AppCallbackState {
   db994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db998:	2200      	movs	r2, #0
      { emplace_back(std::move(__x)); }
   db99a:	4669      	mov	r1, sp
   db99c:	f204 60d4 	addw	r0, r4, #1748	; 0x6d4
   db9a0:	e9cd 3200 	strd	r3, r2, [sp]
   db9a4:	f7ff ffa0 	bl	db8e8 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
    class function<_Res(_ArgTypes...)>
   db9a8:	a806      	add	r0, sp, #24
   db9aa:	f7f9 fb97 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   db9ae:	a802      	add	r0, sp, #8
   db9b0:	f7f9 fb94 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
    }
   db9b4:	4620      	mov	r0, r4
   db9b6:	b00a      	add	sp, #40	; 0x28
   db9b8:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   db9ba:	4601      	mov	r1, r0
   db9bc:	aa06      	add	r2, sp, #24
   db9be:	f204 60ec 	addw	r0, r4, #1772	; 0x6ec
   db9c2:	f7ff feb9 	bl	db738 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   db9c6:	e7bf      	b.n	db948 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x38>
   db9c8:	4601      	mov	r1, r0
   db9ca:	aa06      	add	r2, sp, #24
   db9cc:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
   db9d0:	f7fd fec2 	bl	d9758 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   db9d4:	e7de      	b.n	db994 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x84>
   db9d6:	bf00      	nop
   db9d8:	000db25d 	.word	0x000db25d
   db9dc:	000db1ab 	.word	0x000db1ab
   db9e0:	000db1ff 	.word	0x000db1ff
   db9e4:	000db2a9 	.word	0x000db2a9

000db9e8 <_GLOBAL__sub_I__Z17sleepHelperConfigv>:
        val_(val) {
   db9e8:	4b01      	ldr	r3, [pc, #4]	; (db9f0 <_GLOBAL__sub_I__Z17sleepHelperConfigv+0x8>)
   db9ea:	2201      	movs	r2, #1
   db9ec:	701a      	strb	r2, [r3, #0]
        .withHourOfDay(2);

    // Data capture every 2 minutes
    SleepHelper::instance().getScheduleDataCapture()
        .withMinuteOfHour(2);
}
   db9ee:	4770      	bx	lr
   db9f0:	2003e530 	.word	0x2003e530

000db9f4 <_Z17sleepHelperConfigv>:
void sleepHelperConfig() {
   db9f4:	b530      	push	{r4, r5, lr}
   db9f6:	b0ad      	sub	sp, #180	; 0xb4
    SleepHelper::instance()
   db9f8:	f7fc ffc4 	bl	d8984 <_ZN11SleepHelper8instanceEv>
        minimumCellularOffTimeMs = timeMs.count();
   db9fc:	4b83      	ldr	r3, [pc, #524]	; (dbc0c <_Z17sleepHelperConfigv+0x218>)
   db9fe:	f8c0 37a0 	str.w	r3, [r0, #1952]	; 0x7a0
   dba02:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   dba04:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dba06:	2008      	movs	r0, #8
    _Function_base() : _M_manager(nullptr) { }
   dba08:	930d      	str	r3, [sp, #52]	; 0x34
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dba0a:	f7f8 fb44 	bl	d4096 <_Znwj>
   dba0e:	b118      	cbz	r0, dba18 <_Z17sleepHelperConfigv+0x24>
   dba10:	4a7f      	ldr	r2, [pc, #508]	; (dbc10 <_Z17sleepHelperConfigv+0x21c>)
   dba12:	2300      	movs	r3, #0
   dba14:	e9c0 2300 	strd	r2, r3, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   dba18:	4b7e      	ldr	r3, [pc, #504]	; (dbc14 <_Z17sleepHelperConfigv+0x220>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dba1a:	900b      	str	r0, [sp, #44]	; 0x2c
	    _M_invoker = &_My_handler::_M_invoke;
   dba1c:	930e      	str	r3, [sp, #56]	; 0x38
        maximumTimeToConnectFunctions.add(fn); 
   dba1e:	a90b      	add	r1, sp, #44	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   dba20:	4b7d      	ldr	r3, [pc, #500]	; (dbc18 <_Z17sleepHelperConfigv+0x224>)
   dba22:	930d      	str	r3, [sp, #52]	; 0x34
   dba24:	a816      	add	r0, sp, #88	; 0x58
   dba26:	f7ff fd44 	bl	db4b2 <_ZNSt8functionIFbmEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   dba2a:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
   dba2e:	f8d4 370c 	ldr.w	r3, [r4, #1804]	; 0x70c
   dba32:	4298      	cmp	r0, r3
   dba34:	f000 80dc 	beq.w	dbbf0 <_Z17sleepHelperConfigv+0x1fc>
   dba38:	b110      	cbz	r0, dba40 <_Z17sleepHelperConfigv+0x4c>
   dba3a:	a916      	add	r1, sp, #88	; 0x58
   dba3c:	f7ff fd39 	bl	db4b2 <_ZNSt8functionIFbmEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   dba40:	f8d4 3708 	ldr.w	r3, [r4, #1800]	; 0x708
   dba44:	3310      	adds	r3, #16
   dba46:	f8c4 3708 	str.w	r3, [r4, #1800]	; 0x708
    class function<_Res(_ArgTypes...)>
   dba4a:	a816      	add	r0, sp, #88	; 0x58
   dba4c:	f7f9 fb46 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   dba50:	a80b      	add	r0, sp, #44	; 0x2c
   dba52:	f7f9 fb43 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
        LocalTime::instance().withConfig(tzConfig);
   dba56:	f7fa f9db 	bl	d5e10 <_ZN9LocalTime8instanceEv>
   dba5a:	4970      	ldr	r1, [pc, #448]	; (dbc1c <_Z17sleepHelperConfigv+0x228>)
   dba5c:	4605      	mov	r5, r0
   dba5e:	a816      	add	r0, sp, #88	; 0x58
   dba60:	f7fa f8fa 	bl	d5c58 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   dba64:	a917      	add	r1, sp, #92	; 0x5c
   dba66:	f105 0008 	add.w	r0, r5, #8
   dba6a:	f002 ff8c 	bl	de986 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   dba6e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   dba70:	61eb      	str	r3, [r5, #28]
class LocalTimePosixTimezone {
   dba72:	a91d      	add	r1, sp, #116	; 0x74
   dba74:	f105 0020 	add.w	r0, r5, #32
   dba78:	f002 ff85 	bl	de986 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   dba7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   dba7e:	636b      	str	r3, [r5, #52]	; 0x34
class LocalTimeChange {
   dba80:	9b24      	ldr	r3, [sp, #144]	; 0x90
   dba82:	63eb      	str	r3, [r5, #60]	; 0x3c
class LocalTimeHMS {
   dba84:	9b26      	ldr	r3, [sp, #152]	; 0x98
   dba86:	646b      	str	r3, [r5, #68]	; 0x44
class LocalTimeChange {
   dba88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   dba8a:	64eb      	str	r3, [r5, #76]	; 0x4c
class LocalTimeHMS {
   dba8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   dba8e:	656b      	str	r3, [r5, #84]	; 0x54
class LocalTimePosixTimezone {
   dba90:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
   dba94:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
   dba98:	a816      	add	r0, sp, #88	; 0x58
   dba9a:	f7f9 fd67 	bl	d556c <_ZN22LocalTimePosixTimezoneD1Ev>
            this->path = path;
   dba9e:	4960      	ldr	r1, [pc, #384]	; (dbc20 <_Z17sleepHelperConfigv+0x22c>)
   dbaa0:	f204 7054 	addw	r0, r4, #1876	; 0x754
   dbaa4:	f002 ff91 	bl	de9ca <_ZN6StringaSEPKc>
            this->eventHistoryKey = key;
   dbaa8:	495e      	ldr	r1, [pc, #376]	; (dbc24 <_Z17sleepHelperConfigv+0x230>)
   dbaaa:	f204 706c 	addw	r0, r4, #1900	; 0x76c
   dbaae:	f002 ff8c 	bl	de9ca <_ZN6StringaSEPKc>
	    _M_invoker = &_My_handler::_M_invoke;
   dbab2:	4b5d      	ldr	r3, [pc, #372]	; (dbc28 <_Z17sleepHelperConfigv+0x234>)
   dbab4:	9307      	str	r3, [sp, #28]
        dataCaptureFunctions.add(fn);
   dbab6:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   dbab8:	4b5c      	ldr	r3, [pc, #368]	; (dbc2c <_Z17sleepHelperConfigv+0x238>)
   dbaba:	9306      	str	r3, [sp, #24]
   dbabc:	a816      	add	r0, sp, #88	; 0x58
   dbabe:	f7ff fcda 	bl	db476 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   dbac2:	f8d4 06b4 	ldr.w	r0, [r4, #1716]	; 0x6b4
   dbac6:	f8d4 36b8 	ldr.w	r3, [r4, #1720]	; 0x6b8
   dbaca:	4298      	cmp	r0, r3
   dbacc:	f000 8097 	beq.w	dbbfe <_Z17sleepHelperConfigv+0x20a>
   dbad0:	b110      	cbz	r0, dbad8 <_Z17sleepHelperConfigv+0xe4>
   dbad2:	a916      	add	r1, sp, #88	; 0x58
   dbad4:	f7ff fccf 	bl	db476 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   dbad8:	f8d4 36b4 	ldr.w	r3, [r4, #1716]	; 0x6b4
   dbadc:	3310      	adds	r3, #16
   dbade:	f8c4 36b4 	str.w	r3, [r4, #1716]	; 0x6b4
    class AppCallbackState {
   dbae2:	2500      	movs	r5, #0
   dbae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      { emplace_back(std::move(__x)); }
   dbae8:	a90b      	add	r1, sp, #44	; 0x2c
   dbaea:	f204 60bc 	addw	r0, r4, #1724	; 0x6bc
   dbaee:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
   dbaf2:	f7ff fef9 	bl	db8e8 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
    class function<_Res(_ArgTypes...)>
   dbaf6:	a816      	add	r0, sp, #88	; 0x58
   dbaf8:	f7f9 faf0 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   dbafc:	4b4c      	ldr	r3, [pc, #304]	; (dbc30 <_Z17sleepHelperConfigv+0x23c>)
   dbafe:	930e      	str	r3, [sp, #56]	; 0x38
        wakeFunctions.add(fn); 
   dbb00:	a90b      	add	r1, sp, #44	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   dbb02:	4b4c      	ldr	r3, [pc, #304]	; (dbc34 <_Z17sleepHelperConfigv+0x240>)
   dbb04:	930d      	str	r3, [sp, #52]	; 0x34
   dbb06:	a816      	add	r0, sp, #88	; 0x58
   dbb08:	f7ff fca6 	bl	db458 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
            callbackFunctions.push_back(callback);
   dbb0c:	a916      	add	r1, sp, #88	; 0x58
   dbb0e:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
   dbb12:	f7ff fdb5 	bl	db680 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE9push_backERKS5_>
    class function<_Res(_ArgTypes...)>
   dbb16:	a816      	add	r0, sp, #88	; 0x58
   dbb18:	f7f9 fae0 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
        .withAB1805_WDT(ab1805)                // Stop the watchdog before sleep or reset, and resume after wake
   dbb1c:	4946      	ldr	r1, [pc, #280]	; (dbc38 <_Z17sleepHelperConfigv+0x244>)
   dbb1e:	4620      	mov	r0, r4
   dbb20:	f7ff fe52 	bl	db7c8 <_ZN11SleepHelper14withAB1805_WDTER6AB1805>
        .withPublishQueuePosixRK()             // Manage both internal publish queueing and PublishQueuePosixRK
   dbb24:	2200      	movs	r2, #0
   dbb26:	2300      	movs	r3, #0
   dbb28:	f7ff fef2 	bl	db910 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE>
   dbb2c:	a80b      	add	r0, sp, #44	; 0x2c
   dbb2e:	f7f9 fad5 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   dbb32:	a804      	add	r0, sp, #16
   dbb34:	f7f9 fad2 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
    SleepHelper::instance().getScheduleFull()
   dbb38:	f7fc ff24 	bl	d8984 <_ZN11SleepHelper8instanceEv>
        return scheduleManager.getScheduleByName("full");
   dbb3c:	493f      	ldr	r1, [pc, #252]	; (dbc3c <_Z17sleepHelperConfigv+0x248>)
   dbb3e:	f500 60c7 	add.w	r0, r0, #1592	; 0x638
   dbb42:	f7fa ffe3 	bl	d6b0c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        .withMinuteOfHour(15, LocalTimeRange(LocalTimeHMS("09:00:00"), LocalTimeHMS("16:59:59"), LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_WEEKDAY)))
   dbb46:	493e      	ldr	r1, [pc, #248]	; (dbc40 <_Z17sleepHelperConfigv+0x24c>)
   dbb48:	4604      	mov	r4, r0
   dbb4a:	4668      	mov	r0, sp
   dbb4c:	f7f9 fea8 	bl	d58a0 <_ZN12LocalTimeHMSC1EPKc>
   dbb50:	493c      	ldr	r1, [pc, #240]	; (dbc44 <_Z17sleepHelperConfigv+0x250>)
   dbb52:	a802      	add	r0, sp, #8
   dbb54:	f7f9 fea4 	bl	d58a0 <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   dbb58:	233e      	movs	r3, #62	; 0x3e
class LocalTimeRestrictedDate {
   dbb5a:	a905      	add	r1, sp, #20
   dbb5c:	a80c      	add	r0, sp, #48	; 0x30
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   dbb5e:	f88d 3010 	strb.w	r3, [sp, #16]
class LocalTimeRestrictedDate {
   dbb62:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	: _M_start(), _M_finish(), _M_end_of_storage()
   dbb66:	e9cd 5505 	strd	r5, r5, [sp, #20]
   dbb6a:	e9cd 5507 	strd	r5, r5, [sp, #28]
   dbb6e:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   dbb72:	f7fa fc7a 	bl	d646a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   dbb76:	a908      	add	r1, sp, #32
   dbb78:	a80f      	add	r0, sp, #60	; 0x3c
   dbb7a:	f7fa fc76 	bl	d646a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
class LocalTimeHMS {
   dbb7e:	9a01      	ldr	r2, [sp, #4]
   dbb80:	4b31      	ldr	r3, [pc, #196]	; (dbc48 <_Z17sleepHelperConfigv+0x254>)
   dbb82:	9312      	str	r3, [sp, #72]	; 0x48
   dbb84:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
   dbb88:	210f      	movs	r1, #15
   dbb8a:	9b03      	ldr	r3, [sp, #12]
   dbb8c:	9315      	str	r3, [sp, #84]	; 0x54
   dbb8e:	aa0b      	add	r2, sp, #44	; 0x2c
   dbb90:	4620      	mov	r0, r4
   dbb92:	f7fa fea8 	bl	d68e6 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   dbb96:	4604      	mov	r4, r0
        .withHourOfDay(2);
   dbb98:	a816      	add	r0, sp, #88	; 0x58
   dbb9a:	f7ff fbd3 	bl	db344 <_ZN14LocalTimeRangeC1Ev>
   dbb9e:	aa16      	add	r2, sp, #88	; 0x58
   dbba0:	2102      	movs	r1, #2
   dbba2:	4620      	mov	r0, r4
   dbba4:	f7fa feb9 	bl	d691a <_ZN17LocalTimeSchedule13withHourOfDayEi14LocalTimeRange>
   dbba8:	a816      	add	r0, sp, #88	; 0x58
   dbbaa:	f7ff fbe5 	bl	db378 <_ZN14LocalTimeRangeD1Ev>
        .withMinuteOfHour(15, LocalTimeRange(LocalTimeHMS("09:00:00"), LocalTimeHMS("16:59:59"), LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_WEEKDAY)))
   dbbae:	a80b      	add	r0, sp, #44	; 0x2c
   dbbb0:	f7ff fbe2 	bl	db378 <_ZN14LocalTimeRangeD1Ev>
   dbbb4:	a804      	add	r0, sp, #16
   dbbb6:	f7ff fbb9 	bl	db32c <_ZN23LocalTimeRestrictedDateD1Ev>
   dbbba:	a802      	add	r0, sp, #8
   dbbbc:	f7f9 fcbe 	bl	d553c <_ZN12LocalTimeHMSD1Ev>
   dbbc0:	4668      	mov	r0, sp
   dbbc2:	f7f9 fcbb 	bl	d553c <_ZN12LocalTimeHMSD1Ev>
    SleepHelper::instance().getScheduleDataCapture()
   dbbc6:	f7fc fedd 	bl	d8984 <_ZN11SleepHelper8instanceEv>
        return scheduleManager.getScheduleByName("data");
   dbbca:	4920      	ldr	r1, [pc, #128]	; (dbc4c <_Z17sleepHelperConfigv+0x258>)
   dbbcc:	f500 60c7 	add.w	r0, r0, #1592	; 0x638
   dbbd0:	f7fa ff9c 	bl	d6b0c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
   dbbd4:	4604      	mov	r4, r0
        .withMinuteOfHour(2);
   dbbd6:	a816      	add	r0, sp, #88	; 0x58
   dbbd8:	f7ff fbb4 	bl	db344 <_ZN14LocalTimeRangeC1Ev>
   dbbdc:	aa16      	add	r2, sp, #88	; 0x58
   dbbde:	2102      	movs	r1, #2
   dbbe0:	4620      	mov	r0, r4
   dbbe2:	f7fa fe80 	bl	d68e6 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   dbbe6:	a816      	add	r0, sp, #88	; 0x58
   dbbe8:	f7ff fbc6 	bl	db378 <_ZN14LocalTimeRangeD1Ev>
}
   dbbec:	b02d      	add	sp, #180	; 0xb4
   dbbee:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   dbbf0:	4601      	mov	r1, r0
   dbbf2:	aa16      	add	r2, sp, #88	; 0x58
   dbbf4:	f204 7004 	addw	r0, r4, #1796	; 0x704
   dbbf8:	f7ff fe2e 	bl	db858 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   dbbfc:	e725      	b.n	dba4a <_Z17sleepHelperConfigv+0x56>
   dbbfe:	4601      	mov	r1, r0
   dbc00:	aa16      	add	r2, sp, #88	; 0x58
   dbc02:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   dbc06:	f7ff fd4f 	bl	db6a8 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   dbc0a:	e76a      	b.n	dbae2 <_Z17sleepHelperConfigv+0xee>
   dbc0c:	000493e0 	.word	0x000493e0
   dbc10:	000a1220 	.word	0x000a1220
   dbc14:	000db165 	.word	0x000db165
   dbc18:	000db26d 	.word	0x000db26d
   dbc1c:	000e2be6 	.word	0x000e2be6
   dbc20:	000e2c0f 	.word	0x000e2c0f
   dbc24:	000e2c1f 	.word	0x000e2c1f
   dbc28:	000db3b5 	.word	0x000db3b5
   dbc2c:	000db1bf 	.word	0x000db1bf
   dbc30:	000db1d3 	.word	0x000db1d3
   dbc34:	000db1c9 	.word	0x000db1c9
   dbc38:	2003e3fc 	.word	0x2003e3fc
   dbc3c:	000e2a59 	.word	0x000e2a59
   dbc40:	000e2c22 	.word	0x000e2c22
   dbc44:	000e2c2b 	.word	0x000e2c2b
   dbc48:	000e2518 	.word	0x000e2518
   dbc4c:	000e259f 	.word	0x000e259f

000dbc50 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   dbc50:	b508      	push	{r3, lr}
   dbc52:	4b02      	ldr	r3, [pc, #8]	; (dbc5c <os_thread_create+0xc>)
   dbc54:	681b      	ldr	r3, [r3, #0]
   dbc56:	685b      	ldr	r3, [r3, #4]
   dbc58:	9301      	str	r3, [sp, #4]
   dbc5a:	bd08      	pop	{r3, pc}
   dbc5c:	00030248 	.word	0x00030248

000dbc60 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   dbc60:	b508      	push	{r3, lr}
   dbc62:	4b02      	ldr	r3, [pc, #8]	; (dbc6c <os_thread_is_current+0xc>)
   dbc64:	681b      	ldr	r3, [r3, #0]
   dbc66:	689b      	ldr	r3, [r3, #8]
   dbc68:	9301      	str	r3, [sp, #4]
   dbc6a:	bd08      	pop	{r3, pc}
   dbc6c:	00030248 	.word	0x00030248

000dbc70 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   dbc70:	b508      	push	{r3, lr}
   dbc72:	4b02      	ldr	r3, [pc, #8]	; (dbc7c <os_thread_join+0xc>)
   dbc74:	681b      	ldr	r3, [r3, #0]
   dbc76:	691b      	ldr	r3, [r3, #16]
   dbc78:	9301      	str	r3, [sp, #4]
   dbc7a:	bd08      	pop	{r3, pc}
   dbc7c:	00030248 	.word	0x00030248

000dbc80 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   dbc80:	b508      	push	{r3, lr}
   dbc82:	4b02      	ldr	r3, [pc, #8]	; (dbc8c <os_thread_cleanup+0xc>)
   dbc84:	681b      	ldr	r3, [r3, #0]
   dbc86:	695b      	ldr	r3, [r3, #20]
   dbc88:	9301      	str	r3, [sp, #4]
   dbc8a:	bd08      	pop	{r3, pc}
   dbc8c:	00030248 	.word	0x00030248

000dbc90 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   dbc90:	b508      	push	{r3, lr}
   dbc92:	4b02      	ldr	r3, [pc, #8]	; (dbc9c <os_mutex_create+0xc>)
   dbc94:	681b      	ldr	r3, [r3, #0]
   dbc96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dbc98:	9301      	str	r3, [sp, #4]
   dbc9a:	bd08      	pop	{r3, pc}
   dbc9c:	00030248 	.word	0x00030248

000dbca0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   dbca0:	b508      	push	{r3, lr}
   dbca2:	4b02      	ldr	r3, [pc, #8]	; (dbcac <os_mutex_lock+0xc>)
   dbca4:	681b      	ldr	r3, [r3, #0]
   dbca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dbca8:	9301      	str	r3, [sp, #4]
   dbcaa:	bd08      	pop	{r3, pc}
   dbcac:	00030248 	.word	0x00030248

000dbcb0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   dbcb0:	b508      	push	{r3, lr}
   dbcb2:	4b02      	ldr	r3, [pc, #8]	; (dbcbc <os_mutex_unlock+0xc>)
   dbcb4:	681b      	ldr	r3, [r3, #0]
   dbcb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dbcb8:	9301      	str	r3, [sp, #4]
   dbcba:	bd08      	pop	{r3, pc}
   dbcbc:	00030248 	.word	0x00030248

000dbcc0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   dbcc0:	b508      	push	{r3, lr}
   dbcc2:	4b02      	ldr	r3, [pc, #8]	; (dbccc <os_mutex_recursive_create+0xc>)
   dbcc4:	681b      	ldr	r3, [r3, #0]
   dbcc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dbcc8:	9301      	str	r3, [sp, #4]
   dbcca:	bd08      	pop	{r3, pc}
   dbccc:	00030248 	.word	0x00030248

000dbcd0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   dbcd0:	b508      	push	{r3, lr}
   dbcd2:	4b02      	ldr	r3, [pc, #8]	; (dbcdc <os_mutex_recursive_destroy+0xc>)
   dbcd4:	681b      	ldr	r3, [r3, #0]
   dbcd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dbcd8:	9301      	str	r3, [sp, #4]
   dbcda:	bd08      	pop	{r3, pc}
   dbcdc:	00030248 	.word	0x00030248

000dbce0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   dbce0:	b508      	push	{r3, lr}
   dbce2:	4b02      	ldr	r3, [pc, #8]	; (dbcec <os_mutex_recursive_lock+0xc>)
   dbce4:	681b      	ldr	r3, [r3, #0]
   dbce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dbce8:	9301      	str	r3, [sp, #4]
   dbcea:	bd08      	pop	{r3, pc}
   dbcec:	00030248 	.word	0x00030248

000dbcf0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   dbcf0:	b508      	push	{r3, lr}
   dbcf2:	4b02      	ldr	r3, [pc, #8]	; (dbcfc <os_mutex_recursive_unlock+0xc>)
   dbcf4:	681b      	ldr	r3, [r3, #0]
   dbcf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dbcf8:	9301      	str	r3, [sp, #4]
   dbcfa:	bd08      	pop	{r3, pc}
   dbcfc:	00030248 	.word	0x00030248

000dbd00 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   dbd00:	b508      	push	{r3, lr}
   dbd02:	4b02      	ldr	r3, [pc, #8]	; (dbd0c <os_thread_exit+0xc>)
   dbd04:	681b      	ldr	r3, [r3, #0]
   dbd06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dbd08:	9301      	str	r3, [sp, #4]
   dbd0a:	bd08      	pop	{r3, pc}
   dbd0c:	00030248 	.word	0x00030248

000dbd10 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   dbd10:	b508      	push	{r3, lr}
   dbd12:	4b02      	ldr	r3, [pc, #8]	; (dbd1c <HAL_Feature_Set+0xc>)
   dbd14:	681b      	ldr	r3, [r3, #0]
   dbd16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   dbd18:	9301      	str	r3, [sp, #4]
   dbd1a:	bd08      	pop	{r3, pc}
   dbd1c:	00030234 	.word	0x00030234

000dbd20 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   dbd20:	b508      	push	{r3, lr}
   dbd22:	4b02      	ldr	r3, [pc, #8]	; (dbd2c <HAL_Core_Get_Last_Reset_Info+0xc>)
   dbd24:	681b      	ldr	r3, [r3, #0]
   dbd26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dbd28:	9301      	str	r3, [sp, #4]
   dbd2a:	bd08      	pop	{r3, pc}
   dbd2c:	00030234 	.word	0x00030234

000dbd30 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   dbd30:	b508      	push	{r3, lr}
   dbd32:	4b02      	ldr	r3, [pc, #8]	; (dbd3c <HAL_RNG_GetRandomNumber+0xc>)
   dbd34:	681b      	ldr	r3, [r3, #0]
   dbd36:	685b      	ldr	r3, [r3, #4]
   dbd38:	9301      	str	r3, [sp, #4]
   dbd3a:	bd08      	pop	{r3, pc}
   dbd3c:	00030218 	.word	0x00030218

000dbd40 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   dbd40:	b508      	push	{r3, lr}
   dbd42:	4b02      	ldr	r3, [pc, #8]	; (dbd4c <HAL_Delay_Milliseconds+0xc>)
   dbd44:	681b      	ldr	r3, [r3, #0]
   dbd46:	689b      	ldr	r3, [r3, #8]
   dbd48:	9301      	str	r3, [sp, #4]
   dbd4a:	bd08      	pop	{r3, pc}
   dbd4c:	00030218 	.word	0x00030218

000dbd50 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   dbd50:	b508      	push	{r3, lr}
   dbd52:	4b02      	ldr	r3, [pc, #8]	; (dbd5c <HAL_Delay_Microseconds+0xc>)
   dbd54:	681b      	ldr	r3, [r3, #0]
   dbd56:	68db      	ldr	r3, [r3, #12]
   dbd58:	9301      	str	r3, [sp, #4]
   dbd5a:	bd08      	pop	{r3, pc}
   dbd5c:	00030218 	.word	0x00030218

000dbd60 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   dbd60:	b508      	push	{r3, lr}
   dbd62:	4b02      	ldr	r3, [pc, #8]	; (dbd6c <HAL_Timer_Get_Milli_Seconds+0xc>)
   dbd64:	681b      	ldr	r3, [r3, #0]
   dbd66:	695b      	ldr	r3, [r3, #20]
   dbd68:	9301      	str	r3, [sp, #4]
   dbd6a:	bd08      	pop	{r3, pc}
   dbd6c:	00030218 	.word	0x00030218

000dbd70 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   dbd70:	b508      	push	{r3, lr}
   dbd72:	4b02      	ldr	r3, [pc, #8]	; (dbd7c <hal_rtc_time_is_valid+0xc>)
   dbd74:	681b      	ldr	r3, [r3, #0]
   dbd76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dbd78:	9301      	str	r3, [sp, #4]
   dbd7a:	bd08      	pop	{r3, pc}
   dbd7c:	00030218 	.word	0x00030218

000dbd80 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   dbd80:	b508      	push	{r3, lr}
   dbd82:	4b02      	ldr	r3, [pc, #8]	; (dbd8c <hal_timer_millis+0xc>)
   dbd84:	681b      	ldr	r3, [r3, #0]
   dbd86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dbd88:	9301      	str	r3, [sp, #4]
   dbd8a:	bd08      	pop	{r3, pc}
   dbd8c:	00030218 	.word	0x00030218

000dbd90 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   dbd90:	b508      	push	{r3, lr}
   dbd92:	4b02      	ldr	r3, [pc, #8]	; (dbd9c <hal_rtc_get_time+0xc>)
   dbd94:	681b      	ldr	r3, [r3, #0]
   dbd96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   dbd98:	9301      	str	r3, [sp, #4]
   dbd9a:	bd08      	pop	{r3, pc}
   dbd9c:	00030218 	.word	0x00030218

000dbda0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   dbda0:	b508      	push	{r3, lr}
   dbda2:	4b02      	ldr	r3, [pc, #8]	; (dbdac <hal_rtc_set_time+0xc>)
   dbda4:	681b      	ldr	r3, [r3, #0]
   dbda6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   dbda8:	9301      	str	r3, [sp, #4]
   dbdaa:	bd08      	pop	{r3, pc}
   dbdac:	00030218 	.word	0x00030218

000dbdb0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   dbdb0:	b508      	push	{r3, lr}
   dbdb2:	4b02      	ldr	r3, [pc, #8]	; (dbdbc <HAL_Validate_Pin_Function+0xc>)
   dbdb4:	681b      	ldr	r3, [r3, #0]
   dbdb6:	685b      	ldr	r3, [r3, #4]
   dbdb8:	9301      	str	r3, [sp, #4]
   dbdba:	bd08      	pop	{r3, pc}
   dbdbc:	0003022c 	.word	0x0003022c

000dbdc0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   dbdc0:	b508      	push	{r3, lr}
   dbdc2:	4b02      	ldr	r3, [pc, #8]	; (dbdcc <HAL_Get_Pin_Mode+0xc>)
   dbdc4:	681b      	ldr	r3, [r3, #0]
   dbdc6:	68db      	ldr	r3, [r3, #12]
   dbdc8:	9301      	str	r3, [sp, #4]
   dbdca:	bd08      	pop	{r3, pc}
   dbdcc:	0003022c 	.word	0x0003022c

000dbdd0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   dbdd0:	b508      	push	{r3, lr}
   dbdd2:	4b02      	ldr	r3, [pc, #8]	; (dbddc <HAL_GPIO_Write+0xc>)
   dbdd4:	681b      	ldr	r3, [r3, #0]
   dbdd6:	691b      	ldr	r3, [r3, #16]
   dbdd8:	9301      	str	r3, [sp, #4]
   dbdda:	bd08      	pop	{r3, pc}
   dbddc:	0003022c 	.word	0x0003022c

000dbde0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   dbde0:	b508      	push	{r3, lr}
   dbde2:	4b02      	ldr	r3, [pc, #8]	; (dbdec <HAL_GPIO_Read+0xc>)
   dbde4:	681b      	ldr	r3, [r3, #0]
   dbde6:	695b      	ldr	r3, [r3, #20]
   dbde8:	9301      	str	r3, [sp, #4]
   dbdea:	bd08      	pop	{r3, pc}
   dbdec:	0003022c 	.word	0x0003022c

000dbdf0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   dbdf0:	b508      	push	{r3, lr}
   dbdf2:	4b02      	ldr	r3, [pc, #8]	; (dbdfc <hal_adc_read+0xc>)
   dbdf4:	681b      	ldr	r3, [r3, #0]
   dbdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dbdf8:	9301      	str	r3, [sp, #4]
   dbdfa:	bd08      	pop	{r3, pc}
   dbdfc:	0003022c 	.word	0x0003022c

000dbe00 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   dbe00:	b508      	push	{r3, lr}
   dbe02:	4b02      	ldr	r3, [pc, #8]	; (dbe0c <hal_i2c_begin+0xc>)
   dbe04:	681b      	ldr	r3, [r3, #0]
   dbe06:	68db      	ldr	r3, [r3, #12]
   dbe08:	9301      	str	r3, [sp, #4]
   dbe0a:	bd08      	pop	{r3, pc}
   dbe0c:	00030228 	.word	0x00030228

000dbe10 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   dbe10:	b508      	push	{r3, lr}
   dbe12:	4b02      	ldr	r3, [pc, #8]	; (dbe1c <hal_i2c_begin_transmission+0xc>)
   dbe14:	681b      	ldr	r3, [r3, #0]
   dbe16:	699b      	ldr	r3, [r3, #24]
   dbe18:	9301      	str	r3, [sp, #4]
   dbe1a:	bd08      	pop	{r3, pc}
   dbe1c:	00030228 	.word	0x00030228

000dbe20 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   dbe20:	b508      	push	{r3, lr}
   dbe22:	4b02      	ldr	r3, [pc, #8]	; (dbe2c <hal_i2c_end_transmission+0xc>)
   dbe24:	681b      	ldr	r3, [r3, #0]
   dbe26:	69db      	ldr	r3, [r3, #28]
   dbe28:	9301      	str	r3, [sp, #4]
   dbe2a:	bd08      	pop	{r3, pc}
   dbe2c:	00030228 	.word	0x00030228

000dbe30 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   dbe30:	b508      	push	{r3, lr}
   dbe32:	4b02      	ldr	r3, [pc, #8]	; (dbe3c <hal_i2c_write+0xc>)
   dbe34:	681b      	ldr	r3, [r3, #0]
   dbe36:	6a1b      	ldr	r3, [r3, #32]
   dbe38:	9301      	str	r3, [sp, #4]
   dbe3a:	bd08      	pop	{r3, pc}
   dbe3c:	00030228 	.word	0x00030228

000dbe40 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   dbe40:	b508      	push	{r3, lr}
   dbe42:	4b02      	ldr	r3, [pc, #8]	; (dbe4c <hal_i2c_available+0xc>)
   dbe44:	681b      	ldr	r3, [r3, #0]
   dbe46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dbe48:	9301      	str	r3, [sp, #4]
   dbe4a:	bd08      	pop	{r3, pc}
   dbe4c:	00030228 	.word	0x00030228

000dbe50 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   dbe50:	b508      	push	{r3, lr}
   dbe52:	4b02      	ldr	r3, [pc, #8]	; (dbe5c <hal_i2c_read+0xc>)
   dbe54:	681b      	ldr	r3, [r3, #0]
   dbe56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dbe58:	9301      	str	r3, [sp, #4]
   dbe5a:	bd08      	pop	{r3, pc}
   dbe5c:	00030228 	.word	0x00030228

000dbe60 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   dbe60:	b508      	push	{r3, lr}
   dbe62:	4b02      	ldr	r3, [pc, #8]	; (dbe6c <hal_i2c_peek+0xc>)
   dbe64:	681b      	ldr	r3, [r3, #0]
   dbe66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dbe68:	9301      	str	r3, [sp, #4]
   dbe6a:	bd08      	pop	{r3, pc}
   dbe6c:	00030228 	.word	0x00030228

000dbe70 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   dbe70:	b508      	push	{r3, lr}
   dbe72:	4b02      	ldr	r3, [pc, #8]	; (dbe7c <hal_i2c_flush+0xc>)
   dbe74:	681b      	ldr	r3, [r3, #0]
   dbe76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dbe78:	9301      	str	r3, [sp, #4]
   dbe7a:	bd08      	pop	{r3, pc}
   dbe7c:	00030228 	.word	0x00030228

000dbe80 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   dbe80:	b508      	push	{r3, lr}
   dbe82:	4b02      	ldr	r3, [pc, #8]	; (dbe8c <hal_i2c_is_enabled+0xc>)
   dbe84:	681b      	ldr	r3, [r3, #0]
   dbe86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dbe88:	9301      	str	r3, [sp, #4]
   dbe8a:	bd08      	pop	{r3, pc}
   dbe8c:	00030228 	.word	0x00030228

000dbe90 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   dbe90:	b508      	push	{r3, lr}
   dbe92:	4b02      	ldr	r3, [pc, #8]	; (dbe9c <hal_i2c_init+0xc>)
   dbe94:	681b      	ldr	r3, [r3, #0]
   dbe96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dbe98:	9301      	str	r3, [sp, #4]
   dbe9a:	bd08      	pop	{r3, pc}
   dbe9c:	00030228 	.word	0x00030228

000dbea0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   dbea0:	b508      	push	{r3, lr}
   dbea2:	4b02      	ldr	r3, [pc, #8]	; (dbeac <hal_i2c_lock+0xc>)
   dbea4:	681b      	ldr	r3, [r3, #0]
   dbea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dbea8:	9301      	str	r3, [sp, #4]
   dbeaa:	bd08      	pop	{r3, pc}
   dbeac:	00030228 	.word	0x00030228

000dbeb0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   dbeb0:	b508      	push	{r3, lr}
   dbeb2:	4b02      	ldr	r3, [pc, #8]	; (dbebc <hal_i2c_unlock+0xc>)
   dbeb4:	681b      	ldr	r3, [r3, #0]
   dbeb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dbeb8:	9301      	str	r3, [sp, #4]
   dbeba:	bd08      	pop	{r3, pc}
   dbebc:	00030228 	.word	0x00030228

000dbec0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   dbec0:	b508      	push	{r3, lr}
   dbec2:	4b02      	ldr	r3, [pc, #8]	; (dbecc <hal_i2c_request_ex+0xc>)
   dbec4:	681b      	ldr	r3, [r3, #0]
   dbec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dbec8:	9301      	str	r3, [sp, #4]
   dbeca:	bd08      	pop	{r3, pc}
   dbecc:	00030228 	.word	0x00030228

000dbed0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   dbed0:	b508      	push	{r3, lr}
   dbed2:	4b02      	ldr	r3, [pc, #8]	; (dbedc <inet_inet_ntop+0xc>)
   dbed4:	681b      	ldr	r3, [r3, #0]
   dbed6:	695b      	ldr	r3, [r3, #20]
   dbed8:	9301      	str	r3, [sp, #4]
   dbeda:	bd08      	pop	{r3, pc}
   dbedc:	00030264 	.word	0x00030264

000dbee0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   dbee0:	b508      	push	{r3, lr}
   dbee2:	4b02      	ldr	r3, [pc, #8]	; (dbeec <netdb_freeaddrinfo+0xc>)
   dbee4:	681b      	ldr	r3, [r3, #0]
   dbee6:	689b      	ldr	r3, [r3, #8]
   dbee8:	9301      	str	r3, [sp, #4]
   dbeea:	bd08      	pop	{r3, pc}
   dbeec:	00030268 	.word	0x00030268

000dbef0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   dbef0:	b508      	push	{r3, lr}
   dbef2:	4b02      	ldr	r3, [pc, #8]	; (dbefc <netdb_getaddrinfo+0xc>)
   dbef4:	681b      	ldr	r3, [r3, #0]
   dbef6:	68db      	ldr	r3, [r3, #12]
   dbef8:	9301      	str	r3, [sp, #4]
   dbefa:	bd08      	pop	{r3, pc}
   dbefc:	00030268 	.word	0x00030268

000dbf00 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   dbf00:	b508      	push	{r3, lr}
   dbf02:	4b02      	ldr	r3, [pc, #8]	; (dbf0c <hal_spi_init+0xc>)
   dbf04:	681b      	ldr	r3, [r3, #0]
   dbf06:	69db      	ldr	r3, [r3, #28]
   dbf08:	9301      	str	r3, [sp, #4]
   dbf0a:	bd08      	pop	{r3, pc}
   dbf0c:	00030230 	.word	0x00030230

000dbf10 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   dbf10:	b508      	push	{r3, lr}
   dbf12:	4b02      	ldr	r3, [pc, #8]	; (dbf1c <hal_spi_is_enabled+0xc>)
   dbf14:	681b      	ldr	r3, [r3, #0]
   dbf16:	6a1b      	ldr	r3, [r3, #32]
   dbf18:	9301      	str	r3, [sp, #4]
   dbf1a:	bd08      	pop	{r3, pc}
   dbf1c:	00030230 	.word	0x00030230

000dbf20 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   dbf20:	b508      	push	{r3, lr}
   dbf22:	4b02      	ldr	r3, [pc, #8]	; (dbf2c <_open+0xc>)
   dbf24:	681b      	ldr	r3, [r3, #0]
   dbf26:	681b      	ldr	r3, [r3, #0]
   dbf28:	9301      	str	r3, [sp, #4]
   dbf2a:	bd08      	pop	{r3, pc}
   dbf2c:	00030284 	.word	0x00030284

000dbf30 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   dbf30:	b508      	push	{r3, lr}
   dbf32:	4b02      	ldr	r3, [pc, #8]	; (dbf3c <_write+0xc>)
   dbf34:	681b      	ldr	r3, [r3, #0]
   dbf36:	685b      	ldr	r3, [r3, #4]
   dbf38:	9301      	str	r3, [sp, #4]
   dbf3a:	bd08      	pop	{r3, pc}
   dbf3c:	00030284 	.word	0x00030284

000dbf40 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   dbf40:	b508      	push	{r3, lr}
   dbf42:	4b02      	ldr	r3, [pc, #8]	; (dbf4c <_read+0xc>)
   dbf44:	681b      	ldr	r3, [r3, #0]
   dbf46:	689b      	ldr	r3, [r3, #8]
   dbf48:	9301      	str	r3, [sp, #4]
   dbf4a:	bd08      	pop	{r3, pc}
   dbf4c:	00030284 	.word	0x00030284

000dbf50 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   dbf50:	b508      	push	{r3, lr}
   dbf52:	4b02      	ldr	r3, [pc, #8]	; (dbf5c <_close+0xc>)
   dbf54:	681b      	ldr	r3, [r3, #0]
   dbf56:	68db      	ldr	r3, [r3, #12]
   dbf58:	9301      	str	r3, [sp, #4]
   dbf5a:	bd08      	pop	{r3, pc}
   dbf5c:	00030284 	.word	0x00030284

000dbf60 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   dbf60:	b508      	push	{r3, lr}
   dbf62:	4b02      	ldr	r3, [pc, #8]	; (dbf6c <_fstat+0xc>)
   dbf64:	681b      	ldr	r3, [r3, #0]
   dbf66:	695b      	ldr	r3, [r3, #20]
   dbf68:	9301      	str	r3, [sp, #4]
   dbf6a:	bd08      	pop	{r3, pc}
   dbf6c:	00030284 	.word	0x00030284

000dbf70 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   dbf70:	b508      	push	{r3, lr}
   dbf72:	4b02      	ldr	r3, [pc, #8]	; (dbf7c <_lseek+0xc>)
   dbf74:	681b      	ldr	r3, [r3, #0]
   dbf76:	6a1b      	ldr	r3, [r3, #32]
   dbf78:	9301      	str	r3, [sp, #4]
   dbf7a:	bd08      	pop	{r3, pc}
   dbf7c:	00030284 	.word	0x00030284

000dbf80 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   dbf80:	b508      	push	{r3, lr}
   dbf82:	4b02      	ldr	r3, [pc, #8]	; (dbf8c <stat+0xc>)
   dbf84:	681b      	ldr	r3, [r3, #0]
   dbf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dbf88:	9301      	str	r3, [sp, #4]
   dbf8a:	bd08      	pop	{r3, pc}
   dbf8c:	00030284 	.word	0x00030284

000dbf90 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   dbf90:	b508      	push	{r3, lr}
   dbf92:	4b02      	ldr	r3, [pc, #8]	; (dbf9c <mkdir+0xc>)
   dbf94:	681b      	ldr	r3, [r3, #0]
   dbf96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dbf98:	9301      	str	r3, [sp, #4]
   dbf9a:	bd08      	pop	{r3, pc}
   dbf9c:	00030284 	.word	0x00030284

000dbfa0 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   dbfa0:	b508      	push	{r3, lr}
   dbfa2:	4b02      	ldr	r3, [pc, #8]	; (dbfac <_unlink+0xc>)
   dbfa4:	681b      	ldr	r3, [r3, #0]
   dbfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dbfa8:	9301      	str	r3, [sp, #4]
   dbfaa:	bd08      	pop	{r3, pc}
   dbfac:	00030284 	.word	0x00030284

000dbfb0 <_link>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
   dbfb0:	b508      	push	{r3, lr}
   dbfb2:	4b02      	ldr	r3, [pc, #8]	; (dbfbc <_link+0xc>)
   dbfb4:	681b      	ldr	r3, [r3, #0]
   dbfb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dbfb8:	9301      	str	r3, [sp, #4]
   dbfba:	bd08      	pop	{r3, pc}
   dbfbc:	00030284 	.word	0x00030284

000dbfc0 <opendir>:
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   dbfc0:	b508      	push	{r3, lr}
   dbfc2:	4b02      	ldr	r3, [pc, #8]	; (dbfcc <opendir+0xc>)
   dbfc4:	681b      	ldr	r3, [r3, #0]
   dbfc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dbfc8:	9301      	str	r3, [sp, #4]
   dbfca:	bd08      	pop	{r3, pc}
   dbfcc:	00030284 	.word	0x00030284

000dbfd0 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   dbfd0:	b508      	push	{r3, lr}
   dbfd2:	4b02      	ldr	r3, [pc, #8]	; (dbfdc <readdir+0xc>)
   dbfd4:	681b      	ldr	r3, [r3, #0]
   dbfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dbfd8:	9301      	str	r3, [sp, #4]
   dbfda:	bd08      	pop	{r3, pc}
   dbfdc:	00030284 	.word	0x00030284

000dbfe0 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   dbfe0:	b508      	push	{r3, lr}
   dbfe2:	4b02      	ldr	r3, [pc, #8]	; (dbfec <closedir+0xc>)
   dbfe4:	681b      	ldr	r3, [r3, #0]
   dbfe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dbfe8:	9301      	str	r3, [sp, #4]
   dbfea:	bd08      	pop	{r3, pc}
   dbfec:	00030284 	.word	0x00030284

000dbff0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   dbff0:	b508      	push	{r3, lr}
   dbff2:	4b02      	ldr	r3, [pc, #8]	; (dbffc <hal_usart_init+0xc>)
   dbff4:	681b      	ldr	r3, [r3, #0]
   dbff6:	681b      	ldr	r3, [r3, #0]
   dbff8:	9301      	str	r3, [sp, #4]
   dbffa:	bd08      	pop	{r3, pc}
   dbffc:	0003023c 	.word	0x0003023c

000dc000 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   dc000:	b508      	push	{r3, lr}
   dc002:	4b02      	ldr	r3, [pc, #8]	; (dc00c <hal_usart_end+0xc>)
   dc004:	681b      	ldr	r3, [r3, #0]
   dc006:	689b      	ldr	r3, [r3, #8]
   dc008:	9301      	str	r3, [sp, #4]
   dc00a:	bd08      	pop	{r3, pc}
   dc00c:	0003023c 	.word	0x0003023c

000dc010 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   dc010:	b508      	push	{r3, lr}
   dc012:	4b02      	ldr	r3, [pc, #8]	; (dc01c <hal_usart_write+0xc>)
   dc014:	681b      	ldr	r3, [r3, #0]
   dc016:	68db      	ldr	r3, [r3, #12]
   dc018:	9301      	str	r3, [sp, #4]
   dc01a:	bd08      	pop	{r3, pc}
   dc01c:	0003023c 	.word	0x0003023c

000dc020 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   dc020:	b508      	push	{r3, lr}
   dc022:	4b02      	ldr	r3, [pc, #8]	; (dc02c <hal_usart_available+0xc>)
   dc024:	681b      	ldr	r3, [r3, #0]
   dc026:	691b      	ldr	r3, [r3, #16]
   dc028:	9301      	str	r3, [sp, #4]
   dc02a:	bd08      	pop	{r3, pc}
   dc02c:	0003023c 	.word	0x0003023c

000dc030 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   dc030:	b508      	push	{r3, lr}
   dc032:	4b02      	ldr	r3, [pc, #8]	; (dc03c <hal_usart_read+0xc>)
   dc034:	681b      	ldr	r3, [r3, #0]
   dc036:	695b      	ldr	r3, [r3, #20]
   dc038:	9301      	str	r3, [sp, #4]
   dc03a:	bd08      	pop	{r3, pc}
   dc03c:	0003023c 	.word	0x0003023c

000dc040 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   dc040:	b508      	push	{r3, lr}
   dc042:	4b02      	ldr	r3, [pc, #8]	; (dc04c <hal_usart_peek+0xc>)
   dc044:	681b      	ldr	r3, [r3, #0]
   dc046:	699b      	ldr	r3, [r3, #24]
   dc048:	9301      	str	r3, [sp, #4]
   dc04a:	bd08      	pop	{r3, pc}
   dc04c:	0003023c 	.word	0x0003023c

000dc050 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   dc050:	b508      	push	{r3, lr}
   dc052:	4b02      	ldr	r3, [pc, #8]	; (dc05c <hal_usart_flush+0xc>)
   dc054:	681b      	ldr	r3, [r3, #0]
   dc056:	69db      	ldr	r3, [r3, #28]
   dc058:	9301      	str	r3, [sp, #4]
   dc05a:	bd08      	pop	{r3, pc}
   dc05c:	0003023c 	.word	0x0003023c

000dc060 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   dc060:	b508      	push	{r3, lr}
   dc062:	4b02      	ldr	r3, [pc, #8]	; (dc06c <hal_usart_is_enabled+0xc>)
   dc064:	681b      	ldr	r3, [r3, #0]
   dc066:	6a1b      	ldr	r3, [r3, #32]
   dc068:	9301      	str	r3, [sp, #4]
   dc06a:	bd08      	pop	{r3, pc}
   dc06c:	0003023c 	.word	0x0003023c

000dc070 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   dc070:	b508      	push	{r3, lr}
   dc072:	4b02      	ldr	r3, [pc, #8]	; (dc07c <hal_usart_available_data_for_write+0xc>)
   dc074:	681b      	ldr	r3, [r3, #0]
   dc076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dc078:	9301      	str	r3, [sp, #4]
   dc07a:	bd08      	pop	{r3, pc}
   dc07c:	0003023c 	.word	0x0003023c

000dc080 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   dc080:	b508      	push	{r3, lr}
   dc082:	4b02      	ldr	r3, [pc, #8]	; (dc08c <hal_usart_begin_config+0xc>)
   dc084:	681b      	ldr	r3, [r3, #0]
   dc086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dc088:	9301      	str	r3, [sp, #4]
   dc08a:	bd08      	pop	{r3, pc}
   dc08c:	0003023c 	.word	0x0003023c

000dc090 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   dc090:	b508      	push	{r3, lr}
   dc092:	4b02      	ldr	r3, [pc, #8]	; (dc09c <HAL_USB_USART_Init+0xc>)
   dc094:	681b      	ldr	r3, [r3, #0]
   dc096:	681b      	ldr	r3, [r3, #0]
   dc098:	9301      	str	r3, [sp, #4]
   dc09a:	bd08      	pop	{r3, pc}
   dc09c:	0003024c 	.word	0x0003024c

000dc0a0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   dc0a0:	b508      	push	{r3, lr}
   dc0a2:	4b02      	ldr	r3, [pc, #8]	; (dc0ac <HAL_USB_USART_Begin+0xc>)
   dc0a4:	681b      	ldr	r3, [r3, #0]
   dc0a6:	685b      	ldr	r3, [r3, #4]
   dc0a8:	9301      	str	r3, [sp, #4]
   dc0aa:	bd08      	pop	{r3, pc}
   dc0ac:	0003024c 	.word	0x0003024c

000dc0b0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   dc0b0:	b508      	push	{r3, lr}
   dc0b2:	4b02      	ldr	r3, [pc, #8]	; (dc0bc <HAL_USB_USART_End+0xc>)
   dc0b4:	681b      	ldr	r3, [r3, #0]
   dc0b6:	689b      	ldr	r3, [r3, #8]
   dc0b8:	9301      	str	r3, [sp, #4]
   dc0ba:	bd08      	pop	{r3, pc}
   dc0bc:	0003024c 	.word	0x0003024c

000dc0c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   dc0c0:	b508      	push	{r3, lr}
   dc0c2:	4b02      	ldr	r3, [pc, #8]	; (dc0cc <HAL_USB_USART_Available_Data+0xc>)
   dc0c4:	681b      	ldr	r3, [r3, #0]
   dc0c6:	691b      	ldr	r3, [r3, #16]
   dc0c8:	9301      	str	r3, [sp, #4]
   dc0ca:	bd08      	pop	{r3, pc}
   dc0cc:	0003024c 	.word	0x0003024c

000dc0d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   dc0d0:	b508      	push	{r3, lr}
   dc0d2:	4b02      	ldr	r3, [pc, #8]	; (dc0dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   dc0d4:	681b      	ldr	r3, [r3, #0]
   dc0d6:	695b      	ldr	r3, [r3, #20]
   dc0d8:	9301      	str	r3, [sp, #4]
   dc0da:	bd08      	pop	{r3, pc}
   dc0dc:	0003024c 	.word	0x0003024c

000dc0e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   dc0e0:	b508      	push	{r3, lr}
   dc0e2:	4b02      	ldr	r3, [pc, #8]	; (dc0ec <HAL_USB_USART_Receive_Data+0xc>)
   dc0e4:	681b      	ldr	r3, [r3, #0]
   dc0e6:	699b      	ldr	r3, [r3, #24]
   dc0e8:	9301      	str	r3, [sp, #4]
   dc0ea:	bd08      	pop	{r3, pc}
   dc0ec:	0003024c 	.word	0x0003024c

000dc0f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   dc0f0:	b508      	push	{r3, lr}
   dc0f2:	4b02      	ldr	r3, [pc, #8]	; (dc0fc <HAL_USB_USART_Send_Data+0xc>)
   dc0f4:	681b      	ldr	r3, [r3, #0]
   dc0f6:	69db      	ldr	r3, [r3, #28]
   dc0f8:	9301      	str	r3, [sp, #4]
   dc0fa:	bd08      	pop	{r3, pc}
   dc0fc:	0003024c 	.word	0x0003024c

000dc100 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   dc100:	b508      	push	{r3, lr}
   dc102:	4b02      	ldr	r3, [pc, #8]	; (dc10c <HAL_USB_USART_Flush_Data+0xc>)
   dc104:	681b      	ldr	r3, [r3, #0]
   dc106:	6a1b      	ldr	r3, [r3, #32]
   dc108:	9301      	str	r3, [sp, #4]
   dc10a:	bd08      	pop	{r3, pc}
   dc10c:	0003024c 	.word	0x0003024c

000dc110 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   dc110:	b508      	push	{r3, lr}
   dc112:	4b02      	ldr	r3, [pc, #8]	; (dc11c <panic_+0xc>)
   dc114:	681b      	ldr	r3, [r3, #0]
   dc116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dc118:	9301      	str	r3, [sp, #4]
   dc11a:	bd08      	pop	{r3, pc}
   dc11c:	00030260 	.word	0x00030260

000dc120 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   dc120:	b508      	push	{r3, lr}
   dc122:	4b02      	ldr	r3, [pc, #8]	; (dc12c <jsmn_init+0xc>)
   dc124:	681b      	ldr	r3, [r3, #0]
   dc126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dc128:	9301      	str	r3, [sp, #4]
   dc12a:	bd08      	pop	{r3, pc}
   dc12c:	00030260 	.word	0x00030260

000dc130 <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   dc130:	b508      	push	{r3, lr}
   dc132:	4b02      	ldr	r3, [pc, #8]	; (dc13c <jsmn_parse_deprecated+0xc>)
   dc134:	681b      	ldr	r3, [r3, #0]
   dc136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dc138:	9301      	str	r3, [sp, #4]
   dc13a:	bd08      	pop	{r3, pc}
   dc13c:	00030260 	.word	0x00030260

000dc140 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   dc140:	b508      	push	{r3, lr}
   dc142:	4b02      	ldr	r3, [pc, #8]	; (dc14c <log_message+0xc>)
   dc144:	681b      	ldr	r3, [r3, #0]
   dc146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dc148:	9301      	str	r3, [sp, #4]
   dc14a:	bd08      	pop	{r3, pc}
   dc14c:	00030260 	.word	0x00030260

000dc150 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   dc150:	b508      	push	{r3, lr}
   dc152:	4b02      	ldr	r3, [pc, #8]	; (dc15c <log_message_v+0xc>)
   dc154:	681b      	ldr	r3, [r3, #0]
   dc156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dc158:	9301      	str	r3, [sp, #4]
   dc15a:	bd08      	pop	{r3, pc}
   dc15c:	00030260 	.word	0x00030260

000dc160 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   dc160:	b508      	push	{r3, lr}
   dc162:	4b02      	ldr	r3, [pc, #8]	; (dc16c <log_write+0xc>)
   dc164:	681b      	ldr	r3, [r3, #0]
   dc166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dc168:	9301      	str	r3, [sp, #4]
   dc16a:	bd08      	pop	{r3, pc}
   dc16c:	00030260 	.word	0x00030260

000dc170 <log_level_name>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   dc170:	b508      	push	{r3, lr}
   dc172:	4b02      	ldr	r3, [pc, #8]	; (dc17c <log_level_name+0xc>)
   dc174:	681b      	ldr	r3, [r3, #0]
   dc176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dc178:	9301      	str	r3, [sp, #4]
   dc17a:	bd08      	pop	{r3, pc}
   dc17c:	00030260 	.word	0x00030260

000dc180 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   dc180:	b508      	push	{r3, lr}
   dc182:	4b02      	ldr	r3, [pc, #8]	; (dc18c <log_set_callbacks+0xc>)
   dc184:	681b      	ldr	r3, [r3, #0]
   dc186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   dc188:	9301      	str	r3, [sp, #4]
   dc18a:	bd08      	pop	{r3, pc}
   dc18c:	00030260 	.word	0x00030260

000dc190 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   dc190:	b508      	push	{r3, lr}
   dc192:	4b03      	ldr	r3, [pc, #12]	; (dc1a0 <diag_get_source+0x10>)
   dc194:	681b      	ldr	r3, [r3, #0]
   dc196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   dc19a:	9301      	str	r3, [sp, #4]
   dc19c:	bd08      	pop	{r3, pc}
   dc19e:	0000      	.short	0x0000
   dc1a0:	00030260 	.word	0x00030260

000dc1a4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   dc1a4:	b508      	push	{r3, lr}
   dc1a6:	4b02      	ldr	r3, [pc, #8]	; (dc1b0 <system_mode+0xc>)
   dc1a8:	681b      	ldr	r3, [r3, #0]
   dc1aa:	681b      	ldr	r3, [r3, #0]
   dc1ac:	9301      	str	r3, [sp, #4]
   dc1ae:	bd08      	pop	{r3, pc}
   dc1b0:	00030220 	.word	0x00030220

000dc1b4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   dc1b4:	b508      	push	{r3, lr}
   dc1b6:	4b02      	ldr	r3, [pc, #8]	; (dc1c0 <set_system_mode+0xc>)
   dc1b8:	681b      	ldr	r3, [r3, #0]
   dc1ba:	685b      	ldr	r3, [r3, #4]
   dc1bc:	9301      	str	r3, [sp, #4]
   dc1be:	bd08      	pop	{r3, pc}
   dc1c0:	00030220 	.word	0x00030220

000dc1c4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   dc1c4:	b508      	push	{r3, lr}
   dc1c6:	4b02      	ldr	r3, [pc, #8]	; (dc1d0 <system_delay_ms+0xc>)
   dc1c8:	681b      	ldr	r3, [r3, #0]
   dc1ca:	695b      	ldr	r3, [r3, #20]
   dc1cc:	9301      	str	r3, [sp, #4]
   dc1ce:	bd08      	pop	{r3, pc}
   dc1d0:	00030220 	.word	0x00030220

000dc1d4 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   dc1d4:	b508      	push	{r3, lr}
   dc1d6:	4b02      	ldr	r3, [pc, #8]	; (dc1e0 <system_subscribe_event+0xc>)
   dc1d8:	681b      	ldr	r3, [r3, #0]
   dc1da:	6a1b      	ldr	r3, [r3, #32]
   dc1dc:	9301      	str	r3, [sp, #4]
   dc1de:	bd08      	pop	{r3, pc}
   dc1e0:	00030220 	.word	0x00030220

000dc1e4 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   dc1e4:	b508      	push	{r3, lr}
   dc1e6:	4b02      	ldr	r3, [pc, #8]	; (dc1f0 <system_thread_set_state+0xc>)
   dc1e8:	681b      	ldr	r3, [r3, #0]
   dc1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dc1ec:	9301      	str	r3, [sp, #4]
   dc1ee:	bd08      	pop	{r3, pc}
   dc1f0:	00030220 	.word	0x00030220

000dc1f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   dc1f4:	b508      	push	{r3, lr}
   dc1f6:	4b02      	ldr	r3, [pc, #8]	; (dc200 <application_thread_current+0xc>)
   dc1f8:	681b      	ldr	r3, [r3, #0]
   dc1fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dc1fc:	9301      	str	r3, [sp, #4]
   dc1fe:	bd08      	pop	{r3, pc}
   dc200:	00030220 	.word	0x00030220

000dc204 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   dc204:	b508      	push	{r3, lr}
   dc206:	4b02      	ldr	r3, [pc, #8]	; (dc210 <application_thread_invoke+0xc>)
   dc208:	681b      	ldr	r3, [r3, #0]
   dc20a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dc20c:	9301      	str	r3, [sp, #4]
   dc20e:	bd08      	pop	{r3, pc}
   dc210:	00030220 	.word	0x00030220

000dc214 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   dc214:	b508      	push	{r3, lr}
   dc216:	4b02      	ldr	r3, [pc, #8]	; (dc220 <system_thread_get_state+0xc>)
   dc218:	681b      	ldr	r3, [r3, #0]
   dc21a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dc21c:	9301      	str	r3, [sp, #4]
   dc21e:	bd08      	pop	{r3, pc}
   dc220:	00030220 	.word	0x00030220

000dc224 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   dc224:	b508      	push	{r3, lr}
   dc226:	4b02      	ldr	r3, [pc, #8]	; (dc230 <system_notify_time_changed+0xc>)
   dc228:	681b      	ldr	r3, [r3, #0]
   dc22a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dc22c:	9301      	str	r3, [sp, #4]
   dc22e:	bd08      	pop	{r3, pc}
   dc230:	00030220 	.word	0x00030220

000dc234 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   dc234:	b508      	push	{r3, lr}
   dc236:	4b03      	ldr	r3, [pc, #12]	; (dc244 <system_ctrl_set_app_request_handler+0x10>)
   dc238:	681b      	ldr	r3, [r3, #0]
   dc23a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   dc23e:	9301      	str	r3, [sp, #4]
   dc240:	bd08      	pop	{r3, pc}
   dc242:	0000      	.short	0x0000
   dc244:	00030220 	.word	0x00030220

000dc248 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   dc248:	b508      	push	{r3, lr}
   dc24a:	4b03      	ldr	r3, [pc, #12]	; (dc258 <system_ctrl_set_result+0x10>)
   dc24c:	681b      	ldr	r3, [r3, #0]
   dc24e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   dc252:	9301      	str	r3, [sp, #4]
   dc254:	bd08      	pop	{r3, pc}
   dc256:	0000      	.short	0x0000
   dc258:	00030220 	.word	0x00030220

000dc25c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   dc25c:	b508      	push	{r3, lr}
   dc25e:	4b03      	ldr	r3, [pc, #12]	; (dc26c <system_sleep_ext+0x10>)
   dc260:	681b      	ldr	r3, [r3, #0]
   dc262:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   dc266:	9301      	str	r3, [sp, #4]
   dc268:	bd08      	pop	{r3, pc}
   dc26a:	0000      	.short	0x0000
   dc26c:	00030220 	.word	0x00030220

000dc270 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   dc270:	b508      	push	{r3, lr}
   dc272:	4b02      	ldr	r3, [pc, #8]	; (dc27c <spark_variable+0xc>)
   dc274:	681b      	ldr	r3, [r3, #0]
   dc276:	681b      	ldr	r3, [r3, #0]
   dc278:	9301      	str	r3, [sp, #4]
   dc27a:	bd08      	pop	{r3, pc}
   dc27c:	00030244 	.word	0x00030244

000dc280 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   dc280:	b508      	push	{r3, lr}
   dc282:	4b02      	ldr	r3, [pc, #8]	; (dc28c <spark_function+0xc>)
   dc284:	681b      	ldr	r3, [r3, #0]
   dc286:	685b      	ldr	r3, [r3, #4]
   dc288:	9301      	str	r3, [sp, #4]
   dc28a:	bd08      	pop	{r3, pc}
   dc28c:	00030244 	.word	0x00030244

000dc290 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   dc290:	b508      	push	{r3, lr}
   dc292:	4b02      	ldr	r3, [pc, #8]	; (dc29c <spark_process+0xc>)
   dc294:	681b      	ldr	r3, [r3, #0]
   dc296:	689b      	ldr	r3, [r3, #8]
   dc298:	9301      	str	r3, [sp, #4]
   dc29a:	bd08      	pop	{r3, pc}
   dc29c:	00030244 	.word	0x00030244

000dc2a0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   dc2a0:	b508      	push	{r3, lr}
   dc2a2:	4b02      	ldr	r3, [pc, #8]	; (dc2ac <spark_cloud_flag_connect+0xc>)
   dc2a4:	681b      	ldr	r3, [r3, #0]
   dc2a6:	68db      	ldr	r3, [r3, #12]
   dc2a8:	9301      	str	r3, [sp, #4]
   dc2aa:	bd08      	pop	{r3, pc}
   dc2ac:	00030244 	.word	0x00030244

000dc2b0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   dc2b0:	b508      	push	{r3, lr}
   dc2b2:	4b02      	ldr	r3, [pc, #8]	; (dc2bc <spark_cloud_flag_connected+0xc>)
   dc2b4:	681b      	ldr	r3, [r3, #0]
   dc2b6:	695b      	ldr	r3, [r3, #20]
   dc2b8:	9301      	str	r3, [sp, #4]
   dc2ba:	bd08      	pop	{r3, pc}
   dc2bc:	00030244 	.word	0x00030244

000dc2c0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   dc2c0:	b508      	push	{r3, lr}
   dc2c2:	4b02      	ldr	r3, [pc, #8]	; (dc2cc <spark_send_event+0xc>)
   dc2c4:	681b      	ldr	r3, [r3, #0]
   dc2c6:	6a1b      	ldr	r3, [r3, #32]
   dc2c8:	9301      	str	r3, [sp, #4]
   dc2ca:	bd08      	pop	{r3, pc}
   dc2cc:	00030244 	.word	0x00030244

000dc2d0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   dc2d0:	b508      	push	{r3, lr}
   dc2d2:	4b02      	ldr	r3, [pc, #8]	; (dc2dc <spark_sync_time_pending+0xc>)
   dc2d4:	681b      	ldr	r3, [r3, #0]
   dc2d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dc2d8:	9301      	str	r3, [sp, #4]
   dc2da:	bd08      	pop	{r3, pc}
   dc2dc:	00030244 	.word	0x00030244

000dc2e0 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   dc2e0:	b508      	push	{r3, lr}
   dc2e2:	4b02      	ldr	r3, [pc, #8]	; (dc2ec <spark_sync_time_last+0xc>)
   dc2e4:	681b      	ldr	r3, [r3, #0]
   dc2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dc2e8:	9301      	str	r3, [sp, #4]
   dc2ea:	bd08      	pop	{r3, pc}
   dc2ec:	00030244 	.word	0x00030244

000dc2f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   dc2f0:	b508      	push	{r3, lr}
   dc2f2:	4b02      	ldr	r3, [pc, #8]	; (dc2fc <spark_set_random_seed_from_cloud_handler+0xc>)
   dc2f4:	681b      	ldr	r3, [r3, #0]
   dc2f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dc2f8:	9301      	str	r3, [sp, #4]
   dc2fa:	bd08      	pop	{r3, pc}
   dc2fc:	00030244 	.word	0x00030244

000dc300 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   dc300:	b508      	push	{r3, lr}
   dc302:	4b02      	ldr	r3, [pc, #8]	; (dc30c <spark_cloud_disconnect+0xc>)
   dc304:	681b      	ldr	r3, [r3, #0]
   dc306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dc308:	9301      	str	r3, [sp, #4]
   dc30a:	bd08      	pop	{r3, pc}
   dc30c:	00030244 	.word	0x00030244

000dc310 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   dc310:	b508      	push	{r3, lr}
   dc312:	4b02      	ldr	r3, [pc, #8]	; (dc31c <network_connect+0xc>)
   dc314:	681b      	ldr	r3, [r3, #0]
   dc316:	685b      	ldr	r3, [r3, #4]
   dc318:	9301      	str	r3, [sp, #4]
   dc31a:	bd08      	pop	{r3, pc}
   dc31c:	00030240 	.word	0x00030240

000dc320 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   dc320:	b508      	push	{r3, lr}
   dc322:	4b02      	ldr	r3, [pc, #8]	; (dc32c <network_connecting+0xc>)
   dc324:	681b      	ldr	r3, [r3, #0]
   dc326:	689b      	ldr	r3, [r3, #8]
   dc328:	9301      	str	r3, [sp, #4]
   dc32a:	bd08      	pop	{r3, pc}
   dc32c:	00030240 	.word	0x00030240

000dc330 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   dc330:	b508      	push	{r3, lr}
   dc332:	4b02      	ldr	r3, [pc, #8]	; (dc33c <network_disconnect+0xc>)
   dc334:	681b      	ldr	r3, [r3, #0]
   dc336:	68db      	ldr	r3, [r3, #12]
   dc338:	9301      	str	r3, [sp, #4]
   dc33a:	bd08      	pop	{r3, pc}
   dc33c:	00030240 	.word	0x00030240

000dc340 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   dc340:	b508      	push	{r3, lr}
   dc342:	4b02      	ldr	r3, [pc, #8]	; (dc34c <network_ready+0xc>)
   dc344:	681b      	ldr	r3, [r3, #0]
   dc346:	691b      	ldr	r3, [r3, #16]
   dc348:	9301      	str	r3, [sp, #4]
   dc34a:	bd08      	pop	{r3, pc}
   dc34c:	00030240 	.word	0x00030240

000dc350 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   dc350:	b508      	push	{r3, lr}
   dc352:	4b02      	ldr	r3, [pc, #8]	; (dc35c <network_on+0xc>)
   dc354:	681b      	ldr	r3, [r3, #0]
   dc356:	695b      	ldr	r3, [r3, #20]
   dc358:	9301      	str	r3, [sp, #4]
   dc35a:	bd08      	pop	{r3, pc}
   dc35c:	00030240 	.word	0x00030240

000dc360 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   dc360:	b508      	push	{r3, lr}
   dc362:	4b02      	ldr	r3, [pc, #8]	; (dc36c <network_off+0xc>)
   dc364:	681b      	ldr	r3, [r3, #0]
   dc366:	699b      	ldr	r3, [r3, #24]
   dc368:	9301      	str	r3, [sp, #4]
   dc36a:	bd08      	pop	{r3, pc}
   dc36c:	00030240 	.word	0x00030240

000dc370 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   dc370:	b508      	push	{r3, lr}
   dc372:	4b02      	ldr	r3, [pc, #8]	; (dc37c <network_listen+0xc>)
   dc374:	681b      	ldr	r3, [r3, #0]
   dc376:	69db      	ldr	r3, [r3, #28]
   dc378:	9301      	str	r3, [sp, #4]
   dc37a:	bd08      	pop	{r3, pc}
   dc37c:	00030240 	.word	0x00030240

000dc380 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   dc380:	b508      	push	{r3, lr}
   dc382:	4b02      	ldr	r3, [pc, #8]	; (dc38c <network_listening+0xc>)
   dc384:	681b      	ldr	r3, [r3, #0]
   dc386:	6a1b      	ldr	r3, [r3, #32]
   dc388:	9301      	str	r3, [sp, #4]
   dc38a:	bd08      	pop	{r3, pc}
   dc38c:	00030240 	.word	0x00030240

000dc390 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   dc390:	b508      	push	{r3, lr}
   dc392:	4b02      	ldr	r3, [pc, #8]	; (dc39c <network_set_listen_timeout+0xc>)
   dc394:	681b      	ldr	r3, [r3, #0]
   dc396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dc398:	9301      	str	r3, [sp, #4]
   dc39a:	bd08      	pop	{r3, pc}
   dc39c:	00030240 	.word	0x00030240

000dc3a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   dc3a0:	b508      	push	{r3, lr}
   dc3a2:	4b02      	ldr	r3, [pc, #8]	; (dc3ac <network_get_listen_timeout+0xc>)
   dc3a4:	681b      	ldr	r3, [r3, #0]
   dc3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dc3a8:	9301      	str	r3, [sp, #4]
   dc3aa:	bd08      	pop	{r3, pc}
   dc3ac:	00030240 	.word	0x00030240

000dc3b0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   dc3b0:	b508      	push	{r3, lr}
   dc3b2:	4b02      	ldr	r3, [pc, #8]	; (dc3bc <network_is_on+0xc>)
   dc3b4:	681b      	ldr	r3, [r3, #0]
   dc3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dc3b8:	9301      	str	r3, [sp, #4]
   dc3ba:	bd08      	pop	{r3, pc}
   dc3bc:	00030240 	.word	0x00030240

000dc3c0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   dc3c0:	b508      	push	{r3, lr}
   dc3c2:	4b02      	ldr	r3, [pc, #8]	; (dc3cc <network_is_off+0xc>)
   dc3c4:	681b      	ldr	r3, [r3, #0]
   dc3c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dc3c8:	9301      	str	r3, [sp, #4]
   dc3ca:	bd08      	pop	{r3, pc}
   dc3cc:	00030240 	.word	0x00030240

000dc3d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   dc3d0:	b508      	push	{r3, lr}
   dc3d2:	4b02      	ldr	r3, [pc, #8]	; (dc3dc <malloc+0xc>)
   dc3d4:	681b      	ldr	r3, [r3, #0]
   dc3d6:	681b      	ldr	r3, [r3, #0]
   dc3d8:	9301      	str	r3, [sp, #4]
   dc3da:	bd08      	pop	{r3, pc}
   dc3dc:	0003021c 	.word	0x0003021c

000dc3e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   dc3e0:	b508      	push	{r3, lr}
   dc3e2:	4b02      	ldr	r3, [pc, #8]	; (dc3ec <free+0xc>)
   dc3e4:	681b      	ldr	r3, [r3, #0]
   dc3e6:	685b      	ldr	r3, [r3, #4]
   dc3e8:	9301      	str	r3, [sp, #4]
   dc3ea:	bd08      	pop	{r3, pc}
   dc3ec:	0003021c 	.word	0x0003021c

000dc3f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   dc3f0:	b508      	push	{r3, lr}
   dc3f2:	4b02      	ldr	r3, [pc, #8]	; (dc3fc <realloc+0xc>)
   dc3f4:	681b      	ldr	r3, [r3, #0]
   dc3f6:	689b      	ldr	r3, [r3, #8]
   dc3f8:	9301      	str	r3, [sp, #4]
   dc3fa:	bd08      	pop	{r3, pc}
   dc3fc:	0003021c 	.word	0x0003021c

000dc400 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   dc400:	b508      	push	{r3, lr}
   dc402:	4b02      	ldr	r3, [pc, #8]	; (dc40c <siprintf+0xc>)
   dc404:	681b      	ldr	r3, [r3, #0]
   dc406:	691b      	ldr	r3, [r3, #16]
   dc408:	9301      	str	r3, [sp, #4]
   dc40a:	bd08      	pop	{r3, pc}
   dc40c:	0003021c 	.word	0x0003021c

000dc410 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   dc410:	b508      	push	{r3, lr}
   dc412:	4b02      	ldr	r3, [pc, #8]	; (dc41c <sscanf+0xc>)
   dc414:	681b      	ldr	r3, [r3, #0]
   dc416:	695b      	ldr	r3, [r3, #20]
   dc418:	9301      	str	r3, [sp, #4]
   dc41a:	bd08      	pop	{r3, pc}
   dc41c:	0003021c 	.word	0x0003021c

000dc420 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   dc420:	b508      	push	{r3, lr}
   dc422:	4b02      	ldr	r3, [pc, #8]	; (dc42c <snprintf+0xc>)
   dc424:	681b      	ldr	r3, [r3, #0]
   dc426:	69db      	ldr	r3, [r3, #28]
   dc428:	9301      	str	r3, [sp, #4]
   dc42a:	bd08      	pop	{r3, pc}
   dc42c:	0003021c 	.word	0x0003021c

000dc430 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   dc430:	b508      	push	{r3, lr}
   dc432:	4b02      	ldr	r3, [pc, #8]	; (dc43c <vsnprintf+0xc>)
   dc434:	681b      	ldr	r3, [r3, #0]
   dc436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dc438:	9301      	str	r3, [sp, #4]
   dc43a:	bd08      	pop	{r3, pc}
   dc43c:	0003021c 	.word	0x0003021c

000dc440 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   dc440:	b508      	push	{r3, lr}
   dc442:	4b02      	ldr	r3, [pc, #8]	; (dc44c <abort+0xc>)
   dc444:	681b      	ldr	r3, [r3, #0]
   dc446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dc448:	9301      	str	r3, [sp, #4]
   dc44a:	bd08      	pop	{r3, pc}
   dc44c:	0003021c 	.word	0x0003021c

000dc450 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   dc450:	b508      	push	{r3, lr}
   dc452:	4b02      	ldr	r3, [pc, #8]	; (dc45c <_malloc_r+0xc>)
   dc454:	681b      	ldr	r3, [r3, #0]
   dc456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dc458:	9301      	str	r3, [sp, #4]
   dc45a:	bd08      	pop	{r3, pc}
   dc45c:	0003021c 	.word	0x0003021c

000dc460 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   dc460:	b508      	push	{r3, lr}
   dc462:	4b02      	ldr	r3, [pc, #8]	; (dc46c <__errno+0xc>)
   dc464:	681b      	ldr	r3, [r3, #0]
   dc466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dc468:	9301      	str	r3, [sp, #4]
   dc46a:	bd08      	pop	{r3, pc}
   dc46c:	0003021c 	.word	0x0003021c

000dc470 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   dc470:	b508      	push	{r3, lr}
   dc472:	4b02      	ldr	r3, [pc, #8]	; (dc47c <newlib_impure_ptr_callback+0xc>)
   dc474:	681b      	ldr	r3, [r3, #0]
   dc476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dc478:	9301      	str	r3, [sp, #4]
   dc47a:	bd08      	pop	{r3, pc}
   dc47c:	0003021c 	.word	0x0003021c

000dc480 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   dc480:	b508      	push	{r3, lr}
   dc482:	4b02      	ldr	r3, [pc, #8]	; (dc48c <strftime+0xc>)
   dc484:	681b      	ldr	r3, [r3, #0]
   dc486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dc488:	9301      	str	r3, [sp, #4]
   dc48a:	bd08      	pop	{r3, pc}
   dc48c:	0003021c 	.word	0x0003021c

000dc490 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   dc490:	b508      	push	{r3, lr}
   dc492:	4b02      	ldr	r3, [pc, #8]	; (dc49c <localtime_r+0xc>)
   dc494:	681b      	ldr	r3, [r3, #0]
   dc496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dc498:	9301      	str	r3, [sp, #4]
   dc49a:	bd08      	pop	{r3, pc}
   dc49c:	0003021c 	.word	0x0003021c

000dc4a0 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   dc4a0:	b508      	push	{r3, lr}
   dc4a2:	4b02      	ldr	r3, [pc, #8]	; (dc4ac <gmtime_r+0xc>)
   dc4a4:	681b      	ldr	r3, [r3, #0]
   dc4a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dc4a8:	9301      	str	r3, [sp, #4]
   dc4aa:	bd08      	pop	{r3, pc}
   dc4ac:	0003021c 	.word	0x0003021c

000dc4b0 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   dc4b0:	b508      	push	{r3, lr}
   dc4b2:	4b02      	ldr	r3, [pc, #8]	; (dc4bc <mktime+0xc>)
   dc4b4:	681b      	ldr	r3, [r3, #0]
   dc4b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dc4b8:	9301      	str	r3, [sp, #4]
   dc4ba:	bd08      	pop	{r3, pc}
   dc4bc:	0003021c 	.word	0x0003021c

000dc4c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   dc4c0:	2100      	movs	r1, #0
   dc4c2:	f7ff be7f 	b.w	dc1c4 <system_delay_ms>

000dc4c6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dc4c6:	b510      	push	{r4, lr}
      if (_M_empty())
   dc4c8:	6883      	ldr	r3, [r0, #8]
   dc4ca:	4604      	mov	r4, r0
   dc4cc:	b90b      	cbnz	r3, dc4d2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dc4ce:	f002 ffdd 	bl	df48c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc4d2:	68c3      	ldr	r3, [r0, #12]
   dc4d4:	4798      	blx	r3
      if (_M_manager)
   dc4d6:	68a3      	ldr	r3, [r4, #8]
   dc4d8:	b11b      	cbz	r3, dc4e2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dc4da:	2203      	movs	r2, #3
   dc4dc:	4621      	mov	r1, r4
   dc4de:	4620      	mov	r0, r4
   dc4e0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dc4e2:	4620      	mov	r0, r4
   dc4e4:	2110      	movs	r1, #16
}
   dc4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   dc4ea:	f002 bfc3 	b.w	df474 <_ZdlPvj>
	...

000dc4f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dc4f0:	4802      	ldr	r0, [pc, #8]	; (dc4fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   dc4f2:	2300      	movs	r3, #0
   dc4f4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   dc4f6:	f7ff bbe3 	b.w	dbcc0 <os_mutex_recursive_create>
   dc4fa:	bf00      	nop
   dc4fc:	2003e534 	.word	0x2003e534

000dc500 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   dc500:	2200      	movs	r2, #0
   dc502:	6840      	ldr	r0, [r0, #4]
   dc504:	4611      	mov	r1, r2
   dc506:	f7ff bf1b 	b.w	dc340 <network_ready>

000dc50a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   dc50a:	2200      	movs	r2, #0
   dc50c:	6840      	ldr	r0, [r0, #4]
   dc50e:	4611      	mov	r1, r2
   dc510:	f7ff bf36 	b.w	dc380 <network_listening>

000dc514 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   dc514:	2200      	movs	r2, #0
   dc516:	6840      	ldr	r0, [r0, #4]
   dc518:	4611      	mov	r1, r2
   dc51a:	f7ff bf41 	b.w	dc3a0 <network_get_listen_timeout>

000dc51e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dc51e:	6840      	ldr	r0, [r0, #4]
   dc520:	2200      	movs	r2, #0
   dc522:	f7ff bf35 	b.w	dc390 <network_set_listen_timeout>

000dc526 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   dc526:	6840      	ldr	r0, [r0, #4]
   dc528:	2200      	movs	r2, #0
   dc52a:	f081 0101 	eor.w	r1, r1, #1
   dc52e:	f7ff bf1f 	b.w	dc370 <network_listen>

000dc532 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   dc532:	2300      	movs	r3, #0
   dc534:	6840      	ldr	r0, [r0, #4]
   dc536:	461a      	mov	r2, r3
   dc538:	4619      	mov	r1, r3
   dc53a:	f7ff bf11 	b.w	dc360 <network_off>

000dc53e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   dc53e:	2300      	movs	r3, #0
   dc540:	6840      	ldr	r0, [r0, #4]
   dc542:	461a      	mov	r2, r3
   dc544:	4619      	mov	r1, r3
   dc546:	f7ff bf03 	b.w	dc350 <network_on>

000dc54a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   dc54a:	2200      	movs	r2, #0
   dc54c:	6840      	ldr	r0, [r0, #4]
   dc54e:	4611      	mov	r1, r2
   dc550:	f7ff bee6 	b.w	dc320 <network_connecting>

000dc554 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dc554:	6840      	ldr	r0, [r0, #4]
   dc556:	2200      	movs	r2, #0
   dc558:	2102      	movs	r1, #2
   dc55a:	f7ff bee9 	b.w	dc330 <network_disconnect>

000dc55e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   dc55e:	2300      	movs	r3, #0
   dc560:	6840      	ldr	r0, [r0, #4]
   dc562:	461a      	mov	r2, r3
   dc564:	f7ff bed4 	b.w	dc310 <network_connect>

000dc568 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   dc568:	4b08      	ldr	r3, [pc, #32]	; (dc58c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   dc56a:	b510      	push	{r4, lr}
   dc56c:	2428      	movs	r4, #40	; 0x28
   dc56e:	4622      	mov	r2, r4
   dc570:	4618      	mov	r0, r3
   dc572:	2100      	movs	r1, #0
   dc574:	f003 fd36 	bl	dffe4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   dc578:	4b05      	ldr	r3, [pc, #20]	; (dc590 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   dc57a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   dc57c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc580:	6042      	str	r2, [r0, #4]
   dc582:	2204      	movs	r2, #4
   dc584:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   dc586:	4a03      	ldr	r2, [pc, #12]	; (dc594 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   dc588:	601a      	str	r2, [r3, #0]
   dc58a:	bd10      	pop	{r4, pc}
   dc58c:	2003e540 	.word	0x2003e540
   dc590:	2003e538 	.word	0x2003e538
   dc594:	000e2c3c 	.word	0x000e2c3c

000dc598 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dc598:	4770      	bx	lr

000dc59a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   dc59a:	2000      	movs	r0, #0
   dc59c:	4770      	bx	lr

000dc59e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dc59e:	b510      	push	{r4, lr}
   dc5a0:	2110      	movs	r1, #16
   dc5a2:	4604      	mov	r4, r0
   dc5a4:	f002 ff66 	bl	df474 <_ZdlPvj>
   dc5a8:	4620      	mov	r0, r4
   dc5aa:	bd10      	pop	{r4, pc}

000dc5ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   dc5ac:	b508      	push	{r3, lr}
      { delete this; }
   dc5ae:	f7ff fff6 	bl	dc59e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dc5b2:	bd08      	pop	{r3, pc}

000dc5b4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dc5b4:	b530      	push	{r4, r5, lr}
        type_(type) {
   dc5b6:	2200      	movs	r2, #0
   dc5b8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   dc5bc:	6002      	str	r2, [r0, #0]
   dc5be:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   dc5c0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dc5c2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   dc5c4:	680c      	ldr	r4, [r1, #0]
   dc5c6:	8085      	strh	r5, [r0, #4]
   dc5c8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dc5ca:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   dc5cc:	bd30      	pop	{r4, r5, pc}

000dc5ce <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dc5ce:	b510      	push	{r4, lr}
   dc5d0:	4604      	mov	r4, r0
    free((void*)msg_);
   dc5d2:	6800      	ldr	r0, [r0, #0]
   dc5d4:	f7ff ff04 	bl	dc3e0 <free>
}
   dc5d8:	4620      	mov	r0, r4
   dc5da:	bd10      	pop	{r4, pc}

000dc5dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   dc5dc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dc5de:	68c4      	ldr	r4, [r0, #12]
   dc5e0:	b1f4      	cbz	r4, dc620 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   dc5e2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dc5e4:	2b02      	cmp	r3, #2
   dc5e6:	d103      	bne.n	dc5f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dc5e8:	f104 000c 	add.w	r0, r4, #12
   dc5ec:	f7ff ffef 	bl	dc5ce <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   dc5f0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   dc5f2:	b135      	cbz	r5, dc602 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   dc5f4:	4628      	mov	r0, r5
   dc5f6:	f7f8 fd71 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   dc5fa:	2110      	movs	r1, #16
   dc5fc:	4628      	mov	r0, r5
   dc5fe:	f002 ff39 	bl	df474 <_ZdlPvj>
   dc602:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dc604:	b135      	cbz	r5, dc614 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dc606:	4628      	mov	r0, r5
   dc608:	f7f8 fd68 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
   dc60c:	2110      	movs	r1, #16
   dc60e:	4628      	mov	r0, r5
   dc610:	f002 ff30 	bl	df474 <_ZdlPvj>
   dc614:	4620      	mov	r0, r4
   dc616:	2114      	movs	r1, #20
   dc618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc61c:	f002 bf2a 	b.w	df474 <_ZdlPvj>
   dc620:	bd38      	pop	{r3, r4, r5, pc}

000dc622 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   dc622:	b510      	push	{r4, lr}
   dc624:	b088      	sub	sp, #32
   dc626:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   dc628:	4668      	mov	r0, sp
   dc62a:	f002 f970 	bl	de90e <_ZN6StringC1EPKc>
    return (*fn)(p);
   dc62e:	4669      	mov	r1, sp
   dc630:	a804      	add	r0, sp, #16
   dc632:	f002 f9b7 	bl	de9a4 <_ZN6StringC1ERKS_>
   dc636:	a804      	add	r0, sp, #16
   dc638:	47a0      	blx	r4
   dc63a:	4604      	mov	r4, r0
   dc63c:	a804      	add	r0, sp, #16
   dc63e:	f002 f91b 	bl	de878 <_ZN6StringD1Ev>
    String p(param);
   dc642:	4668      	mov	r0, sp
   dc644:	f002 f918 	bl	de878 <_ZN6StringD1Ev>
}
   dc648:	4620      	mov	r0, r4
   dc64a:	b008      	add	sp, #32
   dc64c:	bd10      	pop	{r4, pc}

000dc64e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   dc64e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   dc650:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   dc652:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   dc656:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   dc658:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   dc65a:	461a      	mov	r2, r3
   dc65c:	4669      	mov	r1, sp
   dc65e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   dc660:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   dc664:	f8ad 4000 	strh.w	r4, [sp]
   dc668:	f7ff fe0a 	bl	dc280 <spark_function>
}
   dc66c:	b004      	add	sp, #16
   dc66e:	bd10      	pop	{r4, pc}

000dc670 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   dc670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   dc672:	230c      	movs	r3, #12
   dc674:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   dc678:	6803      	ldr	r3, [r0, #0]
   dc67a:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   dc67e:	7a03      	ldrb	r3, [r0, #8]
   dc680:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   dc684:	6843      	ldr	r3, [r0, #4]
   dc686:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   dc688:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   dc68a:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   dc68c:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   dc690:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   dc692:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   dc696:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   dc69a:	f7ff fe31 	bl	dc300 <spark_cloud_disconnect>
}
   dc69e:	b005      	add	sp, #20
   dc6a0:	f85d fb04 	ldr.w	pc, [sp], #4

000dc6a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dc6a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dc6a6:	460e      	mov	r6, r1
   dc6a8:	4604      	mov	r4, r0
   dc6aa:	f856 3b04 	ldr.w	r3, [r6], #4
   dc6ae:	9300      	str	r3, [sp, #0]
   dc6b0:	460d      	mov	r5, r1
   dc6b2:	a801      	add	r0, sp, #4
   dc6b4:	4631      	mov	r1, r6
   dc6b6:	f7fb fede 	bl	d8476 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dc6ba:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dc6bc:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   dc6be:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   dc6c0:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   dc6c2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   dc6c4:	2300      	movs	r3, #0
   dc6c6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dc6c8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   dc6ca:	f7f7 feb4 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc6ce:	4630      	mov	r0, r6
   dc6d0:	f7f7 feb1 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   dc6d4:	4628      	mov	r0, r5
   dc6d6:	2108      	movs	r1, #8
   dc6d8:	f002 fecc 	bl	df474 <_ZdlPvj>
        return p;
    }
   dc6dc:	4620      	mov	r0, r4
   dc6de:	b002      	add	sp, #8
   dc6e0:	bd70      	pop	{r4, r5, r6, pc}

000dc6e2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   dc6e2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   dc6e4:	b510      	push	{r4, lr}
      if (_M_empty())
   dc6e6:	b90a      	cbnz	r2, dc6ec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dc6e8:	f002 fed0 	bl	df48c <_ZSt25__throw_bad_function_callv>
    }
   dc6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc6f0:	68c3      	ldr	r3, [r0, #12]
   dc6f2:	4718      	bx	r3

000dc6f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dc6f4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   dc6f6:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   dc6f8:	f100 0110 	add.w	r1, r0, #16
   dc6fc:	f7ff fff1 	bl	dc6e2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   dc700:	bd08      	pop	{r3, pc}

000dc702 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   dc702:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   dc704:	b510      	push	{r4, lr}
      if (_M_empty())
   dc706:	b90a      	cbnz	r2, dc70c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dc708:	f002 fec0 	bl	df48c <_ZSt25__throw_bad_function_callv>
    }
   dc70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc710:	68c3      	ldr	r3, [r0, #12]
   dc712:	4718      	bx	r3

000dc714 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dc714:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   dc716:	6800      	ldr	r0, [r0, #0]
   dc718:	f100 0110 	add.w	r1, r0, #16
   dc71c:	f7ff fff1 	bl	dc702 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   dc720:	bd08      	pop	{r3, pc}
	...

000dc724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   dc724:	b538      	push	{r3, r4, r5, lr}
   dc726:	2300      	movs	r3, #0
   dc728:	4604      	mov	r4, r0
   dc72a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dc72c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   dc72e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dc730:	f7f7 fcb1 	bl	d4096 <_Znwj>
   dc734:	b128      	cbz	r0, dc742 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   dc736:	2301      	movs	r3, #1
   dc738:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   dc73c:	4b02      	ldr	r3, [pc, #8]	; (dc748 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dc73e:	6003      	str	r3, [r0, #0]
   dc740:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dc742:	6020      	str	r0, [r4, #0]
	}
   dc744:	4620      	mov	r0, r4
   dc746:	bd38      	pop	{r3, r4, r5, pc}
   dc748:	000e2c78 	.word	0x000e2c78

000dc74c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   dc74c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   dc74e:	2300      	movs	r3, #0
   dc750:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   dc752:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   dc754:	4604      	mov	r4, r0
   dc756:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   dc758:	b12b      	cbz	r3, dc766 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dc75a:	2202      	movs	r2, #2
   dc75c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dc75e:	68eb      	ldr	r3, [r5, #12]
   dc760:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dc762:	68ab      	ldr	r3, [r5, #8]
   dc764:	60a3      	str	r3, [r4, #8]
    }
   dc766:	4620      	mov	r0, r4
   dc768:	bd38      	pop	{r3, r4, r5, pc}
	...

000dc76c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   dc76c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc76e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   dc770:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dc772:	4668      	mov	r0, sp
   dc774:	f7ff ff1e 	bl	dc5b4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   dc778:	f04f 0302 	mov.w	r3, #2
   dc77c:	e8d4 2f4f 	ldrexb	r2, [r4]
   dc780:	2a00      	cmp	r2, #0
   dc782:	d103      	bne.n	dc78c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   dc784:	e8c4 3f41 	strexb	r1, r3, [r4]
   dc788:	2900      	cmp	r1, #0
   dc78a:	d1f7      	bne.n	dc77c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   dc78c:	d125      	bne.n	dc7da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   dc78e:	f104 050c 	add.w	r5, r4, #12
   dc792:	4669      	mov	r1, sp
   dc794:	4628      	mov	r0, r5
   dc796:	f7ff ff0d 	bl	dc5b4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   dc79a:	f3bf 8f5b 	dmb	ish
   dc79e:	2301      	movs	r3, #1
   dc7a0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   dc7a2:	2000      	movs	r0, #0
   dc7a4:	f104 0308 	add.w	r3, r4, #8
   dc7a8:	f3bf 8f5b 	dmb	ish
   dc7ac:	e853 6f00 	ldrex	r6, [r3]
   dc7b0:	e843 0200 	strex	r2, r0, [r3]
   dc7b4:	2a00      	cmp	r2, #0
   dc7b6:	d1f9      	bne.n	dc7ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   dc7b8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   dc7bc:	b16e      	cbz	r6, dc7da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   dc7be:	f7ff fd19 	bl	dc1f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   dc7c2:	b178      	cbz	r0, dc7e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dc7c4:	4629      	mov	r1, r5
   dc7c6:	4630      	mov	r0, r6
   dc7c8:	f7ff ff8b 	bl	dc6e2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   dc7cc:	4630      	mov	r0, r6
   dc7ce:	f7f8 fc85 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   dc7d2:	2110      	movs	r1, #16
   dc7d4:	4630      	mov	r0, r6
   dc7d6:	f002 fe4d 	bl	df474 <_ZdlPvj>
        p_->setError(std::move(error));
   dc7da:	4668      	mov	r0, sp
   dc7dc:	f7ff fef7 	bl	dc5ce <_ZN8particle5ErrorD1Ev>
    }
   dc7e0:	b009      	add	sp, #36	; 0x24
   dc7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dc7e4:	4631      	mov	r1, r6
   dc7e6:	a802      	add	r0, sp, #8
   dc7e8:	f7ff ffb0 	bl	dc74c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   dc7ec:	68e0      	ldr	r0, [r4, #12]
   dc7ee:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dc7f2:	b108      	cbz	r0, dc7f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   dc7f4:	f003 fc64 	bl	e00c0 <strdup>
        type_(type) {
   dc7f8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dc7fa:	2010      	movs	r0, #16
   dc7fc:	f8ad 501c 	strh.w	r5, [sp, #28]
   dc800:	f7f7 fc49 	bl	d4096 <_Znwj>
   dc804:	4605      	mov	r5, r0
   dc806:	b1e8      	cbz	r0, dc844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   dc808:	2700      	movs	r7, #0
   dc80a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dc80c:	2018      	movs	r0, #24
   dc80e:	f7f7 fc42 	bl	d4096 <_Znwj>
   dc812:	4604      	mov	r4, r0
   dc814:	b188      	cbz	r0, dc83a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   dc816:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   dc818:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   dc81a:	a802      	add	r0, sp, #8
   dc81c:	f7f8 fd5d 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc820:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc822:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc824:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc826:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dc828:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dc82a:	a906      	add	r1, sp, #24
   dc82c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dc82e:	60e3      	str	r3, [r4, #12]
   dc830:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   dc834:	9205      	str	r2, [sp, #20]
   dc836:	f7ff febd 	bl	dc5b4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   dc83a:	4b08      	ldr	r3, [pc, #32]	; (dc85c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   dc83c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dc83e:	4b08      	ldr	r3, [pc, #32]	; (dc860 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dc840:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   dc842:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   dc844:	a806      	add	r0, sp, #24
   dc846:	f7ff fec2 	bl	dc5ce <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   dc84a:	a802      	add	r0, sp, #8
   dc84c:	f7f8 fc46 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dc850:	2200      	movs	r2, #0
   dc852:	4629      	mov	r1, r5
   dc854:	4803      	ldr	r0, [pc, #12]	; (dc864 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   dc856:	f7ff fcd5 	bl	dc204 <application_thread_invoke>
   dc85a:	e7b7      	b.n	dc7cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   dc85c:	000dc6f5 	.word	0x000dc6f5
   dc860:	000dc98d 	.word	0x000dc98d
   dc864:	000dc4c7 	.word	0x000dc4c7

000dc868 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   dc868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc86c:	b08a      	sub	sp, #40	; 0x28
   dc86e:	4605      	mov	r5, r0
   dc870:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   dc874:	460c      	mov	r4, r1
   dc876:	4617      	mov	r7, r2
   dc878:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dc87a:	f7ff fd19 	bl	dc2b0 <spark_cloud_flag_connected>
   dc87e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   dc880:	4682      	mov	sl, r0
   dc882:	bb38      	cbnz	r0, dc8d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   dc884:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dc888:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dc88a:	a905      	add	r1, sp, #20
   dc88c:	4630      	mov	r0, r6
   dc88e:	f8ad 3018 	strh.w	r3, [sp, #24]
   dc892:	f7ff fe8f 	bl	dc5b4 <_ZN8particle5ErrorC1EOS0_>
   dc896:	2014      	movs	r0, #20
   dc898:	f7f7 fbfd 	bl	d4096 <_Znwj>
   dc89c:	4604      	mov	r4, r0
   dc89e:	b148      	cbz	r0, dc8b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dc8a0:	2302      	movs	r3, #2
   dc8a2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dc8a4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dc8a6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dc8aa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   dc8ac:	4631      	mov	r1, r6
   dc8ae:	300c      	adds	r0, #12
   dc8b0:	f7ff fe80 	bl	dc5b4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dc8b4:	4628      	mov	r0, r5
	: __shared_count(__p)
   dc8b6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dc8b8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   dc8bc:	f7ff ff32 	bl	dc724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dc8c0:	4630      	mov	r0, r6
   dc8c2:	f7ff fe84 	bl	dc5ce <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dc8c6:	a805      	add	r0, sp, #20
   dc8c8:	f7ff fe81 	bl	dc5ce <_ZN8particle5ErrorD1Ev>
}
   dc8cc:	4628      	mov	r0, r5
   dc8ce:	b00a      	add	sp, #40	; 0x28
   dc8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dc8d4:	230c      	movs	r3, #12
   dc8d6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dc8da:	2014      	movs	r0, #20
   dc8dc:	e9cd aa08 	strd	sl, sl, [sp, #32]
   dc8e0:	9307      	str	r3, [sp, #28]
   dc8e2:	f7f7 fbd8 	bl	d4096 <_Znwj>
   dc8e6:	4601      	mov	r1, r0
   dc8e8:	b128      	cbz	r0, dc8f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dc8ea:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   dc8ee:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dc8f2:	f880 a001 	strb.w	sl, [r0, #1]
   dc8f6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dc8f8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   dc8fa:	f7ff ff13 	bl	dc724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   dc8fe:	4b22      	ldr	r3, [pc, #136]	; (dc988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   dc900:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dc902:	2008      	movs	r0, #8
   dc904:	f7f7 fbc7 	bl	d4096 <_Znwj>
   dc908:	4682      	mov	sl, r0
   dc90a:	b128      	cbz	r0, dc918 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dc90c:	9b03      	ldr	r3, [sp, #12]
   dc90e:	f840 3b04 	str.w	r3, [r0], #4
   dc912:	a904      	add	r1, sp, #16
   dc914:	f7fb fdaf 	bl	d8476 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dc918:	9600      	str	r6, [sp, #0]
   dc91a:	fa5f f389 	uxtb.w	r3, r9
   dc91e:	4642      	mov	r2, r8
   dc920:	4639      	mov	r1, r7
   dc922:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   dc924:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dc928:	f7ff fcca 	bl	dc2c0 <spark_send_event>
   dc92c:	b9b8      	cbnz	r0, dc95e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   dc92e:	9b03      	ldr	r3, [sp, #12]
   dc930:	785b      	ldrb	r3, [r3, #1]
   dc932:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dc936:	b993      	cbnz	r3, dc95e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   dc938:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   dc93c:	a905      	add	r1, sp, #20
   dc93e:	a803      	add	r0, sp, #12
   dc940:	9205      	str	r2, [sp, #20]
   dc942:	f8ad 3018 	strh.w	r3, [sp, #24]
   dc946:	f7ff ff11 	bl	dc76c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dc94a:	a805      	add	r0, sp, #20
   dc94c:	f7ff fe3f 	bl	dc5ce <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dc950:	a805      	add	r0, sp, #20
   dc952:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc954:	f7ff fea6 	bl	dc6a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   dc958:	a806      	add	r0, sp, #24
   dc95a:	f7f7 fd6c 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dc95e:	9b03      	ldr	r3, [sp, #12]
   dc960:	9305      	str	r3, [sp, #20]
   dc962:	a904      	add	r1, sp, #16
   dc964:	a806      	add	r0, sp, #24
   dc966:	f7fb fd86 	bl	d8476 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   dc96a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dc96c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   dc96e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   dc970:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   dc972:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   dc974:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   dc976:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   dc978:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   dc97a:	f7f7 fd5c 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc97e:	a804      	add	r0, sp, #16
   dc980:	f7f7 fd59 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   dc984:	e7a2      	b.n	dc8cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   dc986:	bf00      	nop
   dc988:	000dca51 	.word	0x000dca51

000dc98c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   dc98c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dc98e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc990:	4605      	mov	r5, r0
	  switch (__op)
   dc992:	d007      	beq.n	dc9a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   dc994:	2a03      	cmp	r2, #3
   dc996:	d018      	beq.n	dc9ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   dc998:	2a01      	cmp	r2, #1
   dc99a:	d101      	bne.n	dc9a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   dc99c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dc99e:	6003      	str	r3, [r0, #0]
	}
   dc9a0:	2000      	movs	r0, #0
   dc9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   dc9a4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   dc9a6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   dc9a8:	f7f7 fb75 	bl	d4096 <_Znwj>
   dc9ac:	4604      	mov	r4, r0
   dc9ae:	b150      	cbz	r0, dc9c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dc9b0:	4631      	mov	r1, r6
   dc9b2:	f7ff fecb 	bl	dc74c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   dc9b6:	6930      	ldr	r0, [r6, #16]
   dc9b8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dc9bc:	b108      	cbz	r0, dc9c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   dc9be:	f003 fb7f 	bl	e00c0 <strdup>
        type_(type) {
   dc9c2:	6120      	str	r0, [r4, #16]
   dc9c4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   dc9c6:	602c      	str	r4, [r5, #0]
	}
   dc9c8:	e7ea      	b.n	dc9a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   dc9ca:	6804      	ldr	r4, [r0, #0]
   dc9cc:	2c00      	cmp	r4, #0
   dc9ce:	d0e7      	beq.n	dc9a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   dc9d0:	f104 0010 	add.w	r0, r4, #16
   dc9d4:	f7ff fdfb 	bl	dc5ce <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   dc9d8:	4620      	mov	r0, r4
   dc9da:	f7f8 fb7f 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   dc9de:	2118      	movs	r1, #24
   dc9e0:	4620      	mov	r0, r4
   dc9e2:	f002 fd47 	bl	df474 <_ZdlPvj>
   dc9e6:	e7db      	b.n	dc9a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000dc9e8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   dc9e8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   dc9ea:	2300      	movs	r3, #0
   dc9ec:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   dc9ee:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   dc9f0:	4604      	mov	r4, r0
   dc9f2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   dc9f4:	b12b      	cbz	r3, dca02 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dc9f6:	2202      	movs	r2, #2
   dc9f8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dc9fa:	68eb      	ldr	r3, [r5, #12]
   dc9fc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dc9fe:	68ab      	ldr	r3, [r5, #8]
   dca00:	60a3      	str	r3, [r4, #8]
    }
   dca02:	4620      	mov	r0, r4
   dca04:	bd38      	pop	{r3, r4, r5, pc}

000dca06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   dca06:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dca08:	b570      	push	{r4, r5, r6, lr}
   dca0a:	4604      	mov	r4, r0
	  switch (__op)
   dca0c:	d007      	beq.n	dca1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   dca0e:	2a03      	cmp	r2, #3
   dca10:	d012      	beq.n	dca38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   dca12:	2a01      	cmp	r2, #1
   dca14:	d101      	bne.n	dca1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   dca16:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dca18:	6003      	str	r3, [r0, #0]
	}
   dca1a:	2000      	movs	r0, #0
   dca1c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   dca1e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   dca20:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   dca22:	f7f7 fb38 	bl	d4096 <_Znwj>
   dca26:	4605      	mov	r5, r0
   dca28:	b120      	cbz	r0, dca34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   dca2a:	4631      	mov	r1, r6
   dca2c:	f7ff ffdc 	bl	dc9e8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dca30:	7c33      	ldrb	r3, [r6, #16]
   dca32:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   dca34:	6025      	str	r5, [r4, #0]
	}
   dca36:	e7f0      	b.n	dca1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   dca38:	6804      	ldr	r4, [r0, #0]
   dca3a:	2c00      	cmp	r4, #0
   dca3c:	d0ed      	beq.n	dca1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   dca3e:	4620      	mov	r0, r4
   dca40:	f7f8 fb4c 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   dca44:	2114      	movs	r1, #20
   dca46:	4620      	mov	r0, r4
   dca48:	f002 fd14 	bl	df474 <_ZdlPvj>
   dca4c:	e7e5      	b.n	dca1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000dca50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dca50:	b5f0      	push	{r4, r5, r6, r7, lr}
   dca52:	b089      	sub	sp, #36	; 0x24
   dca54:	4604      	mov	r4, r0
   dca56:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dca58:	a801      	add	r0, sp, #4
   dca5a:	4611      	mov	r1, r2
   dca5c:	f7ff fe22 	bl	dc6a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dca60:	b1a4      	cbz	r4, dca8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   dca62:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dca64:	b11d      	cbz	r5, dca6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   dca66:	4628      	mov	r0, r5
   dca68:	f003 fb2a 	bl	e00c0 <strdup>
   dca6c:	4605      	mov	r5, r0
   dca6e:	a801      	add	r0, sp, #4
   dca70:	a903      	add	r1, sp, #12
        type_(type) {
   dca72:	9503      	str	r5, [sp, #12]
   dca74:	f8ad 4010 	strh.w	r4, [sp, #16]
   dca78:	f7ff fe78 	bl	dc76c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dca7c:	a803      	add	r0, sp, #12
   dca7e:	f7ff fda6 	bl	dc5ce <_ZN8particle5ErrorD1Ev>
   dca82:	a802      	add	r0, sp, #8
   dca84:	f7f7 fcd7 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dca88:	b009      	add	sp, #36	; 0x24
   dca8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   dca8c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   dca8e:	2301      	movs	r3, #1
   dca90:	e8d5 2f4f 	ldrexb	r2, [r5]
   dca94:	2a00      	cmp	r2, #0
   dca96:	d103      	bne.n	dcaa0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   dca98:	e8c5 3f41 	strexb	r1, r3, [r5]
   dca9c:	2900      	cmp	r1, #0
   dca9e:	d1f7      	bne.n	dca90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   dcaa0:	d1ef      	bne.n	dca82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   dcaa2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   dcaa4:	f3bf 8f5b 	dmb	ish
   dcaa8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   dcaaa:	1d2b      	adds	r3, r5, #4
   dcaac:	f3bf 8f5b 	dmb	ish
   dcab0:	e853 6f00 	ldrex	r6, [r3]
   dcab4:	e843 4200 	strex	r2, r4, [r3]
   dcab8:	2a00      	cmp	r2, #0
   dcaba:	d1f9      	bne.n	dcab0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   dcabc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   dcac0:	2e00      	cmp	r6, #0
   dcac2:	d0de      	beq.n	dca82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   dcac4:	4620      	mov	r0, r4
   dcac6:	f7ff fb95 	bl	dc1f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   dcaca:	4607      	mov	r7, r0
   dcacc:	b160      	cbz	r0, dcae8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dcace:	f105 010c 	add.w	r1, r5, #12
   dcad2:	4630      	mov	r0, r6
   dcad4:	f7ff fe15 	bl	dc702 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   dcad8:	4630      	mov	r0, r6
   dcada:	f7f8 faff 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   dcade:	2110      	movs	r1, #16
   dcae0:	4630      	mov	r0, r6
   dcae2:	f002 fcc7 	bl	df474 <_ZdlPvj>
   dcae6:	e7cc      	b.n	dca82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dcae8:	4631      	mov	r1, r6
   dcaea:	a803      	add	r0, sp, #12
   dcaec:	f7ff ff7c 	bl	dc9e8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dcaf0:	7b2b      	ldrb	r3, [r5, #12]
   dcaf2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dcaf6:	2010      	movs	r0, #16
   dcaf8:	f7f7 facd 	bl	d4096 <_Znwj>
   dcafc:	4605      	mov	r5, r0
   dcafe:	b1d0      	cbz	r0, dcb36 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   dcb00:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dcb02:	2014      	movs	r0, #20
   dcb04:	f7f7 fac7 	bl	d4096 <_Znwj>
   dcb08:	4604      	mov	r4, r0
   dcb0a:	b178      	cbz	r0, dcb2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   dcb0c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   dcb0e:	4601      	mov	r1, r0
   dcb10:	a803      	add	r0, sp, #12
   dcb12:	f7f8 fbe2 	bl	d52da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcb16:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dcb18:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dcb1a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcb1c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   dcb1e:	9205      	str	r2, [sp, #20]
   dcb20:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dcb22:	60e3      	str	r3, [r4, #12]
   dcb24:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   dcb28:	9206      	str	r2, [sp, #24]
   dcb2a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   dcb2c:	4b06      	ldr	r3, [pc, #24]	; (dcb48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   dcb2e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dcb30:	4b06      	ldr	r3, [pc, #24]	; (dcb4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dcb32:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   dcb34:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   dcb36:	a803      	add	r0, sp, #12
   dcb38:	f7f8 fad0 	bl	d50dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dcb3c:	2200      	movs	r2, #0
   dcb3e:	4629      	mov	r1, r5
   dcb40:	4803      	ldr	r0, [pc, #12]	; (dcb50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   dcb42:	f7ff fb5f 	bl	dc204 <application_thread_invoke>
   dcb46:	e7c7      	b.n	dcad8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   dcb48:	000dc715 	.word	0x000dc715
   dcb4c:	000dca07 	.word	0x000dca07
   dcb50:	000dc4c7 	.word	0x000dc4c7

000dcb54 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dcb54:	2200      	movs	r2, #0
   dcb56:	6840      	ldr	r0, [r0, #4]
   dcb58:	4611      	mov	r1, r2
   dcb5a:	f7ff bc11 	b.w	dc380 <network_listening>

000dcb5e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   dcb5e:	2200      	movs	r2, #0
   dcb60:	6840      	ldr	r0, [r0, #4]
   dcb62:	4611      	mov	r1, r2
   dcb64:	f7ff bc1c 	b.w	dc3a0 <network_get_listen_timeout>

000dcb68 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dcb68:	6840      	ldr	r0, [r0, #4]
   dcb6a:	2200      	movs	r2, #0
   dcb6c:	f7ff bc10 	b.w	dc390 <network_set_listen_timeout>

000dcb70 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   dcb70:	6840      	ldr	r0, [r0, #4]
   dcb72:	2200      	movs	r2, #0
   dcb74:	f081 0101 	eor.w	r1, r1, #1
   dcb78:	f7ff bbfa 	b.w	dc370 <network_listen>

000dcb7c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   dcb7c:	2300      	movs	r3, #0
   dcb7e:	6840      	ldr	r0, [r0, #4]
   dcb80:	461a      	mov	r2, r3
   dcb82:	4619      	mov	r1, r3
   dcb84:	f7ff bbec 	b.w	dc360 <network_off>

000dcb88 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   dcb88:	2300      	movs	r3, #0
   dcb8a:	6840      	ldr	r0, [r0, #4]
   dcb8c:	461a      	mov	r2, r3
   dcb8e:	4619      	mov	r1, r3
   dcb90:	f7ff bbde 	b.w	dc350 <network_on>

000dcb94 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dcb94:	2200      	movs	r2, #0
   dcb96:	6840      	ldr	r0, [r0, #4]
   dcb98:	4611      	mov	r1, r2
   dcb9a:	f7ff bbd1 	b.w	dc340 <network_ready>

000dcb9e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   dcb9e:	2200      	movs	r2, #0
   dcba0:	6840      	ldr	r0, [r0, #4]
   dcba2:	4611      	mov	r1, r2
   dcba4:	f7ff bbbc 	b.w	dc320 <network_connecting>

000dcba8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dcba8:	6840      	ldr	r0, [r0, #4]
   dcbaa:	2200      	movs	r2, #0
   dcbac:	2102      	movs	r1, #2
   dcbae:	f7ff bbbf 	b.w	dc330 <network_disconnect>

000dcbb2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   dcbb2:	2300      	movs	r3, #0
   dcbb4:	6840      	ldr	r0, [r0, #4]
   dcbb6:	461a      	mov	r2, r3
   dcbb8:	f7ff bbaa 	b.w	dc310 <network_connect>

000dcbbc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   dcbbc:	4b02      	ldr	r3, [pc, #8]	; (dcbc8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   dcbbe:	2203      	movs	r2, #3
   dcbc0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   dcbc2:	4a02      	ldr	r2, [pc, #8]	; (dcbcc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   dcbc4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   dcbc6:	4770      	bx	lr
   dcbc8:	2003e568 	.word	0x2003e568
   dcbcc:	000e2c94 	.word	0x000e2c94

000dcbd0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   dcbd0:	4770      	bx	lr

000dcbd2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   dcbd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcbd4:	4606      	mov	r6, r0
   dcbd6:	4615      	mov	r5, r2
   dcbd8:	460c      	mov	r4, r1
   dcbda:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dcbdc:	42bc      	cmp	r4, r7
   dcbde:	d006      	beq.n	dcbee <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   dcbe0:	6833      	ldr	r3, [r6, #0]
   dcbe2:	f814 1b01 	ldrb.w	r1, [r4], #1
   dcbe6:	689b      	ldr	r3, [r3, #8]
   dcbe8:	4630      	mov	r0, r6
   dcbea:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   dcbec:	e7f6      	b.n	dcbdc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   dcbee:	4628      	mov	r0, r5
   dcbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dcbf2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   dcbf2:	7c00      	ldrb	r0, [r0, #16]
   dcbf4:	2200      	movs	r2, #0
   dcbf6:	f7ff b91b 	b.w	dbe30 <hal_i2c_write>

000dcbfa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   dcbfa:	7c00      	ldrb	r0, [r0, #16]
   dcbfc:	2100      	movs	r1, #0
   dcbfe:	f7ff b91f 	b.w	dbe40 <hal_i2c_available>

000dcc02 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   dcc02:	7c00      	ldrb	r0, [r0, #16]
   dcc04:	2100      	movs	r1, #0
   dcc06:	f7ff b923 	b.w	dbe50 <hal_i2c_read>

000dcc0a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   dcc0a:	7c00      	ldrb	r0, [r0, #16]
   dcc0c:	2100      	movs	r1, #0
   dcc0e:	f7ff b927 	b.w	dbe60 <hal_i2c_peek>

000dcc12 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   dcc12:	7c00      	ldrb	r0, [r0, #16]
   dcc14:	2100      	movs	r1, #0
   dcc16:	f7ff b92b 	b.w	dbe70 <hal_i2c_flush>

000dcc1a <_ZN7TwoWireD0Ev>:
   dcc1a:	b510      	push	{r4, lr}
   dcc1c:	2114      	movs	r1, #20
   dcc1e:	4604      	mov	r4, r0
   dcc20:	f002 fc28 	bl	df474 <_ZdlPvj>
   dcc24:	4620      	mov	r0, r4
   dcc26:	bd10      	pop	{r4, pc}

000dcc28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   dcc28:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   dcc2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dcc2e:	4604      	mov	r4, r0
   dcc30:	4608      	mov	r0, r1
   dcc32:	2100      	movs	r1, #0
   dcc34:	e9c4 1301 	strd	r1, r3, [r4, #4]
   dcc38:	4b03      	ldr	r3, [pc, #12]	; (dcc48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   dcc3a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   dcc3c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   dcc3e:	4611      	mov	r1, r2
   dcc40:	f7ff f926 	bl	dbe90 <hal_i2c_init>
}
   dcc44:	4620      	mov	r0, r4
   dcc46:	bd10      	pop	{r4, pc}
   dcc48:	000e2cd0 	.word	0x000e2cd0

000dcc4c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   dcc4c:	2300      	movs	r3, #0
   dcc4e:	7c00      	ldrb	r0, [r0, #16]
   dcc50:	461a      	mov	r2, r3
   dcc52:	4619      	mov	r1, r3
   dcc54:	f7ff b8d4 	b.w	dbe00 <hal_i2c_begin>

000dcc58 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   dcc58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   dcc5a:	2200      	movs	r2, #0
   dcc5c:	2314      	movs	r3, #20
   dcc5e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   dcc62:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   dcc66:	780b      	ldrb	r3, [r1, #0]
   dcc68:	f88d 3008 	strb.w	r3, [sp, #8]
   dcc6c:	684b      	ldr	r3, [r1, #4]
   dcc6e:	9303      	str	r3, [sp, #12]
   dcc70:	68cb      	ldr	r3, [r1, #12]
   dcc72:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   dcc74:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   dcc76:	7a0b      	ldrb	r3, [r1, #8]
   dcc78:	9305      	str	r3, [sp, #20]
   dcc7a:	a901      	add	r1, sp, #4
   dcc7c:	f7ff f920 	bl	dbec0 <hal_i2c_request_ex>
}
   dcc80:	b007      	add	sp, #28
   dcc82:	f85d fb04 	ldr.w	pc, [sp], #4

000dcc86 <_ZN7TwoWire11requestFromEhjh>:
{
   dcc86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   dcc88:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dcc8a:	f88d 1000 	strb.w	r1, [sp]
   dcc8e:	f04f 0164 	mov.w	r1, #100	; 0x64
   dcc92:	9103      	str	r1, [sp, #12]
   dcc94:	bf18      	it	ne
   dcc96:	2301      	movne	r3, #1
   dcc98:	4669      	mov	r1, sp
    size_ = size;
   dcc9a:	9201      	str	r2, [sp, #4]
   dcc9c:	f88d 3008 	strb.w	r3, [sp, #8]
   dcca0:	f7ff ffda 	bl	dcc58 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   dcca4:	b005      	add	sp, #20
   dcca6:	f85d fb04 	ldr.w	pc, [sp], #4

000dccaa <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   dccaa:	7c00      	ldrb	r0, [r0, #16]
   dccac:	2200      	movs	r2, #0
   dccae:	f7ff b8af 	b.w	dbe10 <hal_i2c_begin_transmission>

000dccb2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   dccb2:	7c00      	ldrb	r0, [r0, #16]
   dccb4:	2200      	movs	r2, #0
   dccb6:	f7ff b8b3 	b.w	dbe20 <hal_i2c_end_transmission>

000dccba <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   dccba:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   dccbc:	2100      	movs	r1, #0
   dccbe:	7c00      	ldrb	r0, [r0, #16]
   dccc0:	f7ff f8ee 	bl	dbea0 <hal_i2c_lock>
}
   dccc4:	fab0 f080 	clz	r0, r0
   dccc8:	0940      	lsrs	r0, r0, #5
   dccca:	bd08      	pop	{r3, pc}

000dcccc <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   dcccc:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   dccce:	2100      	movs	r1, #0
   dccd0:	7c00      	ldrb	r0, [r0, #16]
   dccd2:	f7ff f8ed 	bl	dbeb0 <hal_i2c_unlock>
}
   dccd6:	fab0 f080 	clz	r0, r0
   dccda:	0940      	lsrs	r0, r0, #5
   dccdc:	bd08      	pop	{r3, pc}

000dccde <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dccde:	4770      	bx	lr

000dcce0 <_ZN9IPAddressD0Ev>:
   dcce0:	b510      	push	{r4, lr}
   dcce2:	2118      	movs	r1, #24
   dcce4:	4604      	mov	r4, r0
   dcce6:	f002 fbc5 	bl	df474 <_ZdlPvj>
   dccea:	4620      	mov	r0, r4
   dccec:	bd10      	pop	{r4, pc}

000dccee <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dccee:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dccf0:	7d03      	ldrb	r3, [r0, #20]
   dccf2:	2b06      	cmp	r3, #6
{
   dccf4:	b08d      	sub	sp, #52	; 0x34
   dccf6:	460e      	mov	r6, r1
   dccf8:	f100 0704 	add.w	r7, r0, #4
   dccfc:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   dcd00:	d012      	beq.n	dcd28 <_ZNK9IPAddress7printToER5Print+0x3a>
   dcd02:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   dcd06:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dcd0a:	220a      	movs	r2, #10
   dcd0c:	4630      	mov	r0, r6
   dcd0e:	f001 fd54 	bl	de7ba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dcd12:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dcd14:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   dcd16:	d019      	beq.n	dcd4c <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   dcd18:	2c00      	cmp	r4, #0
   dcd1a:	d0f4      	beq.n	dcd06 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   dcd1c:	212e      	movs	r1, #46	; 0x2e
   dcd1e:	4630      	mov	r0, r6
   dcd20:	f001 fd3c 	bl	de79c <_ZN5Print5printEc>
   dcd24:	4404      	add	r4, r0
   dcd26:	e7ee      	b.n	dcd06 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dcd28:	232f      	movs	r3, #47	; 0x2f
   dcd2a:	466a      	mov	r2, sp
   dcd2c:	4639      	mov	r1, r7
   dcd2e:	200a      	movs	r0, #10
		buf[0] = 0;
   dcd30:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dcd34:	f7ff f8cc 	bl	dbed0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   dcd38:	4668      	mov	r0, sp
   dcd3a:	f003 f9de 	bl	e00fa <strlen>
   dcd3e:	6833      	ldr	r3, [r6, #0]
   dcd40:	4602      	mov	r2, r0
   dcd42:	68db      	ldr	r3, [r3, #12]
   dcd44:	4669      	mov	r1, sp
   dcd46:	4630      	mov	r0, r6
   dcd48:	4798      	blx	r3
   dcd4a:	4604      	mov	r4, r0
    }
    return n;
}
   dcd4c:	4620      	mov	r0, r4
   dcd4e:	b00d      	add	sp, #52	; 0x34
   dcd50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dcd54 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   dcd54:	b510      	push	{r4, lr}
   dcd56:	4b05      	ldr	r3, [pc, #20]	; (dcd6c <_ZN9IPAddressC1Ev+0x18>)
   dcd58:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dcd5a:	2211      	movs	r2, #17
   dcd5c:	f840 3b04 	str.w	r3, [r0], #4
   dcd60:	2100      	movs	r1, #0
   dcd62:	f003 f93f 	bl	dffe4 <memset>
}
   dcd66:	4620      	mov	r0, r4
   dcd68:	bd10      	pop	{r4, pc}
   dcd6a:	bf00      	nop
   dcd6c:	000e2cf8 	.word	0x000e2cf8

000dcd70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   dcd70:	4603      	mov	r3, r0
   dcd72:	4a07      	ldr	r2, [pc, #28]	; (dcd90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dcd74:	b510      	push	{r4, lr}
   dcd76:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   dcd7a:	f101 0210 	add.w	r2, r1, #16
   dcd7e:	f851 4b04 	ldr.w	r4, [r1], #4
   dcd82:	f843 4b04 	str.w	r4, [r3], #4
   dcd86:	4291      	cmp	r1, r2
   dcd88:	d1f9      	bne.n	dcd7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dcd8a:	780a      	ldrb	r2, [r1, #0]
   dcd8c:	701a      	strb	r2, [r3, #0]
}
   dcd8e:	bd10      	pop	{r4, pc}
   dcd90:	000e2cf8 	.word	0x000e2cf8

000dcd94 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   dcd94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dcd96:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dcd9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dcd9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dcda2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   dcda6:	2304      	movs	r3, #4
   dcda8:	6041      	str	r1, [r0, #4]
   dcdaa:	7503      	strb	r3, [r0, #20]
}
   dcdac:	bd10      	pop	{r4, pc}

000dcdae <_ZN9IPAddressaSEPKh>:
{
   dcdae:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dcdb0:	78cb      	ldrb	r3, [r1, #3]
   dcdb2:	9300      	str	r3, [sp, #0]
   dcdb4:	788b      	ldrb	r3, [r1, #2]
   dcdb6:	784a      	ldrb	r2, [r1, #1]
   dcdb8:	7809      	ldrb	r1, [r1, #0]
   dcdba:	f7ff ffeb 	bl	dcd94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   dcdbe:	b002      	add	sp, #8
   dcdc0:	bd10      	pop	{r4, pc}

000dcdc2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   dcdc2:	f100 0310 	add.w	r3, r0, #16
   dcdc6:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   dcdc8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   dcdcc:	2901      	cmp	r1, #1
   dcdce:	4618      	mov	r0, r3
   dcdd0:	d108      	bne.n	dcde4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   dcdd2:	f853 1c04 	ldr.w	r1, [r3, #-4]
   dcdd6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   dcdda:	3a01      	subs	r2, #1
   dcddc:	f103 0310 	add.w	r3, r3, #16
   dcde0:	d1f2      	bne.n	dcdc8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   dcde2:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   dcde4:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   dcde6:	bf04      	itt	eq
   dcde8:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   dcdec:	1852      	addeq	r2, r2, r1
   dcdee:	e7f4      	b.n	dcdda <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000dcdf0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dcdf0:	4770      	bx	lr

000dcdf2 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
   dcdf2:	4770      	bx	lr

000dcdf4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   dcdf4:	2000      	movs	r0, #0
   dcdf6:	4770      	bx	lr

000dcdf8 <_ZN5spark16JSONBufferWriterD0Ev>:
   dcdf8:	b510      	push	{r4, lr}
   dcdfa:	2114      	movs	r1, #20
   dcdfc:	4604      	mov	r4, r0
   dcdfe:	f002 fb39 	bl	df474 <_ZdlPvj>
   dce02:	4620      	mov	r0, r4
   dce04:	bd10      	pop	{r4, pc}

000dce06 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dce06:	b510      	push	{r4, lr}
   dce08:	2110      	movs	r1, #16
   dce0a:	4604      	mov	r4, r0
   dce0c:	f002 fb32 	bl	df474 <_ZdlPvj>
   dce10:	4620      	mov	r0, r4
   dce12:	bd10      	pop	{r4, pc}

000dce14 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   dce14:	b508      	push	{r3, lr}
      { delete this; }
   dce16:	f7ff fff6 	bl	dce06 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dce1a:	bd08      	pop	{r3, pc}

000dce1c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   dce1c:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   dce1e:	68c4      	ldr	r4, [r0, #12]
   dce20:	b17c      	cbz	r4, dce42 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   dce22:	6820      	ldr	r0, [r4, #0]
   dce24:	b108      	cbz	r0, dce2a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   dce26:	f7f7 f93c 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   dce2a:	7a23      	ldrb	r3, [r4, #8]
   dce2c:	b11b      	cbz	r3, dce36 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   dce2e:	6860      	ldr	r0, [r4, #4]
   dce30:	b108      	cbz	r0, dce36 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   dce32:	f7f7 f936 	bl	d40a2 <_ZdaPv>
   dce36:	4620      	mov	r0, r4
   dce38:	210c      	movs	r1, #12
   dce3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dce3e:	f002 bb19 	b.w	df474 <_ZdlPvj>
   dce42:	bd10      	pop	{r4, pc}

000dce44 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   dce44:	b538      	push	{r3, r4, r5, lr}
   dce46:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   dce48:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   dce4c:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   dce4e:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   dce50:	d207      	bcs.n	dce62 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   dce52:	1ad2      	subs	r2, r2, r3
   dce54:	6880      	ldr	r0, [r0, #8]
   dce56:	42aa      	cmp	r2, r5
   dce58:	bf28      	it	cs
   dce5a:	462a      	movcs	r2, r5
   dce5c:	4418      	add	r0, r3
   dce5e:	f003 f899 	bl	dff94 <memcpy>
    }
    n_ += size;
   dce62:	6922      	ldr	r2, [r4, #16]
   dce64:	442a      	add	r2, r5
   dce66:	6122      	str	r2, [r4, #16]
}
   dce68:	bd38      	pop	{r3, r4, r5, pc}

000dce6a <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   dce6a:	b40e      	push	{r1, r2, r3}
   dce6c:	b517      	push	{r0, r1, r2, r4, lr}
   dce6e:	ab05      	add	r3, sp, #20
   dce70:	4604      	mov	r4, r0
   dce72:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   dce76:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   dce78:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   dce7a:	6903      	ldr	r3, [r0, #16]
   dce7c:	6880      	ldr	r0, [r0, #8]
   dce7e:	428b      	cmp	r3, r1
   dce80:	bf38      	it	cc
   dce82:	1ac9      	subcc	r1, r1, r3
   dce84:	4418      	add	r0, r3
   dce86:	bf28      	it	cs
   dce88:	2100      	movcs	r1, #0
   dce8a:	9b01      	ldr	r3, [sp, #4]
   dce8c:	f7ff fad0 	bl	dc430 <vsnprintf>
    va_end(args);
    n_ += n;
   dce90:	6923      	ldr	r3, [r4, #16]
   dce92:	4418      	add	r0, r3
   dce94:	6120      	str	r0, [r4, #16]
}
   dce96:	b003      	add	sp, #12
   dce98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dce9c:	b003      	add	sp, #12
   dce9e:	4770      	bx	lr

000dcea0 <_ZN5spark10JSONWriter6printfEPKcz>:
void spark::JSONWriter::printf(const char *fmt, ...) {
   dcea0:	b40e      	push	{r1, r2, r3}
   dcea2:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcea4:	b088      	sub	sp, #32
   dcea6:	af00      	add	r7, sp, #0
   dcea8:	f107 0534 	add.w	r5, r7, #52	; 0x34
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dceac:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   dceae:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dceb2:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   dceb4:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dceb6:	462b      	mov	r3, r5
   dceb8:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   dceba:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dcebc:	f7ff fab8 	bl	dc430 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   dcec0:	280f      	cmp	r0, #15
   dcec2:	687a      	ldr	r2, [r7, #4]
   dcec4:	d91a      	bls.n	dcefc <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   dcec6:	f100 0308 	add.w	r3, r0, #8
   dceca:	f023 0307 	bic.w	r3, r3, #7
        }
   dcece:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   dced0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dced4:	1c41      	adds	r1, r0, #1
   dced6:	462b      	mov	r3, r5
   dced8:	4668      	mov	r0, sp
        va_start(args, fmt);
   dceda:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dcedc:	f7ff faa8 	bl	dc430 <vsnprintf>
        if (n > 0) {
   dcee0:	1e02      	subs	r2, r0, #0
   dcee2:	dd04      	ble.n	dceee <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   dcee4:	6823      	ldr	r3, [r4, #0]
   dcee6:	4669      	mov	r1, sp
   dcee8:	689b      	ldr	r3, [r3, #8]
   dceea:	4620      	mov	r0, r4
   dceec:	4798      	blx	r3
   dceee:	46b5      	mov	sp, r6
}
   dcef0:	3720      	adds	r7, #32
   dcef2:	46bd      	mov	sp, r7
   dcef4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   dcef8:	b003      	add	sp, #12
   dcefa:	4770      	bx	lr
    } else if (n > 0) {
   dcefc:	2800      	cmp	r0, #0
   dcefe:	d0f7      	beq.n	dcef0 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   dcf00:	6823      	ldr	r3, [r4, #0]
   dcf02:	4602      	mov	r2, r0
   dcf04:	689b      	ldr	r3, [r3, #8]
   dcf06:	f107 0110 	add.w	r1, r7, #16
   dcf0a:	4620      	mov	r0, r4
   dcf0c:	4798      	blx	r3
}
   dcf0e:	e7ef      	b.n	dcef0 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000dcf10 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dcf10:	b510      	push	{r4, lr}
          _M_dispose();
   dcf12:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dcf14:	4604      	mov	r4, r0
          _M_dispose();
   dcf16:	689b      	ldr	r3, [r3, #8]
   dcf18:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dcf1a:	68a3      	ldr	r3, [r4, #8]
   dcf1c:	3b01      	subs	r3, #1
   dcf1e:	60a3      	str	r3, [r4, #8]
   dcf20:	b92b      	cbnz	r3, dcf2e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   dcf22:	6823      	ldr	r3, [r4, #0]
   dcf24:	4620      	mov	r0, r4
   dcf26:	68db      	ldr	r3, [r3, #12]
    }
   dcf28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   dcf2c:	4718      	bx	r3
    }
   dcf2e:	bd10      	pop	{r4, pc}

000dcf30 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   dcf30:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   dcf32:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   dcf34:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   dcf38:	689b      	ldr	r3, [r3, #8]
   dcf3a:	2201      	movs	r2, #1
   dcf3c:	f10d 0107 	add.w	r1, sp, #7
   dcf40:	4798      	blx	r3
}
   dcf42:	b003      	add	sp, #12
   dcf44:	f85d fb04 	ldr.w	pc, [sp], #4

000dcf48 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   dcf48:	b538      	push	{r3, r4, r5, lr}
   dcf4a:	680b      	ldr	r3, [r1, #0]
   dcf4c:	6003      	str	r3, [r0, #0]
   dcf4e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   dcf50:	6843      	ldr	r3, [r0, #4]
   dcf52:	429d      	cmp	r5, r3
    class __shared_ptr
   dcf54:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   dcf56:	d00c      	beq.n	dcf72 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   dcf58:	b115      	cbz	r5, dcf60 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   dcf5a:	686b      	ldr	r3, [r5, #4]
   dcf5c:	3301      	adds	r3, #1
   dcf5e:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   dcf60:	6860      	ldr	r0, [r4, #4]
   dcf62:	b128      	cbz	r0, dcf70 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   dcf64:	6843      	ldr	r3, [r0, #4]
   dcf66:	3b01      	subs	r3, #1
   dcf68:	6043      	str	r3, [r0, #4]
   dcf6a:	b90b      	cbnz	r3, dcf70 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   dcf6c:	f7ff ffd0 	bl	dcf10 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   dcf70:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   dcf72:	4620      	mov	r0, r4
   dcf74:	bd38      	pop	{r3, r4, r5, pc}

000dcf76 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   dcf76:	460b      	mov	r3, r1
   dcf78:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   dcf7a:	2200      	movs	r2, #0
   dcf7c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   dcf7e:	e9c0 2200 	strd	r2, r2, [r0]
   dcf82:	4604      	mov	r4, r0
        t_ = t;
   dcf84:	6083      	str	r3, [r0, #8]
    if (t) {
   dcf86:	b90b      	cbnz	r3, dcf8c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   dcf88:	4620      	mov	r0, r4
   dcf8a:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   dcf8c:	f7ff ffdc 	bl	dcf48 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   dcf90:	e7fa      	b.n	dcf88 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000dcf92 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   dcf92:	6883      	ldr	r3, [r0, #8]
   dcf94:	b1eb      	cbz	r3, dcfd2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   dcf96:	781a      	ldrb	r2, [r3, #0]
   dcf98:	2a03      	cmp	r2, #3
   dcf9a:	d81a      	bhi.n	dcfd2 <_ZNK5spark9JSONValue4typeEv+0x40>
   dcf9c:	e8df f002 	tbb	[pc, r2]
   dcfa0:	1b021704 	.word	0x1b021704
   dcfa4:	2005      	movs	r0, #5
   dcfa6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   dcfa8:	6802      	ldr	r2, [r0, #0]
   dcfaa:	685b      	ldr	r3, [r3, #4]
   dcfac:	6852      	ldr	r2, [r2, #4]
   dcfae:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   dcfb0:	282d      	cmp	r0, #45	; 0x2d
   dcfb2:	d012      	beq.n	dcfda <_ZNK5spark9JSONValue4typeEv+0x48>
   dcfb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dcfb8:	2b09      	cmp	r3, #9
   dcfba:	d90e      	bls.n	dcfda <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   dcfbc:	2874      	cmp	r0, #116	; 0x74
   dcfbe:	d00e      	beq.n	dcfde <_ZNK5spark9JSONValue4typeEv+0x4c>
   dcfc0:	2866      	cmp	r0, #102	; 0x66
   dcfc2:	d00c      	beq.n	dcfde <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   dcfc4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   dcfc8:	4258      	negs	r0, r3
   dcfca:	4158      	adcs	r0, r3
   dcfcc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   dcfce:	2006      	movs	r0, #6
   dcfd0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   dcfd2:	2000      	movs	r0, #0
   dcfd4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   dcfd6:	2004      	movs	r0, #4
   dcfd8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   dcfda:	2003      	movs	r0, #3
   dcfdc:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   dcfde:	2002      	movs	r0, #2
}
   dcfe0:	4770      	bx	lr
	...

000dcfe4 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   dcfe4:	b510      	push	{r4, lr}
   dcfe6:	4604      	mov	r4, r0
    switch (type()) {
   dcfe8:	f7ff ffd3 	bl	dcf92 <_ZNK5spark9JSONValue4typeEv>
   dcfec:	2803      	cmp	r0, #3
   dcfee:	d00d      	beq.n	dd00c <_ZNK5spark9JSONValue6toBoolEv+0x28>
   dcff0:	2804      	cmp	r0, #4
   dcff2:	d01e      	beq.n	dd032 <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   dcff4:	2802      	cmp	r0, #2
   dcff6:	d12b      	bne.n	dd050 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   dcff8:	6822      	ldr	r2, [r4, #0]
   dcffa:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   dcffc:	6852      	ldr	r2, [r2, #4]
   dcffe:	685b      	ldr	r3, [r3, #4]
   dd000:	5cd0      	ldrb	r0, [r2, r3]
   dd002:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   dd006:	4258      	negs	r0, r3
   dd008:	4158      	adcs	r0, r3
}
   dd00a:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   dd00c:	68a3      	ldr	r3, [r4, #8]
   dd00e:	6822      	ldr	r2, [r4, #0]
   dd010:	685b      	ldr	r3, [r3, #4]
   dd012:	6854      	ldr	r4, [r2, #4]
   dd014:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   dd016:	490f      	ldr	r1, [pc, #60]	; (dd054 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   dd018:	4620      	mov	r0, r4
   dd01a:	f003 f83f 	bl	e009c <strcmp>
   dd01e:	2800      	cmp	r0, #0
   dd020:	d0f3      	beq.n	dd00a <_ZNK5spark9JSONValue6toBoolEv+0x26>
   dd022:	490d      	ldr	r1, [pc, #52]	; (dd058 <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   dd024:	4620      	mov	r0, r4
   dd026:	f003 f839 	bl	e009c <strcmp>
   dd02a:	3800      	subs	r0, #0
   dd02c:	bf18      	it	ne
   dd02e:	2001      	movne	r0, #1
   dd030:	e7eb      	b.n	dd00a <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   dd032:	6822      	ldr	r2, [r4, #0]
   dd034:	68a3      	ldr	r3, [r4, #8]
   dd036:	6852      	ldr	r2, [r2, #4]
   dd038:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   dd03a:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   dd03c:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   dd03e:	2800      	cmp	r0, #0
   dd040:	d0e3      	beq.n	dd00a <_ZNK5spark9JSONValue6toBoolEv+0x26>
   dd042:	4906      	ldr	r1, [pc, #24]	; (dd05c <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   dd044:	4620      	mov	r0, r4
   dd046:	f003 f829 	bl	e009c <strcmp>
   dd04a:	2800      	cmp	r0, #0
   dd04c:	d1e3      	bne.n	dd016 <_ZNK5spark9JSONValue6toBoolEv+0x32>
   dd04e:	e7dc      	b.n	dd00a <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   dd050:	2000      	movs	r0, #0
   dd052:	e7da      	b.n	dd00a <_ZNK5spark9JSONValue6toBoolEv+0x26>
   dd054:	000e2d06 	.word	0x000e2d06
   dd058:	000e2d04 	.word	0x000e2d04
   dd05c:	000e2d08 	.word	0x000e2d08

000dd060 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   dd060:	b510      	push	{r4, lr}
   dd062:	4604      	mov	r4, r0
    switch (type()) {
   dd064:	f7ff ff95 	bl	dcf92 <_ZNK5spark9JSONValue4typeEv>
   dd068:	2802      	cmp	r0, #2
   dd06a:	d00e      	beq.n	dd08a <_ZNK5spark9JSONValue5toIntEv+0x2a>
   dd06c:	1ec3      	subs	r3, r0, #3
   dd06e:	b2db      	uxtb	r3, r3
   dd070:	2b01      	cmp	r3, #1
   dd072:	d814      	bhi.n	dd09e <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   dd074:	6822      	ldr	r2, [r4, #0]
   dd076:	68a3      	ldr	r3, [r4, #8]
   dd078:	6850      	ldr	r0, [r2, #4]
   dd07a:	685b      	ldr	r3, [r3, #4]
}
   dd07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   dd080:	220a      	movs	r2, #10
   dd082:	2100      	movs	r1, #0
   dd084:	4418      	add	r0, r3
   dd086:	f003 bf53 	b.w	e0f30 <strtol>
        const char* const s = d_->json + t_->start;
   dd08a:	6822      	ldr	r2, [r4, #0]
   dd08c:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   dd08e:	6852      	ldr	r2, [r2, #4]
   dd090:	685b      	ldr	r3, [r3, #4]
   dd092:	5cd0      	ldrb	r0, [r2, r3]
   dd094:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   dd098:	4258      	negs	r0, r3
   dd09a:	4158      	adcs	r0, r3
}
   dd09c:	bd10      	pop	{r4, pc}
    switch (type()) {
   dd09e:	2000      	movs	r0, #0
   dd0a0:	e7fc      	b.n	dd09c <_ZNK5spark9JSONValue5toIntEv+0x3c>
   dd0a2:	0000      	movs	r0, r0
   dd0a4:	0000      	movs	r0, r0
	...

000dd0a8 <_ZNK5spark9JSONValue8toDoubleEv>:
double spark::JSONValue::toDouble() const {
   dd0a8:	b510      	push	{r4, lr}
   dd0aa:	4604      	mov	r4, r0
    switch (type()) {
   dd0ac:	f7ff ff71 	bl	dcf92 <_ZNK5spark9JSONValue4typeEv>
   dd0b0:	2802      	cmp	r0, #2
   dd0b2:	d00d      	beq.n	dd0d0 <_ZNK5spark9JSONValue8toDoubleEv+0x28>
   dd0b4:	1ec3      	subs	r3, r0, #3
   dd0b6:	b2db      	uxtb	r3, r3
   dd0b8:	2b01      	cmp	r3, #1
   dd0ba:	d810      	bhi.n	dd0de <_ZNK5spark9JSONValue8toDoubleEv+0x36>
        const char* const s = d_->json + t_->start;
   dd0bc:	6822      	ldr	r2, [r4, #0]
   dd0be:	68a3      	ldr	r3, [r4, #8]
   dd0c0:	6850      	ldr	r0, [r2, #4]
   dd0c2:	685b      	ldr	r3, [r3, #4]
}
   dd0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtod(s, nullptr);
   dd0c8:	2100      	movs	r1, #0
   dd0ca:	4418      	add	r0, r3
   dd0cc:	f003 be7e 	b.w	e0dcc <strtod>
        const char* const s = d_->json + t_->start;
   dd0d0:	6822      	ldr	r2, [r4, #0]
   dd0d2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   dd0d4:	6852      	ldr	r2, [r2, #4]
   dd0d6:	685b      	ldr	r3, [r3, #4]
   dd0d8:	5cd3      	ldrb	r3, [r2, r3]
   dd0da:	2b74      	cmp	r3, #116	; 0x74
   dd0dc:	d002      	beq.n	dd0e4 <_ZNK5spark9JSONValue8toDoubleEv+0x3c>
    switch (type()) {
   dd0de:	ed9f 0b04 	vldr	d0, [pc, #16]	; dd0f0 <_ZNK5spark9JSONValue8toDoubleEv+0x48>
}
   dd0e2:	bd10      	pop	{r4, pc}
        return *s == 't';
   dd0e4:	ed9f 0b04 	vldr	d0, [pc, #16]	; dd0f8 <_ZNK5spark9JSONValue8toDoubleEv+0x50>
   dd0e8:	e7fb      	b.n	dd0e2 <_ZNK5spark9JSONValue8toDoubleEv+0x3a>
   dd0ea:	bf00      	nop
   dd0ec:	f3af 8000 	nop.w
	...
   dd0fc:	3ff00000 	.word	0x3ff00000

000dd100 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   dd100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd104:	4699      	mov	r9, r3
   dd106:	b088      	sub	sp, #32
    parser.size = sizeof(jsmn_parser);
   dd108:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   dd10a:	4607      	mov	r7, r0
   dd10c:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   dd10e:	eb0d 0003 	add.w	r0, sp, r3
   dd112:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   dd114:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   dd116:	9304      	str	r3, [sp, #16]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   dd118:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr);
   dd11a:	f7ff f801 	bl	dc120 <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   dd11e:	ab03      	add	r3, sp, #12
   dd120:	9301      	str	r3, [sp, #4]
    int nExt = -1;
   dd122:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   dd126:	9400      	str	r4, [sp, #0]
   dd128:	4623      	mov	r3, r4
   dd12a:	4642      	mov	r2, r8
   dd12c:	4639      	mov	r1, r7
   dd12e:	a804      	add	r0, sp, #16
    int nExt = -1;
   dd130:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   dd132:	f7fe fffd 	bl	dc130 <jsmn_parse_deprecated>
    if (n <= 0) {
   dd136:	1e05      	subs	r5, r0, #0
   dd138:	dd27      	ble.n	dd18a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
    if (nExt > n) {
   dd13a:	9803      	ldr	r0, [sp, #12]
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   dd13c:	4914      	ldr	r1, [pc, #80]	; (dd190 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
   dd13e:	4285      	cmp	r5, r0
   dd140:	bfb8      	it	lt
   dd142:	4605      	movlt	r5, r0
   dd144:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
   dd148:	bfac      	ite	ge
   dd14a:	4630      	movge	r0, r6
   dd14c:	0128      	lsllt	r0, r5, #4
   dd14e:	f002 f995 	bl	df47c <_ZnajRKSt9nothrow_t>
    if (!t) {
   dd152:	4606      	mov	r6, r0
   dd154:	b198      	cbz	r0, dd17e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
    jsmn_init(&parser, nullptr); // Reset parser
   dd156:	2100      	movs	r1, #0
   dd158:	a804      	add	r0, sp, #16
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   dd15a:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   dd15c:	f7fe ffe0 	bl	dc120 <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   dd160:	e9cd 5400 	strd	r5, r4, [sp]
   dd164:	4633      	mov	r3, r6
   dd166:	4642      	mov	r2, r8
   dd168:	4639      	mov	r1, r7
   dd16a:	a804      	add	r0, sp, #16
   dd16c:	f7fe ffe0 	bl	dc130 <jsmn_parse_deprecated>
   dd170:	42a0      	cmp	r0, r4
   dd172:	dd07      	ble.n	dd184 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
    *tokens = t.release();
   dd174:	f8ca 6000 	str.w	r6, [sl]
    return true;
   dd178:	2001      	movs	r0, #1
    *count = n;
   dd17a:	f8c9 5000 	str.w	r5, [r9]
}
   dd17e:	b008      	add	sp, #32
   dd180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	delete [] __ptr;
   dd184:	4630      	mov	r0, r6
   dd186:	f7f6 ff8c 	bl	d40a2 <_ZdaPv>
      }
   dd18a:	4620      	mov	r0, r4
   dd18c:	e7f7      	b.n	dd17e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
   dd18e:	bf00      	nop
   dd190:	000e2f30 	.word	0x000e2f30

000dd194 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   dd194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   dd198:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   dd19a:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   dd19c:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   dd19e:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   dd1a0:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   dd1a2:	4607      	mov	r7, r0
    const char *s = s1;
   dd1a4:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   dd1a6:	4619      	mov	r1, r3
                    *str = 0x0d;
   dd1a8:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   dd1ac:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   dd1b0:	42b4      	cmp	r4, r6
   dd1b2:	d063      	beq.n	dd27c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   dd1b4:	4625      	mov	r5, r4
   dd1b6:	f815 2b01 	ldrb.w	r2, [r5], #1
   dd1ba:	2a5c      	cmp	r2, #92	; 0x5c
   dd1bc:	d12b      	bne.n	dd216 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   dd1be:	42a1      	cmp	r1, r4
   dd1c0:	d007      	beq.n	dd1d2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   dd1c2:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   dd1c6:	4618      	mov	r0, r3
   dd1c8:	465a      	mov	r2, fp
   dd1ca:	f002 fef1 	bl	dffb0 <memmove>
   dd1ce:	4603      	mov	r3, r0
                str += n;
   dd1d0:	445b      	add	r3, fp
            if (s == end) {
   dd1d2:	42b5      	cmp	r5, r6
   dd1d4:	d039      	beq.n	dd24a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   dd1d6:	7862      	ldrb	r2, [r4, #1]
   dd1d8:	2a75      	cmp	r2, #117	; 0x75
   dd1da:	d12a      	bne.n	dd232 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   dd1dc:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   dd1de:	1ab2      	subs	r2, r6, r2
   dd1e0:	2a03      	cmp	r2, #3
   dd1e2:	dd32      	ble.n	dd24a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   dd1e4:	1da0      	adds	r0, r4, #6
   dd1e6:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   dd1ea:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   dd1ee:	45ae      	cmp	lr, r5
   dd1f0:	d053      	beq.n	dd29a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   dd1f2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   dd1f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   dd1fa:	fa5f fb82 	uxtb.w	fp, r2
   dd1fe:	f1bb 0f09 	cmp.w	fp, #9
   dd202:	d905      	bls.n	dd210 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   dd204:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   dd208:	2a05      	cmp	r2, #5
   dd20a:	d807      	bhi.n	dd21c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   dd20c:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   dd210:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   dd214:	e7eb      	b.n	dd1ee <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   dd216:	4628      	mov	r0, r5
   dd218:	4604      	mov	r4, r0
   dd21a:	e7c9      	b.n	dd1b0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   dd21c:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   dd220:	2a05      	cmp	r2, #5
   dd222:	d812      	bhi.n	dd24a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   dd224:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   dd228:	e7f2      	b.n	dd210 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   dd22a:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   dd22e:	4601      	mov	r1, r0
   dd230:	e7f2      	b.n	dd218 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   dd232:	2a6e      	cmp	r2, #110	; 0x6e
   dd234:	d01c      	beq.n	dd270 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   dd236:	d80e      	bhi.n	dd256 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   dd238:	2a62      	cmp	r2, #98	; 0x62
   dd23a:	d013      	beq.n	dd264 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   dd23c:	d807      	bhi.n	dd24e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   dd23e:	2a2f      	cmp	r2, #47	; 0x2f
   dd240:	d011      	beq.n	dd266 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   dd242:	2a5c      	cmp	r2, #92	; 0x5c
   dd244:	d00f      	beq.n	dd266 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   dd246:	2a22      	cmp	r2, #34	; 0x22
   dd248:	d00d      	beq.n	dd266 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   dd24a:	2000      	movs	r0, #0
   dd24c:	e023      	b.n	dd296 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   dd24e:	2a66      	cmp	r2, #102	; 0x66
   dd250:	d1fb      	bne.n	dd24a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   dd252:	220c      	movs	r2, #12
   dd254:	e007      	b.n	dd266 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   dd256:	2a72      	cmp	r2, #114	; 0x72
   dd258:	d00d      	beq.n	dd276 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   dd25a:	2a74      	cmp	r2, #116	; 0x74
   dd25c:	d1f5      	bne.n	dd24a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   dd25e:	f883 a000 	strb.w	sl, [r3]
                    break;
   dd262:	e001      	b.n	dd268 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   dd264:	2208      	movs	r2, #8
   dd266:	701a      	strb	r2, [r3, #0]
                ++s;
   dd268:	1ca1      	adds	r1, r4, #2
                ++str;
   dd26a:	3301      	adds	r3, #1
                ++s;
   dd26c:	4608      	mov	r0, r1
   dd26e:	e7d3      	b.n	dd218 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   dd270:	f04f 020a 	mov.w	r2, #10
   dd274:	e7f7      	b.n	dd266 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   dd276:	f883 9000 	strb.w	r9, [r3]
                    break;
   dd27a:	e7f5      	b.n	dd268 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
    if (s != s1) {
   dd27c:	42a1      	cmp	r1, r4
   dd27e:	d006      	beq.n	dd28e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   dd280:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   dd282:	4618      	mov	r0, r3
   dd284:	4622      	mov	r2, r4
   dd286:	f002 fe93 	bl	dffb0 <memmove>
   dd28a:	4603      	mov	r3, r0
        str += n;
   dd28c:	4423      	add	r3, r4
    t->end = str - json; // Update string length
   dd28e:	eba3 0308 	sub.w	r3, r3, r8
   dd292:	60bb      	str	r3, [r7, #8]
    return true;
   dd294:	2001      	movs	r0, #1
}
   dd296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   dd29a:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   dd29e:	d9c4      	bls.n	dd22a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   dd2a0:	4621      	mov	r1, r4
   dd2a2:	e7b9      	b.n	dd218 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000dd2a4 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   dd2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd2a6:	4604      	mov	r4, r0
   dd2a8:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   dd2aa:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   dd2ae:	2700      	movs	r7, #0
    while (t != end) {
   dd2b0:	42b4      	cmp	r4, r6
   dd2b2:	d010      	beq.n	dd2d6 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   dd2b4:	7823      	ldrb	r3, [r4, #0]
   dd2b6:	2b03      	cmp	r3, #3
   dd2b8:	d108      	bne.n	dd2cc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   dd2ba:	4629      	mov	r1, r5
   dd2bc:	4620      	mov	r0, r4
   dd2be:	f7ff ff69 	bl	dd194 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   dd2c2:	b148      	cbz	r0, dd2d8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   dd2c4:	68a3      	ldr	r3, [r4, #8]
   dd2c6:	54ef      	strb	r7, [r5, r3]
        ++t;
   dd2c8:	3410      	adds	r4, #16
    while (t != end) {
   dd2ca:	e7f1      	b.n	dd2b0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   dd2cc:	2b00      	cmp	r3, #0
   dd2ce:	d1fb      	bne.n	dd2c8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   dd2d0:	68a2      	ldr	r2, [r4, #8]
   dd2d2:	54ab      	strb	r3, [r5, r2]
   dd2d4:	e7f8      	b.n	dd2c8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   dd2d6:	2001      	movs	r0, #1
}
   dd2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000dd2dc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   dd2dc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dd2de:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   dd2e0:	e9c0 3300 	strd	r3, r3, [r0]
   dd2e4:	4604      	mov	r4, r0
        n_(0) {
   dd2e6:	480e      	ldr	r0, [pc, #56]	; (dd320 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   dd2e8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   dd2ec:	b1a9      	cbz	r1, dd31a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   dd2ee:	780b      	ldrb	r3, [r1, #0]
   dd2f0:	2b03      	cmp	r3, #3
   dd2f2:	d006      	beq.n	dd302 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   dd2f4:	b98b      	cbnz	r3, dd31a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   dd2f6:	6813      	ldr	r3, [r2, #0]
   dd2f8:	6858      	ldr	r0, [r3, #4]
   dd2fa:	684b      	ldr	r3, [r1, #4]
   dd2fc:	5cc3      	ldrb	r3, [r0, r3]
   dd2fe:	2b6e      	cmp	r3, #110	; 0x6e
   dd300:	d007      	beq.n	dd312 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   dd302:	6813      	ldr	r3, [r2, #0]
   dd304:	684d      	ldr	r5, [r1, #4]
   dd306:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   dd308:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   dd30a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   dd30c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   dd30e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   dd310:	60e3      	str	r3, [r4, #12]
   dd312:	4611      	mov	r1, r2
   dd314:	4620      	mov	r0, r4
   dd316:	f7ff fe17 	bl	dcf48 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dd31a:	4620      	mov	r0, r4
   dd31c:	bd38      	pop	{r3, r4, r5, pc}
   dd31e:	bf00      	nop
   dd320:	000e291f 	.word	0x000e291f

000dd324 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   dd324:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dd326:	2500      	movs	r5, #0
   dd328:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   dd32a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   dd32e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   dd332:	e9c0 5504 	strd	r5, r5, [r0, #16]
   dd336:	4604      	mov	r4, r0
   dd338:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   dd33a:	b14b      	cbz	r3, dd350 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   dd33c:	781a      	ldrb	r2, [r3, #0]
   dd33e:	2a01      	cmp	r2, #1
   dd340:	d106      	bne.n	dd350 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   dd342:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   dd346:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   dd348:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   dd34a:	6143      	str	r3, [r0, #20]
   dd34c:	f7ff fdfc 	bl	dcf48 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dd350:	4620      	mov	r0, r4
   dd352:	bd38      	pop	{r3, r4, r5, pc}

000dd354 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   dd354:	b510      	push	{r4, lr}
    if (!n_) {
   dd356:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   dd358:	4604      	mov	r4, r0
    if (!n_) {
   dd35a:	b163      	cbz	r3, dd376 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   dd35c:	6880      	ldr	r0, [r0, #8]
   dd35e:	60e0      	str	r0, [r4, #12]
    --n_;
   dd360:	3b01      	subs	r3, #1
    ++t_;
   dd362:	3010      	adds	r0, #16
   dd364:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   dd366:	6120      	str	r0, [r4, #16]
    --n_;
   dd368:	6163      	str	r3, [r4, #20]
    if (n_) {
   dd36a:	b113      	cbz	r3, dd372 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   dd36c:	f7ff fd29 	bl	dcdc2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   dd370:	60a0      	str	r0, [r4, #8]
    return true;
   dd372:	2001      	movs	r0, #1
   dd374:	e000      	b.n	dd378 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   dd376:	4618      	mov	r0, r3
}
   dd378:	bd10      	pop	{r4, pc}

000dd37a <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONArrayIterator::JSONArrayIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   dd37a:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   dd37c:	2500      	movs	r5, #0
   dd37e:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   dd380:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   dd384:	e9c0 5502 	strd	r5, r5, [r0, #8]
   dd388:	4604      	mov	r4, r0
   dd38a:	4611      	mov	r1, r2
   dd38c:	6105      	str	r5, [r0, #16]
    if (t && t->type == JSMN_ARRAY) {
   dd38e:	b14b      	cbz	r3, dd3a4 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
   dd390:	781a      	ldrb	r2, [r3, #0]
   dd392:	2a02      	cmp	r2, #2
   dd394:	d106      	bne.n	dd3a4 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
        t_ = t + 1; // First element
   dd396:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of elements
   dd39a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First element
   dd39c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of elements
   dd39e:	6103      	str	r3, [r0, #16]
   dd3a0:	f7ff fdd2 	bl	dcf48 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   dd3a4:	4620      	mov	r0, r4
   dd3a6:	bd38      	pop	{r3, r4, r5, pc}

000dd3a8 <_ZN5spark17JSONArrayIterator4nextEv>:
bool spark::JSONArrayIterator::next() {
   dd3a8:	b510      	push	{r4, lr}
    if (!n_) {
   dd3aa:	6903      	ldr	r3, [r0, #16]
bool spark::JSONArrayIterator::next() {
   dd3ac:	4604      	mov	r4, r0
    if (!n_) {
   dd3ae:	b14b      	cbz	r3, dd3c4 <_ZN5spark17JSONArrayIterator4nextEv+0x1c>
    v_ = t_;
   dd3b0:	6880      	ldr	r0, [r0, #8]
   dd3b2:	60e0      	str	r0, [r4, #12]
    --n_;
   dd3b4:	3b01      	subs	r3, #1
   dd3b6:	6123      	str	r3, [r4, #16]
    if (n_) {
   dd3b8:	b113      	cbz	r3, dd3c0 <_ZN5spark17JSONArrayIterator4nextEv+0x18>
        t_ = skipToken(t_);
   dd3ba:	f7ff fd02 	bl	dcdc2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   dd3be:	60a0      	str	r0, [r4, #8]
    return true;
   dd3c0:	2001      	movs	r0, #1
   dd3c2:	e000      	b.n	dd3c6 <_ZN5spark17JSONArrayIterator4nextEv+0x1e>
        return false;
   dd3c4:	4618      	mov	r0, r3
}
   dd3c6:	bd10      	pop	{r4, pc}

000dd3c8 <_ZN5spark10JSONWriter8endArrayEv>:
spark::JSONWriter& spark::JSONWriter::endArray() {
   dd3c8:	b510      	push	{r4, lr}
    write(']');
   dd3ca:	215d      	movs	r1, #93	; 0x5d
spark::JSONWriter& spark::JSONWriter::endArray() {
   dd3cc:	4604      	mov	r4, r0
    write(']');
   dd3ce:	f7ff fdaf 	bl	dcf30 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   dd3d2:	2301      	movs	r3, #1
   dd3d4:	7123      	strb	r3, [r4, #4]
}
   dd3d6:	4620      	mov	r0, r4
   dd3d8:	bd10      	pop	{r4, pc}

000dd3da <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   dd3da:	b510      	push	{r4, lr}
    write('}');
   dd3dc:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   dd3de:	4604      	mov	r4, r0
    write('}');
   dd3e0:	f7ff fda6 	bl	dcf30 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   dd3e4:	2301      	movs	r3, #1
   dd3e6:	7123      	strb	r3, [r4, #4]
}
   dd3e8:	4620      	mov	r0, r4
   dd3ea:	bd10      	pop	{r4, pc}

000dd3ec <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   dd3ec:	b508      	push	{r3, lr}
    switch (state_) {
   dd3ee:	7903      	ldrb	r3, [r0, #4]
   dd3f0:	2b01      	cmp	r3, #1
   dd3f2:	d002      	beq.n	dd3fa <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   dd3f4:	2b02      	cmp	r3, #2
   dd3f6:	d004      	beq.n	dd402 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   dd3f8:	bd08      	pop	{r3, pc}
        write(',');
   dd3fa:	212c      	movs	r1, #44	; 0x2c
        write(':');
   dd3fc:	f7ff fd98 	bl	dcf30 <_ZN5spark10JSONWriter5writeEc>
}
   dd400:	e7fa      	b.n	dd3f8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   dd402:	213a      	movs	r1, #58	; 0x3a
   dd404:	e7fa      	b.n	dd3fc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000dd406 <_ZN5spark10JSONWriter10beginArrayEv>:
spark::JSONWriter& spark::JSONWriter::beginArray() {
   dd406:	b510      	push	{r4, lr}
   dd408:	4604      	mov	r4, r0
    writeSeparator();
   dd40a:	f7ff ffef 	bl	dd3ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('[');
   dd40e:	4620      	mov	r0, r4
   dd410:	215b      	movs	r1, #91	; 0x5b
   dd412:	f7ff fd8d 	bl	dcf30 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   dd416:	2300      	movs	r3, #0
   dd418:	7123      	strb	r3, [r4, #4]
}
   dd41a:	4620      	mov	r0, r4
   dd41c:	bd10      	pop	{r4, pc}

000dd41e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   dd41e:	b510      	push	{r4, lr}
   dd420:	4604      	mov	r4, r0
    writeSeparator();
   dd422:	f7ff ffe3 	bl	dd3ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   dd426:	4620      	mov	r0, r4
   dd428:	217b      	movs	r1, #123	; 0x7b
   dd42a:	f7ff fd81 	bl	dcf30 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   dd42e:	2300      	movs	r3, #0
   dd430:	7123      	strb	r3, [r4, #4]
}
   dd432:	4620      	mov	r0, r4
   dd434:	bd10      	pop	{r4, pc}
	...

000dd438 <_ZN5spark10JSONWriter5valueEb>:
spark::JSONWriter& spark::JSONWriter::value(bool val) {
   dd438:	b538      	push	{r3, r4, r5, lr}
   dd43a:	4604      	mov	r4, r0
   dd43c:	460d      	mov	r5, r1
    writeSeparator();
   dd43e:	f7ff ffd5 	bl	dd3ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    if (val) {
   dd442:	6823      	ldr	r3, [r4, #0]
        write("true", 4);
   dd444:	689b      	ldr	r3, [r3, #8]
    if (val) {
   dd446:	b13d      	cbz	r5, dd458 <_ZN5spark10JSONWriter5valueEb+0x20>
        write("true", 4);
   dd448:	4905      	ldr	r1, [pc, #20]	; (dd460 <_ZN5spark10JSONWriter5valueEb+0x28>)
   dd44a:	2204      	movs	r2, #4
        write("false", 5);
   dd44c:	4620      	mov	r0, r4
   dd44e:	4798      	blx	r3
    state_ = NEXT;
   dd450:	2301      	movs	r3, #1
   dd452:	7123      	strb	r3, [r4, #4]
}
   dd454:	4620      	mov	r0, r4
   dd456:	bd38      	pop	{r3, r4, r5, pc}
        write("false", 5);
   dd458:	4902      	ldr	r1, [pc, #8]	; (dd464 <_ZN5spark10JSONWriter5valueEb+0x2c>)
   dd45a:	2205      	movs	r2, #5
   dd45c:	e7f6      	b.n	dd44c <_ZN5spark10JSONWriter5valueEb+0x14>
   dd45e:	bf00      	nop
   dd460:	000e2d0e 	.word	0x000e2d0e
   dd464:	000e2d08 	.word	0x000e2d08

000dd468 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   dd468:	b513      	push	{r0, r1, r4, lr}
   dd46a:	4604      	mov	r4, r0
   dd46c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   dd46e:	f7ff ffbd 	bl	dd3ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   dd472:	6823      	ldr	r3, [r4, #0]
   dd474:	9a01      	ldr	r2, [sp, #4]
   dd476:	68db      	ldr	r3, [r3, #12]
   dd478:	4903      	ldr	r1, [pc, #12]	; (dd488 <_ZN5spark10JSONWriter5valueEi+0x20>)
   dd47a:	4620      	mov	r0, r4
   dd47c:	4798      	blx	r3
    state_ = NEXT;
   dd47e:	2301      	movs	r3, #1
}
   dd480:	4620      	mov	r0, r4
    state_ = NEXT;
   dd482:	7123      	strb	r3, [r4, #4]
}
   dd484:	b002      	add	sp, #8
   dd486:	bd10      	pop	{r4, pc}
   dd488:	000e22fd 	.word	0x000e22fd

000dd48c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   dd48c:	b513      	push	{r0, r1, r4, lr}
   dd48e:	4604      	mov	r4, r0
   dd490:	9101      	str	r1, [sp, #4]
    writeSeparator();
   dd492:	f7ff ffab 	bl	dd3ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   dd496:	6823      	ldr	r3, [r4, #0]
   dd498:	9a01      	ldr	r2, [sp, #4]
   dd49a:	68db      	ldr	r3, [r3, #12]
   dd49c:	4903      	ldr	r1, [pc, #12]	; (dd4ac <_ZN5spark10JSONWriter5valueEj+0x20>)
   dd49e:	4620      	mov	r0, r4
   dd4a0:	4798      	blx	r3
    state_ = NEXT;
   dd4a2:	2301      	movs	r3, #1
}
   dd4a4:	4620      	mov	r0, r4
    state_ = NEXT;
   dd4a6:	7123      	strb	r3, [r4, #4]
}
   dd4a8:	b002      	add	sp, #8
   dd4aa:	bd10      	pop	{r4, pc}
   dd4ac:	000e25e6 	.word	0x000e25e6

000dd4b0 <_ZN5spark10JSONWriter5valueEdi>:
spark::JSONWriter& spark::JSONWriter::value(double val, int precision) {
   dd4b0:	b510      	push	{r4, lr}
   dd4b2:	ed2d 8b02 	vpush	{d8}
   dd4b6:	eeb0 8a40 	vmov.f32	s16, s0
   dd4ba:	eef0 8a60 	vmov.f32	s17, s1
   dd4be:	b084      	sub	sp, #16
   dd4c0:	4604      	mov	r4, r0
   dd4c2:	9103      	str	r1, [sp, #12]
    writeSeparator();
   dd4c4:	f7ff ff92 	bl	dd3ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%.*lf", precision, val);
   dd4c8:	ed8d 8b00 	vstr	d8, [sp]
   dd4cc:	6823      	ldr	r3, [r4, #0]
   dd4ce:	9a03      	ldr	r2, [sp, #12]
   dd4d0:	68db      	ldr	r3, [r3, #12]
   dd4d2:	4905      	ldr	r1, [pc, #20]	; (dd4e8 <_ZN5spark10JSONWriter5valueEdi+0x38>)
   dd4d4:	4620      	mov	r0, r4
   dd4d6:	4798      	blx	r3
    state_ = NEXT;
   dd4d8:	2301      	movs	r3, #1
}
   dd4da:	4620      	mov	r0, r4
    state_ = NEXT;
   dd4dc:	7123      	strb	r3, [r4, #4]
}
   dd4de:	b004      	add	sp, #16
   dd4e0:	ecbd 8b02 	vpop	{d8}
   dd4e4:	bd10      	pop	{r4, pc}
   dd4e6:	bf00      	nop
   dd4e8:	000e2d13 	.word	0x000e2d13

000dd4ec <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   dd4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd4ee:	4604      	mov	r4, r0
   dd4f0:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   dd4f4:	f7ff ff7a 	bl	dd3ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   dd4f8:	6823      	ldr	r3, [r4, #0]
   dd4fa:	4905      	ldr	r1, [pc, #20]	; (dd510 <_ZN5spark10JSONWriter5valueEd+0x24>)
   dd4fc:	68dd      	ldr	r5, [r3, #12]
   dd4fe:	4620      	mov	r0, r4
   dd500:	463b      	mov	r3, r7
   dd502:	4632      	mov	r2, r6
   dd504:	47a8      	blx	r5
    state_ = NEXT;
   dd506:	2301      	movs	r3, #1
   dd508:	7123      	strb	r3, [r4, #4]
}
   dd50a:	4620      	mov	r0, r4
   dd50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd50e:	bf00      	nop
   dd510:	000e2d19 	.word	0x000e2d19

000dd514 <_ZN5spark10JSONWriter9nullValueEv>:
spark::JSONWriter& spark::JSONWriter::nullValue() {
   dd514:	b510      	push	{r4, lr}
   dd516:	4604      	mov	r4, r0
    writeSeparator();
   dd518:	f7ff ff68 	bl	dd3ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    write("null", 4);
   dd51c:	6823      	ldr	r3, [r4, #0]
   dd51e:	4904      	ldr	r1, [pc, #16]	; (dd530 <_ZN5spark10JSONWriter9nullValueEv+0x1c>)
   dd520:	689b      	ldr	r3, [r3, #8]
   dd522:	4620      	mov	r0, r4
   dd524:	2204      	movs	r2, #4
   dd526:	4798      	blx	r3
    state_ = NEXT;
   dd528:	2301      	movs	r3, #1
   dd52a:	7123      	strb	r3, [r4, #4]
}
   dd52c:	4620      	mov	r0, r4
   dd52e:	bd10      	pop	{r4, pc}
   dd530:	000e2d1c 	.word	0x000e2d1c

000dd534 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   dd534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd538:	460d      	mov	r5, r1
   dd53a:	4617      	mov	r7, r2
    write('"');
   dd53c:	2122      	movs	r1, #34	; 0x22
                printf("u%04x", (unsigned)c);
   dd53e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; dd5e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   dd542:	4604      	mov	r4, r0
    const char* const end = str + size;
   dd544:	442f      	add	r7, r5
    write('"');
   dd546:	f7ff fcf3 	bl	dcf30 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   dd54a:	4629      	mov	r1, r5
    while (s != end) {
   dd54c:	42bd      	cmp	r5, r7
   dd54e:	462a      	mov	r2, r5
   dd550:	d038      	beq.n	dd5c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   dd552:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   dd556:	2e22      	cmp	r6, #34	; 0x22
   dd558:	d003      	beq.n	dd562 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   dd55a:	2e5c      	cmp	r6, #92	; 0x5c
   dd55c:	d001      	beq.n	dd562 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   dd55e:	2e1f      	cmp	r6, #31
   dd560:	d8f4      	bhi.n	dd54c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   dd562:	6823      	ldr	r3, [r4, #0]
   dd564:	1a52      	subs	r2, r2, r1
   dd566:	689b      	ldr	r3, [r3, #8]
   dd568:	4620      	mov	r0, r4
   dd56a:	4798      	blx	r3
            write('\\');
   dd56c:	215c      	movs	r1, #92	; 0x5c
   dd56e:	4620      	mov	r0, r4
   dd570:	f7ff fcde 	bl	dcf30 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   dd574:	2e0d      	cmp	r6, #13
   dd576:	d80a      	bhi.n	dd58e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   dd578:	2e07      	cmp	r6, #7
   dd57a:	d91c      	bls.n	dd5b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   dd57c:	f1a6 0308 	sub.w	r3, r6, #8
   dd580:	2b05      	cmp	r3, #5
   dd582:	d818      	bhi.n	dd5b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   dd584:	e8df f003 	tbb	[pc, r3]
   dd588:	17110f0d 	.word	0x17110f0d
   dd58c:	1513      	.short	0x1513
   dd58e:	2e22      	cmp	r6, #34	; 0x22
   dd590:	d001      	beq.n	dd596 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   dd592:	2e5c      	cmp	r6, #92	; 0x5c
   dd594:	d10f      	bne.n	dd5b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   dd596:	4631      	mov	r1, r6
                write('b');
   dd598:	4620      	mov	r0, r4
   dd59a:	f7ff fcc9 	bl	dcf30 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   dd59e:	4629      	mov	r1, r5
    while (s != end) {
   dd5a0:	e7d4      	b.n	dd54c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   dd5a2:	2162      	movs	r1, #98	; 0x62
   dd5a4:	e7f8      	b.n	dd598 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   dd5a6:	2174      	movs	r1, #116	; 0x74
   dd5a8:	e7f6      	b.n	dd598 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   dd5aa:	216e      	movs	r1, #110	; 0x6e
   dd5ac:	e7f4      	b.n	dd598 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   dd5ae:	2166      	movs	r1, #102	; 0x66
   dd5b0:	e7f2      	b.n	dd598 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   dd5b2:	2172      	movs	r1, #114	; 0x72
   dd5b4:	e7f0      	b.n	dd598 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   dd5b6:	6823      	ldr	r3, [r4, #0]
   dd5b8:	4632      	mov	r2, r6
   dd5ba:	68db      	ldr	r3, [r3, #12]
   dd5bc:	4641      	mov	r1, r8
   dd5be:	4620      	mov	r0, r4
   dd5c0:	4798      	blx	r3
                break;
   dd5c2:	e7ec      	b.n	dd59e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
   dd5c4:	428d      	cmp	r5, r1
   dd5c6:	d004      	beq.n	dd5d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   dd5c8:	6823      	ldr	r3, [r4, #0]
   dd5ca:	1a6a      	subs	r2, r5, r1
   dd5cc:	689b      	ldr	r3, [r3, #8]
   dd5ce:	4620      	mov	r0, r4
   dd5d0:	4798      	blx	r3
    write('"');
   dd5d2:	2122      	movs	r1, #34	; 0x22
   dd5d4:	4620      	mov	r0, r4
   dd5d6:	f7ff fcab 	bl	dcf30 <_ZN5spark10JSONWriter5writeEc>
}
   dd5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd5de:	bf00      	nop
   dd5e0:	000e2d21 	.word	0x000e2d21

000dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   dd5e4:	b513      	push	{r0, r1, r4, lr}
   dd5e6:	4604      	mov	r4, r0
   dd5e8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   dd5ec:	f7ff fefe 	bl	dd3ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   dd5f0:	4620      	mov	r0, r4
   dd5f2:	e9dd 2100 	ldrd	r2, r1, [sp]
   dd5f6:	f7ff ff9d 	bl	dd534 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   dd5fa:	2302      	movs	r3, #2
}
   dd5fc:	4620      	mov	r0, r4
    state_ = VALUE;
   dd5fe:	7123      	strb	r3, [r4, #4]
}
   dd600:	b002      	add	sp, #8
   dd602:	bd10      	pop	{r4, pc}

000dd604 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   dd604:	b513      	push	{r0, r1, r4, lr}
   dd606:	4604      	mov	r4, r0
   dd608:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   dd60c:	f7ff feee 	bl	dd3ec <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   dd610:	4620      	mov	r0, r4
   dd612:	e9dd 2100 	ldrd	r2, r1, [sp]
   dd616:	f7ff ff8d 	bl	dd534 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   dd61a:	2301      	movs	r3, #1
}
   dd61c:	4620      	mov	r0, r4
    state_ = NEXT;
   dd61e:	7123      	strb	r3, [r4, #4]
}
   dd620:	b002      	add	sp, #8
   dd622:	bd10      	pop	{r4, pc}

000dd624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   dd624:	b538      	push	{r3, r4, r5, lr}
   dd626:	2300      	movs	r3, #0
   dd628:	4604      	mov	r4, r0
   dd62a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd62c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   dd62e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd630:	f7f6 fd31 	bl	d4096 <_Znwj>
   dd634:	b128      	cbz	r0, dd642 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   dd636:	2301      	movs	r3, #1
   dd638:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   dd63c:	4b02      	ldr	r3, [pc, #8]	; (dd648 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   dd63e:	6003      	str	r3, [r0, #0]
   dd640:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd642:	6020      	str	r0, [r4, #0]
	}
   dd644:	4620      	mov	r0, r4
   dd646:	bd38      	pop	{r3, r4, r5, pc}
   dd648:	000e2d30 	.word	0x000e2d30

000dd64c <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   dd64c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd64e:	4604      	mov	r4, r0
   dd650:	b087      	sub	sp, #28
   dd652:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   dd654:	200c      	movs	r0, #12
   dd656:	4927      	ldr	r1, [pc, #156]	; (dd6f4 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   dd658:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   dd65a:	f001 ff0d 	bl	df478 <_ZnwjRKSt9nothrow_t>
   dd65e:	4601      	mov	r1, r0
   dd660:	b118      	cbz	r0, dd66a <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   dd662:	2300      	movs	r3, #0
   dd664:	e9c0 3300 	strd	r3, r3, [r0]
   dd668:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   dd66a:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dd66c:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   dd66e:	f7ff ffd9 	bl	dd624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   dd672:	9a02      	ldr	r2, [sp, #8]
   dd674:	b942      	cbnz	r2, dd688 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   dd676:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   dd67a:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   dd67c:	a803      	add	r0, sp, #12
   dd67e:	f7f6 feda 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dd682:	4620      	mov	r0, r4
   dd684:	b007      	add	sp, #28
   dd686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   dd688:	2300      	movs	r3, #0
   dd68a:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   dd68c:	4629      	mov	r1, r5
   dd68e:	ab01      	add	r3, sp, #4
   dd690:	4630      	mov	r0, r6
   dd692:	f7ff fd35 	bl	dd100 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   dd696:	b918      	cbnz	r0, dd6a0 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   dd698:	e9c4 0000 	strd	r0, r0, [r4]
   dd69c:	60a0      	str	r0, [r4, #8]
}
   dd69e:	e7ed      	b.n	dd67c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   dd6a0:	4914      	ldr	r1, [pc, #80]	; (dd6f4 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   dd6a2:	9f02      	ldr	r7, [sp, #8]
   dd6a4:	1c68      	adds	r0, r5, #1
   dd6a6:	f001 fee9 	bl	df47c <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   dd6aa:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   dd6ac:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   dd6ae:	6858      	ldr	r0, [r3, #4]
   dd6b0:	2800      	cmp	r0, #0
   dd6b2:	d0f1      	beq.n	dd698 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   dd6b4:	462a      	mov	r2, r5
   dd6b6:	4631      	mov	r1, r6
   dd6b8:	f002 fc6c 	bl	dff94 <memcpy>
   dd6bc:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   dd6be:	9901      	ldr	r1, [sp, #4]
   dd6c0:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   dd6c2:	2201      	movs	r2, #1
   dd6c4:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   dd6c6:	685a      	ldr	r2, [r3, #4]
   dd6c8:	f7ff fdec 	bl	dd2a4 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   dd6cc:	2800      	cmp	r0, #0
   dd6ce:	d0e3      	beq.n	dd698 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   dd6d0:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   dd6d2:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dd6d4:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   dd6d6:	9b03      	ldr	r3, [sp, #12]
   dd6d8:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   dd6da:	b113      	cbz	r3, dd6e2 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   dd6dc:	685a      	ldr	r2, [r3, #4]
   dd6de:	3201      	adds	r2, #1
   dd6e0:	605a      	str	r2, [r3, #4]
   dd6e2:	aa04      	add	r2, sp, #16
   dd6e4:	4620      	mov	r0, r4
   dd6e6:	f7ff fc46 	bl	dcf76 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   dd6ea:	a805      	add	r0, sp, #20
   dd6ec:	f7f6 fea3 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dd6f0:	e7c4      	b.n	dd67c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   dd6f2:	bf00      	nop
   dd6f4:	000e2f30 	.word	0x000e2f30

000dd6f8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   dd6f8:	6880      	ldr	r0, [r0, #8]
   dd6fa:	6803      	ldr	r3, [r0, #0]
   dd6fc:	68db      	ldr	r3, [r3, #12]
   dd6fe:	4718      	bx	r3

000dd700 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   dd700:	4770      	bx	lr

000dd702 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   dd702:	4608      	mov	r0, r1
   dd704:	b111      	cbz	r1, dd70c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   dd706:	680b      	ldr	r3, [r1, #0]
   dd708:	685b      	ldr	r3, [r3, #4]
   dd70a:	4718      	bx	r3
}
   dd70c:	4770      	bx	lr

000dd70e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   dd70e:	4770      	bx	lr

000dd710 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   dd710:	4770      	bx	lr

000dd712 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   dd712:	4770      	bx	lr

000dd714 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   dd714:	4770      	bx	lr

000dd716 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   dd716:	b538      	push	{r3, r4, r5, lr}
   dd718:	4604      	mov	r4, r0
   dd71a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   dd71c:	6800      	ldr	r0, [r0, #0]
   dd71e:	212e      	movs	r1, #46	; 0x2e
   dd720:	f002 fcb2 	bl	e0088 <strchrnul>
    size = s - category;
   dd724:	6823      	ldr	r3, [r4, #0]
   dd726:	1ac3      	subs	r3, r0, r3
   dd728:	602b      	str	r3, [r5, #0]
    if (size) {
   dd72a:	b123      	cbz	r3, dd736 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   dd72c:	7803      	ldrb	r3, [r0, #0]
   dd72e:	b103      	cbz	r3, dd732 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   dd730:	3001      	adds	r0, #1
   dd732:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dd734:	6020      	str	r0, [r4, #0]
}
   dd736:	4618      	mov	r0, r3
   dd738:	bd38      	pop	{r3, r4, r5, pc}

000dd73a <_ZN5spark16JSONStreamWriterD0Ev>:
   dd73a:	b510      	push	{r4, lr}
   dd73c:	210c      	movs	r1, #12
   dd73e:	4604      	mov	r4, r0
   dd740:	f001 fe98 	bl	df474 <_ZdlPvj>
   dd744:	4620      	mov	r0, r4
   dd746:	bd10      	pop	{r4, pc}

000dd748 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   dd748:	b510      	push	{r4, lr}
   dd74a:	2104      	movs	r1, #4
   dd74c:	4604      	mov	r4, r0
   dd74e:	f001 fe91 	bl	df474 <_ZdlPvj>
   dd752:	4620      	mov	r0, r4
   dd754:	bd10      	pop	{r4, pc}

000dd756 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   dd756:	b510      	push	{r4, lr}
   dd758:	2104      	movs	r1, #4
   dd75a:	4604      	mov	r4, r0
   dd75c:	f001 fe8a 	bl	df474 <_ZdlPvj>
   dd760:	4620      	mov	r0, r4
   dd762:	bd10      	pop	{r4, pc}

000dd764 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   dd764:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   dd766:	f002 fc99 	bl	e009c <strcmp>
}
   dd76a:	fab0 f080 	clz	r0, r0
   dd76e:	0940      	lsrs	r0, r0, #5
   dd770:	bd08      	pop	{r3, pc}

000dd772 <__tcf_1>:
   dd772:	4770      	bx	lr

000dd774 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   dd774:	b510      	push	{r4, lr}
   dd776:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   dd778:	f001 fce4 	bl	df144 <_Z16_fetch_usbserialv>
   dd77c:	4284      	cmp	r4, r0
   dd77e:	d010      	beq.n	dd7a2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   dd780:	f001 fc58 	bl	df034 <_Z22__fetch_global_Serial1v>
   dd784:	4284      	cmp	r4, r0
   dd786:	d105      	bne.n	dd794 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   dd788:	f001 fc54 	bl	df034 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   dd78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   dd790:	f001 bc4d 	b.w	df02e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   dd794:	b12c      	cbz	r4, dd7a2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   dd796:	6823      	ldr	r3, [r4, #0]
   dd798:	4620      	mov	r0, r4
   dd79a:	685b      	ldr	r3, [r3, #4]
}
   dd79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dd7a0:	4718      	bx	r3
   dd7a2:	bd10      	pop	{r4, pc}

000dd7a4 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   dd7a4:	b513      	push	{r0, r1, r4, lr}
   dd7a6:	4604      	mov	r4, r0
    return value(val, strlen(val));
   dd7a8:	4608      	mov	r0, r1
   dd7aa:	9101      	str	r1, [sp, #4]
   dd7ac:	f002 fca5 	bl	e00fa <strlen>
   dd7b0:	9901      	ldr	r1, [sp, #4]
   dd7b2:	4602      	mov	r2, r0
   dd7b4:	4620      	mov	r0, r4
}
   dd7b6:	b002      	add	sp, #8
   dd7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   dd7bc:	f7ff bf22 	b.w	dd604 <_ZN5spark10JSONWriter5valueEPKcj>

000dd7c0 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   dd7c0:	b513      	push	{r0, r1, r4, lr}
   dd7c2:	4604      	mov	r4, r0
    write(str, strlen(str));
   dd7c4:	4608      	mov	r0, r1
   dd7c6:	9101      	str	r1, [sp, #4]
   dd7c8:	f002 fc97 	bl	e00fa <strlen>
   dd7cc:	6823      	ldr	r3, [r4, #0]
   dd7ce:	9901      	ldr	r1, [sp, #4]
   dd7d0:	68db      	ldr	r3, [r3, #12]
   dd7d2:	4602      	mov	r2, r0
   dd7d4:	4620      	mov	r0, r4
}
   dd7d6:	b002      	add	sp, #8
   dd7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   dd7dc:	4718      	bx	r3

000dd7de <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   dd7de:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   dd7e0:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   dd7e2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   dd7e6:	68db      	ldr	r3, [r3, #12]
   dd7e8:	2201      	movs	r2, #1
   dd7ea:	f10d 0107 	add.w	r1, sp, #7
   dd7ee:	4798      	blx	r3
}
   dd7f0:	b003      	add	sp, #12
   dd7f2:	f85d fb04 	ldr.w	pc, [sp], #4

000dd7f6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   dd7f6:	b40e      	push	{r1, r2, r3}
   dd7f8:	b503      	push	{r0, r1, lr}
   dd7fa:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   dd7fc:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   dd7fe:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   dd802:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   dd804:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   dd806:	f000 fff6 	bl	de7f6 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   dd80a:	b002      	add	sp, #8
   dd80c:	f85d eb04 	ldr.w	lr, [sp], #4
   dd810:	b003      	add	sp, #12
   dd812:	4770      	bx	lr

000dd814 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   dd814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   dd818:	e9d0 9500 	ldrd	r9, r5, [r0]
   dd81c:	f04f 0814 	mov.w	r8, #20
   dd820:	fb08 f505 	mul.w	r5, r8, r5
   dd824:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   dd826:	10ab      	asrs	r3, r5, #2
   dd828:	4d18      	ldr	r5, [pc, #96]	; (dd88c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   dd82a:	4617      	mov	r7, r2
   dd82c:	435d      	muls	r5, r3
   dd82e:	464c      	mov	r4, r9
      while (__len > 0)
   dd830:	2d00      	cmp	r5, #0
   dd832:	dd23      	ble.n	dd87c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	  _DistanceType __half = __len >> 1;
   dd834:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   dd836:	fb08 f006 	mul.w	r0, r8, r6
   dd83a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   dd83e:	463a      	mov	r2, r7
   dd840:	f8ba b004 	ldrh.w	fp, [sl, #4]
   dd844:	5820      	ldr	r0, [r4, r0]
   dd846:	9101      	str	r1, [sp, #4]
   dd848:	455f      	cmp	r7, fp
   dd84a:	bf28      	it	cs
   dd84c:	465a      	movcs	r2, fp
   dd84e:	f002 fc5c 	bl	e010a <strncmp>
                if (cmp == 0) {
   dd852:	9901      	ldr	r1, [sp, #4]
   dd854:	2301      	movs	r3, #1
   dd856:	b978      	cbnz	r0, dd878 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   dd858:	455f      	cmp	r7, fp
   dd85a:	d103      	bne.n	dd864 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   dd85c:	9a00      	ldr	r2, [sp, #0]
   dd85e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   dd860:	4635      	mov	r5, r6
   dd862:	e7e5      	b.n	dd830 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   dd864:	bf8c      	ite	hi
   dd866:	2001      	movhi	r0, #1
   dd868:	2000      	movls	r0, #0
	  if (__comp(__middle, __val))
   dd86a:	2800      	cmp	r0, #0
   dd86c:	d0f8      	beq.n	dd860 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	      __len = __len - __half - 1;
   dd86e:	1bae      	subs	r6, r5, r6
	      ++__first;
   dd870:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   dd874:	3e01      	subs	r6, #1
   dd876:	e7f3      	b.n	dd860 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   dd878:	0fc0      	lsrs	r0, r0, #31
   dd87a:	e7f6      	b.n	dd86a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   dd87c:	eba4 0409 	sub.w	r4, r4, r9
}
   dd880:	4802      	ldr	r0, [pc, #8]	; (dd88c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   dd882:	10a4      	asrs	r4, r4, #2
   dd884:	4360      	muls	r0, r4
   dd886:	b003      	add	sp, #12
   dd888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd88c:	cccccccd 	.word	0xcccccccd

000dd890 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   dd890:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   dd892:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   dd894:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   dd896:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   dd898:	b30b      	cbz	r3, dd8de <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   dd89a:	b301      	cbz	r1, dd8de <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   dd89c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   dd89e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   dd8a2:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   dd8a4:	a903      	add	r1, sp, #12
   dd8a6:	a801      	add	r0, sp, #4
   dd8a8:	f7ff ff35 	bl	dd716 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   dd8ac:	4601      	mov	r1, r0
   dd8ae:	b1b0      	cbz	r0, dd8de <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   dd8b0:	f10d 030b 	add.w	r3, sp, #11
   dd8b4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   dd8b6:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   dd8ba:	4620      	mov	r0, r4
   dd8bc:	f7ff ffaa 	bl	dd814 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   dd8c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   dd8c4:	b15b      	cbz	r3, dd8de <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   dd8c6:	6824      	ldr	r4, [r4, #0]
   dd8c8:	2314      	movs	r3, #20
   dd8ca:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   dd8ce:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   dd8d2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   dd8d6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   dd8d8:	bfa8      	it	ge
   dd8da:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   dd8dc:	e7e2      	b.n	dd8a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   dd8de:	4630      	mov	r0, r6
   dd8e0:	b004      	add	sp, #16
   dd8e2:	bd70      	pop	{r4, r5, r6, pc}

000dd8e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   dd8e4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   dd8e6:	4c09      	ldr	r4, [pc, #36]	; (dd90c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   dd8e8:	7823      	ldrb	r3, [r4, #0]
   dd8ea:	f3bf 8f5b 	dmb	ish
   dd8ee:	07db      	lsls	r3, r3, #31
   dd8f0:	d409      	bmi.n	dd906 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   dd8f2:	4620      	mov	r0, r4
   dd8f4:	f7f6 fbe2 	bl	d40bc <__cxa_guard_acquire>
   dd8f8:	b128      	cbz	r0, dd906 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   dd8fa:	4620      	mov	r0, r4
   dd8fc:	f7f6 fbe3 	bl	d40c6 <__cxa_guard_release>
   dd900:	4803      	ldr	r0, [pc, #12]	; (dd910 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   dd902:	f002 fb2f 	bl	dff64 <atexit>
}
   dd906:	4803      	ldr	r0, [pc, #12]	; (dd914 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   dd908:	bd10      	pop	{r4, pc}
   dd90a:	bf00      	nop
   dd90c:	2003e574 	.word	0x2003e574
   dd910:	000dd70f 	.word	0x000dd70f
   dd914:	2003e20c 	.word	0x2003e20c

000dd918 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   dd918:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   dd91a:	4c09      	ldr	r4, [pc, #36]	; (dd940 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   dd91c:	7823      	ldrb	r3, [r4, #0]
   dd91e:	f3bf 8f5b 	dmb	ish
   dd922:	07db      	lsls	r3, r3, #31
   dd924:	d409      	bmi.n	dd93a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   dd926:	4620      	mov	r0, r4
   dd928:	f7f6 fbc8 	bl	d40bc <__cxa_guard_acquire>
   dd92c:	b128      	cbz	r0, dd93a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   dd92e:	4620      	mov	r0, r4
   dd930:	f7f6 fbc9 	bl	d40c6 <__cxa_guard_release>
   dd934:	4803      	ldr	r0, [pc, #12]	; (dd944 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   dd936:	f002 fb15 	bl	dff64 <atexit>
    return &factory;
}
   dd93a:	4803      	ldr	r0, [pc, #12]	; (dd948 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   dd93c:	bd10      	pop	{r4, pc}
   dd93e:	bf00      	nop
   dd940:	2003e578 	.word	0x2003e578
   dd944:	000dd773 	.word	0x000dd773
   dd948:	2003e210 	.word	0x2003e210

000dd94c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   dd94c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   dd94e:	2500      	movs	r5, #0
   dd950:	4604      	mov	r4, r0
   dd952:	e9c0 5500 	strd	r5, r5, [r0]
   dd956:	e9c0 5504 	strd	r5, r5, [r0, #16]
   dd95a:	6085      	str	r5, [r0, #8]
   dd95c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   dd95e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   dd962:	f7fe f9ad 	bl	dbcc0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   dd966:	f7ff ffbd 	bl	dd8e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   dd96a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dd96c:	f7ff ffd4 	bl	dd918 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   dd970:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dd972:	6220      	str	r0, [r4, #32]
}
   dd974:	4620      	mov	r0, r4
   dd976:	bd38      	pop	{r3, r4, r5, pc}

000dd978 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   dd978:	b510      	push	{r4, lr}
    static LogManager mgr;
   dd97a:	4c0a      	ldr	r4, [pc, #40]	; (dd9a4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   dd97c:	7823      	ldrb	r3, [r4, #0]
   dd97e:	f3bf 8f5b 	dmb	ish
   dd982:	07db      	lsls	r3, r3, #31
   dd984:	d40c      	bmi.n	dd9a0 <_ZN5spark10LogManager8instanceEv+0x28>
   dd986:	4620      	mov	r0, r4
   dd988:	f7f6 fb98 	bl	d40bc <__cxa_guard_acquire>
   dd98c:	b140      	cbz	r0, dd9a0 <_ZN5spark10LogManager8instanceEv+0x28>
   dd98e:	4806      	ldr	r0, [pc, #24]	; (dd9a8 <_ZN5spark10LogManager8instanceEv+0x30>)
   dd990:	f7ff ffdc 	bl	dd94c <_ZN5spark10LogManagerC1Ev>
   dd994:	4620      	mov	r0, r4
   dd996:	f7f6 fb96 	bl	d40c6 <__cxa_guard_release>
   dd99a:	4804      	ldr	r0, [pc, #16]	; (dd9ac <_ZN5spark10LogManager8instanceEv+0x34>)
   dd99c:	f002 fae2 	bl	dff64 <atexit>
    return &mgr;
}
   dd9a0:	4801      	ldr	r0, [pc, #4]	; (dd9a8 <_ZN5spark10LogManager8instanceEv+0x30>)
   dd9a2:	bd10      	pop	{r4, pc}
   dd9a4:	2003e570 	.word	0x2003e570
   dd9a8:	2003e580 	.word	0x2003e580
   dd9ac:	000ddde1 	.word	0x000ddde1

000dd9b0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   dd9b0:	4a02      	ldr	r2, [pc, #8]	; (dd9bc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   dd9b2:	4903      	ldr	r1, [pc, #12]	; (dd9c0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   dd9b4:	4803      	ldr	r0, [pc, #12]	; (dd9c4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   dd9b6:	2300      	movs	r3, #0
   dd9b8:	f7fe bbe2 	b.w	dc180 <log_set_callbacks>
   dd9bc:	000ddc69 	.word	0x000ddc69
   dd9c0:	000ddbf5 	.word	0x000ddbf5
   dd9c4:	000ddb75 	.word	0x000ddb75

000dd9c8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   dd9c8:	2300      	movs	r3, #0
   dd9ca:	461a      	mov	r2, r3
   dd9cc:	4619      	mov	r1, r3
   dd9ce:	4618      	mov	r0, r3
   dd9d0:	f7fe bbd6 	b.w	dc180 <log_set_callbacks>

000dd9d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   dd9d4:	b570      	push	{r4, r5, r6, lr}
   dd9d6:	b08a      	sub	sp, #40	; 0x28
   dd9d8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   dd9da:	4601      	mov	r1, r0
   dd9dc:	a804      	add	r0, sp, #16
   dd9de:	f7f8 fd11 	bl	d6404 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   dd9e2:	4e14      	ldr	r6, [pc, #80]	; (dda34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   dd9e4:	a804      	add	r0, sp, #16
   dd9e6:	f7ff fcb5 	bl	dd354 <_ZN5spark18JSONObjectIterator4nextEv>
   dd9ea:	b1e8      	cbz	r0, dda28 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   dd9ec:	a904      	add	r1, sp, #16
   dd9ee:	4668      	mov	r0, sp
   dd9f0:	f7f8 fd19 	bl	d6426 <_ZNK5spark18JSONObjectIterator4nameEv>
   dd9f4:	9802      	ldr	r0, [sp, #8]
   dd9f6:	4631      	mov	r1, r6
   dd9f8:	f7ff feb4 	bl	dd764 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   dd9fc:	4604      	mov	r4, r0
   dd9fe:	b110      	cbz	r0, dda06 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   dda00:	1e2c      	subs	r4, r5, #0
   dda02:	bf18      	it	ne
   dda04:	2401      	movne	r4, #1
   dda06:	a801      	add	r0, sp, #4
   dda08:	f7f6 fd15 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dda0c:	2c00      	cmp	r4, #0
   dda0e:	d0e9      	beq.n	dd9e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   dda10:	a904      	add	r1, sp, #16
   dda12:	4668      	mov	r0, sp
   dda14:	f7f8 fd18 	bl	d6448 <_ZNK5spark18JSONObjectIterator5valueEv>
   dda18:	4668      	mov	r0, sp
   dda1a:	f7ff fb21 	bl	dd060 <_ZNK5spark9JSONValue5toIntEv>
   dda1e:	6028      	str	r0, [r5, #0]
   dda20:	a801      	add	r0, sp, #4
   dda22:	f7f6 fd08 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dda26:	e7dd      	b.n	dd9e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   dda28:	a805      	add	r0, sp, #20
   dda2a:	f7f6 fd04 	bl	d4436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dda2e:	b00a      	add	sp, #40	; 0x28
   dda30:	bd70      	pop	{r4, r5, r6, pc}
   dda32:	bf00      	nop
   dda34:	000e2d5c 	.word	0x000e2d5c

000dda38 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dda38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dda3a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   dda3c:	4620      	mov	r0, r4
   dda3e:	4912      	ldr	r1, [pc, #72]	; (dda88 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dda40:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   dda42:	f002 fb2b 	bl	e009c <strcmp>
   dda46:	b948      	cbnz	r0, dda5c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   dda48:	f001 fb7c 	bl	df144 <_Z16_fetch_usbserialv>
   dda4c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   dda50:	f001 fb68 	bl	df124 <_ZN9USBSerial5beginEl>
        return &Serial;
   dda54:	f001 fb76 	bl	df144 <_Z16_fetch_usbserialv>
}
   dda58:	b003      	add	sp, #12
   dda5a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   dda5c:	490b      	ldr	r1, [pc, #44]	; (dda8c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   dda5e:	4620      	mov	r0, r4
   dda60:	f002 fb1c 	bl	e009c <strcmp>
   dda64:	b970      	cbnz	r0, dda84 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   dda66:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   dda6a:	a901      	add	r1, sp, #4
   dda6c:	4628      	mov	r0, r5
        int baud = 9600;
   dda6e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   dda70:	f7ff ffb0 	bl	dd9d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   dda74:	f001 fade 	bl	df034 <_Z22__fetch_global_Serial1v>
   dda78:	9901      	ldr	r1, [sp, #4]
   dda7a:	f001 fad5 	bl	df028 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   dda7e:	f001 fad9 	bl	df034 <_Z22__fetch_global_Serial1v>
   dda82:	e7e9      	b.n	dda58 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   dda84:	2000      	movs	r0, #0
   dda86:	e7e7      	b.n	dda58 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   dda88:	000e2d61 	.word	0x000e2d61
   dda8c:	000e2d68 	.word	0x000e2d68

000dda90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   dda90:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   dda92:	e9d0 5300 	ldrd	r5, r3, [r0]
   dda96:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   dda98:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   dda9a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dda9e:	42ae      	cmp	r6, r5
   ddaa0:	d005      	beq.n	ddaae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   ddaa2:	f105 0008 	add.w	r0, r5, #8
   ddaa6:	f7ff fff3 	bl	dda90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ddaaa:	3514      	adds	r5, #20
   ddaac:	e7f7      	b.n	dda9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   ddaae:	6820      	ldr	r0, [r4, #0]
   ddab0:	f7fe fc96 	bl	dc3e0 <free>
}
   ddab4:	4620      	mov	r0, r4
   ddab6:	bd70      	pop	{r4, r5, r6, pc}

000ddab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ddab8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ddaba:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ddabe:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ddac0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   ddac4:	42ae      	cmp	r6, r5
   ddac6:	d004      	beq.n	ddad2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   ddac8:	4628      	mov	r0, r5
   ddaca:	f000 fed5 	bl	de878 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   ddace:	3510      	adds	r5, #16
   ddad0:	e7f8      	b.n	ddac4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ddad2:	6820      	ldr	r0, [r4, #0]
   ddad4:	f7fe fc84 	bl	dc3e0 <free>
}
   ddad8:	4620      	mov	r0, r4
   ddada:	bd70      	pop	{r4, r5, r6, pc}

000ddadc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   ddadc:	b510      	push	{r4, lr}
   ddade:	4604      	mov	r4, r0
   ddae0:	300c      	adds	r0, #12
   ddae2:	f7ff ffd5 	bl	dda90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ddae6:	4620      	mov	r0, r4
   ddae8:	f7ff ffe6 	bl	ddab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ddaec:	4620      	mov	r0, r4
   ddaee:	bd10      	pop	{r4, pc}

000ddaf0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   ddaf0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   ddaf2:	4b04      	ldr	r3, [pc, #16]	; (ddb04 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   ddaf4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   ddaf6:	f840 3b04 	str.w	r3, [r0], #4
   ddafa:	f7ff ffef 	bl	ddadc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   ddafe:	4620      	mov	r0, r4
   ddb00:	bd10      	pop	{r4, pc}
   ddb02:	bf00      	nop
   ddb04:	000e21f4 	.word	0x000e21f4

000ddb08 <_ZN5spark16StreamLogHandlerD0Ev>:
   ddb08:	b510      	push	{r4, lr}
   ddb0a:	4604      	mov	r4, r0
   ddb0c:	f7ff fff0 	bl	ddaf0 <_ZN5spark16StreamLogHandlerD1Ev>
   ddb10:	4620      	mov	r0, r4
   ddb12:	2124      	movs	r1, #36	; 0x24
   ddb14:	f001 fcae 	bl	df474 <_ZdlPvj>
   ddb18:	4620      	mov	r0, r4
   ddb1a:	bd10      	pop	{r4, pc}

000ddb1c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   ddb1c:	b510      	push	{r4, lr}
   ddb1e:	4b03      	ldr	r3, [pc, #12]	; (ddb2c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   ddb20:	6003      	str	r3, [r0, #0]
   ddb22:	4604      	mov	r4, r0
   ddb24:	f7ff ffe4 	bl	ddaf0 <_ZN5spark16StreamLogHandlerD1Ev>
   ddb28:	4620      	mov	r0, r4
   ddb2a:	bd10      	pop	{r4, pc}
   ddb2c:	000e2dfc 	.word	0x000e2dfc

000ddb30 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   ddb30:	b510      	push	{r4, lr}
   ddb32:	4604      	mov	r4, r0
   ddb34:	f7ff fff2 	bl	ddb1c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   ddb38:	4620      	mov	r0, r4
   ddb3a:	2124      	movs	r1, #36	; 0x24
   ddb3c:	f001 fc9a 	bl	df474 <_ZdlPvj>
   ddb40:	4620      	mov	r0, r4
   ddb42:	bd10      	pop	{r4, pc}

000ddb44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   ddb44:	2200      	movs	r2, #0
   ddb46:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   ddb4a:	b510      	push	{r4, lr}
        capacity_(0) {
   ddb4c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   ddb4e:	680c      	ldr	r4, [r1, #0]
   ddb50:	6004      	str	r4, [r0, #0]
   ddb52:	684c      	ldr	r4, [r1, #4]
   ddb54:	6044      	str	r4, [r0, #4]
   ddb56:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ddb58:	600a      	str	r2, [r1, #0]
   ddb5a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ddb5c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ddb5e:	608a      	str	r2, [r1, #8]
}
   ddb60:	bd10      	pop	{r4, pc}

000ddb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   ddb62:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   ddb64:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   ddb66:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ddb68:	6818      	ldr	r0, [r3, #0]
   ddb6a:	f7fe f8c1 	bl	dbcf0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   ddb6e:	4620      	mov	r0, r4
   ddb70:	bd10      	pop	{r4, pc}
	...

000ddb74 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   ddb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddb78:	b087      	sub	sp, #28
   ddb7a:	4680      	mov	r8, r0
   ddb7c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   ddb7e:	4b1c      	ldr	r3, [pc, #112]	; (ddbf0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   ddb80:	685b      	ldr	r3, [r3, #4]
   ddb82:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ddb86:	4689      	mov	r9, r1
   ddb88:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   ddb8a:	b96b      	cbnz	r3, ddba8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   ddb8c:	f7ff fef4 	bl	dd978 <_ZN5spark10LogManager8instanceEv>
   ddb90:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ddb92:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   ddb96:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ddb98:	9305      	str	r3, [sp, #20]
   ddb9a:	f7fe f8a1 	bl	dbce0 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   ddb9e:	7b23      	ldrb	r3, [r4, #12]
   ddba0:	b12b      	cbz	r3, ddbae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   ddba2:	a805      	add	r0, sp, #20
   ddba4:	f7ff ffdd 	bl	ddb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   ddba8:	b007      	add	sp, #28
   ddbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   ddbae:	2301      	movs	r3, #1
   ddbb0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   ddbb2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   ddbb6:	fa5f f989 	uxtb.w	r9, r9
   ddbba:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ddbbe:	45aa      	cmp	sl, r5
   ddbc0:	d012      	beq.n	ddbe8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   ddbc2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   ddbc6:	4631      	mov	r1, r6
   ddbc8:	1d38      	adds	r0, r7, #4
   ddbca:	f7ff fe61 	bl	dd890 <_ZNK5spark6detail9LogFilter5levelEPKc>
   ddbce:	4581      	cmp	r9, r0
   ddbd0:	d3f5      	bcc.n	ddbbe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   ddbd2:	683b      	ldr	r3, [r7, #0]
   ddbd4:	9a03      	ldr	r2, [sp, #12]
   ddbd6:	9200      	str	r2, [sp, #0]
   ddbd8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   ddbdc:	464a      	mov	r2, r9
   ddbde:	4633      	mov	r3, r6
   ddbe0:	4641      	mov	r1, r8
   ddbe2:	4638      	mov	r0, r7
   ddbe4:	47d8      	blx	fp
   ddbe6:	e7ea      	b.n	ddbbe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   ddbe8:	2300      	movs	r3, #0
   ddbea:	7323      	strb	r3, [r4, #12]
   ddbec:	e7d9      	b.n	ddba2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   ddbee:	bf00      	nop
   ddbf0:	e000ed00 	.word	0xe000ed00

000ddbf4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   ddbf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddbf8:	469b      	mov	fp, r3
   ddbfa:	4b1a      	ldr	r3, [pc, #104]	; (ddc64 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   ddbfc:	685b      	ldr	r3, [r3, #4]
   ddbfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ddc02:	4680      	mov	r8, r0
   ddc04:	4689      	mov	r9, r1
   ddc06:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   ddc08:	b96b      	cbnz	r3, ddc26 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   ddc0a:	f7ff feb5 	bl	dd978 <_ZN5spark10LogManager8instanceEv>
   ddc0e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ddc10:	f100 0324 	add.w	r3, r0, #36	; 0x24
   ddc14:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ddc16:	9301      	str	r3, [sp, #4]
   ddc18:	f7fe f862 	bl	dbce0 <os_mutex_recursive_lock>
        if (that->isActive()) {
   ddc1c:	7b23      	ldrb	r3, [r4, #12]
   ddc1e:	b12b      	cbz	r3, ddc2c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   ddc20:	a801      	add	r0, sp, #4
   ddc22:	f7ff ff9e 	bl	ddb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ddc26:	b003      	add	sp, #12
   ddc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   ddc2c:	2301      	movs	r3, #1
   ddc2e:	7323      	strb	r3, [r4, #12]
   ddc30:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   ddc34:	b2f6      	uxtb	r6, r6
   ddc36:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ddc3a:	4555      	cmp	r5, sl
   ddc3c:	d00e      	beq.n	ddc5c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   ddc3e:	f855 7b04 	ldr.w	r7, [r5], #4
   ddc42:	4659      	mov	r1, fp
   ddc44:	1d38      	adds	r0, r7, #4
   ddc46:	f7ff fe23 	bl	dd890 <_ZNK5spark6detail9LogFilter5levelEPKc>
   ddc4a:	4286      	cmp	r6, r0
   ddc4c:	d3f5      	bcc.n	ddc3a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   ddc4e:	683b      	ldr	r3, [r7, #0]
   ddc50:	464a      	mov	r2, r9
   ddc52:	68db      	ldr	r3, [r3, #12]
   ddc54:	4641      	mov	r1, r8
   ddc56:	4638      	mov	r0, r7
   ddc58:	4798      	blx	r3
   ddc5a:	e7ee      	b.n	ddc3a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   ddc5c:	2300      	movs	r3, #0
   ddc5e:	7323      	strb	r3, [r4, #12]
   ddc60:	e7de      	b.n	ddc20 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   ddc62:	bf00      	nop
   ddc64:	e000ed00 	.word	0xe000ed00

000ddc68 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   ddc68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ddc6c:	4b16      	ldr	r3, [pc, #88]	; (ddcc8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   ddc6e:	685b      	ldr	r3, [r3, #4]
   ddc70:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ddc74:	4605      	mov	r5, r0
   ddc76:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   ddc78:	bb1b      	cbnz	r3, ddcc2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   ddc7a:	f7ff fe7d 	bl	dd978 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   ddc7e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   ddc82:	4604      	mov	r4, r0
   ddc84:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ddc86:	9301      	str	r3, [sp, #4]
   ddc88:	f7fe f82a 	bl	dbce0 <os_mutex_recursive_lock>
   ddc8c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   ddc90:	2446      	movs	r4, #70	; 0x46
   ddc92:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ddc96:	45b0      	cmp	r8, r6
   ddc98:	d109      	bne.n	ddcae <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   ddc9a:	a801      	add	r0, sp, #4
   ddc9c:	f7ff ff61 	bl	ddb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   ddca0:	42a5      	cmp	r5, r4
   ddca2:	bfb4      	ite	lt
   ddca4:	2000      	movlt	r0, #0
   ddca6:	2001      	movge	r0, #1
}
   ddca8:	b002      	add	sp, #8
   ddcaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   ddcae:	f856 0b04 	ldr.w	r0, [r6], #4
   ddcb2:	4639      	mov	r1, r7
   ddcb4:	3004      	adds	r0, #4
   ddcb6:	f7ff fdeb 	bl	dd890 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   ddcba:	4284      	cmp	r4, r0
   ddcbc:	bfa8      	it	ge
   ddcbe:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   ddcc0:	e7e9      	b.n	ddc96 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   ddcc2:	2000      	movs	r0, #0
   ddcc4:	e7f0      	b.n	ddca8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   ddcc6:	bf00      	nop
   ddcc8:	e000ed00 	.word	0xe000ed00

000ddccc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ddccc:	b570      	push	{r4, r5, r6, lr}
   ddcce:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   ddcd0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ddcd4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   ddcd6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   ddcda:	4282      	cmp	r2, r0
   ddcdc:	d007      	beq.n	ddcee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   ddcde:	4601      	mov	r1, r0
            if (*p == value) {
   ddce0:	681d      	ldr	r5, [r3, #0]
   ddce2:	f851 6b04 	ldr.w	r6, [r1], #4
   ddce6:	42ae      	cmp	r6, r5
   ddce8:	d003      	beq.n	ddcf2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   ddcea:	4608      	mov	r0, r1
   ddcec:	e7f5      	b.n	ddcda <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   ddcee:	2000      	movs	r0, #0
}
   ddcf0:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   ddcf2:	1a52      	subs	r2, r2, r1
   ddcf4:	f002 f95c 	bl	dffb0 <memmove>
    --size_;
   ddcf8:	6863      	ldr	r3, [r4, #4]
   ddcfa:	3b01      	subs	r3, #1
   ddcfc:	6063      	str	r3, [r4, #4]
    return true;
   ddcfe:	2001      	movs	r0, #1
   ddd00:	e7f6      	b.n	ddcf0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000ddd02 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   ddd02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   ddd04:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   ddd08:	4604      	mov	r4, r0
   ddd0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ddd0c:	9101      	str	r1, [sp, #4]
   ddd0e:	9303      	str	r3, [sp, #12]
   ddd10:	f7fd ffe6 	bl	dbce0 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   ddd14:	a901      	add	r1, sp, #4
   ddd16:	4620      	mov	r0, r4
   ddd18:	f7ff ffd8 	bl	ddccc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   ddd1c:	b118      	cbz	r0, ddd26 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   ddd1e:	6863      	ldr	r3, [r4, #4]
   ddd20:	b90b      	cbnz	r3, ddd26 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   ddd22:	f7ff fe51 	bl	dd9c8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ddd26:	a803      	add	r0, sp, #12
   ddd28:	f7ff ff1b 	bl	ddb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ddd2c:	b004      	add	sp, #16
   ddd2e:	bd10      	pop	{r4, pc}

000ddd30 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   ddd30:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   ddd32:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   ddd36:	2318      	movs	r3, #24
   ddd38:	4604      	mov	r4, r0
   ddd3a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   ddd3e:	42ae      	cmp	r6, r5
   ddd40:	d015      	beq.n	ddd6e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   ddd42:	f105 0110 	add.w	r1, r5, #16
   ddd46:	4620      	mov	r0, r4
   ddd48:	f7ff ffc0 	bl	ddccc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   ddd4c:	6863      	ldr	r3, [r4, #4]
   ddd4e:	b90b      	cbnz	r3, ddd54 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   ddd50:	f7ff fe3a 	bl	dd9c8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   ddd54:	69e0      	ldr	r0, [r4, #28]
   ddd56:	6929      	ldr	r1, [r5, #16]
   ddd58:	6803      	ldr	r3, [r0, #0]
   ddd5a:	68db      	ldr	r3, [r3, #12]
   ddd5c:	4798      	blx	r3
        if (h.stream) {
   ddd5e:	6969      	ldr	r1, [r5, #20]
   ddd60:	b119      	cbz	r1, ddd6a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   ddd62:	6a20      	ldr	r0, [r4, #32]
   ddd64:	6803      	ldr	r3, [r0, #0]
   ddd66:	68db      	ldr	r3, [r3, #12]
   ddd68:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   ddd6a:	3518      	adds	r5, #24
   ddd6c:	e7e7      	b.n	ddd3e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   ddd6e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ddd72:	2618      	movs	r6, #24
   ddd74:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ddd78:	42ae      	cmp	r6, r5
   ddd7a:	d004      	beq.n	ddd86 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   ddd7c:	4628      	mov	r0, r5
   ddd7e:	f000 fd7b 	bl	de878 <_ZN6StringD1Ev>
   ddd82:	3518      	adds	r5, #24
   ddd84:	e7f8      	b.n	ddd78 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   ddd86:	2300      	movs	r3, #0
   ddd88:	6163      	str	r3, [r4, #20]
}
   ddd8a:	bd70      	pop	{r4, r5, r6, pc}

000ddd8c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   ddd8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ddd8e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   ddd90:	f7ff fe1a 	bl	dd9c8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ddd94:	f104 0324 	add.w	r3, r4, #36	; 0x24
   ddd98:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ddd9a:	9301      	str	r3, [sp, #4]
   ddd9c:	f7fd ffa0 	bl	dbce0 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   ddda0:	4620      	mov	r0, r4
   ddda2:	f7ff ffc5 	bl	ddd30 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   ddda6:	a801      	add	r0, sp, #4
   ddda8:	f7ff fedb 	bl	ddb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   dddac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dddae:	b108      	cbz	r0, dddb4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   dddb0:	f7fd ff8e 	bl	dbcd0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   dddb4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dddb8:	2618      	movs	r6, #24
   dddba:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dddbe:	42ae      	cmp	r6, r5
   dddc0:	d004      	beq.n	dddcc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   dddc2:	4628      	mov	r0, r5
   dddc4:	f000 fd58 	bl	de878 <_ZN6StringD1Ev>
   dddc8:	3518      	adds	r5, #24
   dddca:	e7f8      	b.n	dddbe <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   dddcc:	6920      	ldr	r0, [r4, #16]
   dddce:	f7fe fb07 	bl	dc3e0 <free>
   dddd2:	6820      	ldr	r0, [r4, #0]
   dddd4:	f7fe fb04 	bl	dc3e0 <free>
}
   dddd8:	4620      	mov	r0, r4
   dddda:	b002      	add	sp, #8
   ddddc:	bd70      	pop	{r4, r5, r6, pc}
	...

000ddde0 <__tcf_2>:
    static LogManager mgr;
   ddde0:	4801      	ldr	r0, [pc, #4]	; (ddde8 <__tcf_2+0x8>)
   ddde2:	f7ff bfd3 	b.w	ddd8c <_ZN5spark10LogManagerD1Ev>
   ddde6:	bf00      	nop
   ddde8:	2003e580 	.word	0x2003e580

000dddec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   dddec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   dddee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dddf0:	4606      	mov	r6, r0
   dddf2:	460c      	mov	r4, r1
   dddf4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   dddf6:	d927      	bls.n	dde48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   dddf8:	4290      	cmp	r0, r2
   dddfa:	d226      	bcs.n	dde4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   dddfc:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   dde00:	1a6c      	subs	r4, r5, r1
   dde02:	f1a1 0714 	sub.w	r7, r1, #20
   dde06:	4404      	add	r4, r0
        capacity_(0) {
   dde08:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   dde0a:	42af      	cmp	r7, r5
   dde0c:	d03d      	beq.n	dde8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   dde0e:	b1a4      	cbz	r4, dde3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   dde10:	682b      	ldr	r3, [r5, #0]
   dde12:	6023      	str	r3, [r4, #0]
   dde14:	88ab      	ldrh	r3, [r5, #4]
   dde16:	80a3      	strh	r3, [r4, #4]
   dde18:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   dde1c:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   dde1e:	e9c4 6602 	strd	r6, r6, [r4, #8]
   dde22:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dde24:	68ab      	ldr	r3, [r5, #8]
   dde26:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dde28:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dde2a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dde2c:	68ea      	ldr	r2, [r5, #12]
   dde2e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dde30:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dde32:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dde34:	692a      	ldr	r2, [r5, #16]
   dde36:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dde38:	612b      	str	r3, [r5, #16]
   dde3a:	f105 0008 	add.w	r0, r5, #8
   dde3e:	f7ff fe27 	bl	dda90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   dde42:	3d14      	subs	r5, #20
   dde44:	3c14      	subs	r4, #20
   dde46:	e7e0      	b.n	dde0a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   dde48:	d01f      	beq.n	dde8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   dde4a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   dde4c:	42ac      	cmp	r4, r5
   dde4e:	d01c      	beq.n	dde8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   dde50:	b1a6      	cbz	r6, dde7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   dde52:	6823      	ldr	r3, [r4, #0]
   dde54:	6033      	str	r3, [r6, #0]
   dde56:	88a3      	ldrh	r3, [r4, #4]
   dde58:	80b3      	strh	r3, [r6, #4]
   dde5a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   dde5e:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   dde60:	e9c6 7702 	strd	r7, r7, [r6, #8]
   dde64:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   dde66:	68a3      	ldr	r3, [r4, #8]
   dde68:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dde6a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dde6c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   dde6e:	68e2      	ldr	r2, [r4, #12]
   dde70:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dde72:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dde74:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   dde76:	6922      	ldr	r2, [r4, #16]
   dde78:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dde7a:	6123      	str	r3, [r4, #16]
   dde7c:	f104 0008 	add.w	r0, r4, #8
   dde80:	f7ff fe06 	bl	dda90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   dde84:	3414      	adds	r4, #20
   dde86:	3614      	adds	r6, #20
   dde88:	e7e0      	b.n	dde4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   dde8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dde8c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   dde8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dde8e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   dde92:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   dde94:	4604      	mov	r4, r0
   dde96:	460e      	mov	r6, r1
   dde98:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dde9a:	db0d      	blt.n	ddeb8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   dde9c:	3501      	adds	r5, #1
        if (n > 0) {
   dde9e:	2d00      	cmp	r5, #0
   ddea0:	6800      	ldr	r0, [r0, #0]
   ddea2:	dd04      	ble.n	ddeae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   ddea4:	00a9      	lsls	r1, r5, #2
   ddea6:	f7fe faa3 	bl	dc3f0 <realloc>
            if (!d) {
   ddeaa:	b918      	cbnz	r0, ddeb4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   ddeac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   ddeae:	f7fe fa97 	bl	dc3e0 <free>
        T* d = nullptr;
   ddeb2:	2000      	movs	r0, #0
        data_ = d;
   ddeb4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ddeb6:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   ddeb8:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   ddeba:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ddebc:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   ddec0:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   ddec2:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   ddec6:	1d08      	adds	r0, r1, #4
   ddec8:	f002 f872 	bl	dffb0 <memmove>
    new(p) T(std::move(value));
   ddecc:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   dded0:	6863      	ldr	r3, [r4, #4]
   dded2:	3301      	adds	r3, #1
   dded4:	6063      	str	r3, [r4, #4]
    return true;
   dded6:	2001      	movs	r0, #1
   dded8:	e7e8      	b.n	ddeac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000ddeda <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   ddeda:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   ddedc:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   ddee0:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   ddee2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ddee4:	9301      	str	r3, [sp, #4]
   ddee6:	460d      	mov	r5, r1
   ddee8:	f7fd fefa 	bl	dbce0 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   ddeec:	e9d4 3100 	ldrd	r3, r1, [r4]
   ddef0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   ddef4:	4283      	cmp	r3, r0
   ddef6:	461a      	mov	r2, r3
   ddef8:	d00b      	beq.n	ddf12 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   ddefa:	6812      	ldr	r2, [r2, #0]
   ddefc:	42aa      	cmp	r2, r5
   ddefe:	f103 0304 	add.w	r3, r3, #4
   ddf02:	d1f7      	bne.n	ddef4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   ddf04:	a801      	add	r0, sp, #4
   ddf06:	f7ff fe2c 	bl	ddb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   ddf0a:	2500      	movs	r5, #0
}
   ddf0c:	4628      	mov	r0, r5
   ddf0e:	b003      	add	sp, #12
   ddf10:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   ddf12:	462a      	mov	r2, r5
   ddf14:	4620      	mov	r0, r4
   ddf16:	f7ff ffb9 	bl	dde8c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   ddf1a:	4605      	mov	r5, r0
   ddf1c:	2800      	cmp	r0, #0
   ddf1e:	d0f1      	beq.n	ddf04 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   ddf20:	6863      	ldr	r3, [r4, #4]
   ddf22:	2b01      	cmp	r3, #1
   ddf24:	d101      	bne.n	ddf2a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   ddf26:	f7ff fd43 	bl	dd9b0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ddf2a:	a801      	add	r0, sp, #4
   ddf2c:	f7ff fe19 	bl	ddb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ddf30:	e7ec      	b.n	ddf0c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000ddf32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   ddf32:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ddf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ddf36:	4604      	mov	r4, r0
   ddf38:	460d      	mov	r5, r1
   ddf3a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ddf3c:	d914      	bls.n	ddf68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   ddf3e:	4290      	cmp	r0, r2
   ddf40:	d213      	bcs.n	ddf6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   ddf42:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   ddf46:	1a75      	subs	r5, r6, r1
   ddf48:	f1a1 0710 	sub.w	r7, r1, #16
   ddf4c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ddf4e:	42b7      	cmp	r7, r6
   ddf50:	d018      	beq.n	ddf84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   ddf52:	b11c      	cbz	r4, ddf5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   ddf54:	4631      	mov	r1, r6
   ddf56:	4620      	mov	r0, r4
   ddf58:	f000 fd0a 	bl	de970 <_ZN6StringC1EOS_>
                end->~T();
   ddf5c:	4630      	mov	r0, r6
   ddf5e:	f000 fc8b 	bl	de878 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ddf62:	3e10      	subs	r6, #16
   ddf64:	3c10      	subs	r4, #16
   ddf66:	e7f2      	b.n	ddf4e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   ddf68:	d00c      	beq.n	ddf84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   ddf6a:	42b5      	cmp	r5, r6
   ddf6c:	d00a      	beq.n	ddf84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   ddf6e:	b11c      	cbz	r4, ddf78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   ddf70:	4629      	mov	r1, r5
   ddf72:	4620      	mov	r0, r4
   ddf74:	f000 fcfc 	bl	de970 <_ZN6StringC1EOS_>
                p->~T();
   ddf78:	4628      	mov	r0, r5
   ddf7a:	f000 fc7d 	bl	de878 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ddf7e:	3510      	adds	r5, #16
   ddf80:	3410      	adds	r4, #16
   ddf82:	e7f2      	b.n	ddf6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   ddf84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ddf86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   ddf86:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ddf88:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ddf8a:	4605      	mov	r5, r0
        if (n > 0) {
   ddf8c:	dd11      	ble.n	ddfb2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   ddf8e:	0130      	lsls	r0, r6, #4
   ddf90:	f7fe fa1e 	bl	dc3d0 <malloc>
            if (!d) {
   ddf94:	4604      	mov	r4, r0
   ddf96:	b158      	cbz	r0, ddfb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ddf98:	e9d5 1200 	ldrd	r1, r2, [r5]
   ddf9c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   ddfa0:	f7ff ffc7 	bl	ddf32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   ddfa4:	6828      	ldr	r0, [r5, #0]
   ddfa6:	f7fe fa1b 	bl	dc3e0 <free>
        data_ = d;
   ddfaa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ddfac:	60ae      	str	r6, [r5, #8]
        return true;
   ddfae:	2001      	movs	r0, #1
    }
   ddfb0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ddfb2:	2400      	movs	r4, #0
   ddfb4:	e7f6      	b.n	ddfa4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000ddfb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ddfb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddfba:	4691      	mov	r9, r2
   ddfbc:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   ddfbe:	2300      	movs	r3, #0
   ddfc0:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   ddfc2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   ddfc6:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ddfc8:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   ddfca:	4299      	cmp	r1, r3
        capacity_(0) {
   ddfcc:	e9c0 3300 	strd	r3, r3, [r0]
   ddfd0:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ddfd4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ddfd8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ddfdc:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ddfde:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   ddfe0:	dc23      	bgt.n	de02a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   ddfe2:	e9d9 5700 	ldrd	r5, r7, [r9]
   ddfe6:	2314      	movs	r3, #20
   ddfe8:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   ddfec:	42af      	cmp	r7, r5
   ddfee:	d03b      	beq.n	de068 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   ddff0:	4629      	mov	r1, r5
   ddff2:	a80d      	add	r0, sp, #52	; 0x34
   ddff4:	f000 fcbc 	bl	de970 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   ddff8:	a90d      	add	r1, sp, #52	; 0x34
   ddffa:	a811      	add	r0, sp, #68	; 0x44
   ddffc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   ddffe:	f000 fcb7 	bl	de970 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   de002:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   de006:	4299      	cmp	r1, r3
   de008:	da1b      	bge.n	de042 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   de00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   de00c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   de00e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   de012:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   de016:	4631      	mov	r1, r6
   de018:	f106 0010 	add.w	r0, r6, #16
   de01c:	f7ff ff89 	bl	ddf32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   de020:	b9ee      	cbnz	r6, de05e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   de022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   de024:	3301      	adds	r3, #1
   de026:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   de028:	e011      	b.n	de04e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   de02a:	a80a      	add	r0, sp, #40	; 0x28
   de02c:	f7ff ffab 	bl	ddf86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   de030:	2800      	cmp	r0, #0
   de032:	d1d6      	bne.n	ddfe2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   de034:	a80a      	add	r0, sp, #40	; 0x28
   de036:	f7ff fd3f 	bl	ddab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   de03a:	4620      	mov	r0, r4
   de03c:	b017      	add	sp, #92	; 0x5c
   de03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   de042:	3101      	adds	r1, #1
   de044:	a80a      	add	r0, sp, #40	; 0x28
   de046:	f7ff ff9e 	bl	ddf86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   de04a:	2800      	cmp	r0, #0
   de04c:	d1dd      	bne.n	de00a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   de04e:	a811      	add	r0, sp, #68	; 0x44
   de050:	f000 fc12 	bl	de878 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   de054:	a80d      	add	r0, sp, #52	; 0x34
   de056:	f000 fc0f 	bl	de878 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   de05a:	3514      	adds	r5, #20
   de05c:	e7c6      	b.n	ddfec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   de05e:	a911      	add	r1, sp, #68	; 0x44
   de060:	4630      	mov	r0, r6
   de062:	f000 fc85 	bl	de970 <_ZN6StringC1EOS_>
   de066:	e7dc      	b.n	de022 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   de068:	2600      	movs	r6, #0
   de06a:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   de06e:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   de070:	4637      	mov	r7, r6
   de072:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   de076:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   de07a:	429e      	cmp	r6, r3
   de07c:	f280 8097 	bge.w	de1ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   de080:	0133      	lsls	r3, r6, #4
   de082:	58d3      	ldr	r3, [r2, r3]
   de084:	9308      	str	r3, [sp, #32]
        if (!category) {
   de086:	b90b      	cbnz	r3, de08c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   de088:	3601      	adds	r6, #1
   de08a:	e7f4      	b.n	de076 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   de08c:	fb0a f306 	mul.w	r3, sl, r6
   de090:	9709      	str	r7, [sp, #36]	; 0x24
   de092:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   de094:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   de096:	a909      	add	r1, sp, #36	; 0x24
   de098:	a808      	add	r0, sp, #32
   de09a:	f7ff fb3c 	bl	dd716 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   de09e:	4683      	mov	fp, r0
   de0a0:	2800      	cmp	r0, #0
   de0a2:	d0f1      	beq.n	de088 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   de0a4:	4601      	mov	r1, r0
   de0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   de0a8:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   de0ac:	f10d 031f 	add.w	r3, sp, #31
   de0b0:	4628      	mov	r0, r5
   de0b2:	f7ff fbaf 	bl	dd814 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   de0b6:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   de0ba:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   de0bc:	f1b8 0f00 	cmp.w	r8, #0
   de0c0:	d166      	bne.n	de190 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   de0c2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   de0c6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   de0ca:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   de0ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   de0d2:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   de0d6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   de0da:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   de0de:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   de0e2:	4293      	cmp	r3, r2
   de0e4:	db1a      	blt.n	de11c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   de0e6:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   de0ea:	f1bb 0f00 	cmp.w	fp, #0
   de0ee:	dd4a      	ble.n	de186 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   de0f0:	fb0a f00b 	mul.w	r0, sl, fp
   de0f4:	f7fe f96c 	bl	dc3d0 <malloc>
            if (!d) {
   de0f8:	9004      	str	r0, [sp, #16]
   de0fa:	2800      	cmp	r0, #0
   de0fc:	d045      	beq.n	de18a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   de0fe:	e9d5 1200 	ldrd	r1, r2, [r5]
   de102:	fb0a 1202 	mla	r2, sl, r2, r1
   de106:	f7ff fe71 	bl	dddec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   de10a:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   de10c:	6828      	ldr	r0, [r5, #0]
   de10e:	9304      	str	r3, [sp, #16]
   de110:	f7fe f966 	bl	dc3e0 <free>
        data_ = d;
   de114:	9b04      	ldr	r3, [sp, #16]
   de116:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   de118:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   de11c:	9b01      	ldr	r3, [sp, #4]
   de11e:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   de122:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   de124:	fb0a f303 	mul.w	r3, sl, r3
   de128:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   de12c:	f101 0014 	add.w	r0, r1, #20
   de130:	fb0a b202 	mla	r2, sl, r2, fp
   de134:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   de136:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   de138:	f7ff fe58 	bl	dddec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   de13c:	9904      	ldr	r1, [sp, #16]
   de13e:	b1a9      	cbz	r1, de16c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   de140:	9b05      	ldr	r3, [sp, #20]
   de142:	9a11      	ldr	r2, [sp, #68]	; 0x44
   de144:	f84b 2003 	str.w	r2, [fp, r3]
   de148:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   de14c:	808b      	strh	r3, [r1, #4]
   de14e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   de152:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   de154:	e9c1 7702 	strd	r7, r7, [r1, #8]
   de158:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   de15a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   de15c:	608b      	str	r3, [r1, #8]
   de15e:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   de160:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   de162:	60cb      	str	r3, [r1, #12]
   de164:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   de166:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   de168:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   de16a:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   de16c:	686b      	ldr	r3, [r5, #4]
   de16e:	3301      	adds	r3, #1
   de170:	606b      	str	r3, [r5, #4]
   de172:	a813      	add	r0, sp, #76	; 0x4c
   de174:	f7ff fc8c 	bl	dda90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   de178:	f1b8 0f00 	cmp.w	r8, #0
   de17c:	d008      	beq.n	de190 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   de17e:	a80d      	add	r0, sp, #52	; 0x34
   de180:	f7ff fc86 	bl	dda90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   de184:	e756      	b.n	de034 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   de186:	4643      	mov	r3, r8
   de188:	e7c0      	b.n	de10c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   de18a:	f04f 0801 	mov.w	r8, #1
   de18e:	e7f0      	b.n	de172 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   de190:	9b01      	ldr	r3, [sp, #4]
   de192:	682d      	ldr	r5, [r5, #0]
   de194:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   de198:	9b08      	ldr	r3, [sp, #32]
   de19a:	781b      	ldrb	r3, [r3, #0]
   de19c:	b92b      	cbnz	r3, de1aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   de19e:	f8d9 3000 	ldr.w	r3, [r9]
   de1a2:	9a02      	ldr	r2, [sp, #8]
   de1a4:	4413      	add	r3, r2
   de1a6:	7c1b      	ldrb	r3, [r3, #16]
   de1a8:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   de1aa:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   de1ac:	e773      	b.n	de096 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   de1ae:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   de1b0:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   de1b2:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   de1b4:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   de1b6:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   de1b8:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   de1ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   de1bc:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   de1be:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   de1c0:	60a2      	str	r2, [r4, #8]
   de1c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   de1c4:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   de1c6:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   de1c8:	60e2      	str	r2, [r4, #12]
   de1ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   de1cc:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   de1ce:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   de1d0:	6122      	str	r2, [r4, #16]
   de1d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   de1d4:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   de1d6:	9b03      	ldr	r3, [sp, #12]
   de1d8:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   de1da:	6162      	str	r2, [r4, #20]
   de1dc:	7623      	strb	r3, [r4, #24]
   de1de:	e7ce      	b.n	de17e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000de1e0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   de1e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   de1e2:	4605      	mov	r5, r0
   de1e4:	4b09      	ldr	r3, [pc, #36]	; (de20c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   de1e6:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   de1ea:	4604      	mov	r4, r0
   de1ec:	460e      	mov	r6, r1
        filter_(level, filters) {
   de1ee:	a801      	add	r0, sp, #4
   de1f0:	4611      	mov	r1, r2
   de1f2:	f7f6 f842 	bl	d427a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   de1f6:	aa01      	add	r2, sp, #4
   de1f8:	4631      	mov	r1, r6
   de1fa:	4628      	mov	r0, r5
   de1fc:	f7ff fedb 	bl	ddfb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   de200:	a801      	add	r0, sp, #4
   de202:	f7f5 ffe1 	bl	d41c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   de206:	4620      	mov	r0, r4
   de208:	b004      	add	sp, #16
   de20a:	bd70      	pop	{r4, r5, r6, pc}
   de20c:	000e21f4 	.word	0x000e21f4

000de210 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   de210:	b5f0      	push	{r4, r5, r6, r7, lr}
   de212:	460f      	mov	r7, r1
   de214:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   de216:	4926      	ldr	r1, [pc, #152]	; (de2b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   de218:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   de21a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   de21c:	4616      	mov	r6, r2
   de21e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   de220:	f001 ff3c 	bl	e009c <strcmp>
   de224:	bb00      	cbnz	r0, de268 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   de226:	b1e4      	cbz	r4, de262 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   de228:	4629      	mov	r1, r5
   de22a:	4668      	mov	r0, sp
   de22c:	f7ff fc8a 	bl	ddb44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   de230:	4920      	ldr	r1, [pc, #128]	; (de2b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   de232:	2024      	movs	r0, #36	; 0x24
   de234:	f001 f920 	bl	df478 <_ZnwjRKSt9nothrow_t>
   de238:	4605      	mov	r5, r0
   de23a:	b170      	cbz	r0, de25a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   de23c:	4669      	mov	r1, sp
   de23e:	a803      	add	r0, sp, #12
   de240:	f7f6 f81b 	bl	d427a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   de244:	aa03      	add	r2, sp, #12
   de246:	4631      	mov	r1, r6
   de248:	4628      	mov	r0, r5
   de24a:	f7ff ffc9 	bl	de1e0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   de24e:	a803      	add	r0, sp, #12
   de250:	f7f5 ffba 	bl	d41c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   de254:	4b18      	ldr	r3, [pc, #96]	; (de2b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   de256:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   de258:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   de25a:	4668      	mov	r0, sp
   de25c:	f7f5 ffb4 	bl	d41c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   de260:	462c      	mov	r4, r5
}
   de262:	4620      	mov	r0, r4
   de264:	b007      	add	sp, #28
   de266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   de268:	4914      	ldr	r1, [pc, #80]	; (de2bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   de26a:	4638      	mov	r0, r7
   de26c:	f001 ff16 	bl	e009c <strcmp>
   de270:	b9e0      	cbnz	r0, de2ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   de272:	2c00      	cmp	r4, #0
   de274:	d0f5      	beq.n	de262 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   de276:	4629      	mov	r1, r5
   de278:	4668      	mov	r0, sp
   de27a:	f7ff fc63 	bl	ddb44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   de27e:	490d      	ldr	r1, [pc, #52]	; (de2b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   de280:	2024      	movs	r0, #36	; 0x24
   de282:	f001 f8f9 	bl	df478 <_ZnwjRKSt9nothrow_t>
   de286:	4605      	mov	r5, r0
   de288:	2800      	cmp	r0, #0
   de28a:	d0e6      	beq.n	de25a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   de28c:	4669      	mov	r1, sp
   de28e:	a803      	add	r0, sp, #12
   de290:	f7f5 fff3 	bl	d427a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   de294:	aa03      	add	r2, sp, #12
   de296:	4631      	mov	r1, r6
   de298:	4628      	mov	r0, r5
   de29a:	f7ff ffa1 	bl	de1e0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   de29e:	a803      	add	r0, sp, #12
   de2a0:	f7f5 ff92 	bl	d41c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   de2a4:	4b06      	ldr	r3, [pc, #24]	; (de2c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   de2a6:	602b      	str	r3, [r5, #0]
   de2a8:	622c      	str	r4, [r5, #32]
}
   de2aa:	e7d6      	b.n	de25a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   de2ac:	2400      	movs	r4, #0
   de2ae:	e7d8      	b.n	de262 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   de2b0:	000e2d70 	.word	0x000e2d70
   de2b4:	000e2f30 	.word	0x000e2f30
   de2b8:	000e2dfc 	.word	0x000e2dfc
   de2bc:	000e2d74 	.word	0x000e2d74
   de2c0:	000e2de4 	.word	0x000e2de4

000de2c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   de2c4:	4b01      	ldr	r3, [pc, #4]	; (de2cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   de2c6:	4a02      	ldr	r2, [pc, #8]	; (de2d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   de2c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   de2ca:	4770      	bx	lr
   de2cc:	2003e57c 	.word	0x2003e57c
   de2d0:	000e2d85 	.word	0x000e2d85

000de2d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   de2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de2d8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   de2da:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   de2de:	4604      	mov	r4, r0
   de2e0:	460e      	mov	r6, r1
   de2e2:	4617      	mov	r7, r2
   de2e4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   de2e6:	f000 ff2d 	bl	df144 <_Z16_fetch_usbserialv>
   de2ea:	4581      	cmp	r9, r0
   de2ec:	d04c      	beq.n	de388 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   de2ee:	792b      	ldrb	r3, [r5, #4]
   de2f0:	0719      	lsls	r1, r3, #28
   de2f2:	d504      	bpl.n	de2fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   de2f4:	696a      	ldr	r2, [r5, #20]
   de2f6:	4954      	ldr	r1, [pc, #336]	; (de448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   de2f8:	4620      	mov	r0, r4
   de2fa:	f7ff fa7c 	bl	dd7f6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   de2fe:	f1b8 0f00 	cmp.w	r8, #0
   de302:	d00d      	beq.n	de320 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   de304:	215b      	movs	r1, #91	; 0x5b
   de306:	4620      	mov	r0, r4
   de308:	f7ff fa69 	bl	dd7de <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   de30c:	4641      	mov	r1, r8
   de30e:	4620      	mov	r0, r4
   de310:	f7ff fa56 	bl	dd7c0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   de314:	6823      	ldr	r3, [r4, #0]
   de316:	494d      	ldr	r1, [pc, #308]	; (de44c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   de318:	68db      	ldr	r3, [r3, #12]
   de31a:	2202      	movs	r2, #2
   de31c:	4620      	mov	r0, r4
   de31e:	4798      	blx	r3
    if (attr.has_file) {
   de320:	792b      	ldrb	r3, [r5, #4]
   de322:	07da      	lsls	r2, r3, #31
   de324:	d523      	bpl.n	de36e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   de326:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   de32a:	212f      	movs	r1, #47	; 0x2f
   de32c:	4640      	mov	r0, r8
   de32e:	f001 ff11 	bl	e0154 <strrchr>
    if (s1) {
   de332:	b108      	cbz	r0, de338 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   de334:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   de338:	4641      	mov	r1, r8
   de33a:	4620      	mov	r0, r4
   de33c:	f7ff fa40 	bl	dd7c0 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   de340:	792b      	ldrb	r3, [r5, #4]
   de342:	079b      	lsls	r3, r3, #30
   de344:	d508      	bpl.n	de358 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   de346:	213a      	movs	r1, #58	; 0x3a
   de348:	4620      	mov	r0, r4
   de34a:	f7ff fa48 	bl	dd7de <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   de34e:	68ea      	ldr	r2, [r5, #12]
   de350:	493f      	ldr	r1, [pc, #252]	; (de450 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   de352:	4620      	mov	r0, r4
   de354:	f7ff fa4f 	bl	dd7f6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   de358:	792a      	ldrb	r2, [r5, #4]
   de35a:	6823      	ldr	r3, [r4, #0]
   de35c:	f012 0f04 	tst.w	r2, #4
   de360:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   de362:	bf14      	ite	ne
   de364:	493b      	ldrne	r1, [pc, #236]	; (de454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   de366:	493c      	ldreq	r1, [pc, #240]	; (de458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   de368:	2202      	movs	r2, #2
            write(": ", 2);
   de36a:	4620      	mov	r0, r4
   de36c:	4798      	blx	r3
    if (attr.has_function) {
   de36e:	792b      	ldrb	r3, [r5, #4]
   de370:	0758      	lsls	r0, r3, #29
   de372:	d51d      	bpl.n	de3b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   de374:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   de376:	460b      	mov	r3, r1
   de378:	461a      	mov	r2, r3
    for (; *s; ++s) {
   de37a:	f813 0b01 	ldrb.w	r0, [r3], #1
   de37e:	b160      	cbz	r0, de39a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   de380:	2820      	cmp	r0, #32
   de382:	d108      	bne.n	de396 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   de384:	4619      	mov	r1, r3
   de386:	e7f7      	b.n	de378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   de388:	4834      	ldr	r0, [pc, #208]	; (de45c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   de38a:	f000 f966 	bl	de65a <_ZN5spark12NetworkClass9listeningEv>
   de38e:	2800      	cmp	r0, #0
   de390:	d0ad      	beq.n	de2ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   de392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   de396:	2828      	cmp	r0, #40	; 0x28
   de398:	d1ee      	bne.n	de378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   de39a:	6823      	ldr	r3, [r4, #0]
   de39c:	1a52      	subs	r2, r2, r1
   de39e:	68db      	ldr	r3, [r3, #12]
   de3a0:	4620      	mov	r0, r4
   de3a2:	4798      	blx	r3
        write("(): ", 4);
   de3a4:	6823      	ldr	r3, [r4, #0]
   de3a6:	492e      	ldr	r1, [pc, #184]	; (de460 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   de3a8:	68db      	ldr	r3, [r3, #12]
   de3aa:	2204      	movs	r2, #4
   de3ac:	4620      	mov	r0, r4
   de3ae:	4798      	blx	r3
    return log_level_name(level, nullptr);
   de3b0:	2100      	movs	r1, #0
   de3b2:	4638      	mov	r0, r7
   de3b4:	f7fd fedc 	bl	dc170 <log_level_name>
   de3b8:	4601      	mov	r1, r0
    write(s);
   de3ba:	4620      	mov	r0, r4
   de3bc:	f7ff fa00 	bl	dd7c0 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   de3c0:	6823      	ldr	r3, [r4, #0]
   de3c2:	4925      	ldr	r1, [pc, #148]	; (de458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   de3c4:	68db      	ldr	r3, [r3, #12]
   de3c6:	2202      	movs	r2, #2
   de3c8:	4620      	mov	r0, r4
   de3ca:	4798      	blx	r3
    if (msg) {
   de3cc:	b11e      	cbz	r6, de3d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   de3ce:	4631      	mov	r1, r6
   de3d0:	4620      	mov	r0, r4
   de3d2:	f7ff f9f5 	bl	dd7c0 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   de3d6:	792b      	ldrb	r3, [r5, #4]
   de3d8:	f013 0f30 	tst.w	r3, #48	; 0x30
   de3dc:	d02c      	beq.n	de438 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   de3de:	6823      	ldr	r3, [r4, #0]
   de3e0:	4920      	ldr	r1, [pc, #128]	; (de464 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   de3e2:	68db      	ldr	r3, [r3, #12]
   de3e4:	2202      	movs	r2, #2
   de3e6:	4620      	mov	r0, r4
   de3e8:	4798      	blx	r3
        if (attr.has_code) {
   de3ea:	792b      	ldrb	r3, [r5, #4]
   de3ec:	06d9      	lsls	r1, r3, #27
   de3ee:	d50a      	bpl.n	de406 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   de3f0:	6823      	ldr	r3, [r4, #0]
   de3f2:	491d      	ldr	r1, [pc, #116]	; (de468 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   de3f4:	68db      	ldr	r3, [r3, #12]
   de3f6:	2207      	movs	r2, #7
   de3f8:	4620      	mov	r0, r4
   de3fa:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   de3fc:	69aa      	ldr	r2, [r5, #24]
   de3fe:	491b      	ldr	r1, [pc, #108]	; (de46c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   de400:	4620      	mov	r0, r4
   de402:	f7ff f9f8 	bl	dd7f6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   de406:	792b      	ldrb	r3, [r5, #4]
   de408:	069a      	lsls	r2, r3, #26
   de40a:	d511      	bpl.n	de430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   de40c:	06db      	lsls	r3, r3, #27
   de40e:	d505      	bpl.n	de41c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   de410:	6823      	ldr	r3, [r4, #0]
   de412:	4910      	ldr	r1, [pc, #64]	; (de454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   de414:	68db      	ldr	r3, [r3, #12]
   de416:	2202      	movs	r2, #2
   de418:	4620      	mov	r0, r4
   de41a:	4798      	blx	r3
            write("details = ", 10);
   de41c:	6823      	ldr	r3, [r4, #0]
   de41e:	4914      	ldr	r1, [pc, #80]	; (de470 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   de420:	68db      	ldr	r3, [r3, #12]
   de422:	4620      	mov	r0, r4
   de424:	220a      	movs	r2, #10
   de426:	4798      	blx	r3
            write(attr.details);
   de428:	69e9      	ldr	r1, [r5, #28]
   de42a:	4620      	mov	r0, r4
   de42c:	f7ff f9c8 	bl	dd7c0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   de430:	215d      	movs	r1, #93	; 0x5d
   de432:	4620      	mov	r0, r4
   de434:	f7ff f9d3 	bl	dd7de <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   de438:	6823      	ldr	r3, [r4, #0]
   de43a:	490e      	ldr	r1, [pc, #56]	; (de474 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   de43c:	68db      	ldr	r3, [r3, #12]
   de43e:	4620      	mov	r0, r4
   de440:	2202      	movs	r2, #2
}
   de442:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   de446:	4718      	bx	r3
   de448:	000e2d89 	.word	0x000e2d89
   de44c:	000e2d90 	.word	0x000e2d90
   de450:	000e22fd 	.word	0x000e22fd
   de454:	000e2d93 	.word	0x000e2d93
   de458:	000e2d98 	.word	0x000e2d98
   de45c:	2003e5a8 	.word	0x2003e5a8
   de460:	000e2d96 	.word	0x000e2d96
   de464:	000e2d9b 	.word	0x000e2d9b
   de468:	000e2d9e 	.word	0x000e2d9e
   de46c:	000e2244 	.word	0x000e2244
   de470:	000e2da6 	.word	0x000e2da6
   de474:	000e291d 	.word	0x000e291d

000de478 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   de478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de47c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   de47e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   de482:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   de484:	4605      	mov	r5, r0
   de486:	460f      	mov	r7, r1
   de488:	4690      	mov	r8, r2
   de48a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   de48c:	f000 fe5a 	bl	df144 <_Z16_fetch_usbserialv>
   de490:	4581      	cmp	r9, r0
   de492:	d105      	bne.n	de4a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   de494:	4849      	ldr	r0, [pc, #292]	; (de5bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   de496:	f000 f8e0 	bl	de65a <_ZN5spark12NetworkClass9listeningEv>
   de49a:	2800      	cmp	r0, #0
   de49c:	f040 808a 	bne.w	de5b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   de4a0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   de4a2:	4a47      	ldr	r2, [pc, #284]	; (de5c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   de4a4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   de4a6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   de4aa:	a801      	add	r0, sp, #4
        strm_(stream) {
   de4ac:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   de4ae:	f88d 9008 	strb.w	r9, [sp, #8]
   de4b2:	f7fe ffb4 	bl	dd41e <_ZN5spark10JSONWriter11beginObjectEv>
   de4b6:	4649      	mov	r1, r9
   de4b8:	4640      	mov	r0, r8
   de4ba:	f7fd fe59 	bl	dc170 <log_level_name>
    json.name("l", 1).value(s);
   de4be:	4941      	ldr	r1, [pc, #260]	; (de5c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   de4c0:	4680      	mov	r8, r0
   de4c2:	2201      	movs	r2, #1
   de4c4:	a801      	add	r0, sp, #4
   de4c6:	f7ff f88d 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
   de4ca:	4641      	mov	r1, r8
   de4cc:	f7ff f96a 	bl	dd7a4 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   de4d0:	b13f      	cbz	r7, de4e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   de4d2:	493d      	ldr	r1, [pc, #244]	; (de5c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   de4d4:	2201      	movs	r2, #1
   de4d6:	a801      	add	r0, sp, #4
   de4d8:	f7ff f884 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
   de4dc:	4639      	mov	r1, r7
   de4de:	f7ff f961 	bl	dd7a4 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   de4e2:	b13e      	cbz	r6, de4f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   de4e4:	4939      	ldr	r1, [pc, #228]	; (de5cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   de4e6:	2201      	movs	r2, #1
   de4e8:	a801      	add	r0, sp, #4
   de4ea:	f7ff f87b 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
   de4ee:	4631      	mov	r1, r6
   de4f0:	f7ff f958 	bl	dd7a4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   de4f4:	7923      	ldrb	r3, [r4, #4]
   de4f6:	07df      	lsls	r7, r3, #31
   de4f8:	d50e      	bpl.n	de518 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   de4fa:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   de4fc:	212f      	movs	r1, #47	; 0x2f
   de4fe:	4630      	mov	r0, r6
   de500:	f001 fe28 	bl	e0154 <strrchr>
    if (s1) {
   de504:	b100      	cbz	r0, de508 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   de506:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   de508:	4931      	ldr	r1, [pc, #196]	; (de5d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   de50a:	2201      	movs	r2, #1
   de50c:	a801      	add	r0, sp, #4
   de50e:	f7ff f869 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
   de512:	4631      	mov	r1, r6
   de514:	f7ff f946 	bl	dd7a4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   de518:	7923      	ldrb	r3, [r4, #4]
   de51a:	079e      	lsls	r6, r3, #30
   de51c:	d507      	bpl.n	de52e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   de51e:	492d      	ldr	r1, [pc, #180]	; (de5d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   de520:	2202      	movs	r2, #2
   de522:	a801      	add	r0, sp, #4
   de524:	f7ff f85e 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
   de528:	68e1      	ldr	r1, [r4, #12]
   de52a:	f7fe ff9d 	bl	dd468 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   de52e:	7923      	ldrb	r3, [r4, #4]
   de530:	0758      	lsls	r0, r3, #29
   de532:	d514      	bpl.n	de55e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   de534:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   de536:	4633      	mov	r3, r6
   de538:	461f      	mov	r7, r3
    for (; *s; ++s) {
   de53a:	f813 2b01 	ldrb.w	r2, [r3], #1
   de53e:	b12a      	cbz	r2, de54c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   de540:	2a20      	cmp	r2, #32
   de542:	d101      	bne.n	de548 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   de544:	461e      	mov	r6, r3
   de546:	e7f7      	b.n	de538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   de548:	2a28      	cmp	r2, #40	; 0x28
   de54a:	d1f5      	bne.n	de538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   de54c:	4922      	ldr	r1, [pc, #136]	; (de5d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   de54e:	2202      	movs	r2, #2
   de550:	a801      	add	r0, sp, #4
   de552:	f7ff f847 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
   de556:	1bba      	subs	r2, r7, r6
   de558:	4631      	mov	r1, r6
   de55a:	f7ff f853 	bl	dd604 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   de55e:	7923      	ldrb	r3, [r4, #4]
   de560:	0719      	lsls	r1, r3, #28
   de562:	d507      	bpl.n	de574 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   de564:	491d      	ldr	r1, [pc, #116]	; (de5dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   de566:	2201      	movs	r2, #1
   de568:	a801      	add	r0, sp, #4
   de56a:	f7ff f83b 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
   de56e:	6961      	ldr	r1, [r4, #20]
   de570:	f7fe ff8c 	bl	dd48c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   de574:	7923      	ldrb	r3, [r4, #4]
   de576:	06da      	lsls	r2, r3, #27
   de578:	d508      	bpl.n	de58c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   de57a:	2204      	movs	r2, #4
   de57c:	4918      	ldr	r1, [pc, #96]	; (de5e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   de57e:	eb0d 0002 	add.w	r0, sp, r2
   de582:	f7ff f82f 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
   de586:	69a1      	ldr	r1, [r4, #24]
   de588:	f7fe ff6e 	bl	dd468 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   de58c:	7923      	ldrb	r3, [r4, #4]
   de58e:	069b      	lsls	r3, r3, #26
   de590:	d507      	bpl.n	de5a2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   de592:	4914      	ldr	r1, [pc, #80]	; (de5e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   de594:	2206      	movs	r2, #6
   de596:	a801      	add	r0, sp, #4
   de598:	f7ff f824 	bl	dd5e4 <_ZN5spark10JSONWriter4nameEPKcj>
   de59c:	69e1      	ldr	r1, [r4, #28]
   de59e:	f7ff f901 	bl	dd7a4 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   de5a2:	a801      	add	r0, sp, #4
   de5a4:	f7fe ff19 	bl	dd3da <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   de5a8:	6a28      	ldr	r0, [r5, #32]
   de5aa:	490f      	ldr	r1, [pc, #60]	; (de5e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   de5ac:	6803      	ldr	r3, [r0, #0]
   de5ae:	2202      	movs	r2, #2
   de5b0:	68db      	ldr	r3, [r3, #12]
   de5b2:	4798      	blx	r3
}
   de5b4:	b005      	add	sp, #20
   de5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de5ba:	bf00      	nop
   de5bc:	2003e5a8 	.word	0x2003e5a8
   de5c0:	000e2dcc 	.word	0x000e2dcc
   de5c4:	000e2d66 	.word	0x000e2d66
   de5c8:	000e2645 	.word	0x000e2645
   de5cc:	000e2a88 	.word	0x000e2a88
   de5d0:	000e2bdf 	.word	0x000e2bdf
   de5d4:	000e2db1 	.word	0x000e2db1
   de5d8:	000e2db4 	.word	0x000e2db4
   de5dc:	000e2904 	.word	0x000e2904
   de5e0:	000e2db7 	.word	0x000e2db7
   de5e4:	000e2dbc 	.word	0x000e2dbc
   de5e8:	000e291d 	.word	0x000e291d

000de5ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   de5ec:	2300      	movs	r3, #0
   de5ee:	6840      	ldr	r0, [r0, #4]
   de5f0:	461a      	mov	r2, r3
   de5f2:	f7fd be8d 	b.w	dc310 <network_connect>

000de5f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   de5f6:	6840      	ldr	r0, [r0, #4]
   de5f8:	2200      	movs	r2, #0
   de5fa:	2102      	movs	r1, #2
   de5fc:	f7fd be98 	b.w	dc330 <network_disconnect>

000de600 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   de600:	2200      	movs	r2, #0
   de602:	6840      	ldr	r0, [r0, #4]
   de604:	4611      	mov	r1, r2
   de606:	f7fd be8b 	b.w	dc320 <network_connecting>

000de60a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   de60a:	2200      	movs	r2, #0
   de60c:	6840      	ldr	r0, [r0, #4]
   de60e:	4611      	mov	r1, r2
   de610:	f7fd be96 	b.w	dc340 <network_ready>

000de614 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   de614:	2300      	movs	r3, #0
   de616:	6840      	ldr	r0, [r0, #4]
   de618:	461a      	mov	r2, r3
   de61a:	4619      	mov	r1, r3
   de61c:	f7fd be98 	b.w	dc350 <network_on>

000de620 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   de620:	2300      	movs	r3, #0
   de622:	6840      	ldr	r0, [r0, #4]
   de624:	461a      	mov	r2, r3
   de626:	4619      	mov	r1, r3
   de628:	f7fd be9a 	b.w	dc360 <network_off>

000de62c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   de62c:	6840      	ldr	r0, [r0, #4]
   de62e:	2100      	movs	r1, #0
   de630:	f7fd bebe 	b.w	dc3b0 <network_is_on>

000de634 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   de634:	6840      	ldr	r0, [r0, #4]
   de636:	2100      	movs	r1, #0
   de638:	f7fd bec2 	b.w	dc3c0 <network_is_off>

000de63c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   de63c:	6840      	ldr	r0, [r0, #4]
   de63e:	2200      	movs	r2, #0
   de640:	f081 0101 	eor.w	r1, r1, #1
   de644:	f7fd be94 	b.w	dc370 <network_listen>

000de648 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   de648:	6840      	ldr	r0, [r0, #4]
   de64a:	2200      	movs	r2, #0
   de64c:	f7fd bea0 	b.w	dc390 <network_set_listen_timeout>

000de650 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   de650:	2200      	movs	r2, #0
   de652:	6840      	ldr	r0, [r0, #4]
   de654:	4611      	mov	r1, r2
   de656:	f7fd bea3 	b.w	dc3a0 <network_get_listen_timeout>

000de65a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   de65a:	2200      	movs	r2, #0
   de65c:	6840      	ldr	r0, [r0, #4]
   de65e:	4611      	mov	r1, r2
   de660:	f7fd be8e 	b.w	dc380 <network_listening>

000de664 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   de664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   de668:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   de66a:	b095      	sub	sp, #84	; 0x54
   de66c:	4616      	mov	r6, r2
   de66e:	460d      	mov	r5, r1
   de670:	4607      	mov	r7, r0
    IPAddress addr;
   de672:	f7fe fb6f 	bl	dcd54 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   de676:	4621      	mov	r1, r4
   de678:	2218      	movs	r2, #24
   de67a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   de67c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   de67e:	f001 fcb1 	bl	dffe4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   de682:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   de684:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   de688:	4621      	mov	r1, r4
   de68a:	466b      	mov	r3, sp
   de68c:	aa0c      	add	r2, sp, #48	; 0x30
   de68e:	4630      	mov	r0, r6
   de690:	f7fd fc2e 	bl	dbef0 <netdb_getaddrinfo>
    if (!r) {
   de694:	4604      	mov	r4, r0
   de696:	2800      	cmp	r0, #0
   de698:	d146      	bne.n	de728 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   de69a:	4602      	mov	r2, r0
   de69c:	2101      	movs	r1, #1
   de69e:	6868      	ldr	r0, [r5, #4]
   de6a0:	f7fd fe4e 	bl	dc340 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   de6a4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   de6a6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   de6a8:	4622      	mov	r2, r4
   de6aa:	6868      	ldr	r0, [r5, #4]
   de6ac:	f7fd fe48 	bl	dc340 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   de6b0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   de6b2:	4681      	mov	r9, r0
        bool ok = false;
   de6b4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   de6b6:	2e00      	cmp	r6, #0
   de6b8:	d036      	beq.n	de728 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   de6ba:	2900      	cmp	r1, #0
   de6bc:	d134      	bne.n	de728 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   de6be:	6873      	ldr	r3, [r6, #4]
   de6c0:	2b02      	cmp	r3, #2
   de6c2:	d003      	beq.n	de6cc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   de6c4:	2b0a      	cmp	r3, #10
   de6c6:	d00b      	beq.n	de6e0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   de6c8:	69f6      	ldr	r6, [r6, #28]
   de6ca:	e7f4      	b.n	de6b6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   de6cc:	f1b8 0f00 	cmp.w	r8, #0
   de6d0:	d004      	beq.n	de6dc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   de6d2:	6971      	ldr	r1, [r6, #20]
   de6d4:	4638      	mov	r0, r7
   de6d6:	3104      	adds	r1, #4
   de6d8:	f7fe fb69 	bl	dcdae <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   de6dc:	4641      	mov	r1, r8
   de6de:	e7f3      	b.n	de6c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   de6e0:	f1b9 0f00 	cmp.w	r9, #0
   de6e4:	d101      	bne.n	de6ea <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   de6e6:	4649      	mov	r1, r9
   de6e8:	e7ee      	b.n	de6c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   de6ea:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   de6ec:	2210      	movs	r2, #16
   de6ee:	a801      	add	r0, sp, #4
   de6f0:	f001 fc78 	bl	dffe4 <memset>
                    a.v = 6;
   de6f4:	2306      	movs	r3, #6
   de6f6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   de6fa:	ad01      	add	r5, sp, #4
   de6fc:	f104 0308 	add.w	r3, r4, #8
   de700:	3418      	adds	r4, #24
   de702:	6818      	ldr	r0, [r3, #0]
   de704:	6859      	ldr	r1, [r3, #4]
   de706:	462a      	mov	r2, r5
   de708:	c203      	stmia	r2!, {r0, r1}
   de70a:	3308      	adds	r3, #8
   de70c:	42a3      	cmp	r3, r4
   de70e:	4615      	mov	r5, r2
   de710:	d1f7      	bne.n	de702 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   de712:	a901      	add	r1, sp, #4
   de714:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   de716:	ad07      	add	r5, sp, #28
   de718:	f7fe fb2a 	bl	dcd70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   de71c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   de71e:	1d3c      	adds	r4, r7, #4
   de720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   de722:	682b      	ldr	r3, [r5, #0]
   de724:	7023      	strb	r3, [r4, #0]
   de726:	e7de      	b.n	de6e6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   de728:	9800      	ldr	r0, [sp, #0]
   de72a:	f7fd fbd9 	bl	dbee0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   de72e:	4638      	mov	r0, r7
   de730:	b015      	add	sp, #84	; 0x54
   de732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000de738 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   de738:	4b02      	ldr	r3, [pc, #8]	; (de744 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   de73a:	4a03      	ldr	r2, [pc, #12]	; (de748 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   de73c:	601a      	str	r2, [r3, #0]
   de73e:	2200      	movs	r2, #0
   de740:	605a      	str	r2, [r3, #4]

} // spark
   de742:	4770      	bx	lr
   de744:	2003e5a8 	.word	0x2003e5a8
   de748:	000e2e44 	.word	0x000e2e44

000de74c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   de74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   de74e:	4606      	mov	r6, r0
   de750:	460d      	mov	r5, r1
  size_t n = 0;
   de752:	188f      	adds	r7, r1, r2
   de754:	2400      	movs	r4, #0
  while (size--) {
   de756:	42bd      	cmp	r5, r7
   de758:	d00c      	beq.n	de774 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   de75a:	6833      	ldr	r3, [r6, #0]
   de75c:	f815 1b01 	ldrb.w	r1, [r5], #1
   de760:	689b      	ldr	r3, [r3, #8]
   de762:	4630      	mov	r0, r6
   de764:	4798      	blx	r3
     if (chunk>=0)
   de766:	1e03      	subs	r3, r0, #0
   de768:	db01      	blt.n	de76e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   de76a:	441c      	add	r4, r3
  while (size--) {
   de76c:	e7f3      	b.n	de756 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   de76e:	2c00      	cmp	r4, #0
   de770:	bf08      	it	eq
   de772:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   de774:	4620      	mov	r0, r4
   de776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000de778 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   de778:	b513      	push	{r0, r1, r4, lr}
   de77a:	4604      	mov	r4, r0
    }
   de77c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   de77e:	b159      	cbz	r1, de798 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   de780:	9101      	str	r1, [sp, #4]
   de782:	f001 fcba 	bl	e00fa <strlen>
   de786:	6823      	ldr	r3, [r4, #0]
   de788:	9901      	ldr	r1, [sp, #4]
   de78a:	68db      	ldr	r3, [r3, #12]
   de78c:	4602      	mov	r2, r0
   de78e:	4620      	mov	r0, r4
    }
   de790:	b002      	add	sp, #8
   de792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   de796:	4718      	bx	r3
    }
   de798:	b002      	add	sp, #8
   de79a:	bd10      	pop	{r4, pc}

000de79c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   de79c:	6803      	ldr	r3, [r0, #0]
   de79e:	689b      	ldr	r3, [r3, #8]
   de7a0:	4718      	bx	r3

000de7a2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   de7a2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   de7a4:	210d      	movs	r1, #13
{
   de7a6:	4605      	mov	r5, r0
  size_t n = print('\r');
   de7a8:	f7ff fff8 	bl	de79c <_ZN5Print5printEc>
  n += print('\n');
   de7ac:	210a      	movs	r1, #10
  size_t n = print('\r');
   de7ae:	4604      	mov	r4, r0
  n += print('\n');
   de7b0:	4628      	mov	r0, r5
   de7b2:	f7ff fff3 	bl	de79c <_ZN5Print5printEc>
  return n;
}
   de7b6:	4420      	add	r0, r4
   de7b8:	bd38      	pop	{r3, r4, r5, pc}

000de7ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   de7ba:	b530      	push	{r4, r5, lr}
   de7bc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   de7be:	2300      	movs	r3, #0
   de7c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   de7c4:	2a01      	cmp	r2, #1
   de7c6:	bf98      	it	ls
   de7c8:	220a      	movls	r2, #10
   de7ca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   de7cc:	460d      	mov	r5, r1
   de7ce:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   de7d2:	fb01 5312 	mls	r3, r1, r2, r5
   de7d6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   de7da:	2b09      	cmp	r3, #9
   de7dc:	bf94      	ite	ls
   de7de:	3330      	addls	r3, #48	; 0x30
   de7e0:	3337      	addhi	r3, #55	; 0x37
   de7e2:	b2db      	uxtb	r3, r3
  } while(n);
   de7e4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   de7e6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   de7ea:	d9ef      	bls.n	de7cc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   de7ec:	4621      	mov	r1, r4
   de7ee:	f7ff ffc3 	bl	de778 <_ZN5Print5writeEPKc>
}
   de7f2:	b00b      	add	sp, #44	; 0x2c
   de7f4:	bd30      	pop	{r4, r5, pc}

000de7f6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   de7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de7fa:	b086      	sub	sp, #24
   de7fc:	af00      	add	r7, sp, #0
   de7fe:	4605      	mov	r5, r0
   de800:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   de802:	1d38      	adds	r0, r7, #4
   de804:	2114      	movs	r1, #20
{
   de806:	4614      	mov	r4, r2
    va_copy(args2, args);
   de808:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   de80a:	f7fd fe11 	bl	dc430 <vsnprintf>

    if (n<bufsize)
   de80e:	2813      	cmp	r0, #19
   de810:	d80e      	bhi.n	de830 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   de812:	1d39      	adds	r1, r7, #4
   de814:	4628      	mov	r0, r5
   de816:	f7ff ffaf 	bl	de778 <_ZN5Print5writeEPKc>
   de81a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   de81c:	b11e      	cbz	r6, de826 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   de81e:	4628      	mov	r0, r5
   de820:	f7ff ffbf 	bl	de7a2 <_ZN5Print7printlnEv>
   de824:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   de826:	4620      	mov	r0, r4
   de828:	3718      	adds	r7, #24
   de82a:	46bd      	mov	sp, r7
   de82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   de830:	f100 0308 	add.w	r3, r0, #8
   de834:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   de838:	46e8      	mov	r8, sp
        char bigger[n+1];
   de83a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   de83e:	4622      	mov	r2, r4
   de840:	1c41      	adds	r1, r0, #1
   de842:	683b      	ldr	r3, [r7, #0]
   de844:	4668      	mov	r0, sp
   de846:	f7fd fdf3 	bl	dc430 <vsnprintf>
  return write(str);
   de84a:	4669      	mov	r1, sp
   de84c:	4628      	mov	r0, r5
   de84e:	f7ff ff93 	bl	de778 <_ZN5Print5writeEPKc>
   de852:	4604      	mov	r4, r0
   de854:	46c5      	mov	sp, r8
   de856:	e7e1      	b.n	de81c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000de858 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   de858:	4b01      	ldr	r3, [pc, #4]	; (de860 <_GLOBAL__sub_I_RGB+0x8>)
   de85a:	2200      	movs	r2, #0
   de85c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   de85e:	4770      	bx	lr
   de860:	2003e5b0 	.word	0x2003e5b0

000de864 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   de864:	b510      	push	{r4, lr}
   de866:	4604      	mov	r4, r0
   de868:	4608      	mov	r0, r1
{
    _spi = spi;
   de86a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   de86c:	f7fd fb48 	bl	dbf00 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   de870:	2300      	movs	r3, #0
   de872:	6063      	str	r3, [r4, #4]
}
   de874:	4620      	mov	r0, r4
   de876:	bd10      	pop	{r4, pc}

000de878 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   de878:	b510      	push	{r4, lr}
   de87a:	4604      	mov	r4, r0
{
	free(buffer);
   de87c:	6800      	ldr	r0, [r0, #0]
   de87e:	f7fd fdaf 	bl	dc3e0 <free>
}
   de882:	4620      	mov	r0, r4
   de884:	bd10      	pop	{r4, pc}

000de886 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   de886:	b510      	push	{r4, lr}
   de888:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   de88a:	6800      	ldr	r0, [r0, #0]
   de88c:	b108      	cbz	r0, de892 <_ZN6String10invalidateEv+0xc>
   de88e:	f7fd fda7 	bl	dc3e0 <free>
	buffer = NULL;
   de892:	2300      	movs	r3, #0
	capacity = len = 0;
   de894:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   de898:	6023      	str	r3, [r4, #0]
}
   de89a:	bd10      	pop	{r4, pc}

000de89c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   de89c:	b538      	push	{r3, r4, r5, lr}
   de89e:	4604      	mov	r4, r0
   de8a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   de8a2:	6800      	ldr	r0, [r0, #0]
   de8a4:	3101      	adds	r1, #1
   de8a6:	f7fd fda3 	bl	dc3f0 <realloc>
	if (newbuffer) {
   de8aa:	b110      	cbz	r0, de8b2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   de8ac:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   de8b0:	2001      	movs	r0, #1
	}
	return 0;
}
   de8b2:	bd38      	pop	{r3, r4, r5, pc}

000de8b4 <_ZN6String7reserveEj>:
{
   de8b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   de8b6:	6803      	ldr	r3, [r0, #0]
{
   de8b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   de8ba:	b123      	cbz	r3, de8c6 <_ZN6String7reserveEj+0x12>
   de8bc:	6843      	ldr	r3, [r0, #4]
   de8be:	428b      	cmp	r3, r1
   de8c0:	d301      	bcc.n	de8c6 <_ZN6String7reserveEj+0x12>
   de8c2:	2001      	movs	r0, #1
}
   de8c4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   de8c6:	4620      	mov	r0, r4
   de8c8:	f7ff ffe8 	bl	de89c <_ZN6String12changeBufferEj>
   de8cc:	2800      	cmp	r0, #0
   de8ce:	d0f9      	beq.n	de8c4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   de8d0:	68a3      	ldr	r3, [r4, #8]
   de8d2:	2b00      	cmp	r3, #0
   de8d4:	d1f5      	bne.n	de8c2 <_ZN6String7reserveEj+0xe>
   de8d6:	6822      	ldr	r2, [r4, #0]
   de8d8:	7013      	strb	r3, [r2, #0]
   de8da:	e7f2      	b.n	de8c2 <_ZN6String7reserveEj+0xe>

000de8dc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   de8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   de8de:	460d      	mov	r5, r1
	if (!reserve(length)) {
   de8e0:	4611      	mov	r1, r2
   de8e2:	9201      	str	r2, [sp, #4]
{
   de8e4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   de8e6:	f7ff ffe5 	bl	de8b4 <_ZN6String7reserveEj>
   de8ea:	9a01      	ldr	r2, [sp, #4]
   de8ec:	b928      	cbnz	r0, de8fa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   de8ee:	4620      	mov	r0, r4
   de8f0:	f7ff ffc9 	bl	de886 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   de8f4:	4620      	mov	r0, r4
   de8f6:	b003      	add	sp, #12
   de8f8:	bd30      	pop	{r4, r5, pc}
	len = length;
   de8fa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   de8fc:	4629      	mov	r1, r5
   de8fe:	6820      	ldr	r0, [r4, #0]
   de900:	f001 fb48 	bl	dff94 <memcpy>
	buffer[len] = 0;
   de904:	6822      	ldr	r2, [r4, #0]
   de906:	68a3      	ldr	r3, [r4, #8]
   de908:	2100      	movs	r1, #0
   de90a:	54d1      	strb	r1, [r2, r3]
	return *this;
   de90c:	e7f2      	b.n	de8f4 <_ZN6String4copyEPKcj+0x18>

000de90e <_ZN6StringC1EPKc>:
	buffer = NULL;
   de90e:	2300      	movs	r3, #0
String::String(const char *cstr)
   de910:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   de912:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   de916:	4604      	mov	r4, r0
	len = 0;
   de918:	6083      	str	r3, [r0, #8]
	flags = 0;
   de91a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   de91c:	b141      	cbz	r1, de930 <_ZN6StringC1EPKc+0x22>
   de91e:	4608      	mov	r0, r1
   de920:	9101      	str	r1, [sp, #4]
   de922:	f001 fbea 	bl	e00fa <strlen>
   de926:	9901      	ldr	r1, [sp, #4]
   de928:	4602      	mov	r2, r0
   de92a:	4620      	mov	r0, r4
   de92c:	f7ff ffd6 	bl	de8dc <_ZN6String4copyEPKcj>
}
   de930:	4620      	mov	r0, r4
   de932:	b002      	add	sp, #8
   de934:	bd10      	pop	{r4, pc}

000de936 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   de936:	b538      	push	{r3, r4, r5, lr}
   de938:	4605      	mov	r5, r0
	if (buffer) {
   de93a:	6800      	ldr	r0, [r0, #0]
{
   de93c:	460c      	mov	r4, r1
	if (buffer) {
   de93e:	b168      	cbz	r0, de95c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   de940:	686a      	ldr	r2, [r5, #4]
   de942:	688b      	ldr	r3, [r1, #8]
   de944:	429a      	cmp	r2, r3
   de946:	d307      	bcc.n	de958 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   de948:	6809      	ldr	r1, [r1, #0]
   de94a:	f001 fbb1 	bl	e00b0 <strcpy>
			len = rhs.len;
   de94e:	68a3      	ldr	r3, [r4, #8]
   de950:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   de952:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   de954:	60a3      	str	r3, [r4, #8]
}
   de956:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   de958:	f7fd fd42 	bl	dc3e0 <free>
	buffer = rhs.buffer;
   de95c:	6823      	ldr	r3, [r4, #0]
   de95e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   de960:	6863      	ldr	r3, [r4, #4]
   de962:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   de964:	68a3      	ldr	r3, [r4, #8]
   de966:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   de968:	2300      	movs	r3, #0
	rhs.capacity = 0;
   de96a:	e9c4 3300 	strd	r3, r3, [r4]
   de96e:	e7f1      	b.n	de954 <_ZN6String4moveERS_+0x1e>

000de970 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   de970:	b510      	push	{r4, lr}
	buffer = NULL;
   de972:	2300      	movs	r3, #0
	capacity = 0;
   de974:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   de978:	4604      	mov	r4, r0
	len = 0;
   de97a:	6083      	str	r3, [r0, #8]
	flags = 0;
   de97c:	7303      	strb	r3, [r0, #12]
	move(rval);
   de97e:	f7ff ffda 	bl	de936 <_ZN6String4moveERS_>
}
   de982:	4620      	mov	r0, r4
   de984:	bd10      	pop	{r4, pc}

000de986 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   de986:	4288      	cmp	r0, r1
{
   de988:	b510      	push	{r4, lr}
   de98a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   de98c:	d005      	beq.n	de99a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   de98e:	680b      	ldr	r3, [r1, #0]
   de990:	b12b      	cbz	r3, de99e <_ZN6StringaSERKS_+0x18>
   de992:	688a      	ldr	r2, [r1, #8]
   de994:	4619      	mov	r1, r3
   de996:	f7ff ffa1 	bl	de8dc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   de99a:	4620      	mov	r0, r4
   de99c:	bd10      	pop	{r4, pc}
	else invalidate();
   de99e:	f7ff ff72 	bl	de886 <_ZN6String10invalidateEv>
   de9a2:	e7fa      	b.n	de99a <_ZN6StringaSERKS_+0x14>

000de9a4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   de9a4:	b510      	push	{r4, lr}
	buffer = NULL;
   de9a6:	2300      	movs	r3, #0
String::String(const String &value)
   de9a8:	4604      	mov	r4, r0
	capacity = 0;
   de9aa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   de9ae:	6083      	str	r3, [r0, #8]
	flags = 0;
   de9b0:	7303      	strb	r3, [r0, #12]
	*this = value;
   de9b2:	f7ff ffe8 	bl	de986 <_ZN6StringaSERKS_>
}
   de9b6:	4620      	mov	r0, r4
   de9b8:	bd10      	pop	{r4, pc}

000de9ba <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   de9ba:	4288      	cmp	r0, r1
{
   de9bc:	b510      	push	{r4, lr}
   de9be:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   de9c0:	d001      	beq.n	de9c6 <_ZN6StringaSEOS_+0xc>
   de9c2:	f7ff ffb8 	bl	de936 <_ZN6String4moveERS_>
	return *this;
}
   de9c6:	4620      	mov	r0, r4
   de9c8:	bd10      	pop	{r4, pc}

000de9ca <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   de9ca:	b513      	push	{r0, r1, r4, lr}
   de9cc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   de9ce:	b159      	cbz	r1, de9e8 <_ZN6StringaSEPKc+0x1e>
   de9d0:	4608      	mov	r0, r1
   de9d2:	9101      	str	r1, [sp, #4]
   de9d4:	f001 fb91 	bl	e00fa <strlen>
   de9d8:	9901      	ldr	r1, [sp, #4]
   de9da:	4602      	mov	r2, r0
   de9dc:	4620      	mov	r0, r4
   de9de:	f7ff ff7d 	bl	de8dc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   de9e2:	4620      	mov	r0, r4
   de9e4:	b002      	add	sp, #8
   de9e6:	bd10      	pop	{r4, pc}
	else invalidate();
   de9e8:	f7ff ff4d 	bl	de886 <_ZN6String10invalidateEv>
   de9ec:	e7f9      	b.n	de9e2 <_ZN6StringaSEPKc+0x18>

000de9ee <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   de9ee:	b570      	push	{r4, r5, r6, lr}
   de9f0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   de9f2:	460e      	mov	r6, r1
   de9f4:	b909      	cbnz	r1, de9fa <_ZN6String6concatEPKcj+0xc>
   de9f6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   de9f8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   de9fa:	b16a      	cbz	r2, dea18 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   de9fc:	6884      	ldr	r4, [r0, #8]
   de9fe:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   dea00:	4621      	mov	r1, r4
   dea02:	f7ff ff57 	bl	de8b4 <_ZN6String7reserveEj>
   dea06:	2800      	cmp	r0, #0
   dea08:	d0f5      	beq.n	de9f6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   dea0a:	6828      	ldr	r0, [r5, #0]
   dea0c:	68ab      	ldr	r3, [r5, #8]
   dea0e:	4631      	mov	r1, r6
   dea10:	4418      	add	r0, r3
   dea12:	f001 fb4d 	bl	e00b0 <strcpy>
	len = newlen;
   dea16:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   dea18:	2001      	movs	r0, #1
   dea1a:	e7ed      	b.n	de9f8 <_ZN6String6concatEPKcj+0xa>

000dea1c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   dea1c:	b513      	push	{r0, r1, r4, lr}
   dea1e:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   dea20:	4608      	mov	r0, r1
	if (!cstr) return 0;
   dea22:	b151      	cbz	r1, dea3a <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   dea24:	9101      	str	r1, [sp, #4]
   dea26:	f001 fb68 	bl	e00fa <strlen>
   dea2a:	9901      	ldr	r1, [sp, #4]
   dea2c:	4602      	mov	r2, r0
   dea2e:	4620      	mov	r0, r4
}
   dea30:	b002      	add	sp, #8
   dea32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   dea36:	f7ff bfda 	b.w	de9ee <_ZN6String6concatEPKcj>
}
   dea3a:	b002      	add	sp, #8
   dea3c:	bd10      	pop	{r4, pc}

000dea3e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dea3e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dea40:	688a      	ldr	r2, [r1, #8]
   dea42:	6809      	ldr	r1, [r1, #0]
{
   dea44:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dea46:	f7ff ffd2 	bl	de9ee <_ZN6String6concatEPKcj>
   dea4a:	b910      	cbnz	r0, dea52 <_ZplRK15StringSumHelperRK6String+0x14>
   dea4c:	4620      	mov	r0, r4
   dea4e:	f7ff ff1a 	bl	de886 <_ZN6String10invalidateEv>
	return a;
}
   dea52:	4620      	mov	r0, r4
   dea54:	bd10      	pop	{r4, pc}

000dea56 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dea56:	b513      	push	{r0, r1, r4, lr}
   dea58:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dea5a:	b929      	cbnz	r1, dea68 <_ZplRK15StringSumHelperPKc+0x12>
   dea5c:	4620      	mov	r0, r4
   dea5e:	f7ff ff12 	bl	de886 <_ZN6String10invalidateEv>
	return a;
}
   dea62:	4620      	mov	r0, r4
   dea64:	b002      	add	sp, #8
   dea66:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dea68:	4608      	mov	r0, r1
   dea6a:	9101      	str	r1, [sp, #4]
   dea6c:	f001 fb45 	bl	e00fa <strlen>
   dea70:	9901      	ldr	r1, [sp, #4]
   dea72:	4602      	mov	r2, r0
   dea74:	4620      	mov	r0, r4
   dea76:	f7ff ffba 	bl	de9ee <_ZN6String6concatEPKcj>
   dea7a:	2800      	cmp	r0, #0
   dea7c:	d0ee      	beq.n	dea5c <_ZplRK15StringSumHelperPKc+0x6>
   dea7e:	e7f0      	b.n	dea62 <_ZplRK15StringSumHelperPKc+0xc>

000dea80 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   dea80:	6802      	ldr	r2, [r0, #0]
{
   dea82:	460b      	mov	r3, r1
   dea84:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
   dea86:	b162      	cbz	r2, deaa2 <_ZNK6String9compareToERKS_+0x22>
   dea88:	b941      	cbnz	r1, dea9c <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   dea8a:	6880      	ldr	r0, [r0, #8]
   dea8c:	b160      	cbz	r0, deaa8 <_ZNK6String9compareToERKS_+0x28>
   dea8e:	7810      	ldrb	r0, [r2, #0]
   dea90:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   dea92:	6898      	ldr	r0, [r3, #8]
   dea94:	b140      	cbz	r0, deaa8 <_ZNK6String9compareToERKS_+0x28>
   dea96:	7809      	ldrb	r1, [r1, #0]
   dea98:	4248      	negs	r0, r1
   dea9a:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   dea9c:	4610      	mov	r0, r2
   dea9e:	f001 bafd 	b.w	e009c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   deaa2:	2900      	cmp	r1, #0
   deaa4:	d1f5      	bne.n	dea92 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   deaa6:	4608      	mov	r0, r1
}
   deaa8:	4770      	bx	lr

000deaaa <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   deaaa:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   deaac:	6882      	ldr	r2, [r0, #8]
   deaae:	688b      	ldr	r3, [r1, #8]
   deab0:	429a      	cmp	r2, r3
   deab2:	d105      	bne.n	deac0 <_ZNK6String6equalsERKS_+0x16>
   deab4:	f7ff ffe4 	bl	dea80 <_ZNK6String9compareToERKS_>
   deab8:	fab0 f080 	clz	r0, r0
   deabc:	0940      	lsrs	r0, r0, #5
}
   deabe:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   deac0:	2000      	movs	r0, #0
   deac2:	e7fc      	b.n	deabe <_ZNK6String6equalsERKS_+0x14>

000deac4 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   deac4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   deac6:	6882      	ldr	r2, [r0, #8]
   deac8:	b93a      	cbnz	r2, deada <_ZNK6String6equalsEPKc+0x16>
   deaca:	b121      	cbz	r1, dead6 <_ZNK6String6equalsEPKc+0x12>
   deacc:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   deace:	fab0 f080 	clz	r0, r0
   dead2:	0940      	lsrs	r0, r0, #5
   dead4:	e000      	b.n	dead8 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dead6:	2001      	movs	r0, #1
}
   dead8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   deada:	6800      	ldr	r0, [r0, #0]
   deadc:	b909      	cbnz	r1, deae2 <_ZNK6String6equalsEPKc+0x1e>
   deade:	7800      	ldrb	r0, [r0, #0]
   deae0:	e7f5      	b.n	deace <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   deae2:	f001 fadb 	bl	e009c <strcmp>
   deae6:	e7f2      	b.n	deace <_ZNK6String6equalsEPKc+0xa>

000deae8 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   deae8:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   deaea:	6883      	ldr	r3, [r0, #8]
   deaec:	688a      	ldr	r2, [r1, #8]
   deaee:	4293      	cmp	r3, r2
   deaf0:	d30b      	bcc.n	deb0a <_ZNK6String8endsWithERKS_+0x22>
   deaf2:	6800      	ldr	r0, [r0, #0]
   deaf4:	b140      	cbz	r0, deb08 <_ZNK6String8endsWithERKS_+0x20>
   deaf6:	6809      	ldr	r1, [r1, #0]
   deaf8:	b149      	cbz	r1, deb0e <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   deafa:	1a9b      	subs	r3, r3, r2
   deafc:	4418      	add	r0, r3
   deafe:	f001 facd 	bl	e009c <strcmp>
   deb02:	fab0 f080 	clz	r0, r0
   deb06:	0940      	lsrs	r0, r0, #5
}
   deb08:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   deb0a:	2000      	movs	r0, #0
   deb0c:	e7fc      	b.n	deb08 <_ZNK6String8endsWithERKS_+0x20>
   deb0e:	4608      	mov	r0, r1
   deb10:	e7fa      	b.n	deb08 <_ZNK6String8endsWithERKS_+0x20>
	...

000deb14 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   deb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   deb16:	429a      	cmp	r2, r3
{
   deb18:	460f      	mov	r7, r1
   deb1a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   deb1c:	490c      	ldr	r1, [pc, #48]	; (deb50 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   deb1e:	bf88      	it	hi
   deb20:	4613      	movhi	r3, r2
{
   deb22:	4614      	mov	r4, r2
   deb24:	4606      	mov	r6, r0
	if (left > right) {
   deb26:	bf84      	itt	hi
   deb28:	462c      	movhi	r4, r5
   deb2a:	461d      	movhi	r5, r3
	String out;
   deb2c:	f7ff feef 	bl	de90e <_ZN6StringC1EPKc>
	if (left > len) return out;
   deb30:	68ba      	ldr	r2, [r7, #8]
   deb32:	42a2      	cmp	r2, r4
   deb34:	d30a      	bcc.n	deb4c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   deb36:	6839      	ldr	r1, [r7, #0]
   deb38:	42aa      	cmp	r2, r5
   deb3a:	bf94      	ite	ls
   deb3c:	ebc4 0202 	rsbls	r2, r4, r2
   deb40:	ebc4 0205 	rsbhi	r2, r4, r5
   deb44:	4421      	add	r1, r4
   deb46:	4630      	mov	r0, r6
   deb48:	f7ff fec8 	bl	de8dc <_ZN6String4copyEPKcj>
	return out;
}
   deb4c:	4630      	mov	r0, r6
   deb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   deb50:	000e291f 	.word	0x000e291f

000deb54 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   deb54:	b40e      	push	{r1, r2, r3}
   deb56:	b570      	push	{r4, r5, r6, lr}
   deb58:	b087      	sub	sp, #28
   deb5a:	ad0b      	add	r5, sp, #44	; 0x2c
   deb5c:	4604      	mov	r4, r0
   deb5e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   deb62:	9201      	str	r2, [sp, #4]
   deb64:	462b      	mov	r3, r5
   deb66:	2105      	movs	r1, #5
   deb68:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   deb6a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   deb6c:	f7fd fc60 	bl	dc430 <vsnprintf>
    va_end(marker);

    String result;
   deb70:	490b      	ldr	r1, [pc, #44]	; (deba0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   deb72:	4606      	mov	r6, r0
    String result;
   deb74:	4620      	mov	r0, r4
   deb76:	f7ff feca 	bl	de90e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   deb7a:	4631      	mov	r1, r6
   deb7c:	4620      	mov	r0, r4
   deb7e:	f7ff fe99 	bl	de8b4 <_ZN6String7reserveEj>
    if (result.buffer) {
   deb82:	6820      	ldr	r0, [r4, #0]
   deb84:	b130      	cbz	r0, deb94 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   deb86:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   deb88:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   deb8a:	462b      	mov	r3, r5
   deb8c:	1c71      	adds	r1, r6, #1
   deb8e:	f7fd fc4f 	bl	dc430 <vsnprintf>
        va_end(marker);
        result.len = n;
   deb92:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   deb94:	4620      	mov	r0, r4
   deb96:	b007      	add	sp, #28
   deb98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   deb9c:	b003      	add	sp, #12
   deb9e:	4770      	bx	lr
   deba0:	000e291f 	.word	0x000e291f

000deba4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   deba4:	b510      	push	{r4, lr}
   deba6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   deba8:	6800      	ldr	r0, [r0, #0]
   debaa:	b118      	cbz	r0, debb4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   debac:	f7fd fc18 	bl	dc3e0 <free>
            wakeupSource_ = nullptr;
   debb0:	2300      	movs	r3, #0
   debb2:	6023      	str	r3, [r4, #0]
        }
    }
   debb4:	bd10      	pop	{r4, pc}

000debb6 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   debb6:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   debb8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   debbc:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   debbe:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   debc0:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   debc2:	f853 2f06 	ldr.w	r2, [r3, #6]!
   debc6:	f8c0 2006 	str.w	r2, [r0, #6]
   debca:	889b      	ldrh	r3, [r3, #4]
   debcc:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   debce:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   debd0:	f7ff ffe8 	bl	deba4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   debd4:	682b      	ldr	r3, [r5, #0]
   debd6:	b113      	cbz	r3, debde <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   debd8:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   debda:	2300      	movs	r3, #0
   debdc:	602b      	str	r3, [r5, #0]
    }
   debde:	4620      	mov	r0, r4
   debe0:	bd38      	pop	{r3, r4, r5, pc}
	...

000debe4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   debe4:	b538      	push	{r3, r4, r5, lr}
   debe6:	460c      	mov	r4, r1
   debe8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   debea:	f7ff ffdb 	bl	deba4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   debee:	b144      	cbz	r4, dec02 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   debf0:	8820      	ldrh	r0, [r4, #0]
   debf2:	f7fd fbed 	bl	dc3d0 <malloc>
   debf6:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   debf8:	b128      	cbz	r0, dec06 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   debfa:	8822      	ldrh	r2, [r4, #0]
   debfc:	4621      	mov	r1, r4
   debfe:	f001 f9c9 	bl	dff94 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   dec02:	2000      	movs	r0, #0
    }
   dec04:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   dec06:	4801      	ldr	r0, [pc, #4]	; (dec0c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   dec08:	e7fc      	b.n	dec04 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   dec0a:	bf00      	nop
   dec0c:	fffffefc 	.word	0xfffffefc

000dec10 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   dec10:	b5f0      	push	{r4, r5, r6, r7, lr}
   dec12:	4d2d      	ldr	r5, [pc, #180]	; (decc8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   dec14:	7d0b      	ldrb	r3, [r1, #20]
   dec16:	4604      	mov	r4, r0
   dec18:	b08b      	sub	sp, #44	; 0x2c
   dec1a:	4608      	mov	r0, r1
   dec1c:	1daf      	adds	r7, r5, #6
   dec1e:	2b00      	cmp	r3, #0
   dec20:	d038      	beq.n	dec94 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   dec22:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   dec24:	791b      	ldrb	r3, [r3, #4]
   dec26:	2b00      	cmp	r3, #0
   dec28:	d034      	beq.n	dec94 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   dec2a:	2200      	movs	r2, #0
    SleepResult() {}
   dec2c:	4b27      	ldr	r3, [pc, #156]	; (deccc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dec2e:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   dec30:	a902      	add	r1, sp, #8
   dec32:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   dec34:	9202      	str	r2, [sp, #8]
   dec36:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   dec3a:	f88d 200e 	strb.w	r2, [sp, #14]
   dec3e:	f7fd fb0d 	bl	dc25c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   dec42:	f8dd 300e 	ldr.w	r3, [sp, #14]
   dec46:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   dec4a:	b200      	sxth	r0, r0
   dec4c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   dec50:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   dec54:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   dec56:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dec58:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dec5a:	4628      	mov	r0, r5
   dec5c:	f7ff ffc2 	bl	debe4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dec60:	a802      	add	r0, sp, #8
   dec62:	f7ff ff9f 	bl	deba4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dec66:	2300      	movs	r3, #0
   dec68:	6023      	str	r3, [r4, #0]
   dec6a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dec6c:	71a3      	strb	r3, [r4, #6]
   dec6e:	8123      	strh	r3, [r4, #8]
   dec70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dec74:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dec76:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dec7a:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dec7c:	683b      	ldr	r3, [r7, #0]
   dec7e:	f8c4 3006 	str.w	r3, [r4, #6]
   dec82:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dec84:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dec86:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dec88:	4620      	mov	r0, r4
   dec8a:	f7ff ffab 	bl	debe4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dec8e:	4620      	mov	r0, r4
   dec90:	b00b      	add	sp, #44	; 0x2c
   dec92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dec94:	2600      	movs	r6, #0
   dec96:	2320      	movs	r3, #32
   dec98:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dec9c:	4b0c      	ldr	r3, [pc, #48]	; (decd0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dec9e:	9300      	str	r3, [sp, #0]
   deca0:	490c      	ldr	r1, [pc, #48]	; (decd4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   deca2:	4633      	mov	r3, r6
   deca4:	aa02      	add	r2, sp, #8
   deca6:	2032      	movs	r0, #50	; 0x32
   deca8:	f7fd fa4a 	bl	dc140 <log_message>
    SleepResult() {}
   decac:	4b07      	ldr	r3, [pc, #28]	; (deccc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   decae:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   decb0:	a902      	add	r1, sp, #8
        error_ = error;
   decb2:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   decb6:	4804      	ldr	r0, [pc, #16]	; (decc8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   decb8:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   decba:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   decbe:	f8ad 300c 	strh.w	r3, [sp, #12]
   decc2:	f7ff ff78 	bl	debb6 <_ZN17SystemSleepResultaSEOS_>
   decc6:	e7cb      	b.n	dec60 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   decc8:	2003e5c0 	.word	0x2003e5c0
   deccc:	ffff0000 	.word	0xffff0000
   decd0:	000e2e7f 	.word	0x000e2e7f
   decd4:	000e2e78 	.word	0x000e2e78

000decd8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   decd8:	4b05      	ldr	r3, [pc, #20]	; (decf0 <_GLOBAL__sub_I_System+0x18>)
   decda:	2202      	movs	r2, #2
   decdc:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   decde:	4b05      	ldr	r3, [pc, #20]	; (decf4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   dece0:	4a05      	ldr	r2, [pc, #20]	; (decf8 <_GLOBAL__sub_I_System+0x20>)
   dece2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   dece4:	2000      	movs	r0, #0
   dece6:	6018      	str	r0, [r3, #0]
   dece8:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   decea:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   decec:	f7fd ba62 	b.w	dc1b4 <set_system_mode>
   decf0:	2003e5cc 	.word	0x2003e5cc
   decf4:	2003e5c0 	.word	0x2003e5c0
   decf8:	ffff0000 	.word	0xffff0000

000decfc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   decfc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   decfe:	2000      	movs	r0, #0
   ded00:	f7fd fae6 	bl	dc2d0 <spark_sync_time_pending>
   ded04:	b128      	cbz	r0, ded12 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ded06:	f7fd fad3 	bl	dc2b0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   ded0a:	f080 0001 	eor.w	r0, r0, #1
   ded0e:	b2c0      	uxtb	r0, r0
    }
   ded10:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ded12:	2001      	movs	r0, #1
   ded14:	e7fc      	b.n	ded10 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000ded16 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   ded16:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ded18:	4602      	mov	r2, r0
   ded1a:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   ded1c:	4668      	mov	r0, sp
    struct timeval tv = {
   ded1e:	2100      	movs	r1, #0
    };
   ded20:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   ded24:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   ded28:	f7fd f83a 	bl	dbda0 <hal_rtc_set_time>
   ded2c:	4602      	mov	r2, r0
   ded2e:	b910      	cbnz	r0, ded36 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   ded30:	4601      	mov	r1, r0
   ded32:	f7fd fa77 	bl	dc224 <system_notify_time_changed>
    }
}
   ded36:	b005      	add	sp, #20
   ded38:	f85d fb04 	ldr.w	pc, [sp], #4

000ded3c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   ded3c:	b530      	push	{r4, r5, lr}
   ded3e:	4604      	mov	r4, r0
    t += time_zone_cache;
   ded40:	4818      	ldr	r0, [pc, #96]	; (deda4 <_ZN9TimeClass7timeStrEx+0x68>)
   ded42:	e9d0 1000 	ldrd	r1, r0, [r0]
   ded46:	1852      	adds	r2, r2, r1
   ded48:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   ded4c:	4816      	ldr	r0, [pc, #88]	; (deda8 <_ZN9TimeClass7timeStrEx+0x6c>)
   ded4e:	e9d0 1000 	ldrd	r1, r0, [r0]
   ded52:	1852      	adds	r2, r2, r1
{
   ded54:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   ded56:	eb40 0303 	adc.w	r3, r0, r3
   ded5a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   ded5e:	2224      	movs	r2, #36	; 0x24
   ded60:	eb0d 0002 	add.w	r0, sp, r2
   ded64:	2100      	movs	r1, #0
   ded66:	f001 f93d 	bl	dffe4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   ded6a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   ded6c:	a909      	add	r1, sp, #36	; 0x24
   ded6e:	4668      	mov	r0, sp
   ded70:	f7fd fb8e 	bl	dc490 <localtime_r>
    char ascstr[26] = {};
   ded74:	2216      	movs	r2, #22
   ded76:	4629      	mov	r1, r5
   ded78:	a803      	add	r0, sp, #12
   ded7a:	9502      	str	r5, [sp, #8]
   ded7c:	f001 f932 	bl	dffe4 <memset>
    asctime_r(&calendar_time, ascstr);
   ded80:	a902      	add	r1, sp, #8
   ded82:	a809      	add	r0, sp, #36	; 0x24
   ded84:	f001 f8c8 	bl	dff18 <asctime_r>
    int len = strlen(ascstr);
   ded88:	a802      	add	r0, sp, #8
   ded8a:	f001 f9b6 	bl	e00fa <strlen>
    ascstr[len-1] = 0; // remove final newline
   ded8e:	ab12      	add	r3, sp, #72	; 0x48
   ded90:	4418      	add	r0, r3
    return String(ascstr);
   ded92:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   ded94:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   ded98:	4620      	mov	r0, r4
   ded9a:	f7ff fdb8 	bl	de90e <_ZN6StringC1EPKc>
}
   ded9e:	4620      	mov	r0, r4
   deda0:	b013      	add	sp, #76	; 0x4c
   deda2:	bd30      	pop	{r4, r5, pc}
   deda4:	2003e5e0 	.word	0x2003e5e0
   deda8:	2003e5d8 	.word	0x2003e5d8

000dedac <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dedac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dedb0:	b0a5      	sub	sp, #148	; 0x94
   dedb2:	4607      	mov	r7, r0
   dedb4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dedb6:	a814      	add	r0, sp, #80	; 0x50
{
   dedb8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dedba:	223f      	movs	r2, #63	; 0x3f
{
   dedbc:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dedbe:	f001 f9b6 	bl	e012e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dedc2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dedc4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dedc6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dedca:	f001 f996 	bl	e00fa <strlen>
   dedce:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dedd0:	bb5d      	cbnz	r5, dee2a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dedd2:	492a      	ldr	r1, [pc, #168]	; (dee7c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dedd4:	a803      	add	r0, sp, #12
   dedd6:	f001 f96b 	bl	e00b0 <strcpy>
   dedda:	ae14      	add	r6, sp, #80	; 0x50
{
   deddc:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dedde:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dede2:	45ab      	cmp	fp, r5
   dede4:	d936      	bls.n	dee54 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dede6:	46b1      	mov	r9, r6
   dede8:	f105 0a01 	add.w	sl, r5, #1
   dedec:	f819 3b01 	ldrb.w	r3, [r9], #1
   dedf0:	2b25      	cmp	r3, #37	; 0x25
   dedf2:	d117      	bne.n	dee24 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dedf4:	7873      	ldrb	r3, [r6, #1]
   dedf6:	2b7a      	cmp	r3, #122	; 0x7a
   dedf8:	d114      	bne.n	dee24 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dedfa:	a803      	add	r0, sp, #12
   dedfc:	f001 f97d 	bl	e00fa <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dee00:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dee02:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dee04:	1828      	adds	r0, r5, r0
   dee06:	4418      	add	r0, r3
   dee08:	ebab 0205 	sub.w	r2, fp, r5
   dee0c:	1cb1      	adds	r1, r6, #2
   dee0e:	f001 f8c1 	bl	dff94 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dee12:	4622      	mov	r2, r4
   dee14:	a903      	add	r1, sp, #12
   dee16:	4630      	mov	r0, r6
   dee18:	f001 f8bc 	bl	dff94 <memcpy>
            len = strlen(format_str);
   dee1c:	a814      	add	r0, sp, #80	; 0x50
   dee1e:	f001 f96c 	bl	e00fa <strlen>
   dee22:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   dee24:	464e      	mov	r6, r9
   dee26:	4655      	mov	r5, sl
   dee28:	e7d9      	b.n	dedde <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dee2a:	213c      	movs	r1, #60	; 0x3c
   dee2c:	fb95 f3f1 	sdiv	r3, r5, r1
   dee30:	2b00      	cmp	r3, #0
   dee32:	bfb8      	it	lt
   dee34:	425b      	neglt	r3, r3
   dee36:	fbb3 f2f1 	udiv	r2, r3, r1
   dee3a:	fb01 3312 	mls	r3, r1, r2, r3
   dee3e:	9300      	str	r3, [sp, #0]
   dee40:	4a0f      	ldr	r2, [pc, #60]	; (dee80 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   dee42:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dee46:	2110      	movs	r1, #16
   dee48:	a803      	add	r0, sp, #12
   dee4a:	fb95 f3f3 	sdiv	r3, r5, r3
   dee4e:	f7fd fae7 	bl	dc420 <snprintf>
   dee52:	e7c2      	b.n	dedda <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   dee54:	2100      	movs	r1, #0
   dee56:	222e      	movs	r2, #46	; 0x2e
   dee58:	a808      	add	r0, sp, #32
   dee5a:	9107      	str	r1, [sp, #28]
   dee5c:	f001 f8c2 	bl	dffe4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   dee60:	4643      	mov	r3, r8
   dee62:	aa14      	add	r2, sp, #80	; 0x50
   dee64:	2132      	movs	r1, #50	; 0x32
   dee66:	a807      	add	r0, sp, #28
   dee68:	f7fd fb0a 	bl	dc480 <strftime>
    return String(buf);
   dee6c:	a907      	add	r1, sp, #28
   dee6e:	4638      	mov	r0, r7
   dee70:	f7ff fd4d 	bl	de90e <_ZN6StringC1EPKc>
}
   dee74:	4638      	mov	r0, r7
   dee76:	b025      	add	sp, #148	; 0x94
   dee78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dee7c:	000e2ea6 	.word	0x000e2ea6
   dee80:	000e2ea8 	.word	0x000e2ea8

000dee84 <_ZN9TimeClass6formatExPKc>:
{
   dee84:	b5f0      	push	{r4, r5, r6, r7, lr}
   dee86:	b08d      	sub	sp, #52	; 0x34
   dee88:	e9cd 2300 	strd	r2, r3, [sp]
   dee8c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   dee8e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   dee90:	b915      	cbnz	r5, dee98 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   dee92:	4b19      	ldr	r3, [pc, #100]	; (deef8 <_ZN9TimeClass6formatExPKc+0x74>)
   dee94:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   dee96:	b12d      	cbz	r5, deea4 <_ZN9TimeClass6formatExPKc+0x20>
   dee98:	4b18      	ldr	r3, [pc, #96]	; (deefc <_ZN9TimeClass6formatExPKc+0x78>)
   dee9a:	4628      	mov	r0, r5
   dee9c:	6819      	ldr	r1, [r3, #0]
   dee9e:	f001 f8fd 	bl	e009c <strcmp>
   deea2:	b938      	cbnz	r0, deeb4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   deea4:	e9dd 2300 	ldrd	r2, r3, [sp]
   deea8:	4620      	mov	r0, r4
   deeaa:	f7ff ff47 	bl	ded3c <_ZN9TimeClass7timeStrEx>
}
   deeae:	4620      	mov	r0, r4
   deeb0:	b00d      	add	sp, #52	; 0x34
   deeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   deeb4:	4e12      	ldr	r6, [pc, #72]	; (def00 <_ZN9TimeClass6formatExPKc+0x7c>)
   deeb6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   deeb8:	4f12      	ldr	r7, [pc, #72]	; (def04 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   deeba:	e9d6 3200 	ldrd	r3, r2, [r6]
   deebe:	185b      	adds	r3, r3, r1
   deec0:	9901      	ldr	r1, [sp, #4]
   deec2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   deec6:	e9d7 0100 	ldrd	r0, r1, [r7]
   deeca:	181b      	adds	r3, r3, r0
   deecc:	eb41 0202 	adc.w	r2, r1, r2
   deed0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   deed4:	2100      	movs	r1, #0
   deed6:	2224      	movs	r2, #36	; 0x24
   deed8:	a803      	add	r0, sp, #12
   deeda:	f001 f883 	bl	dffe4 <memset>
    localtime_r(&t, &calendar_time);
   deede:	a903      	add	r1, sp, #12
   deee0:	4668      	mov	r0, sp
   deee2:	f7fd fad5 	bl	dc490 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   deee6:	6832      	ldr	r2, [r6, #0]
   deee8:	683b      	ldr	r3, [r7, #0]
   deeea:	a903      	add	r1, sp, #12
   deeec:	4413      	add	r3, r2
   deeee:	4620      	mov	r0, r4
   deef0:	462a      	mov	r2, r5
   deef2:	f7ff ff5b 	bl	dedac <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   deef6:	e7da      	b.n	deeae <_ZN9TimeClass6formatExPKc+0x2a>
   deef8:	2003e5d4 	.word	0x2003e5d4
   deefc:	2003e214 	.word	0x2003e214
   def00:	2003e5e0 	.word	0x2003e5e0
   def04:	2003e5d8 	.word	0x2003e5d8

000def08 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   def08:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   def0a:	2000      	movs	r0, #0
   def0c:	f7fc ff30 	bl	dbd70 <hal_rtc_time_is_valid>
    if (rtcstate)
   def10:	4604      	mov	r4, r0
   def12:	b9a0      	cbnz	r0, def3e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   def14:	f7fd f946 	bl	dc1a4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   def18:	2801      	cmp	r0, #1
   def1a:	d110      	bne.n	def3e <_ZN9TimeClass7isValidEv+0x36>
   def1c:	4620      	mov	r0, r4
   def1e:	f7fd f979 	bl	dc214 <system_thread_get_state>
   def22:	b960      	cbnz	r0, def3e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   def24:	f7ff feea 	bl	decfc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   def28:	b910      	cbnz	r0, def30 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   def2a:	f7fd f9b1 	bl	dc290 <spark_process>
        while (_while() && !_condition()) {
   def2e:	e7f9      	b.n	def24 <_ZN9TimeClass7isValidEv+0x1c>
   def30:	f7ff fee4 	bl	decfc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   def34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   def38:	2000      	movs	r0, #0
   def3a:	f7fc bf19 	b.w	dbd70 <hal_rtc_time_is_valid>
}
   def3e:	4620      	mov	r0, r4
   def40:	bd10      	pop	{r4, pc}

000def42 <_ZN9TimeClass3nowEv>:
{
   def42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   def44:	f7ff ffe0 	bl	def08 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   def48:	2210      	movs	r2, #16
   def4a:	2100      	movs	r1, #0
   def4c:	4668      	mov	r0, sp
   def4e:	f001 f849 	bl	dffe4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   def52:	2100      	movs	r1, #0
   def54:	4668      	mov	r0, sp
   def56:	f7fc ff1b 	bl	dbd90 <hal_rtc_get_time>
}
   def5a:	9800      	ldr	r0, [sp, #0]
   def5c:	b005      	add	sp, #20
   def5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000def64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   def64:	4b02      	ldr	r3, [pc, #8]	; (def70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   def66:	681a      	ldr	r2, [r3, #0]
   def68:	4b02      	ldr	r3, [pc, #8]	; (def74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   def6a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   def6c:	4770      	bx	lr
   def6e:	bf00      	nop
   def70:	2003e214 	.word	0x2003e214
   def74:	2003e5d4 	.word	0x2003e5d4

000def78 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   def78:	4770      	bx	lr

000def7a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   def7a:	7441      	strb	r1, [r0, #17]
}
   def7c:	4770      	bx	lr

000def7e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   def7e:	4770      	bx	lr

000def80 <_ZN11USARTSerial17availableForWriteEv>:
{
   def80:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   def82:	7c00      	ldrb	r0, [r0, #16]
   def84:	f7fd f874 	bl	dc070 <hal_usart_available_data_for_write>
}
   def88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   def8c:	bd08      	pop	{r3, pc}

000def8e <_ZN11USARTSerial9availableEv>:
{
   def8e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   def90:	7c00      	ldrb	r0, [r0, #16]
   def92:	f7fd f845 	bl	dc020 <hal_usart_available>
}
   def96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   def9a:	bd08      	pop	{r3, pc}

000def9c <_ZN11USARTSerial4peekEv>:
{
   def9c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   def9e:	7c00      	ldrb	r0, [r0, #16]
   defa0:	f7fd f84e 	bl	dc040 <hal_usart_peek>
}
   defa4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   defa8:	bd08      	pop	{r3, pc}

000defaa <_ZN11USARTSerial4readEv>:
{
   defaa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   defac:	7c00      	ldrb	r0, [r0, #16]
   defae:	f7fd f83f 	bl	dc030 <hal_usart_read>
}
   defb2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   defb6:	bd08      	pop	{r3, pc}

000defb8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   defb8:	7c00      	ldrb	r0, [r0, #16]
   defba:	f7fd b849 	b.w	dc050 <hal_usart_flush>

000defbe <_ZN11USARTSerial5writeEh>:
{
   defbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   defc0:	7c45      	ldrb	r5, [r0, #17]
{
   defc2:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   defc4:	b12d      	cbz	r5, defd2 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   defc6:	7c20      	ldrb	r0, [r4, #16]
}
   defc8:	b003      	add	sp, #12
   defca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   defce:	f7fd b81f 	b.w	dc010 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   defd2:	7c00      	ldrb	r0, [r0, #16]
   defd4:	9101      	str	r1, [sp, #4]
   defd6:	f7fd f84b 	bl	dc070 <hal_usart_available_data_for_write>
   defda:	2800      	cmp	r0, #0
   defdc:	9901      	ldr	r1, [sp, #4]
   defde:	dcf2      	bgt.n	defc6 <_ZN11USARTSerial5writeEh+0x8>
}
   defe0:	4628      	mov	r0, r5
   defe2:	b003      	add	sp, #12
   defe4:	bd30      	pop	{r4, r5, pc}

000defe6 <_ZN11USARTSerialD0Ev>:
   defe6:	b510      	push	{r4, lr}
   defe8:	2114      	movs	r1, #20
   defea:	4604      	mov	r4, r0
   defec:	f000 fa42 	bl	df474 <_ZdlPvj>
   deff0:	4620      	mov	r0, r4
   deff2:	bd10      	pop	{r4, pc}

000deff4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   deff4:	b510      	push	{r4, lr}
   deff6:	f04f 0c00 	mov.w	ip, #0
   deffa:	4604      	mov	r4, r0
   deffc:	4608      	mov	r0, r1
   deffe:	4611      	mov	r1, r2
   df000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   df004:	e9c4 c201 	strd	ip, r2, [r4, #4]
   df008:	4a04      	ldr	r2, [pc, #16]	; (df01c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   df00a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   df00c:	2201      	movs	r2, #1
  _serial = serial;
   df00e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   df010:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   df012:	461a      	mov	r2, r3
   df014:	f7fc ffec 	bl	dbff0 <hal_usart_init>
}
   df018:	4620      	mov	r0, r4
   df01a:	bd10      	pop	{r4, pc}
   df01c:	000e2ed8 	.word	0x000e2ed8

000df020 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   df020:	7c00      	ldrb	r0, [r0, #16]
   df022:	2300      	movs	r3, #0
   df024:	f7fd b82c 	b.w	dc080 <hal_usart_begin_config>

000df028 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   df028:	2200      	movs	r2, #0
   df02a:	f7ff bff9 	b.w	df020 <_ZN11USARTSerial5beginEmm>

000df02e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   df02e:	7c00      	ldrb	r0, [r0, #16]
   df030:	f7fc bfe6 	b.w	dc000 <hal_usart_end>

000df034 <_Z22__fetch_global_Serial1v>:
{
   df034:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   df036:	4c0d      	ldr	r4, [pc, #52]	; (df06c <_Z22__fetch_global_Serial1v+0x38>)
   df038:	7821      	ldrb	r1, [r4, #0]
   df03a:	f3bf 8f5b 	dmb	ish
   df03e:	f011 0101 	ands.w	r1, r1, #1
   df042:	d110      	bne.n	df066 <_Z22__fetch_global_Serial1v+0x32>
   df044:	4620      	mov	r0, r4
   df046:	9101      	str	r1, [sp, #4]
   df048:	f7f5 f838 	bl	d40bc <__cxa_guard_acquire>
   df04c:	9901      	ldr	r1, [sp, #4]
   df04e:	b150      	cbz	r0, df066 <_Z22__fetch_global_Serial1v+0x32>
   df050:	4b07      	ldr	r3, [pc, #28]	; (df070 <_Z22__fetch_global_Serial1v+0x3c>)
   df052:	4a08      	ldr	r2, [pc, #32]	; (df074 <_Z22__fetch_global_Serial1v+0x40>)
   df054:	4808      	ldr	r0, [pc, #32]	; (df078 <_Z22__fetch_global_Serial1v+0x44>)
   df056:	f7ff ffcd 	bl	deff4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   df05a:	4620      	mov	r0, r4
   df05c:	f7f5 f833 	bl	d40c6 <__cxa_guard_release>
   df060:	4806      	ldr	r0, [pc, #24]	; (df07c <_Z22__fetch_global_Serial1v+0x48>)
   df062:	f000 ff7f 	bl	dff64 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   df066:	4804      	ldr	r0, [pc, #16]	; (df078 <_Z22__fetch_global_Serial1v+0x44>)
   df068:	b002      	add	sp, #8
   df06a:	bd10      	pop	{r4, pc}
   df06c:	2003e5e8 	.word	0x2003e5e8
   df070:	2003e670 	.word	0x2003e670
   df074:	2003e5ec 	.word	0x2003e5ec
   df078:	2003e6f4 	.word	0x2003e6f4
   df07c:	000def7f 	.word	0x000def7f

000df080 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   df080:	7441      	strb	r1, [r0, #17]
}
   df082:	4770      	bx	lr

000df084 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   df084:	4770      	bx	lr

000df086 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   df086:	4770      	bx	lr

000df088 <_ZN9USBSerial4readEv>:
{
   df088:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   df08a:	2100      	movs	r1, #0
   df08c:	7c00      	ldrb	r0, [r0, #16]
   df08e:	f7fd f827 	bl	dc0e0 <HAL_USB_USART_Receive_Data>
}
   df092:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   df096:	bd08      	pop	{r3, pc}

000df098 <_ZN9USBSerial4peekEv>:
{
   df098:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   df09a:	2101      	movs	r1, #1
   df09c:	7c00      	ldrb	r0, [r0, #16]
   df09e:	f7fd f81f 	bl	dc0e0 <HAL_USB_USART_Receive_Data>
}
   df0a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   df0a6:	bd08      	pop	{r3, pc}

000df0a8 <_ZN9USBSerial17availableForWriteEv>:
{
   df0a8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   df0aa:	7c00      	ldrb	r0, [r0, #16]
   df0ac:	f7fd f810 	bl	dc0d0 <HAL_USB_USART_Available_Data_For_Write>
}
   df0b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   df0b4:	bd08      	pop	{r3, pc}

000df0b6 <_ZN9USBSerial9availableEv>:
{
   df0b6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   df0b8:	7c00      	ldrb	r0, [r0, #16]
   df0ba:	f7fd f801 	bl	dc0c0 <HAL_USB_USART_Available_Data>
}
   df0be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   df0c2:	bd08      	pop	{r3, pc}

000df0c4 <_ZN9USBSerial5writeEh>:
{
   df0c4:	b513      	push	{r0, r1, r4, lr}
   df0c6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   df0c8:	7c00      	ldrb	r0, [r0, #16]
{
   df0ca:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   df0cc:	f7fd f800 	bl	dc0d0 <HAL_USB_USART_Available_Data_For_Write>
   df0d0:	2800      	cmp	r0, #0
   df0d2:	9901      	ldr	r1, [sp, #4]
   df0d4:	dc01      	bgt.n	df0da <_ZN9USBSerial5writeEh+0x16>
   df0d6:	7c60      	ldrb	r0, [r4, #17]
   df0d8:	b120      	cbz	r0, df0e4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   df0da:	7c20      	ldrb	r0, [r4, #16]
   df0dc:	f7fd f808 	bl	dc0f0 <HAL_USB_USART_Send_Data>
   df0e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   df0e4:	b002      	add	sp, #8
   df0e6:	bd10      	pop	{r4, pc}

000df0e8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   df0e8:	7c00      	ldrb	r0, [r0, #16]
   df0ea:	f7fd b809 	b.w	dc100 <HAL_USB_USART_Flush_Data>

000df0ee <_ZN9USBSerialD0Ev>:
   df0ee:	b510      	push	{r4, lr}
   df0f0:	2114      	movs	r1, #20
   df0f2:	4604      	mov	r4, r0
   df0f4:	f000 f9be 	bl	df474 <_ZdlPvj>
   df0f8:	4620      	mov	r0, r4
   df0fa:	bd10      	pop	{r4, pc}

000df0fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   df0fc:	b510      	push	{r4, lr}
   df0fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   df102:	4604      	mov	r4, r0
   df104:	4608      	mov	r0, r1
   df106:	2100      	movs	r1, #0
   df108:	e9c4 1301 	strd	r1, r3, [r4, #4]
   df10c:	4b04      	ldr	r3, [pc, #16]	; (df120 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   df10e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   df110:	2301      	movs	r3, #1
  _serial = serial;
   df112:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   df114:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   df116:	4611      	mov	r1, r2
   df118:	f7fc ffba 	bl	dc090 <HAL_USB_USART_Init>
}
   df11c:	4620      	mov	r0, r4
   df11e:	bd10      	pop	{r4, pc}
   df120:	000e2f08 	.word	0x000e2f08

000df124 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   df124:	7c00      	ldrb	r0, [r0, #16]
   df126:	2200      	movs	r2, #0
   df128:	f7fc bfba 	b.w	dc0a0 <HAL_USB_USART_Begin>

000df12c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   df12c:	7c00      	ldrb	r0, [r0, #16]
   df12e:	f7fc bfbf 	b.w	dc0b0 <HAL_USB_USART_End>

000df132 <_Z19acquireSerialBufferv>:
{
   df132:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   df134:	2214      	movs	r2, #20
{
   df136:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   df138:	2100      	movs	r1, #0
   df13a:	f000 ff53 	bl	dffe4 <memset>
}
   df13e:	4620      	mov	r0, r4
   df140:	bd10      	pop	{r4, pc}
	...

000df144 <_Z16_fetch_usbserialv>:
{
   df144:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   df146:	4c0f      	ldr	r4, [pc, #60]	; (df184 <_Z16_fetch_usbserialv+0x40>)
{
   df148:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   df14a:	a803      	add	r0, sp, #12
   df14c:	f7ff fff1 	bl	df132 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   df150:	7821      	ldrb	r1, [r4, #0]
   df152:	f3bf 8f5b 	dmb	ish
   df156:	f011 0101 	ands.w	r1, r1, #1
   df15a:	d10f      	bne.n	df17c <_Z16_fetch_usbserialv+0x38>
   df15c:	4620      	mov	r0, r4
   df15e:	9101      	str	r1, [sp, #4]
   df160:	f7f4 ffac 	bl	d40bc <__cxa_guard_acquire>
   df164:	9901      	ldr	r1, [sp, #4]
   df166:	b148      	cbz	r0, df17c <_Z16_fetch_usbserialv+0x38>
   df168:	aa03      	add	r2, sp, #12
   df16a:	4807      	ldr	r0, [pc, #28]	; (df188 <_Z16_fetch_usbserialv+0x44>)
   df16c:	f7ff ffc6 	bl	df0fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   df170:	4620      	mov	r0, r4
   df172:	f7f4 ffa8 	bl	d40c6 <__cxa_guard_release>
   df176:	4805      	ldr	r0, [pc, #20]	; (df18c <_Z16_fetch_usbserialv+0x48>)
   df178:	f000 fef4 	bl	dff64 <atexit>
	return _usbserial;
}
   df17c:	4802      	ldr	r0, [pc, #8]	; (df188 <_Z16_fetch_usbserialv+0x44>)
   df17e:	b008      	add	sp, #32
   df180:	bd10      	pop	{r4, pc}
   df182:	bf00      	nop
   df184:	2003e708 	.word	0x2003e708
   df188:	2003e70c 	.word	0x2003e70c
   df18c:	000df085 	.word	0x000df085

000df190 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   df190:	4b01      	ldr	r3, [pc, #4]	; (df198 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   df192:	6018      	str	r0, [r3, #0]
    }, nullptr);
   df194:	4770      	bx	lr
   df196:	bf00      	nop
   df198:	2003e218 	.word	0x2003e218

000df19c <serialEventRun>:
{
   df19c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   df19e:	4b0b      	ldr	r3, [pc, #44]	; (df1cc <serialEventRun+0x30>)
   df1a0:	b143      	cbz	r3, df1b4 <serialEventRun+0x18>
   df1a2:	f7ff ffcf 	bl	df144 <_Z16_fetch_usbserialv>
   df1a6:	6803      	ldr	r3, [r0, #0]
   df1a8:	691b      	ldr	r3, [r3, #16]
   df1aa:	4798      	blx	r3
   df1ac:	2800      	cmp	r0, #0
   df1ae:	dd01      	ble.n	df1b4 <serialEventRun+0x18>
        serialEvent();
   df1b0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   df1b4:	4b06      	ldr	r3, [pc, #24]	; (df1d0 <serialEventRun+0x34>)
   df1b6:	b143      	cbz	r3, df1ca <serialEventRun+0x2e>
   df1b8:	f7ff ff3c 	bl	df034 <_Z22__fetch_global_Serial1v>
   df1bc:	6803      	ldr	r3, [r0, #0]
   df1be:	691b      	ldr	r3, [r3, #16]
   df1c0:	4798      	blx	r3
   df1c2:	2800      	cmp	r0, #0
   df1c4:	dd01      	ble.n	df1ca <serialEventRun+0x2e>
        serialEvent1();
   df1c6:	f3af 8000 	nop.w
}
   df1ca:	bd08      	pop	{r3, pc}
	...

000df1d4 <_post_loop>:
{
   df1d4:	b508      	push	{r3, lr}
	serialEventRun();
   df1d6:	f7ff ffe1 	bl	df19c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   df1da:	f7fc fdc1 	bl	dbd60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   df1de:	4b01      	ldr	r3, [pc, #4]	; (df1e4 <_post_loop+0x10>)
   df1e0:	6018      	str	r0, [r3, #0]
}
   df1e2:	bd08      	pop	{r3, pc}
   df1e4:	2003e734 	.word	0x2003e734

000df1e8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   df1e8:	4805      	ldr	r0, [pc, #20]	; (df200 <_Z33system_initialize_user_backup_ramv+0x18>)
   df1ea:	4a06      	ldr	r2, [pc, #24]	; (df204 <_Z33system_initialize_user_backup_ramv+0x1c>)
   df1ec:	4906      	ldr	r1, [pc, #24]	; (df208 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   df1ee:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   df1f0:	1a12      	subs	r2, r2, r0
   df1f2:	f000 fecf 	bl	dff94 <memcpy>
    __backup_sram_signature = signature;
   df1f6:	4b05      	ldr	r3, [pc, #20]	; (df20c <_Z33system_initialize_user_backup_ramv+0x24>)
   df1f8:	4a05      	ldr	r2, [pc, #20]	; (df210 <_Z33system_initialize_user_backup_ramv+0x28>)
   df1fa:	601a      	str	r2, [r3, #0]
}
   df1fc:	bd08      	pop	{r3, pc}
   df1fe:	bf00      	nop
   df200:	2003f400 	.word	0x2003f400
   df204:	2003f404 	.word	0x2003f404
   df208:	000e3240 	.word	0x000e3240
   df20c:	2003f400 	.word	0x2003f400
   df210:	9a271c1e 	.word	0x9a271c1e

000df214 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   df214:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   df216:	2300      	movs	r3, #0
   df218:	9300      	str	r3, [sp, #0]
   df21a:	461a      	mov	r2, r3
   df21c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   df220:	f7fd f812 	bl	dc248 <system_ctrl_set_result>
}
   df224:	b003      	add	sp, #12
   df226:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000df22c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   df22c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   df22e:	8843      	ldrh	r3, [r0, #2]
   df230:	2b0a      	cmp	r3, #10
   df232:	d008      	beq.n	df246 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   df234:	2b50      	cmp	r3, #80	; 0x50
   df236:	d10b      	bne.n	df250 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   df238:	4b09      	ldr	r3, [pc, #36]	; (df260 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   df23a:	681b      	ldr	r3, [r3, #0]
   df23c:	b14b      	cbz	r3, df252 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   df23e:	b003      	add	sp, #12
   df240:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   df244:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   df246:	f7ff ffe5 	bl	df214 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   df24a:	b003      	add	sp, #12
   df24c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   df250:	2300      	movs	r3, #0
   df252:	9300      	str	r3, [sp, #0]
   df254:	461a      	mov	r2, r3
   df256:	f06f 0177 	mvn.w	r1, #119	; 0x77
   df25a:	f7fc fff5 	bl	dc248 <system_ctrl_set_result>
}
   df25e:	e7f4      	b.n	df24a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   df260:	2003e724 	.word	0x2003e724

000df264 <module_user_init_hook>:
{
   df264:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   df266:	4812      	ldr	r0, [pc, #72]	; (df2b0 <module_user_init_hook+0x4c>)
   df268:	2100      	movs	r1, #0
   df26a:	f7fd f901 	bl	dc470 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   df26e:	4b11      	ldr	r3, [pc, #68]	; (df2b4 <module_user_init_hook+0x50>)
   df270:	681a      	ldr	r2, [r3, #0]
   df272:	4b11      	ldr	r3, [pc, #68]	; (df2b8 <module_user_init_hook+0x54>)
   df274:	429a      	cmp	r2, r3
   df276:	4b11      	ldr	r3, [pc, #68]	; (df2bc <module_user_init_hook+0x58>)
   df278:	bf0c      	ite	eq
   df27a:	2201      	moveq	r2, #1
   df27c:	2200      	movne	r2, #0
   df27e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   df280:	d001      	beq.n	df286 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   df282:	f7ff ffb1 	bl	df1e8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   df286:	f7fc fd53 	bl	dbd30 <HAL_RNG_GetRandomNumber>
   df28a:	4604      	mov	r4, r0
    srand(seed);
   df28c:	f000 feb2 	bl	dfff4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   df290:	4b0b      	ldr	r3, [pc, #44]	; (df2c0 <module_user_init_hook+0x5c>)
   df292:	b113      	cbz	r3, df29a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   df294:	4620      	mov	r0, r4
   df296:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   df29a:	2100      	movs	r1, #0
   df29c:	4808      	ldr	r0, [pc, #32]	; (df2c0 <module_user_init_hook+0x5c>)
   df29e:	f7fd f827 	bl	dc2f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   df2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   df2a6:	4807      	ldr	r0, [pc, #28]	; (df2c4 <module_user_init_hook+0x60>)
   df2a8:	2100      	movs	r1, #0
   df2aa:	f7fc bfc3 	b.w	dc234 <system_ctrl_set_app_request_handler>
   df2ae:	bf00      	nop
   df2b0:	000df191 	.word	0x000df191
   df2b4:	2003f400 	.word	0x2003f400
   df2b8:	9a271c1e 	.word	0x9a271c1e
   df2bc:	2003e720 	.word	0x2003e720
   df2c0:	00000000 	.word	0x00000000
   df2c4:	000df22d 	.word	0x000df22d

000df2c8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   df2c8:	b508      	push	{r3, lr}
   df2ca:	4b02      	ldr	r3, [pc, #8]	; (df2d4 <spark_protocol_instance+0xc>)
   df2cc:	681b      	ldr	r3, [r3, #0]
   df2ce:	681b      	ldr	r3, [r3, #0]
   df2d0:	9301      	str	r3, [sp, #4]
   df2d2:	bd08      	pop	{r3, pc}
   df2d4:	0003025c 	.word	0x0003025c

000df2d8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   df2d8:	b508      	push	{r3, lr}
   df2da:	4b02      	ldr	r3, [pc, #8]	; (df2e4 <spark_protocol_set_product_id+0xc>)
   df2dc:	681b      	ldr	r3, [r3, #0]
   df2de:	685b      	ldr	r3, [r3, #4]
   df2e0:	9301      	str	r3, [sp, #4]
   df2e2:	bd08      	pop	{r3, pc}
   df2e4:	0003025c 	.word	0x0003025c

000df2e8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   df2e8:	b508      	push	{r3, lr}
   df2ea:	4b02      	ldr	r3, [pc, #8]	; (df2f4 <spark_protocol_set_product_firmware_version+0xc>)
   df2ec:	681b      	ldr	r3, [r3, #0]
   df2ee:	689b      	ldr	r3, [r3, #8]
   df2f0:	9301      	str	r3, [sp, #4]
   df2f2:	bd08      	pop	{r3, pc}
   df2f4:	0003025c 	.word	0x0003025c

000df2f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   df2f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   df2fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   df2fc:	d902      	bls.n	df304 <pinAvailable+0xc>
    return false;
   df2fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   df300:	b002      	add	sp, #8
   df302:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   df304:	f1a0 030b 	sub.w	r3, r0, #11
   df308:	2b02      	cmp	r3, #2
   df30a:	d81a      	bhi.n	df342 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   df30c:	4c17      	ldr	r4, [pc, #92]	; (df36c <pinAvailable+0x74>)
   df30e:	7821      	ldrb	r1, [r4, #0]
   df310:	f3bf 8f5b 	dmb	ish
   df314:	f011 0101 	ands.w	r1, r1, #1
   df318:	d10b      	bne.n	df332 <pinAvailable+0x3a>
   df31a:	4620      	mov	r0, r4
   df31c:	9101      	str	r1, [sp, #4]
   df31e:	f7f4 fecd 	bl	d40bc <__cxa_guard_acquire>
   df322:	9901      	ldr	r1, [sp, #4]
   df324:	b128      	cbz	r0, df332 <pinAvailable+0x3a>
   df326:	4812      	ldr	r0, [pc, #72]	; (df370 <pinAvailable+0x78>)
   df328:	f7ff fa9c 	bl	de864 <_ZN8SPIClassC1E19hal_spi_interface_t>
   df32c:	4620      	mov	r0, r4
   df32e:	f7f4 feca 	bl	d40c6 <__cxa_guard_release>
   df332:	4b0f      	ldr	r3, [pc, #60]	; (df370 <pinAvailable+0x78>)
   df334:	7818      	ldrb	r0, [r3, #0]
   df336:	f7fc fdeb 	bl	dbf10 <hal_spi_is_enabled>
   df33a:	2800      	cmp	r0, #0
   df33c:	d1df      	bne.n	df2fe <pinAvailable+0x6>
  return true; // 'pin' is available
   df33e:	2001      	movs	r0, #1
   df340:	e7de      	b.n	df300 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   df342:	2801      	cmp	r0, #1
   df344:	d809      	bhi.n	df35a <pinAvailable+0x62>
   df346:	f000 f871 	bl	df42c <_Z19__fetch_global_Wirev>
   df34a:	2100      	movs	r1, #0
   df34c:	7c00      	ldrb	r0, [r0, #16]
   df34e:	f7fc fd97 	bl	dbe80 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   df352:	f080 0001 	eor.w	r0, r0, #1
   df356:	b2c0      	uxtb	r0, r0
   df358:	e7d2      	b.n	df300 <pinAvailable+0x8>
   df35a:	3809      	subs	r0, #9
   df35c:	2801      	cmp	r0, #1
   df35e:	d8ee      	bhi.n	df33e <pinAvailable+0x46>
   df360:	f7ff fe68 	bl	df034 <_Z22__fetch_global_Serial1v>
   df364:	7c00      	ldrb	r0, [r0, #16]
   df366:	f7fc fe7b 	bl	dc060 <hal_usart_is_enabled>
   df36a:	e7f2      	b.n	df352 <pinAvailable+0x5a>
   df36c:	2003e728 	.word	0x2003e728
   df370:	2003e72c 	.word	0x2003e72c

000df374 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   df374:	b538      	push	{r3, r4, r5, lr}
   df376:	4604      	mov	r4, r0
   df378:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   df37a:	f7fc fd21 	bl	dbdc0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   df37e:	28ff      	cmp	r0, #255	; 0xff
   df380:	d010      	beq.n	df3a4 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   df382:	2806      	cmp	r0, #6
   df384:	d804      	bhi.n	df390 <digitalWrite+0x1c>
   df386:	234d      	movs	r3, #77	; 0x4d
   df388:	fa23 f000 	lsr.w	r0, r3, r0
   df38c:	07c3      	lsls	r3, r0, #31
   df38e:	d409      	bmi.n	df3a4 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   df390:	4620      	mov	r0, r4
   df392:	f7ff ffb1 	bl	df2f8 <pinAvailable>
   df396:	b128      	cbz	r0, df3a4 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   df398:	4629      	mov	r1, r5
   df39a:	4620      	mov	r0, r4
}
   df39c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   df3a0:	f7fc bd16 	b.w	dbdd0 <HAL_GPIO_Write>
}
   df3a4:	bd38      	pop	{r3, r4, r5, pc}

000df3a6 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   df3a6:	b510      	push	{r4, lr}
   df3a8:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   df3aa:	f7fc fd09 	bl	dbdc0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   df3ae:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   df3b0:	b2db      	uxtb	r3, r3
   df3b2:	2b01      	cmp	r3, #1
   df3b4:	d908      	bls.n	df3c8 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   df3b6:	4620      	mov	r0, r4
   df3b8:	f7ff ff9e 	bl	df2f8 <pinAvailable>
   df3bc:	b120      	cbz	r0, df3c8 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   df3be:	4620      	mov	r0, r4
}
   df3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   df3c4:	f7fc bd0c 	b.w	dbde0 <HAL_GPIO_Read>
}
   df3c8:	2000      	movs	r0, #0
   df3ca:	bd10      	pop	{r4, pc}

000df3cc <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   df3cc:	280d      	cmp	r0, #13
{
   df3ce:	b510      	push	{r4, lr}
   df3d0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   df3d2:	bf9c      	itt	ls
   df3d4:	340e      	addls	r4, #14
   df3d6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   df3d8:	4620      	mov	r0, r4
   df3da:	f7ff ff8d 	bl	df2f8 <pinAvailable>
   df3de:	b150      	cbz	r0, df3f6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   df3e0:	2103      	movs	r1, #3
   df3e2:	4620      	mov	r0, r4
   df3e4:	f7fc fce4 	bl	dbdb0 <HAL_Validate_Pin_Function>
   df3e8:	2803      	cmp	r0, #3
   df3ea:	d104      	bne.n	df3f6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   df3ec:	4620      	mov	r0, r4
}
   df3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   df3f2:	f7fc bcfd 	b.w	dbdf0 <hal_adc_read>
}
   df3f6:	2000      	movs	r0, #0
   df3f8:	bd10      	pop	{r4, pc}

000df3fa <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   df3fa:	4770      	bx	lr

000df3fc <_Z17acquireWireBufferv>:
{
   df3fc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   df3fe:	2300      	movs	r3, #0
   df400:	2520      	movs	r5, #32
   df402:	8043      	strh	r3, [r0, #2]
   df404:	2314      	movs	r3, #20
{
   df406:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   df408:	8003      	strh	r3, [r0, #0]
   df40a:	6085      	str	r5, [r0, #8]
   df40c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   df40e:	4906      	ldr	r1, [pc, #24]	; (df428 <_Z17acquireWireBufferv+0x2c>)
   df410:	4628      	mov	r0, r5
   df412:	f000 f833 	bl	df47c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   df416:	4904      	ldr	r1, [pc, #16]	; (df428 <_Z17acquireWireBufferv+0x2c>)
	};
   df418:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   df41a:	4628      	mov	r0, r5
   df41c:	f000 f82e 	bl	df47c <_ZnajRKSt9nothrow_t>
	};
   df420:	60e0      	str	r0, [r4, #12]
}
   df422:	4620      	mov	r0, r4
   df424:	bd38      	pop	{r3, r4, r5, pc}
   df426:	bf00      	nop
   df428:	000e2f30 	.word	0x000e2f30

000df42c <_Z19__fetch_global_Wirev>:
{
   df42c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   df42e:	4d0e      	ldr	r5, [pc, #56]	; (df468 <_Z19__fetch_global_Wirev+0x3c>)
   df430:	7829      	ldrb	r1, [r5, #0]
   df432:	f3bf 8f5b 	dmb	ish
   df436:	f011 0401 	ands.w	r4, r1, #1
{
   df43a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   df43c:	d111      	bne.n	df462 <_Z19__fetch_global_Wirev+0x36>
   df43e:	4628      	mov	r0, r5
   df440:	f7f4 fe3c 	bl	d40bc <__cxa_guard_acquire>
   df444:	b168      	cbz	r0, df462 <_Z19__fetch_global_Wirev+0x36>
   df446:	a801      	add	r0, sp, #4
   df448:	f7ff ffd8 	bl	df3fc <_Z17acquireWireBufferv>
   df44c:	aa01      	add	r2, sp, #4
   df44e:	4621      	mov	r1, r4
   df450:	4806      	ldr	r0, [pc, #24]	; (df46c <_Z19__fetch_global_Wirev+0x40>)
   df452:	f7fd fbe9 	bl	dcc28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   df456:	4628      	mov	r0, r5
   df458:	f7f4 fe35 	bl	d40c6 <__cxa_guard_release>
   df45c:	4804      	ldr	r0, [pc, #16]	; (df470 <_Z19__fetch_global_Wirev+0x44>)
   df45e:	f000 fd81 	bl	dff64 <atexit>
	return wire;
}
   df462:	4802      	ldr	r0, [pc, #8]	; (df46c <_Z19__fetch_global_Wirev+0x40>)
   df464:	b007      	add	sp, #28
   df466:	bd30      	pop	{r4, r5, pc}
   df468:	2003e738 	.word	0x2003e738
   df46c:	2003e73c 	.word	0x2003e73c
   df470:	000df3fb 	.word	0x000df3fb

000df474 <_ZdlPvj>:
   df474:	f7f4 be13 	b.w	d409e <_ZdlPv>

000df478 <_ZnwjRKSt9nothrow_t>:
   df478:	f7f4 be0d 	b.w	d4096 <_Znwj>

000df47c <_ZnajRKSt9nothrow_t>:
   df47c:	f7f4 be0d 	b.w	d409a <_Znaj>

000df480 <_ZSt17__throw_bad_allocv>:
   df480:	b508      	push	{r3, lr}
   df482:	f7fc ffdd 	bl	dc440 <abort>

000df486 <_ZSt20__throw_length_errorPKc>:
   df486:	b508      	push	{r3, lr}
   df488:	f7fc ffda 	bl	dc440 <abort>

000df48c <_ZSt25__throw_bad_function_callv>:
   df48c:	b508      	push	{r3, lr}
   df48e:	f7fc ffd7 	bl	dc440 <abort>
   df492:	0000      	movs	r0, r0
   df494:	0000      	movs	r0, r0
	...

000df498 <floor>:
   df498:	ec51 0b10 	vmov	r0, r1, d0
   df49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df49e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   df4a2:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   df4a6:	2d13      	cmp	r5, #19
   df4a8:	ee10 6a10 	vmov	r6, s0
   df4ac:	460c      	mov	r4, r1
   df4ae:	dc20      	bgt.n	df4f2 <floor+0x5a>
   df4b0:	2d00      	cmp	r5, #0
   df4b2:	db3d      	blt.n	df530 <floor+0x98>
   df4b4:	4f38      	ldr	r7, [pc, #224]	; (df598 <floor+0x100>)
   df4b6:	412f      	asrs	r7, r5
   df4b8:	ea01 0307 	and.w	r3, r1, r7
   df4bc:	4303      	orrs	r3, r0
   df4be:	d01d      	beq.n	df4fc <floor+0x64>
   df4c0:	a333      	add	r3, pc, #204	; (adr r3, df590 <floor+0xf8>)
   df4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df4c6:	f000 f871 	bl	df5ac <__adddf3>
   df4ca:	2200      	movs	r2, #0
   df4cc:	2300      	movs	r3, #0
   df4ce:	f000 fcb3 	bl	dfe38 <__aeabi_dcmpgt>
   df4d2:	b148      	cbz	r0, df4e8 <floor+0x50>
   df4d4:	2c00      	cmp	r4, #0
   df4d6:	da04      	bge.n	df4e2 <floor+0x4a>
   df4d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   df4dc:	fa43 f505 	asr.w	r5, r3, r5
   df4e0:	442c      	add	r4, r5
   df4e2:	ea24 0407 	bic.w	r4, r4, r7
   df4e6:	2600      	movs	r6, #0
   df4e8:	4623      	mov	r3, r4
   df4ea:	4632      	mov	r2, r6
   df4ec:	ec43 2b10 	vmov	d0, r2, r3
   df4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   df4f2:	2d33      	cmp	r5, #51	; 0x33
   df4f4:	dd05      	ble.n	df502 <floor+0x6a>
   df4f6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   df4fa:	d029      	beq.n	df550 <floor+0xb8>
   df4fc:	ec41 0b10 	vmov	d0, r0, r1
   df500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   df502:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   df506:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   df50a:	40df      	lsrs	r7, r3
   df50c:	4207      	tst	r7, r0
   df50e:	d0f5      	beq.n	df4fc <floor+0x64>
   df510:	a31f      	add	r3, pc, #124	; (adr r3, df590 <floor+0xf8>)
   df512:	e9d3 2300 	ldrd	r2, r3, [r3]
   df516:	f000 f849 	bl	df5ac <__adddf3>
   df51a:	2200      	movs	r2, #0
   df51c:	2300      	movs	r3, #0
   df51e:	f000 fc8b 	bl	dfe38 <__aeabi_dcmpgt>
   df522:	2800      	cmp	r0, #0
   df524:	d0e0      	beq.n	df4e8 <floor+0x50>
   df526:	2c00      	cmp	r4, #0
   df528:	db23      	blt.n	df572 <floor+0xda>
   df52a:	ea26 0607 	bic.w	r6, r6, r7
   df52e:	e7db      	b.n	df4e8 <floor+0x50>
   df530:	a317      	add	r3, pc, #92	; (adr r3, df590 <floor+0xf8>)
   df532:	e9d3 2300 	ldrd	r2, r3, [r3]
   df536:	f000 f839 	bl	df5ac <__adddf3>
   df53a:	2200      	movs	r2, #0
   df53c:	2300      	movs	r3, #0
   df53e:	f000 fc7b 	bl	dfe38 <__aeabi_dcmpgt>
   df542:	2800      	cmp	r0, #0
   df544:	d0d0      	beq.n	df4e8 <floor+0x50>
   df546:	2c00      	cmp	r4, #0
   df548:	db0a      	blt.n	df560 <floor+0xc8>
   df54a:	2600      	movs	r6, #0
   df54c:	4634      	mov	r4, r6
   df54e:	e7cb      	b.n	df4e8 <floor+0x50>
   df550:	ee10 2a10 	vmov	r2, s0
   df554:	460b      	mov	r3, r1
   df556:	f000 f829 	bl	df5ac <__adddf3>
   df55a:	ec41 0b10 	vmov	d0, r0, r1
   df55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   df560:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   df564:	4a0d      	ldr	r2, [pc, #52]	; (df59c <floor+0x104>)
   df566:	431e      	orrs	r6, r3
   df568:	2e00      	cmp	r6, #0
   df56a:	bf18      	it	ne
   df56c:	4614      	movne	r4, r2
   df56e:	2600      	movs	r6, #0
   df570:	e7ba      	b.n	df4e8 <floor+0x50>
   df572:	2d14      	cmp	r5, #20
   df574:	d008      	beq.n	df588 <floor+0xf0>
   df576:	2301      	movs	r3, #1
   df578:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   df57c:	fa03 f505 	lsl.w	r5, r3, r5
   df580:	19ae      	adds	r6, r5, r6
   df582:	bf28      	it	cs
   df584:	18e4      	addcs	r4, r4, r3
   df586:	e7d0      	b.n	df52a <floor+0x92>
   df588:	3401      	adds	r4, #1
   df58a:	e7ce      	b.n	df52a <floor+0x92>
   df58c:	f3af 8000 	nop.w
   df590:	8800759c 	.word	0x8800759c
   df594:	7e37e43c 	.word	0x7e37e43c
   df598:	000fffff 	.word	0x000fffff
   df59c:	bff00000 	.word	0xbff00000

000df5a0 <__aeabi_drsub>:
   df5a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   df5a4:	e002      	b.n	df5ac <__adddf3>
   df5a6:	bf00      	nop

000df5a8 <__aeabi_dsub>:
   df5a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000df5ac <__adddf3>:
   df5ac:	b530      	push	{r4, r5, lr}
   df5ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   df5b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   df5b6:	ea94 0f05 	teq	r4, r5
   df5ba:	bf08      	it	eq
   df5bc:	ea90 0f02 	teqeq	r0, r2
   df5c0:	bf1f      	itttt	ne
   df5c2:	ea54 0c00 	orrsne.w	ip, r4, r0
   df5c6:	ea55 0c02 	orrsne.w	ip, r5, r2
   df5ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   df5ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   df5d2:	f000 80e2 	beq.w	df79a <__adddf3+0x1ee>
   df5d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   df5da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   df5de:	bfb8      	it	lt
   df5e0:	426d      	neglt	r5, r5
   df5e2:	dd0c      	ble.n	df5fe <__adddf3+0x52>
   df5e4:	442c      	add	r4, r5
   df5e6:	ea80 0202 	eor.w	r2, r0, r2
   df5ea:	ea81 0303 	eor.w	r3, r1, r3
   df5ee:	ea82 0000 	eor.w	r0, r2, r0
   df5f2:	ea83 0101 	eor.w	r1, r3, r1
   df5f6:	ea80 0202 	eor.w	r2, r0, r2
   df5fa:	ea81 0303 	eor.w	r3, r1, r3
   df5fe:	2d36      	cmp	r5, #54	; 0x36
   df600:	bf88      	it	hi
   df602:	bd30      	pophi	{r4, r5, pc}
   df604:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   df608:	ea4f 3101 	mov.w	r1, r1, lsl #12
   df60c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   df610:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   df614:	d002      	beq.n	df61c <__adddf3+0x70>
   df616:	4240      	negs	r0, r0
   df618:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df61c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   df620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   df624:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   df628:	d002      	beq.n	df630 <__adddf3+0x84>
   df62a:	4252      	negs	r2, r2
   df62c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   df630:	ea94 0f05 	teq	r4, r5
   df634:	f000 80a7 	beq.w	df786 <__adddf3+0x1da>
   df638:	f1a4 0401 	sub.w	r4, r4, #1
   df63c:	f1d5 0e20 	rsbs	lr, r5, #32
   df640:	db0d      	blt.n	df65e <__adddf3+0xb2>
   df642:	fa02 fc0e 	lsl.w	ip, r2, lr
   df646:	fa22 f205 	lsr.w	r2, r2, r5
   df64a:	1880      	adds	r0, r0, r2
   df64c:	f141 0100 	adc.w	r1, r1, #0
   df650:	fa03 f20e 	lsl.w	r2, r3, lr
   df654:	1880      	adds	r0, r0, r2
   df656:	fa43 f305 	asr.w	r3, r3, r5
   df65a:	4159      	adcs	r1, r3
   df65c:	e00e      	b.n	df67c <__adddf3+0xd0>
   df65e:	f1a5 0520 	sub.w	r5, r5, #32
   df662:	f10e 0e20 	add.w	lr, lr, #32
   df666:	2a01      	cmp	r2, #1
   df668:	fa03 fc0e 	lsl.w	ip, r3, lr
   df66c:	bf28      	it	cs
   df66e:	f04c 0c02 	orrcs.w	ip, ip, #2
   df672:	fa43 f305 	asr.w	r3, r3, r5
   df676:	18c0      	adds	r0, r0, r3
   df678:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   df67c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   df680:	d507      	bpl.n	df692 <__adddf3+0xe6>
   df682:	f04f 0e00 	mov.w	lr, #0
   df686:	f1dc 0c00 	rsbs	ip, ip, #0
   df68a:	eb7e 0000 	sbcs.w	r0, lr, r0
   df68e:	eb6e 0101 	sbc.w	r1, lr, r1
   df692:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   df696:	d31b      	bcc.n	df6d0 <__adddf3+0x124>
   df698:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   df69c:	d30c      	bcc.n	df6b8 <__adddf3+0x10c>
   df69e:	0849      	lsrs	r1, r1, #1
   df6a0:	ea5f 0030 	movs.w	r0, r0, rrx
   df6a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   df6a8:	f104 0401 	add.w	r4, r4, #1
   df6ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   df6b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   df6b4:	f080 809a 	bcs.w	df7ec <__adddf3+0x240>
   df6b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   df6bc:	bf08      	it	eq
   df6be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   df6c2:	f150 0000 	adcs.w	r0, r0, #0
   df6c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   df6ca:	ea41 0105 	orr.w	r1, r1, r5
   df6ce:	bd30      	pop	{r4, r5, pc}
   df6d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   df6d4:	4140      	adcs	r0, r0
   df6d6:	eb41 0101 	adc.w	r1, r1, r1
   df6da:	3c01      	subs	r4, #1
   df6dc:	bf28      	it	cs
   df6de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   df6e2:	d2e9      	bcs.n	df6b8 <__adddf3+0x10c>
   df6e4:	f091 0f00 	teq	r1, #0
   df6e8:	bf04      	itt	eq
   df6ea:	4601      	moveq	r1, r0
   df6ec:	2000      	moveq	r0, #0
   df6ee:	fab1 f381 	clz	r3, r1
   df6f2:	bf08      	it	eq
   df6f4:	3320      	addeq	r3, #32
   df6f6:	f1a3 030b 	sub.w	r3, r3, #11
   df6fa:	f1b3 0220 	subs.w	r2, r3, #32
   df6fe:	da0c      	bge.n	df71a <__adddf3+0x16e>
   df700:	320c      	adds	r2, #12
   df702:	dd08      	ble.n	df716 <__adddf3+0x16a>
   df704:	f102 0c14 	add.w	ip, r2, #20
   df708:	f1c2 020c 	rsb	r2, r2, #12
   df70c:	fa01 f00c 	lsl.w	r0, r1, ip
   df710:	fa21 f102 	lsr.w	r1, r1, r2
   df714:	e00c      	b.n	df730 <__adddf3+0x184>
   df716:	f102 0214 	add.w	r2, r2, #20
   df71a:	bfd8      	it	le
   df71c:	f1c2 0c20 	rsble	ip, r2, #32
   df720:	fa01 f102 	lsl.w	r1, r1, r2
   df724:	fa20 fc0c 	lsr.w	ip, r0, ip
   df728:	bfdc      	itt	le
   df72a:	ea41 010c 	orrle.w	r1, r1, ip
   df72e:	4090      	lslle	r0, r2
   df730:	1ae4      	subs	r4, r4, r3
   df732:	bfa2      	ittt	ge
   df734:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   df738:	4329      	orrge	r1, r5
   df73a:	bd30      	popge	{r4, r5, pc}
   df73c:	ea6f 0404 	mvn.w	r4, r4
   df740:	3c1f      	subs	r4, #31
   df742:	da1c      	bge.n	df77e <__adddf3+0x1d2>
   df744:	340c      	adds	r4, #12
   df746:	dc0e      	bgt.n	df766 <__adddf3+0x1ba>
   df748:	f104 0414 	add.w	r4, r4, #20
   df74c:	f1c4 0220 	rsb	r2, r4, #32
   df750:	fa20 f004 	lsr.w	r0, r0, r4
   df754:	fa01 f302 	lsl.w	r3, r1, r2
   df758:	ea40 0003 	orr.w	r0, r0, r3
   df75c:	fa21 f304 	lsr.w	r3, r1, r4
   df760:	ea45 0103 	orr.w	r1, r5, r3
   df764:	bd30      	pop	{r4, r5, pc}
   df766:	f1c4 040c 	rsb	r4, r4, #12
   df76a:	f1c4 0220 	rsb	r2, r4, #32
   df76e:	fa20 f002 	lsr.w	r0, r0, r2
   df772:	fa01 f304 	lsl.w	r3, r1, r4
   df776:	ea40 0003 	orr.w	r0, r0, r3
   df77a:	4629      	mov	r1, r5
   df77c:	bd30      	pop	{r4, r5, pc}
   df77e:	fa21 f004 	lsr.w	r0, r1, r4
   df782:	4629      	mov	r1, r5
   df784:	bd30      	pop	{r4, r5, pc}
   df786:	f094 0f00 	teq	r4, #0
   df78a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   df78e:	bf06      	itte	eq
   df790:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   df794:	3401      	addeq	r4, #1
   df796:	3d01      	subne	r5, #1
   df798:	e74e      	b.n	df638 <__adddf3+0x8c>
   df79a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   df79e:	bf18      	it	ne
   df7a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   df7a4:	d029      	beq.n	df7fa <__adddf3+0x24e>
   df7a6:	ea94 0f05 	teq	r4, r5
   df7aa:	bf08      	it	eq
   df7ac:	ea90 0f02 	teqeq	r0, r2
   df7b0:	d005      	beq.n	df7be <__adddf3+0x212>
   df7b2:	ea54 0c00 	orrs.w	ip, r4, r0
   df7b6:	bf04      	itt	eq
   df7b8:	4619      	moveq	r1, r3
   df7ba:	4610      	moveq	r0, r2
   df7bc:	bd30      	pop	{r4, r5, pc}
   df7be:	ea91 0f03 	teq	r1, r3
   df7c2:	bf1e      	ittt	ne
   df7c4:	2100      	movne	r1, #0
   df7c6:	2000      	movne	r0, #0
   df7c8:	bd30      	popne	{r4, r5, pc}
   df7ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   df7ce:	d105      	bne.n	df7dc <__adddf3+0x230>
   df7d0:	0040      	lsls	r0, r0, #1
   df7d2:	4149      	adcs	r1, r1
   df7d4:	bf28      	it	cs
   df7d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   df7da:	bd30      	pop	{r4, r5, pc}
   df7dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   df7e0:	bf3c      	itt	cc
   df7e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   df7e6:	bd30      	popcc	{r4, r5, pc}
   df7e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   df7ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   df7f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   df7f4:	f04f 0000 	mov.w	r0, #0
   df7f8:	bd30      	pop	{r4, r5, pc}
   df7fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   df7fe:	bf1a      	itte	ne
   df800:	4619      	movne	r1, r3
   df802:	4610      	movne	r0, r2
   df804:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   df808:	bf1c      	itt	ne
   df80a:	460b      	movne	r3, r1
   df80c:	4602      	movne	r2, r0
   df80e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   df812:	bf06      	itte	eq
   df814:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   df818:	ea91 0f03 	teqeq	r1, r3
   df81c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   df820:	bd30      	pop	{r4, r5, pc}
   df822:	bf00      	nop

000df824 <__aeabi_ui2d>:
   df824:	f090 0f00 	teq	r0, #0
   df828:	bf04      	itt	eq
   df82a:	2100      	moveq	r1, #0
   df82c:	4770      	bxeq	lr
   df82e:	b530      	push	{r4, r5, lr}
   df830:	f44f 6480 	mov.w	r4, #1024	; 0x400
   df834:	f104 0432 	add.w	r4, r4, #50	; 0x32
   df838:	f04f 0500 	mov.w	r5, #0
   df83c:	f04f 0100 	mov.w	r1, #0
   df840:	e750      	b.n	df6e4 <__adddf3+0x138>
   df842:	bf00      	nop

000df844 <__aeabi_i2d>:
   df844:	f090 0f00 	teq	r0, #0
   df848:	bf04      	itt	eq
   df84a:	2100      	moveq	r1, #0
   df84c:	4770      	bxeq	lr
   df84e:	b530      	push	{r4, r5, lr}
   df850:	f44f 6480 	mov.w	r4, #1024	; 0x400
   df854:	f104 0432 	add.w	r4, r4, #50	; 0x32
   df858:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   df85c:	bf48      	it	mi
   df85e:	4240      	negmi	r0, r0
   df860:	f04f 0100 	mov.w	r1, #0
   df864:	e73e      	b.n	df6e4 <__adddf3+0x138>
   df866:	bf00      	nop

000df868 <__aeabi_f2d>:
   df868:	0042      	lsls	r2, r0, #1
   df86a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   df86e:	ea4f 0131 	mov.w	r1, r1, rrx
   df872:	ea4f 7002 	mov.w	r0, r2, lsl #28
   df876:	bf1f      	itttt	ne
   df878:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   df87c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   df880:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   df884:	4770      	bxne	lr
   df886:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   df88a:	bf08      	it	eq
   df88c:	4770      	bxeq	lr
   df88e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   df892:	bf04      	itt	eq
   df894:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   df898:	4770      	bxeq	lr
   df89a:	b530      	push	{r4, r5, lr}
   df89c:	f44f 7460 	mov.w	r4, #896	; 0x380
   df8a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   df8a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   df8a8:	e71c      	b.n	df6e4 <__adddf3+0x138>
   df8aa:	bf00      	nop

000df8ac <__aeabi_ul2d>:
   df8ac:	ea50 0201 	orrs.w	r2, r0, r1
   df8b0:	bf08      	it	eq
   df8b2:	4770      	bxeq	lr
   df8b4:	b530      	push	{r4, r5, lr}
   df8b6:	f04f 0500 	mov.w	r5, #0
   df8ba:	e00a      	b.n	df8d2 <__aeabi_l2d+0x16>

000df8bc <__aeabi_l2d>:
   df8bc:	ea50 0201 	orrs.w	r2, r0, r1
   df8c0:	bf08      	it	eq
   df8c2:	4770      	bxeq	lr
   df8c4:	b530      	push	{r4, r5, lr}
   df8c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   df8ca:	d502      	bpl.n	df8d2 <__aeabi_l2d+0x16>
   df8cc:	4240      	negs	r0, r0
   df8ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df8d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   df8d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   df8da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   df8de:	f43f aed8 	beq.w	df692 <__adddf3+0xe6>
   df8e2:	f04f 0203 	mov.w	r2, #3
   df8e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   df8ea:	bf18      	it	ne
   df8ec:	3203      	addne	r2, #3
   df8ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   df8f2:	bf18      	it	ne
   df8f4:	3203      	addne	r2, #3
   df8f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   df8fa:	f1c2 0320 	rsb	r3, r2, #32
   df8fe:	fa00 fc03 	lsl.w	ip, r0, r3
   df902:	fa20 f002 	lsr.w	r0, r0, r2
   df906:	fa01 fe03 	lsl.w	lr, r1, r3
   df90a:	ea40 000e 	orr.w	r0, r0, lr
   df90e:	fa21 f102 	lsr.w	r1, r1, r2
   df912:	4414      	add	r4, r2
   df914:	e6bd      	b.n	df692 <__adddf3+0xe6>
   df916:	bf00      	nop

000df918 <__aeabi_dmul>:
   df918:	b570      	push	{r4, r5, r6, lr}
   df91a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   df91e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   df922:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   df926:	bf1d      	ittte	ne
   df928:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   df92c:	ea94 0f0c 	teqne	r4, ip
   df930:	ea95 0f0c 	teqne	r5, ip
   df934:	f000 f8de 	bleq	dfaf4 <__aeabi_dmul+0x1dc>
   df938:	442c      	add	r4, r5
   df93a:	ea81 0603 	eor.w	r6, r1, r3
   df93e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   df942:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   df946:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   df94a:	bf18      	it	ne
   df94c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   df950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   df954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   df958:	d038      	beq.n	df9cc <__aeabi_dmul+0xb4>
   df95a:	fba0 ce02 	umull	ip, lr, r0, r2
   df95e:	f04f 0500 	mov.w	r5, #0
   df962:	fbe1 e502 	umlal	lr, r5, r1, r2
   df966:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   df96a:	fbe0 e503 	umlal	lr, r5, r0, r3
   df96e:	f04f 0600 	mov.w	r6, #0
   df972:	fbe1 5603 	umlal	r5, r6, r1, r3
   df976:	f09c 0f00 	teq	ip, #0
   df97a:	bf18      	it	ne
   df97c:	f04e 0e01 	orrne.w	lr, lr, #1
   df980:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   df984:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   df988:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   df98c:	d204      	bcs.n	df998 <__aeabi_dmul+0x80>
   df98e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   df992:	416d      	adcs	r5, r5
   df994:	eb46 0606 	adc.w	r6, r6, r6
   df998:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   df99c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   df9a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   df9a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   df9a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   df9ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   df9b0:	bf88      	it	hi
   df9b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   df9b6:	d81e      	bhi.n	df9f6 <__aeabi_dmul+0xde>
   df9b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   df9bc:	bf08      	it	eq
   df9be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   df9c2:	f150 0000 	adcs.w	r0, r0, #0
   df9c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   df9ca:	bd70      	pop	{r4, r5, r6, pc}
   df9cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   df9d0:	ea46 0101 	orr.w	r1, r6, r1
   df9d4:	ea40 0002 	orr.w	r0, r0, r2
   df9d8:	ea81 0103 	eor.w	r1, r1, r3
   df9dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   df9e0:	bfc2      	ittt	gt
   df9e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   df9e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   df9ea:	bd70      	popgt	{r4, r5, r6, pc}
   df9ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   df9f0:	f04f 0e00 	mov.w	lr, #0
   df9f4:	3c01      	subs	r4, #1
   df9f6:	f300 80ab 	bgt.w	dfb50 <__aeabi_dmul+0x238>
   df9fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   df9fe:	bfde      	ittt	le
   dfa00:	2000      	movle	r0, #0
   dfa02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dfa06:	bd70      	pople	{r4, r5, r6, pc}
   dfa08:	f1c4 0400 	rsb	r4, r4, #0
   dfa0c:	3c20      	subs	r4, #32
   dfa0e:	da35      	bge.n	dfa7c <__aeabi_dmul+0x164>
   dfa10:	340c      	adds	r4, #12
   dfa12:	dc1b      	bgt.n	dfa4c <__aeabi_dmul+0x134>
   dfa14:	f104 0414 	add.w	r4, r4, #20
   dfa18:	f1c4 0520 	rsb	r5, r4, #32
   dfa1c:	fa00 f305 	lsl.w	r3, r0, r5
   dfa20:	fa20 f004 	lsr.w	r0, r0, r4
   dfa24:	fa01 f205 	lsl.w	r2, r1, r5
   dfa28:	ea40 0002 	orr.w	r0, r0, r2
   dfa2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dfa30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dfa34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dfa38:	fa21 f604 	lsr.w	r6, r1, r4
   dfa3c:	eb42 0106 	adc.w	r1, r2, r6
   dfa40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dfa44:	bf08      	it	eq
   dfa46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dfa4a:	bd70      	pop	{r4, r5, r6, pc}
   dfa4c:	f1c4 040c 	rsb	r4, r4, #12
   dfa50:	f1c4 0520 	rsb	r5, r4, #32
   dfa54:	fa00 f304 	lsl.w	r3, r0, r4
   dfa58:	fa20 f005 	lsr.w	r0, r0, r5
   dfa5c:	fa01 f204 	lsl.w	r2, r1, r4
   dfa60:	ea40 0002 	orr.w	r0, r0, r2
   dfa64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dfa68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dfa6c:	f141 0100 	adc.w	r1, r1, #0
   dfa70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dfa74:	bf08      	it	eq
   dfa76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dfa7a:	bd70      	pop	{r4, r5, r6, pc}
   dfa7c:	f1c4 0520 	rsb	r5, r4, #32
   dfa80:	fa00 f205 	lsl.w	r2, r0, r5
   dfa84:	ea4e 0e02 	orr.w	lr, lr, r2
   dfa88:	fa20 f304 	lsr.w	r3, r0, r4
   dfa8c:	fa01 f205 	lsl.w	r2, r1, r5
   dfa90:	ea43 0302 	orr.w	r3, r3, r2
   dfa94:	fa21 f004 	lsr.w	r0, r1, r4
   dfa98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dfa9c:	fa21 f204 	lsr.w	r2, r1, r4
   dfaa0:	ea20 0002 	bic.w	r0, r0, r2
   dfaa4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dfaa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dfaac:	bf08      	it	eq
   dfaae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dfab2:	bd70      	pop	{r4, r5, r6, pc}
   dfab4:	f094 0f00 	teq	r4, #0
   dfab8:	d10f      	bne.n	dfada <__aeabi_dmul+0x1c2>
   dfaba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dfabe:	0040      	lsls	r0, r0, #1
   dfac0:	eb41 0101 	adc.w	r1, r1, r1
   dfac4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dfac8:	bf08      	it	eq
   dfaca:	3c01      	subeq	r4, #1
   dfacc:	d0f7      	beq.n	dfabe <__aeabi_dmul+0x1a6>
   dface:	ea41 0106 	orr.w	r1, r1, r6
   dfad2:	f095 0f00 	teq	r5, #0
   dfad6:	bf18      	it	ne
   dfad8:	4770      	bxne	lr
   dfada:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dfade:	0052      	lsls	r2, r2, #1
   dfae0:	eb43 0303 	adc.w	r3, r3, r3
   dfae4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dfae8:	bf08      	it	eq
   dfaea:	3d01      	subeq	r5, #1
   dfaec:	d0f7      	beq.n	dfade <__aeabi_dmul+0x1c6>
   dfaee:	ea43 0306 	orr.w	r3, r3, r6
   dfaf2:	4770      	bx	lr
   dfaf4:	ea94 0f0c 	teq	r4, ip
   dfaf8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dfafc:	bf18      	it	ne
   dfafe:	ea95 0f0c 	teqne	r5, ip
   dfb02:	d00c      	beq.n	dfb1e <__aeabi_dmul+0x206>
   dfb04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dfb08:	bf18      	it	ne
   dfb0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dfb0e:	d1d1      	bne.n	dfab4 <__aeabi_dmul+0x19c>
   dfb10:	ea81 0103 	eor.w	r1, r1, r3
   dfb14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dfb18:	f04f 0000 	mov.w	r0, #0
   dfb1c:	bd70      	pop	{r4, r5, r6, pc}
   dfb1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dfb22:	bf06      	itte	eq
   dfb24:	4610      	moveq	r0, r2
   dfb26:	4619      	moveq	r1, r3
   dfb28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dfb2c:	d019      	beq.n	dfb62 <__aeabi_dmul+0x24a>
   dfb2e:	ea94 0f0c 	teq	r4, ip
   dfb32:	d102      	bne.n	dfb3a <__aeabi_dmul+0x222>
   dfb34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dfb38:	d113      	bne.n	dfb62 <__aeabi_dmul+0x24a>
   dfb3a:	ea95 0f0c 	teq	r5, ip
   dfb3e:	d105      	bne.n	dfb4c <__aeabi_dmul+0x234>
   dfb40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dfb44:	bf1c      	itt	ne
   dfb46:	4610      	movne	r0, r2
   dfb48:	4619      	movne	r1, r3
   dfb4a:	d10a      	bne.n	dfb62 <__aeabi_dmul+0x24a>
   dfb4c:	ea81 0103 	eor.w	r1, r1, r3
   dfb50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dfb54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dfb58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dfb5c:	f04f 0000 	mov.w	r0, #0
   dfb60:	bd70      	pop	{r4, r5, r6, pc}
   dfb62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dfb66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dfb6a:	bd70      	pop	{r4, r5, r6, pc}

000dfb6c <__aeabi_ddiv>:
   dfb6c:	b570      	push	{r4, r5, r6, lr}
   dfb6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dfb72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dfb76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dfb7a:	bf1d      	ittte	ne
   dfb7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dfb80:	ea94 0f0c 	teqne	r4, ip
   dfb84:	ea95 0f0c 	teqne	r5, ip
   dfb88:	f000 f8a7 	bleq	dfcda <__aeabi_ddiv+0x16e>
   dfb8c:	eba4 0405 	sub.w	r4, r4, r5
   dfb90:	ea81 0e03 	eor.w	lr, r1, r3
   dfb94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dfb98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dfb9c:	f000 8088 	beq.w	dfcb0 <__aeabi_ddiv+0x144>
   dfba0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dfba4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dfba8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dfbac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dfbb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dfbb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dfbb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dfbbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dfbc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dfbc4:	429d      	cmp	r5, r3
   dfbc6:	bf08      	it	eq
   dfbc8:	4296      	cmpeq	r6, r2
   dfbca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dfbce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dfbd2:	d202      	bcs.n	dfbda <__aeabi_ddiv+0x6e>
   dfbd4:	085b      	lsrs	r3, r3, #1
   dfbd6:	ea4f 0232 	mov.w	r2, r2, rrx
   dfbda:	1ab6      	subs	r6, r6, r2
   dfbdc:	eb65 0503 	sbc.w	r5, r5, r3
   dfbe0:	085b      	lsrs	r3, r3, #1
   dfbe2:	ea4f 0232 	mov.w	r2, r2, rrx
   dfbe6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dfbea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dfbee:	ebb6 0e02 	subs.w	lr, r6, r2
   dfbf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   dfbf6:	bf22      	ittt	cs
   dfbf8:	1ab6      	subcs	r6, r6, r2
   dfbfa:	4675      	movcs	r5, lr
   dfbfc:	ea40 000c 	orrcs.w	r0, r0, ip
   dfc00:	085b      	lsrs	r3, r3, #1
   dfc02:	ea4f 0232 	mov.w	r2, r2, rrx
   dfc06:	ebb6 0e02 	subs.w	lr, r6, r2
   dfc0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dfc0e:	bf22      	ittt	cs
   dfc10:	1ab6      	subcs	r6, r6, r2
   dfc12:	4675      	movcs	r5, lr
   dfc14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dfc18:	085b      	lsrs	r3, r3, #1
   dfc1a:	ea4f 0232 	mov.w	r2, r2, rrx
   dfc1e:	ebb6 0e02 	subs.w	lr, r6, r2
   dfc22:	eb75 0e03 	sbcs.w	lr, r5, r3
   dfc26:	bf22      	ittt	cs
   dfc28:	1ab6      	subcs	r6, r6, r2
   dfc2a:	4675      	movcs	r5, lr
   dfc2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dfc30:	085b      	lsrs	r3, r3, #1
   dfc32:	ea4f 0232 	mov.w	r2, r2, rrx
   dfc36:	ebb6 0e02 	subs.w	lr, r6, r2
   dfc3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dfc3e:	bf22      	ittt	cs
   dfc40:	1ab6      	subcs	r6, r6, r2
   dfc42:	4675      	movcs	r5, lr
   dfc44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dfc48:	ea55 0e06 	orrs.w	lr, r5, r6
   dfc4c:	d018      	beq.n	dfc80 <__aeabi_ddiv+0x114>
   dfc4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dfc52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dfc56:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dfc5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dfc5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dfc62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dfc66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dfc6a:	d1c0      	bne.n	dfbee <__aeabi_ddiv+0x82>
   dfc6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dfc70:	d10b      	bne.n	dfc8a <__aeabi_ddiv+0x11e>
   dfc72:	ea41 0100 	orr.w	r1, r1, r0
   dfc76:	f04f 0000 	mov.w	r0, #0
   dfc7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dfc7e:	e7b6      	b.n	dfbee <__aeabi_ddiv+0x82>
   dfc80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dfc84:	bf04      	itt	eq
   dfc86:	4301      	orreq	r1, r0
   dfc88:	2000      	moveq	r0, #0
   dfc8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dfc8e:	bf88      	it	hi
   dfc90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dfc94:	f63f aeaf 	bhi.w	df9f6 <__aeabi_dmul+0xde>
   dfc98:	ebb5 0c03 	subs.w	ip, r5, r3
   dfc9c:	bf04      	itt	eq
   dfc9e:	ebb6 0c02 	subseq.w	ip, r6, r2
   dfca2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dfca6:	f150 0000 	adcs.w	r0, r0, #0
   dfcaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dfcae:	bd70      	pop	{r4, r5, r6, pc}
   dfcb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dfcb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dfcb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dfcbc:	bfc2      	ittt	gt
   dfcbe:	ebd4 050c 	rsbsgt	r5, r4, ip
   dfcc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dfcc6:	bd70      	popgt	{r4, r5, r6, pc}
   dfcc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dfccc:	f04f 0e00 	mov.w	lr, #0
   dfcd0:	3c01      	subs	r4, #1
   dfcd2:	e690      	b.n	df9f6 <__aeabi_dmul+0xde>
   dfcd4:	ea45 0e06 	orr.w	lr, r5, r6
   dfcd8:	e68d      	b.n	df9f6 <__aeabi_dmul+0xde>
   dfcda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dfcde:	ea94 0f0c 	teq	r4, ip
   dfce2:	bf08      	it	eq
   dfce4:	ea95 0f0c 	teqeq	r5, ip
   dfce8:	f43f af3b 	beq.w	dfb62 <__aeabi_dmul+0x24a>
   dfcec:	ea94 0f0c 	teq	r4, ip
   dfcf0:	d10a      	bne.n	dfd08 <__aeabi_ddiv+0x19c>
   dfcf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dfcf6:	f47f af34 	bne.w	dfb62 <__aeabi_dmul+0x24a>
   dfcfa:	ea95 0f0c 	teq	r5, ip
   dfcfe:	f47f af25 	bne.w	dfb4c <__aeabi_dmul+0x234>
   dfd02:	4610      	mov	r0, r2
   dfd04:	4619      	mov	r1, r3
   dfd06:	e72c      	b.n	dfb62 <__aeabi_dmul+0x24a>
   dfd08:	ea95 0f0c 	teq	r5, ip
   dfd0c:	d106      	bne.n	dfd1c <__aeabi_ddiv+0x1b0>
   dfd0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dfd12:	f43f aefd 	beq.w	dfb10 <__aeabi_dmul+0x1f8>
   dfd16:	4610      	mov	r0, r2
   dfd18:	4619      	mov	r1, r3
   dfd1a:	e722      	b.n	dfb62 <__aeabi_dmul+0x24a>
   dfd1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dfd20:	bf18      	it	ne
   dfd22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dfd26:	f47f aec5 	bne.w	dfab4 <__aeabi_dmul+0x19c>
   dfd2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dfd2e:	f47f af0d 	bne.w	dfb4c <__aeabi_dmul+0x234>
   dfd32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dfd36:	f47f aeeb 	bne.w	dfb10 <__aeabi_dmul+0x1f8>
   dfd3a:	e712      	b.n	dfb62 <__aeabi_dmul+0x24a>

000dfd3c <__gedf2>:
   dfd3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dfd40:	e006      	b.n	dfd50 <__cmpdf2+0x4>
   dfd42:	bf00      	nop

000dfd44 <__ledf2>:
   dfd44:	f04f 0c01 	mov.w	ip, #1
   dfd48:	e002      	b.n	dfd50 <__cmpdf2+0x4>
   dfd4a:	bf00      	nop

000dfd4c <__cmpdf2>:
   dfd4c:	f04f 0c01 	mov.w	ip, #1
   dfd50:	f84d cd04 	str.w	ip, [sp, #-4]!
   dfd54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dfd58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dfd5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dfd60:	bf18      	it	ne
   dfd62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dfd66:	d01b      	beq.n	dfda0 <__cmpdf2+0x54>
   dfd68:	b001      	add	sp, #4
   dfd6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dfd6e:	bf0c      	ite	eq
   dfd70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dfd74:	ea91 0f03 	teqne	r1, r3
   dfd78:	bf02      	ittt	eq
   dfd7a:	ea90 0f02 	teqeq	r0, r2
   dfd7e:	2000      	moveq	r0, #0
   dfd80:	4770      	bxeq	lr
   dfd82:	f110 0f00 	cmn.w	r0, #0
   dfd86:	ea91 0f03 	teq	r1, r3
   dfd8a:	bf58      	it	pl
   dfd8c:	4299      	cmppl	r1, r3
   dfd8e:	bf08      	it	eq
   dfd90:	4290      	cmpeq	r0, r2
   dfd92:	bf2c      	ite	cs
   dfd94:	17d8      	asrcs	r0, r3, #31
   dfd96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dfd9a:	f040 0001 	orr.w	r0, r0, #1
   dfd9e:	4770      	bx	lr
   dfda0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dfda4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dfda8:	d102      	bne.n	dfdb0 <__cmpdf2+0x64>
   dfdaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dfdae:	d107      	bne.n	dfdc0 <__cmpdf2+0x74>
   dfdb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dfdb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dfdb8:	d1d6      	bne.n	dfd68 <__cmpdf2+0x1c>
   dfdba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dfdbe:	d0d3      	beq.n	dfd68 <__cmpdf2+0x1c>
   dfdc0:	f85d 0b04 	ldr.w	r0, [sp], #4
   dfdc4:	4770      	bx	lr
   dfdc6:	bf00      	nop

000dfdc8 <__aeabi_cdrcmple>:
   dfdc8:	4684      	mov	ip, r0
   dfdca:	4610      	mov	r0, r2
   dfdcc:	4662      	mov	r2, ip
   dfdce:	468c      	mov	ip, r1
   dfdd0:	4619      	mov	r1, r3
   dfdd2:	4663      	mov	r3, ip
   dfdd4:	e000      	b.n	dfdd8 <__aeabi_cdcmpeq>
   dfdd6:	bf00      	nop

000dfdd8 <__aeabi_cdcmpeq>:
   dfdd8:	b501      	push	{r0, lr}
   dfdda:	f7ff ffb7 	bl	dfd4c <__cmpdf2>
   dfdde:	2800      	cmp	r0, #0
   dfde0:	bf48      	it	mi
   dfde2:	f110 0f00 	cmnmi.w	r0, #0
   dfde6:	bd01      	pop	{r0, pc}

000dfde8 <__aeabi_dcmpeq>:
   dfde8:	f84d ed08 	str.w	lr, [sp, #-8]!
   dfdec:	f7ff fff4 	bl	dfdd8 <__aeabi_cdcmpeq>
   dfdf0:	bf0c      	ite	eq
   dfdf2:	2001      	moveq	r0, #1
   dfdf4:	2000      	movne	r0, #0
   dfdf6:	f85d fb08 	ldr.w	pc, [sp], #8
   dfdfa:	bf00      	nop

000dfdfc <__aeabi_dcmplt>:
   dfdfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   dfe00:	f7ff ffea 	bl	dfdd8 <__aeabi_cdcmpeq>
   dfe04:	bf34      	ite	cc
   dfe06:	2001      	movcc	r0, #1
   dfe08:	2000      	movcs	r0, #0
   dfe0a:	f85d fb08 	ldr.w	pc, [sp], #8
   dfe0e:	bf00      	nop

000dfe10 <__aeabi_dcmple>:
   dfe10:	f84d ed08 	str.w	lr, [sp, #-8]!
   dfe14:	f7ff ffe0 	bl	dfdd8 <__aeabi_cdcmpeq>
   dfe18:	bf94      	ite	ls
   dfe1a:	2001      	movls	r0, #1
   dfe1c:	2000      	movhi	r0, #0
   dfe1e:	f85d fb08 	ldr.w	pc, [sp], #8
   dfe22:	bf00      	nop

000dfe24 <__aeabi_dcmpge>:
   dfe24:	f84d ed08 	str.w	lr, [sp, #-8]!
   dfe28:	f7ff ffce 	bl	dfdc8 <__aeabi_cdrcmple>
   dfe2c:	bf94      	ite	ls
   dfe2e:	2001      	movls	r0, #1
   dfe30:	2000      	movhi	r0, #0
   dfe32:	f85d fb08 	ldr.w	pc, [sp], #8
   dfe36:	bf00      	nop

000dfe38 <__aeabi_dcmpgt>:
   dfe38:	f84d ed08 	str.w	lr, [sp, #-8]!
   dfe3c:	f7ff ffc4 	bl	dfdc8 <__aeabi_cdrcmple>
   dfe40:	bf34      	ite	cc
   dfe42:	2001      	movcc	r0, #1
   dfe44:	2000      	movcs	r0, #0
   dfe46:	f85d fb08 	ldr.w	pc, [sp], #8
   dfe4a:	bf00      	nop

000dfe4c <__aeabi_d2iz>:
   dfe4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dfe50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dfe54:	d215      	bcs.n	dfe82 <__aeabi_d2iz+0x36>
   dfe56:	d511      	bpl.n	dfe7c <__aeabi_d2iz+0x30>
   dfe58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dfe5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dfe60:	d912      	bls.n	dfe88 <__aeabi_d2iz+0x3c>
   dfe62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dfe66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dfe6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dfe6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dfe72:	fa23 f002 	lsr.w	r0, r3, r2
   dfe76:	bf18      	it	ne
   dfe78:	4240      	negne	r0, r0
   dfe7a:	4770      	bx	lr
   dfe7c:	f04f 0000 	mov.w	r0, #0
   dfe80:	4770      	bx	lr
   dfe82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dfe86:	d105      	bne.n	dfe94 <__aeabi_d2iz+0x48>
   dfe88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dfe8c:	bf08      	it	eq
   dfe8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dfe92:	4770      	bx	lr
   dfe94:	f04f 0000 	mov.w	r0, #0
   dfe98:	4770      	bx	lr
   dfe9a:	bf00      	nop

000dfe9c <__aeabi_d2uiz>:
   dfe9c:	004a      	lsls	r2, r1, #1
   dfe9e:	d211      	bcs.n	dfec4 <__aeabi_d2uiz+0x28>
   dfea0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dfea4:	d211      	bcs.n	dfeca <__aeabi_d2uiz+0x2e>
   dfea6:	d50d      	bpl.n	dfec4 <__aeabi_d2uiz+0x28>
   dfea8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dfeac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dfeb0:	d40e      	bmi.n	dfed0 <__aeabi_d2uiz+0x34>
   dfeb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dfeb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dfeba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dfebe:	fa23 f002 	lsr.w	r0, r3, r2
   dfec2:	4770      	bx	lr
   dfec4:	f04f 0000 	mov.w	r0, #0
   dfec8:	4770      	bx	lr
   dfeca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dfece:	d102      	bne.n	dfed6 <__aeabi_d2uiz+0x3a>
   dfed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dfed4:	4770      	bx	lr
   dfed6:	f04f 0000 	mov.w	r0, #0
   dfeda:	4770      	bx	lr

000dfedc <__aeabi_d2ulz>:
   dfedc:	b5d0      	push	{r4, r6, r7, lr}
   dfede:	4b0c      	ldr	r3, [pc, #48]	; (dff10 <__aeabi_d2ulz+0x34>)
   dfee0:	2200      	movs	r2, #0
   dfee2:	4606      	mov	r6, r0
   dfee4:	460f      	mov	r7, r1
   dfee6:	f7ff fd17 	bl	df918 <__aeabi_dmul>
   dfeea:	f7ff ffd7 	bl	dfe9c <__aeabi_d2uiz>
   dfeee:	4604      	mov	r4, r0
   dfef0:	f7ff fc98 	bl	df824 <__aeabi_ui2d>
   dfef4:	4b07      	ldr	r3, [pc, #28]	; (dff14 <__aeabi_d2ulz+0x38>)
   dfef6:	2200      	movs	r2, #0
   dfef8:	f7ff fd0e 	bl	df918 <__aeabi_dmul>
   dfefc:	4602      	mov	r2, r0
   dfefe:	460b      	mov	r3, r1
   dff00:	4630      	mov	r0, r6
   dff02:	4639      	mov	r1, r7
   dff04:	f7ff fb50 	bl	df5a8 <__aeabi_dsub>
   dff08:	f7ff ffc8 	bl	dfe9c <__aeabi_d2uiz>
   dff0c:	4621      	mov	r1, r4
   dff0e:	bdd0      	pop	{r4, r6, r7, pc}
   dff10:	3df00000 	.word	0x3df00000
   dff14:	41f00000 	.word	0x41f00000

000dff18 <asctime_r>:
   dff18:	b510      	push	{r4, lr}
   dff1a:	460c      	mov	r4, r1
   dff1c:	6941      	ldr	r1, [r0, #20]
   dff1e:	6903      	ldr	r3, [r0, #16]
   dff20:	6982      	ldr	r2, [r0, #24]
   dff22:	b086      	sub	sp, #24
   dff24:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dff28:	9104      	str	r1, [sp, #16]
   dff2a:	6801      	ldr	r1, [r0, #0]
   dff2c:	9103      	str	r1, [sp, #12]
   dff2e:	6841      	ldr	r1, [r0, #4]
   dff30:	9102      	str	r1, [sp, #8]
   dff32:	6881      	ldr	r1, [r0, #8]
   dff34:	9101      	str	r1, [sp, #4]
   dff36:	68c1      	ldr	r1, [r0, #12]
   dff38:	9100      	str	r1, [sp, #0]
   dff3a:	4907      	ldr	r1, [pc, #28]	; (dff58 <asctime_r+0x40>)
   dff3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dff40:	440b      	add	r3, r1
   dff42:	4906      	ldr	r1, [pc, #24]	; (dff5c <asctime_r+0x44>)
   dff44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dff48:	440a      	add	r2, r1
   dff4a:	4620      	mov	r0, r4
   dff4c:	4904      	ldr	r1, [pc, #16]	; (dff60 <asctime_r+0x48>)
   dff4e:	f7fc fa57 	bl	dc400 <siprintf>
   dff52:	4620      	mov	r0, r4
   dff54:	b006      	add	sp, #24
   dff56:	bd10      	pop	{r4, pc}
   dff58:	000e2f66 	.word	0x000e2f66
   dff5c:	000e2f51 	.word	0x000e2f51
   dff60:	000e2f31 	.word	0x000e2f31

000dff64 <atexit>:
   dff64:	2300      	movs	r3, #0
   dff66:	4601      	mov	r1, r0
   dff68:	461a      	mov	r2, r3
   dff6a:	4618      	mov	r0, r3
   dff6c:	f001 b856 	b.w	e101c <__register_exitproc>

000dff70 <gmtime>:
   dff70:	b538      	push	{r3, r4, r5, lr}
   dff72:	4b07      	ldr	r3, [pc, #28]	; (dff90 <gmtime+0x20>)
   dff74:	681d      	ldr	r5, [r3, #0]
   dff76:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dff78:	4604      	mov	r4, r0
   dff7a:	b91b      	cbnz	r3, dff84 <gmtime+0x14>
   dff7c:	2024      	movs	r0, #36	; 0x24
   dff7e:	f7fc fa27 	bl	dc3d0 <malloc>
   dff82:	63e8      	str	r0, [r5, #60]	; 0x3c
   dff84:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dff86:	4620      	mov	r0, r4
   dff88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dff8c:	f7fc ba88 	b.w	dc4a0 <gmtime_r>
   dff90:	2003e218 	.word	0x2003e218

000dff94 <memcpy>:
   dff94:	440a      	add	r2, r1
   dff96:	4291      	cmp	r1, r2
   dff98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dff9c:	d100      	bne.n	dffa0 <memcpy+0xc>
   dff9e:	4770      	bx	lr
   dffa0:	b510      	push	{r4, lr}
   dffa2:	f811 4b01 	ldrb.w	r4, [r1], #1
   dffa6:	f803 4f01 	strb.w	r4, [r3, #1]!
   dffaa:	4291      	cmp	r1, r2
   dffac:	d1f9      	bne.n	dffa2 <memcpy+0xe>
   dffae:	bd10      	pop	{r4, pc}

000dffb0 <memmove>:
   dffb0:	4288      	cmp	r0, r1
   dffb2:	b510      	push	{r4, lr}
   dffb4:	eb01 0402 	add.w	r4, r1, r2
   dffb8:	d902      	bls.n	dffc0 <memmove+0x10>
   dffba:	4284      	cmp	r4, r0
   dffbc:	4623      	mov	r3, r4
   dffbe:	d807      	bhi.n	dffd0 <memmove+0x20>
   dffc0:	1e43      	subs	r3, r0, #1
   dffc2:	42a1      	cmp	r1, r4
   dffc4:	d008      	beq.n	dffd8 <memmove+0x28>
   dffc6:	f811 2b01 	ldrb.w	r2, [r1], #1
   dffca:	f803 2f01 	strb.w	r2, [r3, #1]!
   dffce:	e7f8      	b.n	dffc2 <memmove+0x12>
   dffd0:	4402      	add	r2, r0
   dffd2:	4601      	mov	r1, r0
   dffd4:	428a      	cmp	r2, r1
   dffd6:	d100      	bne.n	dffda <memmove+0x2a>
   dffd8:	bd10      	pop	{r4, pc}
   dffda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dffde:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dffe2:	e7f7      	b.n	dffd4 <memmove+0x24>

000dffe4 <memset>:
   dffe4:	4402      	add	r2, r0
   dffe6:	4603      	mov	r3, r0
   dffe8:	4293      	cmp	r3, r2
   dffea:	d100      	bne.n	dffee <memset+0xa>
   dffec:	4770      	bx	lr
   dffee:	f803 1b01 	strb.w	r1, [r3], #1
   dfff2:	e7f9      	b.n	dffe8 <memset+0x4>

000dfff4 <srand>:
   dfff4:	b538      	push	{r3, r4, r5, lr}
   dfff6:	4b0d      	ldr	r3, [pc, #52]	; (e002c <srand+0x38>)
   dfff8:	681d      	ldr	r5, [r3, #0]
   dfffa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dfffc:	4604      	mov	r4, r0
   dfffe:	b97b      	cbnz	r3, e0020 <srand+0x2c>
   e0000:	2018      	movs	r0, #24
   e0002:	f7fc f9e5 	bl	dc3d0 <malloc>
   e0006:	4a0a      	ldr	r2, [pc, #40]	; (e0030 <srand+0x3c>)
   e0008:	4b0a      	ldr	r3, [pc, #40]	; (e0034 <srand+0x40>)
   e000a:	63a8      	str	r0, [r5, #56]	; 0x38
   e000c:	e9c0 2300 	strd	r2, r3, [r0]
   e0010:	4b09      	ldr	r3, [pc, #36]	; (e0038 <srand+0x44>)
   e0012:	6083      	str	r3, [r0, #8]
   e0014:	230b      	movs	r3, #11
   e0016:	8183      	strh	r3, [r0, #12]
   e0018:	2201      	movs	r2, #1
   e001a:	2300      	movs	r3, #0
   e001c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e0020:	6bab      	ldr	r3, [r5, #56]	; 0x38
   e0022:	2200      	movs	r2, #0
   e0024:	611c      	str	r4, [r3, #16]
   e0026:	615a      	str	r2, [r3, #20]
   e0028:	bd38      	pop	{r3, r4, r5, pc}
   e002a:	bf00      	nop
   e002c:	2003e218 	.word	0x2003e218
   e0030:	abcd330e 	.word	0xabcd330e
   e0034:	e66d1234 	.word	0xe66d1234
   e0038:	0005deec 	.word	0x0005deec

000e003c <rename>:
   e003c:	4b02      	ldr	r3, [pc, #8]	; (e0048 <rename+0xc>)
   e003e:	460a      	mov	r2, r1
   e0040:	4601      	mov	r1, r0
   e0042:	6818      	ldr	r0, [r3, #0]
   e0044:	f000 b802 	b.w	e004c <_rename_r>
   e0048:	2003e218 	.word	0x2003e218

000e004c <_rename_r>:
   e004c:	b538      	push	{r3, r4, r5, lr}
   e004e:	4604      	mov	r4, r0
   e0050:	460d      	mov	r5, r1
   e0052:	f001 fbc5 	bl	e17e0 <_link_r>
   e0056:	1c43      	adds	r3, r0, #1
   e0058:	d008      	beq.n	e006c <_rename_r+0x20>
   e005a:	4629      	mov	r1, r5
   e005c:	4620      	mov	r0, r4
   e005e:	f000 ffbb 	bl	e0fd8 <_unlink_r>
   e0062:	3001      	adds	r0, #1
   e0064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e0068:	bf18      	it	ne
   e006a:	2000      	movne	r0, #0
   e006c:	bd38      	pop	{r3, r4, r5, pc}

000e006e <strchr>:
   e006e:	b2c9      	uxtb	r1, r1
   e0070:	4603      	mov	r3, r0
   e0072:	f810 2b01 	ldrb.w	r2, [r0], #1
   e0076:	b11a      	cbz	r2, e0080 <strchr+0x12>
   e0078:	428a      	cmp	r2, r1
   e007a:	d1f9      	bne.n	e0070 <strchr+0x2>
   e007c:	4618      	mov	r0, r3
   e007e:	4770      	bx	lr
   e0080:	2900      	cmp	r1, #0
   e0082:	bf18      	it	ne
   e0084:	2300      	movne	r3, #0
   e0086:	e7f9      	b.n	e007c <strchr+0xe>

000e0088 <strchrnul>:
   e0088:	b510      	push	{r4, lr}
   e008a:	4604      	mov	r4, r0
   e008c:	f7ff ffef 	bl	e006e <strchr>
   e0090:	b918      	cbnz	r0, e009a <strchrnul+0x12>
   e0092:	4620      	mov	r0, r4
   e0094:	f000 f831 	bl	e00fa <strlen>
   e0098:	4420      	add	r0, r4
   e009a:	bd10      	pop	{r4, pc}

000e009c <strcmp>:
   e009c:	f810 2b01 	ldrb.w	r2, [r0], #1
   e00a0:	f811 3b01 	ldrb.w	r3, [r1], #1
   e00a4:	2a01      	cmp	r2, #1
   e00a6:	bf28      	it	cs
   e00a8:	429a      	cmpcs	r2, r3
   e00aa:	d0f7      	beq.n	e009c <strcmp>
   e00ac:	1ad0      	subs	r0, r2, r3
   e00ae:	4770      	bx	lr

000e00b0 <strcpy>:
   e00b0:	4603      	mov	r3, r0
   e00b2:	f811 2b01 	ldrb.w	r2, [r1], #1
   e00b6:	f803 2b01 	strb.w	r2, [r3], #1
   e00ba:	2a00      	cmp	r2, #0
   e00bc:	d1f9      	bne.n	e00b2 <strcpy+0x2>
   e00be:	4770      	bx	lr

000e00c0 <strdup>:
   e00c0:	4b02      	ldr	r3, [pc, #8]	; (e00cc <strdup+0xc>)
   e00c2:	4601      	mov	r1, r0
   e00c4:	6818      	ldr	r0, [r3, #0]
   e00c6:	f000 b803 	b.w	e00d0 <_strdup_r>
   e00ca:	bf00      	nop
   e00cc:	2003e218 	.word	0x2003e218

000e00d0 <_strdup_r>:
   e00d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e00d2:	4604      	mov	r4, r0
   e00d4:	4608      	mov	r0, r1
   e00d6:	460d      	mov	r5, r1
   e00d8:	f000 f80f 	bl	e00fa <strlen>
   e00dc:	1c42      	adds	r2, r0, #1
   e00de:	4611      	mov	r1, r2
   e00e0:	4620      	mov	r0, r4
   e00e2:	9201      	str	r2, [sp, #4]
   e00e4:	f7fc f9b4 	bl	dc450 <_malloc_r>
   e00e8:	4604      	mov	r4, r0
   e00ea:	b118      	cbz	r0, e00f4 <_strdup_r+0x24>
   e00ec:	9a01      	ldr	r2, [sp, #4]
   e00ee:	4629      	mov	r1, r5
   e00f0:	f7ff ff50 	bl	dff94 <memcpy>
   e00f4:	4620      	mov	r0, r4
   e00f6:	b003      	add	sp, #12
   e00f8:	bd30      	pop	{r4, r5, pc}

000e00fa <strlen>:
   e00fa:	4603      	mov	r3, r0
   e00fc:	f813 2b01 	ldrb.w	r2, [r3], #1
   e0100:	2a00      	cmp	r2, #0
   e0102:	d1fb      	bne.n	e00fc <strlen+0x2>
   e0104:	1a18      	subs	r0, r3, r0
   e0106:	3801      	subs	r0, #1
   e0108:	4770      	bx	lr

000e010a <strncmp>:
   e010a:	b510      	push	{r4, lr}
   e010c:	b16a      	cbz	r2, e012a <strncmp+0x20>
   e010e:	3901      	subs	r1, #1
   e0110:	1884      	adds	r4, r0, r2
   e0112:	f810 3b01 	ldrb.w	r3, [r0], #1
   e0116:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   e011a:	4293      	cmp	r3, r2
   e011c:	d103      	bne.n	e0126 <strncmp+0x1c>
   e011e:	42a0      	cmp	r0, r4
   e0120:	d001      	beq.n	e0126 <strncmp+0x1c>
   e0122:	2b00      	cmp	r3, #0
   e0124:	d1f5      	bne.n	e0112 <strncmp+0x8>
   e0126:	1a98      	subs	r0, r3, r2
   e0128:	bd10      	pop	{r4, pc}
   e012a:	4610      	mov	r0, r2
   e012c:	e7fc      	b.n	e0128 <strncmp+0x1e>

000e012e <strncpy>:
   e012e:	b510      	push	{r4, lr}
   e0130:	3901      	subs	r1, #1
   e0132:	4603      	mov	r3, r0
   e0134:	b132      	cbz	r2, e0144 <strncpy+0x16>
   e0136:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e013a:	f803 4b01 	strb.w	r4, [r3], #1
   e013e:	3a01      	subs	r2, #1
   e0140:	2c00      	cmp	r4, #0
   e0142:	d1f7      	bne.n	e0134 <strncpy+0x6>
   e0144:	441a      	add	r2, r3
   e0146:	2100      	movs	r1, #0
   e0148:	4293      	cmp	r3, r2
   e014a:	d100      	bne.n	e014e <strncpy+0x20>
   e014c:	bd10      	pop	{r4, pc}
   e014e:	f803 1b01 	strb.w	r1, [r3], #1
   e0152:	e7f9      	b.n	e0148 <strncpy+0x1a>

000e0154 <strrchr>:
   e0154:	b538      	push	{r3, r4, r5, lr}
   e0156:	4603      	mov	r3, r0
   e0158:	460c      	mov	r4, r1
   e015a:	b969      	cbnz	r1, e0178 <strrchr+0x24>
   e015c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e0160:	f7ff bf85 	b.w	e006e <strchr>
   e0164:	1c43      	adds	r3, r0, #1
   e0166:	4605      	mov	r5, r0
   e0168:	4621      	mov	r1, r4
   e016a:	4618      	mov	r0, r3
   e016c:	f7ff ff7f 	bl	e006e <strchr>
   e0170:	2800      	cmp	r0, #0
   e0172:	d1f7      	bne.n	e0164 <strrchr+0x10>
   e0174:	4628      	mov	r0, r5
   e0176:	bd38      	pop	{r3, r4, r5, pc}
   e0178:	2500      	movs	r5, #0
   e017a:	e7f5      	b.n	e0168 <strrchr+0x14>

000e017c <sulp>:
   e017c:	b570      	push	{r4, r5, r6, lr}
   e017e:	4604      	mov	r4, r0
   e0180:	460d      	mov	r5, r1
   e0182:	ec45 4b10 	vmov	d0, r4, r5
   e0186:	4616      	mov	r6, r2
   e0188:	f001 fe60 	bl	e1e4c <__ulp>
   e018c:	ec51 0b10 	vmov	r0, r1, d0
   e0190:	b17e      	cbz	r6, e01b2 <sulp+0x36>
   e0192:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e0196:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e019a:	2b00      	cmp	r3, #0
   e019c:	dd09      	ble.n	e01b2 <sulp+0x36>
   e019e:	051b      	lsls	r3, r3, #20
   e01a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e01a4:	2400      	movs	r4, #0
   e01a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e01aa:	4622      	mov	r2, r4
   e01ac:	462b      	mov	r3, r5
   e01ae:	f7ff fbb3 	bl	df918 <__aeabi_dmul>
   e01b2:	bd70      	pop	{r4, r5, r6, pc}
   e01b4:	0000      	movs	r0, r0
	...

000e01b8 <_strtod_l>:
   e01b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e01bc:	b0a3      	sub	sp, #140	; 0x8c
   e01be:	461f      	mov	r7, r3
   e01c0:	2300      	movs	r3, #0
   e01c2:	931e      	str	r3, [sp, #120]	; 0x78
   e01c4:	4ba4      	ldr	r3, [pc, #656]	; (e0458 <_strtod_l+0x2a0>)
   e01c6:	9219      	str	r2, [sp, #100]	; 0x64
   e01c8:	681b      	ldr	r3, [r3, #0]
   e01ca:	9307      	str	r3, [sp, #28]
   e01cc:	4604      	mov	r4, r0
   e01ce:	4618      	mov	r0, r3
   e01d0:	4688      	mov	r8, r1
   e01d2:	f7ff ff92 	bl	e00fa <strlen>
   e01d6:	f04f 0a00 	mov.w	sl, #0
   e01da:	4605      	mov	r5, r0
   e01dc:	f04f 0b00 	mov.w	fp, #0
   e01e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e01e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e01e6:	781a      	ldrb	r2, [r3, #0]
   e01e8:	2a2b      	cmp	r2, #43	; 0x2b
   e01ea:	d04c      	beq.n	e0286 <_strtod_l+0xce>
   e01ec:	d839      	bhi.n	e0262 <_strtod_l+0xaa>
   e01ee:	2a0d      	cmp	r2, #13
   e01f0:	d832      	bhi.n	e0258 <_strtod_l+0xa0>
   e01f2:	2a08      	cmp	r2, #8
   e01f4:	d832      	bhi.n	e025c <_strtod_l+0xa4>
   e01f6:	2a00      	cmp	r2, #0
   e01f8:	d03c      	beq.n	e0274 <_strtod_l+0xbc>
   e01fa:	2300      	movs	r3, #0
   e01fc:	930e      	str	r3, [sp, #56]	; 0x38
   e01fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   e0200:	7833      	ldrb	r3, [r6, #0]
   e0202:	2b30      	cmp	r3, #48	; 0x30
   e0204:	f040 80b4 	bne.w	e0370 <_strtod_l+0x1b8>
   e0208:	7873      	ldrb	r3, [r6, #1]
   e020a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   e020e:	2b58      	cmp	r3, #88	; 0x58
   e0210:	d16c      	bne.n	e02ec <_strtod_l+0x134>
   e0212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e0214:	9301      	str	r3, [sp, #4]
   e0216:	ab1e      	add	r3, sp, #120	; 0x78
   e0218:	9702      	str	r7, [sp, #8]
   e021a:	9300      	str	r3, [sp, #0]
   e021c:	4a8f      	ldr	r2, [pc, #572]	; (e045c <_strtod_l+0x2a4>)
   e021e:	ab1f      	add	r3, sp, #124	; 0x7c
   e0220:	a91d      	add	r1, sp, #116	; 0x74
   e0222:	4620      	mov	r0, r4
   e0224:	f000 ffe6 	bl	e11f4 <__gethex>
   e0228:	f010 0707 	ands.w	r7, r0, #7
   e022c:	4605      	mov	r5, r0
   e022e:	d005      	beq.n	e023c <_strtod_l+0x84>
   e0230:	2f06      	cmp	r7, #6
   e0232:	d12a      	bne.n	e028a <_strtod_l+0xd2>
   e0234:	3601      	adds	r6, #1
   e0236:	2300      	movs	r3, #0
   e0238:	961d      	str	r6, [sp, #116]	; 0x74
   e023a:	930e      	str	r3, [sp, #56]	; 0x38
   e023c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e023e:	2b00      	cmp	r3, #0
   e0240:	f040 8596 	bne.w	e0d70 <_strtod_l+0xbb8>
   e0244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e0246:	b1db      	cbz	r3, e0280 <_strtod_l+0xc8>
   e0248:	4652      	mov	r2, sl
   e024a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e024e:	ec43 2b10 	vmov	d0, r2, r3
   e0252:	b023      	add	sp, #140	; 0x8c
   e0254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0258:	2a20      	cmp	r2, #32
   e025a:	d1ce      	bne.n	e01fa <_strtod_l+0x42>
   e025c:	3301      	adds	r3, #1
   e025e:	931d      	str	r3, [sp, #116]	; 0x74
   e0260:	e7c0      	b.n	e01e4 <_strtod_l+0x2c>
   e0262:	2a2d      	cmp	r2, #45	; 0x2d
   e0264:	d1c9      	bne.n	e01fa <_strtod_l+0x42>
   e0266:	2201      	movs	r2, #1
   e0268:	920e      	str	r2, [sp, #56]	; 0x38
   e026a:	1c5a      	adds	r2, r3, #1
   e026c:	921d      	str	r2, [sp, #116]	; 0x74
   e026e:	785b      	ldrb	r3, [r3, #1]
   e0270:	2b00      	cmp	r3, #0
   e0272:	d1c4      	bne.n	e01fe <_strtod_l+0x46>
   e0274:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e0276:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e027a:	2b00      	cmp	r3, #0
   e027c:	f040 8576 	bne.w	e0d6c <_strtod_l+0xbb4>
   e0280:	4652      	mov	r2, sl
   e0282:	465b      	mov	r3, fp
   e0284:	e7e3      	b.n	e024e <_strtod_l+0x96>
   e0286:	2200      	movs	r2, #0
   e0288:	e7ee      	b.n	e0268 <_strtod_l+0xb0>
   e028a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   e028c:	b13a      	cbz	r2, e029e <_strtod_l+0xe6>
   e028e:	2135      	movs	r1, #53	; 0x35
   e0290:	a820      	add	r0, sp, #128	; 0x80
   e0292:	f001 feda 	bl	e204a <__copybits>
   e0296:	991e      	ldr	r1, [sp, #120]	; 0x78
   e0298:	4620      	mov	r0, r4
   e029a:	f001 fb0f 	bl	e18bc <_Bfree>
   e029e:	3f01      	subs	r7, #1
   e02a0:	2f05      	cmp	r7, #5
   e02a2:	d807      	bhi.n	e02b4 <_strtod_l+0xfc>
   e02a4:	e8df f007 	tbb	[pc, r7]
   e02a8:	1d180b0e 	.word	0x1d180b0e
   e02ac:	030e      	.short	0x030e
   e02ae:	f04f 0b00 	mov.w	fp, #0
   e02b2:	46da      	mov	sl, fp
   e02b4:	0728      	lsls	r0, r5, #28
   e02b6:	d5c1      	bpl.n	e023c <_strtod_l+0x84>
   e02b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e02bc:	e7be      	b.n	e023c <_strtod_l+0x84>
   e02be:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   e02c2:	e7f7      	b.n	e02b4 <_strtod_l+0xfc>
   e02c4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   e02c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   e02ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e02ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e02d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e02d6:	e7ed      	b.n	e02b4 <_strtod_l+0xfc>
   e02d8:	f8df b184 	ldr.w	fp, [pc, #388]	; e0460 <_strtod_l+0x2a8>
   e02dc:	f04f 0a00 	mov.w	sl, #0
   e02e0:	e7e8      	b.n	e02b4 <_strtod_l+0xfc>
   e02e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e02e6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   e02ea:	e7e3      	b.n	e02b4 <_strtod_l+0xfc>
   e02ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e02ee:	1c5a      	adds	r2, r3, #1
   e02f0:	921d      	str	r2, [sp, #116]	; 0x74
   e02f2:	785b      	ldrb	r3, [r3, #1]
   e02f4:	2b30      	cmp	r3, #48	; 0x30
   e02f6:	d0f9      	beq.n	e02ec <_strtod_l+0x134>
   e02f8:	2b00      	cmp	r3, #0
   e02fa:	d09f      	beq.n	e023c <_strtod_l+0x84>
   e02fc:	2301      	movs	r3, #1
   e02fe:	f04f 0900 	mov.w	r9, #0
   e0302:	9304      	str	r3, [sp, #16]
   e0304:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0306:	930a      	str	r3, [sp, #40]	; 0x28
   e0308:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   e030c:	464f      	mov	r7, r9
   e030e:	220a      	movs	r2, #10
   e0310:	981d      	ldr	r0, [sp, #116]	; 0x74
   e0312:	7806      	ldrb	r6, [r0, #0]
   e0314:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e0318:	b2d9      	uxtb	r1, r3
   e031a:	2909      	cmp	r1, #9
   e031c:	d92a      	bls.n	e0374 <_strtod_l+0x1bc>
   e031e:	9907      	ldr	r1, [sp, #28]
   e0320:	462a      	mov	r2, r5
   e0322:	f7ff fef2 	bl	e010a <strncmp>
   e0326:	b398      	cbz	r0, e0390 <_strtod_l+0x1d8>
   e0328:	2000      	movs	r0, #0
   e032a:	4633      	mov	r3, r6
   e032c:	463d      	mov	r5, r7
   e032e:	9007      	str	r0, [sp, #28]
   e0330:	4602      	mov	r2, r0
   e0332:	2b65      	cmp	r3, #101	; 0x65
   e0334:	d001      	beq.n	e033a <_strtod_l+0x182>
   e0336:	2b45      	cmp	r3, #69	; 0x45
   e0338:	d118      	bne.n	e036c <_strtod_l+0x1b4>
   e033a:	b91d      	cbnz	r5, e0344 <_strtod_l+0x18c>
   e033c:	9b04      	ldr	r3, [sp, #16]
   e033e:	4303      	orrs	r3, r0
   e0340:	d098      	beq.n	e0274 <_strtod_l+0xbc>
   e0342:	2500      	movs	r5, #0
   e0344:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   e0348:	f108 0301 	add.w	r3, r8, #1
   e034c:	931d      	str	r3, [sp, #116]	; 0x74
   e034e:	f898 3001 	ldrb.w	r3, [r8, #1]
   e0352:	2b2b      	cmp	r3, #43	; 0x2b
   e0354:	d075      	beq.n	e0442 <_strtod_l+0x28a>
   e0356:	2b2d      	cmp	r3, #45	; 0x2d
   e0358:	d07b      	beq.n	e0452 <_strtod_l+0x29a>
   e035a:	f04f 0c00 	mov.w	ip, #0
   e035e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e0362:	2909      	cmp	r1, #9
   e0364:	f240 8082 	bls.w	e046c <_strtod_l+0x2b4>
   e0368:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e036c:	2600      	movs	r6, #0
   e036e:	e09d      	b.n	e04ac <_strtod_l+0x2f4>
   e0370:	2300      	movs	r3, #0
   e0372:	e7c4      	b.n	e02fe <_strtod_l+0x146>
   e0374:	2f08      	cmp	r7, #8
   e0376:	bfd8      	it	le
   e0378:	9909      	ldrle	r1, [sp, #36]	; 0x24
   e037a:	f100 0001 	add.w	r0, r0, #1
   e037e:	bfda      	itte	le
   e0380:	fb02 3301 	mlale	r3, r2, r1, r3
   e0384:	9309      	strle	r3, [sp, #36]	; 0x24
   e0386:	fb02 3909 	mlagt	r9, r2, r9, r3
   e038a:	3701      	adds	r7, #1
   e038c:	901d      	str	r0, [sp, #116]	; 0x74
   e038e:	e7bf      	b.n	e0310 <_strtod_l+0x158>
   e0390:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0392:	195a      	adds	r2, r3, r5
   e0394:	921d      	str	r2, [sp, #116]	; 0x74
   e0396:	5d5b      	ldrb	r3, [r3, r5]
   e0398:	2f00      	cmp	r7, #0
   e039a:	d037      	beq.n	e040c <_strtod_l+0x254>
   e039c:	9007      	str	r0, [sp, #28]
   e039e:	463d      	mov	r5, r7
   e03a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   e03a4:	2a09      	cmp	r2, #9
   e03a6:	d912      	bls.n	e03ce <_strtod_l+0x216>
   e03a8:	2201      	movs	r2, #1
   e03aa:	e7c2      	b.n	e0332 <_strtod_l+0x17a>
   e03ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e03ae:	1c5a      	adds	r2, r3, #1
   e03b0:	921d      	str	r2, [sp, #116]	; 0x74
   e03b2:	785b      	ldrb	r3, [r3, #1]
   e03b4:	3001      	adds	r0, #1
   e03b6:	2b30      	cmp	r3, #48	; 0x30
   e03b8:	d0f8      	beq.n	e03ac <_strtod_l+0x1f4>
   e03ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e03be:	2a08      	cmp	r2, #8
   e03c0:	f200 84db 	bhi.w	e0d7a <_strtod_l+0xbc2>
   e03c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   e03c6:	9007      	str	r0, [sp, #28]
   e03c8:	2000      	movs	r0, #0
   e03ca:	920a      	str	r2, [sp, #40]	; 0x28
   e03cc:	4605      	mov	r5, r0
   e03ce:	3b30      	subs	r3, #48	; 0x30
   e03d0:	f100 0201 	add.w	r2, r0, #1
   e03d4:	d014      	beq.n	e0400 <_strtod_l+0x248>
   e03d6:	9907      	ldr	r1, [sp, #28]
   e03d8:	4411      	add	r1, r2
   e03da:	9107      	str	r1, [sp, #28]
   e03dc:	462a      	mov	r2, r5
   e03de:	eb00 0e05 	add.w	lr, r0, r5
   e03e2:	210a      	movs	r1, #10
   e03e4:	4572      	cmp	r2, lr
   e03e6:	d113      	bne.n	e0410 <_strtod_l+0x258>
   e03e8:	182a      	adds	r2, r5, r0
   e03ea:	2a08      	cmp	r2, #8
   e03ec:	f105 0501 	add.w	r5, r5, #1
   e03f0:	4405      	add	r5, r0
   e03f2:	dc1c      	bgt.n	e042e <_strtod_l+0x276>
   e03f4:	9909      	ldr	r1, [sp, #36]	; 0x24
   e03f6:	220a      	movs	r2, #10
   e03f8:	fb02 3301 	mla	r3, r2, r1, r3
   e03fc:	9309      	str	r3, [sp, #36]	; 0x24
   e03fe:	2200      	movs	r2, #0
   e0400:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0402:	1c59      	adds	r1, r3, #1
   e0404:	911d      	str	r1, [sp, #116]	; 0x74
   e0406:	785b      	ldrb	r3, [r3, #1]
   e0408:	4610      	mov	r0, r2
   e040a:	e7c9      	b.n	e03a0 <_strtod_l+0x1e8>
   e040c:	4638      	mov	r0, r7
   e040e:	e7d2      	b.n	e03b6 <_strtod_l+0x1fe>
   e0410:	2a08      	cmp	r2, #8
   e0412:	dc04      	bgt.n	e041e <_strtod_l+0x266>
   e0414:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e0416:	434e      	muls	r6, r1
   e0418:	9609      	str	r6, [sp, #36]	; 0x24
   e041a:	3201      	adds	r2, #1
   e041c:	e7e2      	b.n	e03e4 <_strtod_l+0x22c>
   e041e:	f102 0c01 	add.w	ip, r2, #1
   e0422:	f1bc 0f10 	cmp.w	ip, #16
   e0426:	bfd8      	it	le
   e0428:	fb01 f909 	mulle.w	r9, r1, r9
   e042c:	e7f5      	b.n	e041a <_strtod_l+0x262>
   e042e:	2d10      	cmp	r5, #16
   e0430:	bfdc      	itt	le
   e0432:	220a      	movle	r2, #10
   e0434:	fb02 3909 	mlale	r9, r2, r9, r3
   e0438:	e7e1      	b.n	e03fe <_strtod_l+0x246>
   e043a:	2300      	movs	r3, #0
   e043c:	9307      	str	r3, [sp, #28]
   e043e:	2201      	movs	r2, #1
   e0440:	e77c      	b.n	e033c <_strtod_l+0x184>
   e0442:	f04f 0c00 	mov.w	ip, #0
   e0446:	f108 0302 	add.w	r3, r8, #2
   e044a:	931d      	str	r3, [sp, #116]	; 0x74
   e044c:	f898 3002 	ldrb.w	r3, [r8, #2]
   e0450:	e785      	b.n	e035e <_strtod_l+0x1a6>
   e0452:	f04f 0c01 	mov.w	ip, #1
   e0456:	e7f6      	b.n	e0446 <_strtod_l+0x28e>
   e0458:	000e30ec 	.word	0x000e30ec
   e045c:	000e2f98 	.word	0x000e2f98
   e0460:	7ff00000 	.word	0x7ff00000
   e0464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0466:	1c59      	adds	r1, r3, #1
   e0468:	911d      	str	r1, [sp, #116]	; 0x74
   e046a:	785b      	ldrb	r3, [r3, #1]
   e046c:	2b30      	cmp	r3, #48	; 0x30
   e046e:	d0f9      	beq.n	e0464 <_strtod_l+0x2ac>
   e0470:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   e0474:	2908      	cmp	r1, #8
   e0476:	f63f af79 	bhi.w	e036c <_strtod_l+0x1b4>
   e047a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e047e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0480:	9308      	str	r3, [sp, #32]
   e0482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0484:	1c59      	adds	r1, r3, #1
   e0486:	911d      	str	r1, [sp, #116]	; 0x74
   e0488:	785b      	ldrb	r3, [r3, #1]
   e048a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e048e:	2e09      	cmp	r6, #9
   e0490:	d937      	bls.n	e0502 <_strtod_l+0x34a>
   e0492:	9e08      	ldr	r6, [sp, #32]
   e0494:	1b89      	subs	r1, r1, r6
   e0496:	2908      	cmp	r1, #8
   e0498:	f644 661f 	movw	r6, #19999	; 0x4e1f
   e049c:	dc02      	bgt.n	e04a4 <_strtod_l+0x2ec>
   e049e:	4576      	cmp	r6, lr
   e04a0:	bfa8      	it	ge
   e04a2:	4676      	movge	r6, lr
   e04a4:	f1bc 0f00 	cmp.w	ip, #0
   e04a8:	d000      	beq.n	e04ac <_strtod_l+0x2f4>
   e04aa:	4276      	negs	r6, r6
   e04ac:	2d00      	cmp	r5, #0
   e04ae:	d14f      	bne.n	e0550 <_strtod_l+0x398>
   e04b0:	9904      	ldr	r1, [sp, #16]
   e04b2:	4301      	orrs	r1, r0
   e04b4:	f47f aec2 	bne.w	e023c <_strtod_l+0x84>
   e04b8:	2a00      	cmp	r2, #0
   e04ba:	f47f aedb 	bne.w	e0274 <_strtod_l+0xbc>
   e04be:	2b69      	cmp	r3, #105	; 0x69
   e04c0:	d027      	beq.n	e0512 <_strtod_l+0x35a>
   e04c2:	dc24      	bgt.n	e050e <_strtod_l+0x356>
   e04c4:	2b49      	cmp	r3, #73	; 0x49
   e04c6:	d024      	beq.n	e0512 <_strtod_l+0x35a>
   e04c8:	2b4e      	cmp	r3, #78	; 0x4e
   e04ca:	f47f aed3 	bne.w	e0274 <_strtod_l+0xbc>
   e04ce:	499e      	ldr	r1, [pc, #632]	; (e0748 <_strtod_l+0x590>)
   e04d0:	a81d      	add	r0, sp, #116	; 0x74
   e04d2:	f001 f8d5 	bl	e1680 <__match>
   e04d6:	2800      	cmp	r0, #0
   e04d8:	f43f aecc 	beq.w	e0274 <_strtod_l+0xbc>
   e04dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e04de:	781b      	ldrb	r3, [r3, #0]
   e04e0:	2b28      	cmp	r3, #40	; 0x28
   e04e2:	d12d      	bne.n	e0540 <_strtod_l+0x388>
   e04e4:	4999      	ldr	r1, [pc, #612]	; (e074c <_strtod_l+0x594>)
   e04e6:	aa20      	add	r2, sp, #128	; 0x80
   e04e8:	a81d      	add	r0, sp, #116	; 0x74
   e04ea:	f001 f8dd 	bl	e16a8 <__hexnan>
   e04ee:	2805      	cmp	r0, #5
   e04f0:	d126      	bne.n	e0540 <_strtod_l+0x388>
   e04f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   e04f4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   e04f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e04fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e0500:	e69c      	b.n	e023c <_strtod_l+0x84>
   e0502:	210a      	movs	r1, #10
   e0504:	fb01 3e0e 	mla	lr, r1, lr, r3
   e0508:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e050c:	e7b9      	b.n	e0482 <_strtod_l+0x2ca>
   e050e:	2b6e      	cmp	r3, #110	; 0x6e
   e0510:	e7db      	b.n	e04ca <_strtod_l+0x312>
   e0512:	498f      	ldr	r1, [pc, #572]	; (e0750 <_strtod_l+0x598>)
   e0514:	a81d      	add	r0, sp, #116	; 0x74
   e0516:	f001 f8b3 	bl	e1680 <__match>
   e051a:	2800      	cmp	r0, #0
   e051c:	f43f aeaa 	beq.w	e0274 <_strtod_l+0xbc>
   e0520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0522:	498c      	ldr	r1, [pc, #560]	; (e0754 <_strtod_l+0x59c>)
   e0524:	3b01      	subs	r3, #1
   e0526:	a81d      	add	r0, sp, #116	; 0x74
   e0528:	931d      	str	r3, [sp, #116]	; 0x74
   e052a:	f001 f8a9 	bl	e1680 <__match>
   e052e:	b910      	cbnz	r0, e0536 <_strtod_l+0x37e>
   e0530:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0532:	3301      	adds	r3, #1
   e0534:	931d      	str	r3, [sp, #116]	; 0x74
   e0536:	f8df b22c 	ldr.w	fp, [pc, #556]	; e0764 <_strtod_l+0x5ac>
   e053a:	f04f 0a00 	mov.w	sl, #0
   e053e:	e67d      	b.n	e023c <_strtod_l+0x84>
   e0540:	4885      	ldr	r0, [pc, #532]	; (e0758 <_strtod_l+0x5a0>)
   e0542:	f001 fdf9 	bl	e2138 <nan>
   e0546:	ed8d 0b04 	vstr	d0, [sp, #16]
   e054a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e054e:	e675      	b.n	e023c <_strtod_l+0x84>
   e0550:	9b07      	ldr	r3, [sp, #28]
   e0552:	9809      	ldr	r0, [sp, #36]	; 0x24
   e0554:	1af3      	subs	r3, r6, r3
   e0556:	2f00      	cmp	r7, #0
   e0558:	bf08      	it	eq
   e055a:	462f      	moveq	r7, r5
   e055c:	2d10      	cmp	r5, #16
   e055e:	9308      	str	r3, [sp, #32]
   e0560:	46a8      	mov	r8, r5
   e0562:	bfa8      	it	ge
   e0564:	f04f 0810 	movge.w	r8, #16
   e0568:	f7ff f95c 	bl	df824 <__aeabi_ui2d>
   e056c:	2d09      	cmp	r5, #9
   e056e:	4682      	mov	sl, r0
   e0570:	468b      	mov	fp, r1
   e0572:	dd13      	ble.n	e059c <_strtod_l+0x3e4>
   e0574:	4b79      	ldr	r3, [pc, #484]	; (e075c <_strtod_l+0x5a4>)
   e0576:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   e057a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e057e:	f7ff f9cb 	bl	df918 <__aeabi_dmul>
   e0582:	4682      	mov	sl, r0
   e0584:	4648      	mov	r0, r9
   e0586:	468b      	mov	fp, r1
   e0588:	f7ff f94c 	bl	df824 <__aeabi_ui2d>
   e058c:	4602      	mov	r2, r0
   e058e:	460b      	mov	r3, r1
   e0590:	4650      	mov	r0, sl
   e0592:	4659      	mov	r1, fp
   e0594:	f7ff f80a 	bl	df5ac <__adddf3>
   e0598:	4682      	mov	sl, r0
   e059a:	468b      	mov	fp, r1
   e059c:	2d0f      	cmp	r5, #15
   e059e:	dc38      	bgt.n	e0612 <_strtod_l+0x45a>
   e05a0:	9b08      	ldr	r3, [sp, #32]
   e05a2:	2b00      	cmp	r3, #0
   e05a4:	f43f ae4a 	beq.w	e023c <_strtod_l+0x84>
   e05a8:	dd24      	ble.n	e05f4 <_strtod_l+0x43c>
   e05aa:	2b16      	cmp	r3, #22
   e05ac:	dc0b      	bgt.n	e05c6 <_strtod_l+0x40e>
   e05ae:	4d6b      	ldr	r5, [pc, #428]	; (e075c <_strtod_l+0x5a4>)
   e05b0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   e05b4:	e9d5 0100 	ldrd	r0, r1, [r5]
   e05b8:	4652      	mov	r2, sl
   e05ba:	465b      	mov	r3, fp
   e05bc:	f7ff f9ac 	bl	df918 <__aeabi_dmul>
   e05c0:	4682      	mov	sl, r0
   e05c2:	468b      	mov	fp, r1
   e05c4:	e63a      	b.n	e023c <_strtod_l+0x84>
   e05c6:	9a08      	ldr	r2, [sp, #32]
   e05c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e05cc:	4293      	cmp	r3, r2
   e05ce:	db20      	blt.n	e0612 <_strtod_l+0x45a>
   e05d0:	4c62      	ldr	r4, [pc, #392]	; (e075c <_strtod_l+0x5a4>)
   e05d2:	f1c5 050f 	rsb	r5, r5, #15
   e05d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e05da:	4652      	mov	r2, sl
   e05dc:	465b      	mov	r3, fp
   e05de:	e9d1 0100 	ldrd	r0, r1, [r1]
   e05e2:	f7ff f999 	bl	df918 <__aeabi_dmul>
   e05e6:	9b08      	ldr	r3, [sp, #32]
   e05e8:	1b5d      	subs	r5, r3, r5
   e05ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e05ee:	e9d4 2300 	ldrd	r2, r3, [r4]
   e05f2:	e7e3      	b.n	e05bc <_strtod_l+0x404>
   e05f4:	9b08      	ldr	r3, [sp, #32]
   e05f6:	3316      	adds	r3, #22
   e05f8:	db0b      	blt.n	e0612 <_strtod_l+0x45a>
   e05fa:	9b07      	ldr	r3, [sp, #28]
   e05fc:	4a57      	ldr	r2, [pc, #348]	; (e075c <_strtod_l+0x5a4>)
   e05fe:	1b9e      	subs	r6, r3, r6
   e0600:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   e0604:	e9d6 2300 	ldrd	r2, r3, [r6]
   e0608:	4650      	mov	r0, sl
   e060a:	4659      	mov	r1, fp
   e060c:	f7ff faae 	bl	dfb6c <__aeabi_ddiv>
   e0610:	e7d6      	b.n	e05c0 <_strtod_l+0x408>
   e0612:	9b08      	ldr	r3, [sp, #32]
   e0614:	eba5 0808 	sub.w	r8, r5, r8
   e0618:	4498      	add	r8, r3
   e061a:	f1b8 0f00 	cmp.w	r8, #0
   e061e:	dd71      	ble.n	e0704 <_strtod_l+0x54c>
   e0620:	f018 030f 	ands.w	r3, r8, #15
   e0624:	d00a      	beq.n	e063c <_strtod_l+0x484>
   e0626:	494d      	ldr	r1, [pc, #308]	; (e075c <_strtod_l+0x5a4>)
   e0628:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   e062c:	4652      	mov	r2, sl
   e062e:	465b      	mov	r3, fp
   e0630:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0634:	f7ff f970 	bl	df918 <__aeabi_dmul>
   e0638:	4682      	mov	sl, r0
   e063a:	468b      	mov	fp, r1
   e063c:	f038 080f 	bics.w	r8, r8, #15
   e0640:	d04d      	beq.n	e06de <_strtod_l+0x526>
   e0642:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   e0646:	dd22      	ble.n	e068e <_strtod_l+0x4d6>
   e0648:	2500      	movs	r5, #0
   e064a:	462e      	mov	r6, r5
   e064c:	9509      	str	r5, [sp, #36]	; 0x24
   e064e:	9507      	str	r5, [sp, #28]
   e0650:	2322      	movs	r3, #34	; 0x22
   e0652:	f8df b110 	ldr.w	fp, [pc, #272]	; e0764 <_strtod_l+0x5ac>
   e0656:	6023      	str	r3, [r4, #0]
   e0658:	f04f 0a00 	mov.w	sl, #0
   e065c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e065e:	2b00      	cmp	r3, #0
   e0660:	f43f adec 	beq.w	e023c <_strtod_l+0x84>
   e0664:	991e      	ldr	r1, [sp, #120]	; 0x78
   e0666:	4620      	mov	r0, r4
   e0668:	f001 f928 	bl	e18bc <_Bfree>
   e066c:	9907      	ldr	r1, [sp, #28]
   e066e:	4620      	mov	r0, r4
   e0670:	f001 f924 	bl	e18bc <_Bfree>
   e0674:	4631      	mov	r1, r6
   e0676:	4620      	mov	r0, r4
   e0678:	f001 f920 	bl	e18bc <_Bfree>
   e067c:	9909      	ldr	r1, [sp, #36]	; 0x24
   e067e:	4620      	mov	r0, r4
   e0680:	f001 f91c 	bl	e18bc <_Bfree>
   e0684:	4629      	mov	r1, r5
   e0686:	4620      	mov	r0, r4
   e0688:	f001 f918 	bl	e18bc <_Bfree>
   e068c:	e5d6      	b.n	e023c <_strtod_l+0x84>
   e068e:	2300      	movs	r3, #0
   e0690:	ea4f 1828 	mov.w	r8, r8, asr #4
   e0694:	4650      	mov	r0, sl
   e0696:	4659      	mov	r1, fp
   e0698:	4699      	mov	r9, r3
   e069a:	f1b8 0f01 	cmp.w	r8, #1
   e069e:	dc21      	bgt.n	e06e4 <_strtod_l+0x52c>
   e06a0:	b10b      	cbz	r3, e06a6 <_strtod_l+0x4ee>
   e06a2:	4682      	mov	sl, r0
   e06a4:	468b      	mov	fp, r1
   e06a6:	4b2e      	ldr	r3, [pc, #184]	; (e0760 <_strtod_l+0x5a8>)
   e06a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e06ac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   e06b0:	4652      	mov	r2, sl
   e06b2:	465b      	mov	r3, fp
   e06b4:	e9d9 0100 	ldrd	r0, r1, [r9]
   e06b8:	f7ff f92e 	bl	df918 <__aeabi_dmul>
   e06bc:	4b29      	ldr	r3, [pc, #164]	; (e0764 <_strtod_l+0x5ac>)
   e06be:	460a      	mov	r2, r1
   e06c0:	400b      	ands	r3, r1
   e06c2:	4929      	ldr	r1, [pc, #164]	; (e0768 <_strtod_l+0x5b0>)
   e06c4:	428b      	cmp	r3, r1
   e06c6:	4682      	mov	sl, r0
   e06c8:	d8be      	bhi.n	e0648 <_strtod_l+0x490>
   e06ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e06ce:	428b      	cmp	r3, r1
   e06d0:	bf86      	itte	hi
   e06d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; e076c <_strtod_l+0x5b4>
   e06d6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   e06da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e06de:	2300      	movs	r3, #0
   e06e0:	9304      	str	r3, [sp, #16]
   e06e2:	e081      	b.n	e07e8 <_strtod_l+0x630>
   e06e4:	f018 0f01 	tst.w	r8, #1
   e06e8:	d007      	beq.n	e06fa <_strtod_l+0x542>
   e06ea:	4b1d      	ldr	r3, [pc, #116]	; (e0760 <_strtod_l+0x5a8>)
   e06ec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   e06f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e06f4:	f7ff f910 	bl	df918 <__aeabi_dmul>
   e06f8:	2301      	movs	r3, #1
   e06fa:	f109 0901 	add.w	r9, r9, #1
   e06fe:	ea4f 0868 	mov.w	r8, r8, asr #1
   e0702:	e7ca      	b.n	e069a <_strtod_l+0x4e2>
   e0704:	d0eb      	beq.n	e06de <_strtod_l+0x526>
   e0706:	f1c8 0800 	rsb	r8, r8, #0
   e070a:	f018 020f 	ands.w	r2, r8, #15
   e070e:	d00a      	beq.n	e0726 <_strtod_l+0x56e>
   e0710:	4b12      	ldr	r3, [pc, #72]	; (e075c <_strtod_l+0x5a4>)
   e0712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e0716:	4650      	mov	r0, sl
   e0718:	4659      	mov	r1, fp
   e071a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e071e:	f7ff fa25 	bl	dfb6c <__aeabi_ddiv>
   e0722:	4682      	mov	sl, r0
   e0724:	468b      	mov	fp, r1
   e0726:	ea5f 1828 	movs.w	r8, r8, asr #4
   e072a:	d0d8      	beq.n	e06de <_strtod_l+0x526>
   e072c:	f1b8 0f1f 	cmp.w	r8, #31
   e0730:	dd1e      	ble.n	e0770 <_strtod_l+0x5b8>
   e0732:	2500      	movs	r5, #0
   e0734:	462e      	mov	r6, r5
   e0736:	9509      	str	r5, [sp, #36]	; 0x24
   e0738:	9507      	str	r5, [sp, #28]
   e073a:	2322      	movs	r3, #34	; 0x22
   e073c:	f04f 0a00 	mov.w	sl, #0
   e0740:	f04f 0b00 	mov.w	fp, #0
   e0744:	6023      	str	r3, [r4, #0]
   e0746:	e789      	b.n	e065c <_strtod_l+0x4a4>
   e0748:	000e2f93 	.word	0x000e2f93
   e074c:	000e2fac 	.word	0x000e2fac
   e0750:	000e2f8a 	.word	0x000e2f8a
   e0754:	000e2f8d 	.word	0x000e2f8d
   e0758:	000e291f 	.word	0x000e291f
   e075c:	000e3128 	.word	0x000e3128
   e0760:	000e3100 	.word	0x000e3100
   e0764:	7ff00000 	.word	0x7ff00000
   e0768:	7ca00000 	.word	0x7ca00000
   e076c:	7fefffff 	.word	0x7fefffff
   e0770:	f018 0310 	ands.w	r3, r8, #16
   e0774:	bf18      	it	ne
   e0776:	236a      	movne	r3, #106	; 0x6a
   e0778:	f8df 93b4 	ldr.w	r9, [pc, #948]	; e0b30 <_strtod_l+0x978>
   e077c:	9304      	str	r3, [sp, #16]
   e077e:	4650      	mov	r0, sl
   e0780:	4659      	mov	r1, fp
   e0782:	2300      	movs	r3, #0
   e0784:	f018 0f01 	tst.w	r8, #1
   e0788:	d004      	beq.n	e0794 <_strtod_l+0x5dc>
   e078a:	e9d9 2300 	ldrd	r2, r3, [r9]
   e078e:	f7ff f8c3 	bl	df918 <__aeabi_dmul>
   e0792:	2301      	movs	r3, #1
   e0794:	ea5f 0868 	movs.w	r8, r8, asr #1
   e0798:	f109 0908 	add.w	r9, r9, #8
   e079c:	d1f2      	bne.n	e0784 <_strtod_l+0x5cc>
   e079e:	b10b      	cbz	r3, e07a4 <_strtod_l+0x5ec>
   e07a0:	4682      	mov	sl, r0
   e07a2:	468b      	mov	fp, r1
   e07a4:	9b04      	ldr	r3, [sp, #16]
   e07a6:	b1bb      	cbz	r3, e07d8 <_strtod_l+0x620>
   e07a8:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e07ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e07b0:	2b00      	cmp	r3, #0
   e07b2:	4659      	mov	r1, fp
   e07b4:	dd10      	ble.n	e07d8 <_strtod_l+0x620>
   e07b6:	2b1f      	cmp	r3, #31
   e07b8:	f340 8128 	ble.w	e0a0c <_strtod_l+0x854>
   e07bc:	2b34      	cmp	r3, #52	; 0x34
   e07be:	bfde      	ittt	le
   e07c0:	3b20      	suble	r3, #32
   e07c2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   e07c6:	fa02 f303 	lslle.w	r3, r2, r3
   e07ca:	f04f 0a00 	mov.w	sl, #0
   e07ce:	bfcc      	ite	gt
   e07d0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e07d4:	ea03 0b01 	andle.w	fp, r3, r1
   e07d8:	2200      	movs	r2, #0
   e07da:	2300      	movs	r3, #0
   e07dc:	4650      	mov	r0, sl
   e07de:	4659      	mov	r1, fp
   e07e0:	f7ff fb02 	bl	dfde8 <__aeabi_dcmpeq>
   e07e4:	2800      	cmp	r0, #0
   e07e6:	d1a4      	bne.n	e0732 <_strtod_l+0x57a>
   e07e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e07ea:	9300      	str	r3, [sp, #0]
   e07ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   e07ee:	462b      	mov	r3, r5
   e07f0:	463a      	mov	r2, r7
   e07f2:	4620      	mov	r0, r4
   e07f4:	f001 f8b7 	bl	e1966 <__s2b>
   e07f8:	9009      	str	r0, [sp, #36]	; 0x24
   e07fa:	2800      	cmp	r0, #0
   e07fc:	f43f af24 	beq.w	e0648 <_strtod_l+0x490>
   e0800:	9b07      	ldr	r3, [sp, #28]
   e0802:	1b9e      	subs	r6, r3, r6
   e0804:	9b08      	ldr	r3, [sp, #32]
   e0806:	2b00      	cmp	r3, #0
   e0808:	bfb4      	ite	lt
   e080a:	4633      	movlt	r3, r6
   e080c:	2300      	movge	r3, #0
   e080e:	9310      	str	r3, [sp, #64]	; 0x40
   e0810:	9b08      	ldr	r3, [sp, #32]
   e0812:	2500      	movs	r5, #0
   e0814:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   e0818:	9318      	str	r3, [sp, #96]	; 0x60
   e081a:	462e      	mov	r6, r5
   e081c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e081e:	4620      	mov	r0, r4
   e0820:	6859      	ldr	r1, [r3, #4]
   e0822:	f001 f817 	bl	e1854 <_Balloc>
   e0826:	9007      	str	r0, [sp, #28]
   e0828:	2800      	cmp	r0, #0
   e082a:	f43f af11 	beq.w	e0650 <_strtod_l+0x498>
   e082e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e0830:	691a      	ldr	r2, [r3, #16]
   e0832:	3202      	adds	r2, #2
   e0834:	f103 010c 	add.w	r1, r3, #12
   e0838:	0092      	lsls	r2, r2, #2
   e083a:	300c      	adds	r0, #12
   e083c:	f7ff fbaa 	bl	dff94 <memcpy>
   e0840:	ec4b ab10 	vmov	d0, sl, fp
   e0844:	aa20      	add	r2, sp, #128	; 0x80
   e0846:	a91f      	add	r1, sp, #124	; 0x7c
   e0848:	4620      	mov	r0, r4
   e084a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   e084e:	f001 fb79 	bl	e1f44 <__d2b>
   e0852:	901e      	str	r0, [sp, #120]	; 0x78
   e0854:	2800      	cmp	r0, #0
   e0856:	f43f aefb 	beq.w	e0650 <_strtod_l+0x498>
   e085a:	2101      	movs	r1, #1
   e085c:	4620      	mov	r0, r4
   e085e:	f001 f910 	bl	e1a82 <__i2b>
   e0862:	4606      	mov	r6, r0
   e0864:	2800      	cmp	r0, #0
   e0866:	f43f aef3 	beq.w	e0650 <_strtod_l+0x498>
   e086a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   e086c:	9904      	ldr	r1, [sp, #16]
   e086e:	2b00      	cmp	r3, #0
   e0870:	bfab      	itete	ge
   e0872:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   e0874:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   e0876:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   e0878:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   e087c:	bfac      	ite	ge
   e087e:	eb03 0902 	addge.w	r9, r3, r2
   e0882:	1ad7      	sublt	r7, r2, r3
   e0884:	9a20      	ldr	r2, [sp, #128]	; 0x80
   e0886:	eba3 0801 	sub.w	r8, r3, r1
   e088a:	4490      	add	r8, r2
   e088c:	4ba3      	ldr	r3, [pc, #652]	; (e0b1c <_strtod_l+0x964>)
   e088e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   e0892:	4598      	cmp	r8, r3
   e0894:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   e0898:	f280 80cc 	bge.w	e0a34 <_strtod_l+0x87c>
   e089c:	eba3 0308 	sub.w	r3, r3, r8
   e08a0:	2b1f      	cmp	r3, #31
   e08a2:	eba2 0203 	sub.w	r2, r2, r3
   e08a6:	f04f 0101 	mov.w	r1, #1
   e08aa:	f300 80b6 	bgt.w	e0a1a <_strtod_l+0x862>
   e08ae:	fa01 f303 	lsl.w	r3, r1, r3
   e08b2:	9311      	str	r3, [sp, #68]	; 0x44
   e08b4:	2300      	movs	r3, #0
   e08b6:	930c      	str	r3, [sp, #48]	; 0x30
   e08b8:	eb09 0802 	add.w	r8, r9, r2
   e08bc:	9b04      	ldr	r3, [sp, #16]
   e08be:	45c1      	cmp	r9, r8
   e08c0:	4417      	add	r7, r2
   e08c2:	441f      	add	r7, r3
   e08c4:	464b      	mov	r3, r9
   e08c6:	bfa8      	it	ge
   e08c8:	4643      	movge	r3, r8
   e08ca:	42bb      	cmp	r3, r7
   e08cc:	bfa8      	it	ge
   e08ce:	463b      	movge	r3, r7
   e08d0:	2b00      	cmp	r3, #0
   e08d2:	bfc2      	ittt	gt
   e08d4:	eba8 0803 	subgt.w	r8, r8, r3
   e08d8:	1aff      	subgt	r7, r7, r3
   e08da:	eba9 0903 	subgt.w	r9, r9, r3
   e08de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e08e0:	2b00      	cmp	r3, #0
   e08e2:	dd17      	ble.n	e0914 <_strtod_l+0x75c>
   e08e4:	4631      	mov	r1, r6
   e08e6:	461a      	mov	r2, r3
   e08e8:	4620      	mov	r0, r4
   e08ea:	f001 f96f 	bl	e1bcc <__pow5mult>
   e08ee:	4606      	mov	r6, r0
   e08f0:	2800      	cmp	r0, #0
   e08f2:	f43f aead 	beq.w	e0650 <_strtod_l+0x498>
   e08f6:	4601      	mov	r1, r0
   e08f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   e08fa:	4620      	mov	r0, r4
   e08fc:	f001 f8ca 	bl	e1a94 <__multiply>
   e0900:	900f      	str	r0, [sp, #60]	; 0x3c
   e0902:	2800      	cmp	r0, #0
   e0904:	f43f aea4 	beq.w	e0650 <_strtod_l+0x498>
   e0908:	991e      	ldr	r1, [sp, #120]	; 0x78
   e090a:	4620      	mov	r0, r4
   e090c:	f000 ffd6 	bl	e18bc <_Bfree>
   e0910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e0912:	931e      	str	r3, [sp, #120]	; 0x78
   e0914:	f1b8 0f00 	cmp.w	r8, #0
   e0918:	f300 8091 	bgt.w	e0a3e <_strtod_l+0x886>
   e091c:	9b08      	ldr	r3, [sp, #32]
   e091e:	2b00      	cmp	r3, #0
   e0920:	dd08      	ble.n	e0934 <_strtod_l+0x77c>
   e0922:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e0924:	9907      	ldr	r1, [sp, #28]
   e0926:	4620      	mov	r0, r4
   e0928:	f001 f950 	bl	e1bcc <__pow5mult>
   e092c:	9007      	str	r0, [sp, #28]
   e092e:	2800      	cmp	r0, #0
   e0930:	f43f ae8e 	beq.w	e0650 <_strtod_l+0x498>
   e0934:	2f00      	cmp	r7, #0
   e0936:	dd08      	ble.n	e094a <_strtod_l+0x792>
   e0938:	9907      	ldr	r1, [sp, #28]
   e093a:	463a      	mov	r2, r7
   e093c:	4620      	mov	r0, r4
   e093e:	f001 f993 	bl	e1c68 <__lshift>
   e0942:	9007      	str	r0, [sp, #28]
   e0944:	2800      	cmp	r0, #0
   e0946:	f43f ae83 	beq.w	e0650 <_strtod_l+0x498>
   e094a:	f1b9 0f00 	cmp.w	r9, #0
   e094e:	dd08      	ble.n	e0962 <_strtod_l+0x7aa>
   e0950:	4631      	mov	r1, r6
   e0952:	464a      	mov	r2, r9
   e0954:	4620      	mov	r0, r4
   e0956:	f001 f987 	bl	e1c68 <__lshift>
   e095a:	4606      	mov	r6, r0
   e095c:	2800      	cmp	r0, #0
   e095e:	f43f ae77 	beq.w	e0650 <_strtod_l+0x498>
   e0962:	9a07      	ldr	r2, [sp, #28]
   e0964:	991e      	ldr	r1, [sp, #120]	; 0x78
   e0966:	4620      	mov	r0, r4
   e0968:	f001 f9f9 	bl	e1d5e <__mdiff>
   e096c:	4605      	mov	r5, r0
   e096e:	2800      	cmp	r0, #0
   e0970:	f43f ae6e 	beq.w	e0650 <_strtod_l+0x498>
   e0974:	68c3      	ldr	r3, [r0, #12]
   e0976:	930f      	str	r3, [sp, #60]	; 0x3c
   e0978:	2300      	movs	r3, #0
   e097a:	60c3      	str	r3, [r0, #12]
   e097c:	4631      	mov	r1, r6
   e097e:	f001 f9d2 	bl	e1d26 <__mcmp>
   e0982:	2800      	cmp	r0, #0
   e0984:	da65      	bge.n	e0a52 <_strtod_l+0x89a>
   e0986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e0988:	ea53 030a 	orrs.w	r3, r3, sl
   e098c:	f040 8087 	bne.w	e0a9e <_strtod_l+0x8e6>
   e0990:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e0994:	2b00      	cmp	r3, #0
   e0996:	f040 8082 	bne.w	e0a9e <_strtod_l+0x8e6>
   e099a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e099e:	0d1b      	lsrs	r3, r3, #20
   e09a0:	051b      	lsls	r3, r3, #20
   e09a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e09a6:	d97a      	bls.n	e0a9e <_strtod_l+0x8e6>
   e09a8:	696b      	ldr	r3, [r5, #20]
   e09aa:	b913      	cbnz	r3, e09b2 <_strtod_l+0x7fa>
   e09ac:	692b      	ldr	r3, [r5, #16]
   e09ae:	2b01      	cmp	r3, #1
   e09b0:	dd75      	ble.n	e0a9e <_strtod_l+0x8e6>
   e09b2:	4629      	mov	r1, r5
   e09b4:	2201      	movs	r2, #1
   e09b6:	4620      	mov	r0, r4
   e09b8:	f001 f956 	bl	e1c68 <__lshift>
   e09bc:	4631      	mov	r1, r6
   e09be:	4605      	mov	r5, r0
   e09c0:	f001 f9b1 	bl	e1d26 <__mcmp>
   e09c4:	2800      	cmp	r0, #0
   e09c6:	dd6a      	ble.n	e0a9e <_strtod_l+0x8e6>
   e09c8:	9904      	ldr	r1, [sp, #16]
   e09ca:	4a55      	ldr	r2, [pc, #340]	; (e0b20 <_strtod_l+0x968>)
   e09cc:	465b      	mov	r3, fp
   e09ce:	2900      	cmp	r1, #0
   e09d0:	f000 8085 	beq.w	e0ade <_strtod_l+0x926>
   e09d4:	ea02 010b 	and.w	r1, r2, fp
   e09d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   e09dc:	dc7f      	bgt.n	e0ade <_strtod_l+0x926>
   e09de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   e09e2:	f77f aeaa 	ble.w	e073a <_strtod_l+0x582>
   e09e6:	4a4f      	ldr	r2, [pc, #316]	; (e0b24 <_strtod_l+0x96c>)
   e09e8:	2300      	movs	r3, #0
   e09ea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   e09ee:	4650      	mov	r0, sl
   e09f0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   e09f4:	4659      	mov	r1, fp
   e09f6:	f7fe ff8f 	bl	df918 <__aeabi_dmul>
   e09fa:	460b      	mov	r3, r1
   e09fc:	4303      	orrs	r3, r0
   e09fe:	bf08      	it	eq
   e0a00:	2322      	moveq	r3, #34	; 0x22
   e0a02:	4682      	mov	sl, r0
   e0a04:	468b      	mov	fp, r1
   e0a06:	bf08      	it	eq
   e0a08:	6023      	streq	r3, [r4, #0]
   e0a0a:	e62b      	b.n	e0664 <_strtod_l+0x4ac>
   e0a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e0a10:	fa02 f303 	lsl.w	r3, r2, r3
   e0a14:	ea03 0a0a 	and.w	sl, r3, sl
   e0a18:	e6de      	b.n	e07d8 <_strtod_l+0x620>
   e0a1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   e0a1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   e0a22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   e0a26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   e0a2a:	fa01 f308 	lsl.w	r3, r1, r8
   e0a2e:	930c      	str	r3, [sp, #48]	; 0x30
   e0a30:	9111      	str	r1, [sp, #68]	; 0x44
   e0a32:	e741      	b.n	e08b8 <_strtod_l+0x700>
   e0a34:	2300      	movs	r3, #0
   e0a36:	930c      	str	r3, [sp, #48]	; 0x30
   e0a38:	2301      	movs	r3, #1
   e0a3a:	9311      	str	r3, [sp, #68]	; 0x44
   e0a3c:	e73c      	b.n	e08b8 <_strtod_l+0x700>
   e0a3e:	991e      	ldr	r1, [sp, #120]	; 0x78
   e0a40:	4642      	mov	r2, r8
   e0a42:	4620      	mov	r0, r4
   e0a44:	f001 f910 	bl	e1c68 <__lshift>
   e0a48:	901e      	str	r0, [sp, #120]	; 0x78
   e0a4a:	2800      	cmp	r0, #0
   e0a4c:	f47f af66 	bne.w	e091c <_strtod_l+0x764>
   e0a50:	e5fe      	b.n	e0650 <_strtod_l+0x498>
   e0a52:	465f      	mov	r7, fp
   e0a54:	d16e      	bne.n	e0b34 <_strtod_l+0x97c>
   e0a56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e0a58:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e0a5c:	b342      	cbz	r2, e0ab0 <_strtod_l+0x8f8>
   e0a5e:	4a32      	ldr	r2, [pc, #200]	; (e0b28 <_strtod_l+0x970>)
   e0a60:	4293      	cmp	r3, r2
   e0a62:	d128      	bne.n	e0ab6 <_strtod_l+0x8fe>
   e0a64:	9b04      	ldr	r3, [sp, #16]
   e0a66:	4650      	mov	r0, sl
   e0a68:	b1eb      	cbz	r3, e0aa6 <_strtod_l+0x8ee>
   e0a6a:	4a2d      	ldr	r2, [pc, #180]	; (e0b20 <_strtod_l+0x968>)
   e0a6c:	403a      	ands	r2, r7
   e0a6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   e0a72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   e0a76:	d819      	bhi.n	e0aac <_strtod_l+0x8f4>
   e0a78:	0d12      	lsrs	r2, r2, #20
   e0a7a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   e0a7e:	fa01 f303 	lsl.w	r3, r1, r3
   e0a82:	4298      	cmp	r0, r3
   e0a84:	d117      	bne.n	e0ab6 <_strtod_l+0x8fe>
   e0a86:	4b29      	ldr	r3, [pc, #164]	; (e0b2c <_strtod_l+0x974>)
   e0a88:	429f      	cmp	r7, r3
   e0a8a:	d102      	bne.n	e0a92 <_strtod_l+0x8da>
   e0a8c:	3001      	adds	r0, #1
   e0a8e:	f43f addf 	beq.w	e0650 <_strtod_l+0x498>
   e0a92:	4b23      	ldr	r3, [pc, #140]	; (e0b20 <_strtod_l+0x968>)
   e0a94:	403b      	ands	r3, r7
   e0a96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e0a9a:	f04f 0a00 	mov.w	sl, #0
   e0a9e:	9b04      	ldr	r3, [sp, #16]
   e0aa0:	2b00      	cmp	r3, #0
   e0aa2:	d1a0      	bne.n	e09e6 <_strtod_l+0x82e>
   e0aa4:	e5de      	b.n	e0664 <_strtod_l+0x4ac>
   e0aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   e0aaa:	e7ea      	b.n	e0a82 <_strtod_l+0x8ca>
   e0aac:	460b      	mov	r3, r1
   e0aae:	e7e8      	b.n	e0a82 <_strtod_l+0x8ca>
   e0ab0:	ea53 030a 	orrs.w	r3, r3, sl
   e0ab4:	d088      	beq.n	e09c8 <_strtod_l+0x810>
   e0ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e0ab8:	b1db      	cbz	r3, e0af2 <_strtod_l+0x93a>
   e0aba:	423b      	tst	r3, r7
   e0abc:	d0ef      	beq.n	e0a9e <_strtod_l+0x8e6>
   e0abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e0ac0:	9a04      	ldr	r2, [sp, #16]
   e0ac2:	4650      	mov	r0, sl
   e0ac4:	4659      	mov	r1, fp
   e0ac6:	b1c3      	cbz	r3, e0afa <_strtod_l+0x942>
   e0ac8:	f7ff fb58 	bl	e017c <sulp>
   e0acc:	4602      	mov	r2, r0
   e0ace:	460b      	mov	r3, r1
   e0ad0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e0ad4:	f7fe fd6a 	bl	df5ac <__adddf3>
   e0ad8:	4682      	mov	sl, r0
   e0ada:	468b      	mov	fp, r1
   e0adc:	e7df      	b.n	e0a9e <_strtod_l+0x8e6>
   e0ade:	4013      	ands	r3, r2
   e0ae0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e0ae4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e0ae8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e0aec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   e0af0:	e7d5      	b.n	e0a9e <_strtod_l+0x8e6>
   e0af2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e0af4:	ea13 0f0a 	tst.w	r3, sl
   e0af8:	e7e0      	b.n	e0abc <_strtod_l+0x904>
   e0afa:	f7ff fb3f 	bl	e017c <sulp>
   e0afe:	4602      	mov	r2, r0
   e0b00:	460b      	mov	r3, r1
   e0b02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e0b06:	f7fe fd4f 	bl	df5a8 <__aeabi_dsub>
   e0b0a:	2200      	movs	r2, #0
   e0b0c:	2300      	movs	r3, #0
   e0b0e:	4682      	mov	sl, r0
   e0b10:	468b      	mov	fp, r1
   e0b12:	f7ff f969 	bl	dfde8 <__aeabi_dcmpeq>
   e0b16:	2800      	cmp	r0, #0
   e0b18:	d0c1      	beq.n	e0a9e <_strtod_l+0x8e6>
   e0b1a:	e60e      	b.n	e073a <_strtod_l+0x582>
   e0b1c:	fffffc02 	.word	0xfffffc02
   e0b20:	7ff00000 	.word	0x7ff00000
   e0b24:	39500000 	.word	0x39500000
   e0b28:	000fffff 	.word	0x000fffff
   e0b2c:	7fefffff 	.word	0x7fefffff
   e0b30:	000e2fc0 	.word	0x000e2fc0
   e0b34:	4631      	mov	r1, r6
   e0b36:	4628      	mov	r0, r5
   e0b38:	f001 fa54 	bl	e1fe4 <__ratio>
   e0b3c:	ec59 8b10 	vmov	r8, r9, d0
   e0b40:	ee10 0a10 	vmov	r0, s0
   e0b44:	2200      	movs	r2, #0
   e0b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e0b4a:	4649      	mov	r1, r9
   e0b4c:	f7ff f960 	bl	dfe10 <__aeabi_dcmple>
   e0b50:	2800      	cmp	r0, #0
   e0b52:	d07c      	beq.n	e0c4e <_strtod_l+0xa96>
   e0b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e0b56:	2b00      	cmp	r3, #0
   e0b58:	d04c      	beq.n	e0bf4 <_strtod_l+0xa3c>
   e0b5a:	4b95      	ldr	r3, [pc, #596]	; (e0db0 <_strtod_l+0xbf8>)
   e0b5c:	2200      	movs	r2, #0
   e0b5e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e0b62:	f8df 924c 	ldr.w	r9, [pc, #588]	; e0db0 <_strtod_l+0xbf8>
   e0b66:	f04f 0800 	mov.w	r8, #0
   e0b6a:	4b92      	ldr	r3, [pc, #584]	; (e0db4 <_strtod_l+0xbfc>)
   e0b6c:	403b      	ands	r3, r7
   e0b6e:	9311      	str	r3, [sp, #68]	; 0x44
   e0b70:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e0b72:	4b91      	ldr	r3, [pc, #580]	; (e0db8 <_strtod_l+0xc00>)
   e0b74:	429a      	cmp	r2, r3
   e0b76:	f040 80b2 	bne.w	e0cde <_strtod_l+0xb26>
   e0b7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e0b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e0b82:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   e0b86:	ec4b ab10 	vmov	d0, sl, fp
   e0b8a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   e0b8e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e0b92:	f001 f95b 	bl	e1e4c <__ulp>
   e0b96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e0b9a:	ec53 2b10 	vmov	r2, r3, d0
   e0b9e:	f7fe febb 	bl	df918 <__aeabi_dmul>
   e0ba2:	4652      	mov	r2, sl
   e0ba4:	465b      	mov	r3, fp
   e0ba6:	f7fe fd01 	bl	df5ac <__adddf3>
   e0baa:	460b      	mov	r3, r1
   e0bac:	4981      	ldr	r1, [pc, #516]	; (e0db4 <_strtod_l+0xbfc>)
   e0bae:	4a83      	ldr	r2, [pc, #524]	; (e0dbc <_strtod_l+0xc04>)
   e0bb0:	4019      	ands	r1, r3
   e0bb2:	4291      	cmp	r1, r2
   e0bb4:	4682      	mov	sl, r0
   e0bb6:	d95e      	bls.n	e0c76 <_strtod_l+0xabe>
   e0bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e0bba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   e0bbe:	4293      	cmp	r3, r2
   e0bc0:	d103      	bne.n	e0bca <_strtod_l+0xa12>
   e0bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e0bc4:	3301      	adds	r3, #1
   e0bc6:	f43f ad43 	beq.w	e0650 <_strtod_l+0x498>
   e0bca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; e0dc8 <_strtod_l+0xc10>
   e0bce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   e0bd2:	991e      	ldr	r1, [sp, #120]	; 0x78
   e0bd4:	4620      	mov	r0, r4
   e0bd6:	f000 fe71 	bl	e18bc <_Bfree>
   e0bda:	9907      	ldr	r1, [sp, #28]
   e0bdc:	4620      	mov	r0, r4
   e0bde:	f000 fe6d 	bl	e18bc <_Bfree>
   e0be2:	4631      	mov	r1, r6
   e0be4:	4620      	mov	r0, r4
   e0be6:	f000 fe69 	bl	e18bc <_Bfree>
   e0bea:	4629      	mov	r1, r5
   e0bec:	4620      	mov	r0, r4
   e0bee:	f000 fe65 	bl	e18bc <_Bfree>
   e0bf2:	e613      	b.n	e081c <_strtod_l+0x664>
   e0bf4:	f1ba 0f00 	cmp.w	sl, #0
   e0bf8:	d11b      	bne.n	e0c32 <_strtod_l+0xa7a>
   e0bfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e0bfe:	b9f3      	cbnz	r3, e0c3e <_strtod_l+0xa86>
   e0c00:	4b6b      	ldr	r3, [pc, #428]	; (e0db0 <_strtod_l+0xbf8>)
   e0c02:	2200      	movs	r2, #0
   e0c04:	4640      	mov	r0, r8
   e0c06:	4649      	mov	r1, r9
   e0c08:	f7ff f8f8 	bl	dfdfc <__aeabi_dcmplt>
   e0c0c:	b9d0      	cbnz	r0, e0c44 <_strtod_l+0xa8c>
   e0c0e:	4640      	mov	r0, r8
   e0c10:	4649      	mov	r1, r9
   e0c12:	4b6b      	ldr	r3, [pc, #428]	; (e0dc0 <_strtod_l+0xc08>)
   e0c14:	2200      	movs	r2, #0
   e0c16:	f7fe fe7f 	bl	df918 <__aeabi_dmul>
   e0c1a:	4680      	mov	r8, r0
   e0c1c:	4689      	mov	r9, r1
   e0c1e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   e0c22:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   e0c26:	931b      	str	r3, [sp, #108]	; 0x6c
   e0c28:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   e0c2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e0c30:	e79b      	b.n	e0b6a <_strtod_l+0x9b2>
   e0c32:	f1ba 0f01 	cmp.w	sl, #1
   e0c36:	d102      	bne.n	e0c3e <_strtod_l+0xa86>
   e0c38:	2f00      	cmp	r7, #0
   e0c3a:	f43f ad7e 	beq.w	e073a <_strtod_l+0x582>
   e0c3e:	4b61      	ldr	r3, [pc, #388]	; (e0dc4 <_strtod_l+0xc0c>)
   e0c40:	2200      	movs	r2, #0
   e0c42:	e78c      	b.n	e0b5e <_strtod_l+0x9a6>
   e0c44:	f8df 9178 	ldr.w	r9, [pc, #376]	; e0dc0 <_strtod_l+0xc08>
   e0c48:	f04f 0800 	mov.w	r8, #0
   e0c4c:	e7e7      	b.n	e0c1e <_strtod_l+0xa66>
   e0c4e:	4b5c      	ldr	r3, [pc, #368]	; (e0dc0 <_strtod_l+0xc08>)
   e0c50:	4640      	mov	r0, r8
   e0c52:	4649      	mov	r1, r9
   e0c54:	2200      	movs	r2, #0
   e0c56:	f7fe fe5f 	bl	df918 <__aeabi_dmul>
   e0c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e0c5c:	4680      	mov	r8, r0
   e0c5e:	4689      	mov	r9, r1
   e0c60:	b933      	cbnz	r3, e0c70 <_strtod_l+0xab8>
   e0c62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0c66:	9012      	str	r0, [sp, #72]	; 0x48
   e0c68:	9313      	str	r3, [sp, #76]	; 0x4c
   e0c6a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   e0c6e:	e7dd      	b.n	e0c2c <_strtod_l+0xa74>
   e0c70:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   e0c74:	e7f9      	b.n	e0c6a <_strtod_l+0xab2>
   e0c76:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   e0c7a:	9b04      	ldr	r3, [sp, #16]
   e0c7c:	2b00      	cmp	r3, #0
   e0c7e:	d1a8      	bne.n	e0bd2 <_strtod_l+0xa1a>
   e0c80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e0c84:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e0c86:	0d1b      	lsrs	r3, r3, #20
   e0c88:	051b      	lsls	r3, r3, #20
   e0c8a:	429a      	cmp	r2, r3
   e0c8c:	d1a1      	bne.n	e0bd2 <_strtod_l+0xa1a>
   e0c8e:	4640      	mov	r0, r8
   e0c90:	4649      	mov	r1, r9
   e0c92:	f001 fa67 	bl	e2164 <__aeabi_d2lz>
   e0c96:	f7fe fe11 	bl	df8bc <__aeabi_l2d>
   e0c9a:	4602      	mov	r2, r0
   e0c9c:	460b      	mov	r3, r1
   e0c9e:	4640      	mov	r0, r8
   e0ca0:	4649      	mov	r1, r9
   e0ca2:	f7fe fc81 	bl	df5a8 <__aeabi_dsub>
   e0ca6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e0ca8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e0cac:	ea43 030a 	orr.w	r3, r3, sl
   e0cb0:	4313      	orrs	r3, r2
   e0cb2:	4680      	mov	r8, r0
   e0cb4:	4689      	mov	r9, r1
   e0cb6:	d053      	beq.n	e0d60 <_strtod_l+0xba8>
   e0cb8:	a335      	add	r3, pc, #212	; (adr r3, e0d90 <_strtod_l+0xbd8>)
   e0cba:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0cbe:	f7ff f89d 	bl	dfdfc <__aeabi_dcmplt>
   e0cc2:	2800      	cmp	r0, #0
   e0cc4:	f47f acce 	bne.w	e0664 <_strtod_l+0x4ac>
   e0cc8:	a333      	add	r3, pc, #204	; (adr r3, e0d98 <_strtod_l+0xbe0>)
   e0cca:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0cce:	4640      	mov	r0, r8
   e0cd0:	4649      	mov	r1, r9
   e0cd2:	f7ff f8b1 	bl	dfe38 <__aeabi_dcmpgt>
   e0cd6:	2800      	cmp	r0, #0
   e0cd8:	f43f af7b 	beq.w	e0bd2 <_strtod_l+0xa1a>
   e0cdc:	e4c2      	b.n	e0664 <_strtod_l+0x4ac>
   e0cde:	9b04      	ldr	r3, [sp, #16]
   e0ce0:	b333      	cbz	r3, e0d30 <_strtod_l+0xb78>
   e0ce2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e0ce4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e0ce8:	d822      	bhi.n	e0d30 <_strtod_l+0xb78>
   e0cea:	a32d      	add	r3, pc, #180	; (adr r3, e0da0 <_strtod_l+0xbe8>)
   e0cec:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0cf0:	4640      	mov	r0, r8
   e0cf2:	4649      	mov	r1, r9
   e0cf4:	f7ff f88c 	bl	dfe10 <__aeabi_dcmple>
   e0cf8:	b1a0      	cbz	r0, e0d24 <_strtod_l+0xb6c>
   e0cfa:	4649      	mov	r1, r9
   e0cfc:	4640      	mov	r0, r8
   e0cfe:	f7ff f8cd 	bl	dfe9c <__aeabi_d2uiz>
   e0d02:	2801      	cmp	r0, #1
   e0d04:	bf38      	it	cc
   e0d06:	2001      	movcc	r0, #1
   e0d08:	f7fe fd8c 	bl	df824 <__aeabi_ui2d>
   e0d0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e0d0e:	4680      	mov	r8, r0
   e0d10:	4689      	mov	r9, r1
   e0d12:	bb13      	cbnz	r3, e0d5a <_strtod_l+0xba2>
   e0d14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0d18:	9014      	str	r0, [sp, #80]	; 0x50
   e0d1a:	9315      	str	r3, [sp, #84]	; 0x54
   e0d1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   e0d20:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e0d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e0d26:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e0d28:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   e0d2c:	1a9b      	subs	r3, r3, r2
   e0d2e:	930d      	str	r3, [sp, #52]	; 0x34
   e0d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e0d34:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   e0d38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e0d3c:	f001 f886 	bl	e1e4c <__ulp>
   e0d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e0d44:	ec53 2b10 	vmov	r2, r3, d0
   e0d48:	f7fe fde6 	bl	df918 <__aeabi_dmul>
   e0d4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e0d50:	f7fe fc2c 	bl	df5ac <__adddf3>
   e0d54:	4682      	mov	sl, r0
   e0d56:	468b      	mov	fp, r1
   e0d58:	e78f      	b.n	e0c7a <_strtod_l+0xac2>
   e0d5a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   e0d5e:	e7dd      	b.n	e0d1c <_strtod_l+0xb64>
   e0d60:	a311      	add	r3, pc, #68	; (adr r3, e0da8 <_strtod_l+0xbf0>)
   e0d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d66:	f7ff f849 	bl	dfdfc <__aeabi_dcmplt>
   e0d6a:	e7b4      	b.n	e0cd6 <_strtod_l+0xb1e>
   e0d6c:	2300      	movs	r3, #0
   e0d6e:	930e      	str	r3, [sp, #56]	; 0x38
   e0d70:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e0d72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e0d74:	6013      	str	r3, [r2, #0]
   e0d76:	f7ff ba65 	b.w	e0244 <_strtod_l+0x8c>
   e0d7a:	2b65      	cmp	r3, #101	; 0x65
   e0d7c:	f43f ab5d 	beq.w	e043a <_strtod_l+0x282>
   e0d80:	2b45      	cmp	r3, #69	; 0x45
   e0d82:	f43f ab5a 	beq.w	e043a <_strtod_l+0x282>
   e0d86:	2201      	movs	r2, #1
   e0d88:	f7ff bb92 	b.w	e04b0 <_strtod_l+0x2f8>
   e0d8c:	f3af 8000 	nop.w
   e0d90:	94a03595 	.word	0x94a03595
   e0d94:	3fdfffff 	.word	0x3fdfffff
   e0d98:	35afe535 	.word	0x35afe535
   e0d9c:	3fe00000 	.word	0x3fe00000
   e0da0:	ffc00000 	.word	0xffc00000
   e0da4:	41dfffff 	.word	0x41dfffff
   e0da8:	94a03595 	.word	0x94a03595
   e0dac:	3fcfffff 	.word	0x3fcfffff
   e0db0:	3ff00000 	.word	0x3ff00000
   e0db4:	7ff00000 	.word	0x7ff00000
   e0db8:	7fe00000 	.word	0x7fe00000
   e0dbc:	7c9fffff 	.word	0x7c9fffff
   e0dc0:	3fe00000 	.word	0x3fe00000
   e0dc4:	bff00000 	.word	0xbff00000
   e0dc8:	7fefffff 	.word	0x7fefffff

000e0dcc <strtod>:
   e0dcc:	460a      	mov	r2, r1
   e0dce:	4601      	mov	r1, r0
   e0dd0:	4802      	ldr	r0, [pc, #8]	; (e0ddc <strtod+0x10>)
   e0dd2:	4b03      	ldr	r3, [pc, #12]	; (e0de0 <strtod+0x14>)
   e0dd4:	6800      	ldr	r0, [r0, #0]
   e0dd6:	f7ff b9ef 	b.w	e01b8 <_strtod_l>
   e0dda:	bf00      	nop
   e0ddc:	2003e218 	.word	0x2003e218
   e0de0:	2003e284 	.word	0x2003e284

000e0de4 <__strtok_r>:
   e0de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   e0de6:	b908      	cbnz	r0, e0dec <__strtok_r+0x8>
   e0de8:	6810      	ldr	r0, [r2, #0]
   e0dea:	b188      	cbz	r0, e0e10 <__strtok_r+0x2c>
   e0dec:	4604      	mov	r4, r0
   e0dee:	4620      	mov	r0, r4
   e0df0:	f814 5b01 	ldrb.w	r5, [r4], #1
   e0df4:	460f      	mov	r7, r1
   e0df6:	f817 6b01 	ldrb.w	r6, [r7], #1
   e0dfa:	b91e      	cbnz	r6, e0e04 <__strtok_r+0x20>
   e0dfc:	b965      	cbnz	r5, e0e18 <__strtok_r+0x34>
   e0dfe:	6015      	str	r5, [r2, #0]
   e0e00:	4628      	mov	r0, r5
   e0e02:	e005      	b.n	e0e10 <__strtok_r+0x2c>
   e0e04:	42b5      	cmp	r5, r6
   e0e06:	d1f6      	bne.n	e0df6 <__strtok_r+0x12>
   e0e08:	2b00      	cmp	r3, #0
   e0e0a:	d1f0      	bne.n	e0dee <__strtok_r+0xa>
   e0e0c:	6014      	str	r4, [r2, #0]
   e0e0e:	7003      	strb	r3, [r0, #0]
   e0e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e0e12:	461c      	mov	r4, r3
   e0e14:	e00c      	b.n	e0e30 <__strtok_r+0x4c>
   e0e16:	b915      	cbnz	r5, e0e1e <__strtok_r+0x3a>
   e0e18:	f814 3b01 	ldrb.w	r3, [r4], #1
   e0e1c:	460e      	mov	r6, r1
   e0e1e:	f816 5b01 	ldrb.w	r5, [r6], #1
   e0e22:	42ab      	cmp	r3, r5
   e0e24:	d1f7      	bne.n	e0e16 <__strtok_r+0x32>
   e0e26:	2b00      	cmp	r3, #0
   e0e28:	d0f3      	beq.n	e0e12 <__strtok_r+0x2e>
   e0e2a:	2300      	movs	r3, #0
   e0e2c:	f804 3c01 	strb.w	r3, [r4, #-1]
   e0e30:	6014      	str	r4, [r2, #0]
   e0e32:	e7ed      	b.n	e0e10 <__strtok_r+0x2c>

000e0e34 <strtok_r>:
   e0e34:	2301      	movs	r3, #1
   e0e36:	f7ff bfd5 	b.w	e0de4 <__strtok_r>
	...

000e0e3c <_strtol_l.isra.0>:
   e0e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e0e40:	4e3a      	ldr	r6, [pc, #232]	; (e0f2c <_strtol_l.isra.0+0xf0>)
   e0e42:	4686      	mov	lr, r0
   e0e44:	468c      	mov	ip, r1
   e0e46:	4660      	mov	r0, ip
   e0e48:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e0e4c:	5da5      	ldrb	r5, [r4, r6]
   e0e4e:	f015 0508 	ands.w	r5, r5, #8
   e0e52:	d1f8      	bne.n	e0e46 <_strtol_l.isra.0+0xa>
   e0e54:	2c2d      	cmp	r4, #45	; 0x2d
   e0e56:	d133      	bne.n	e0ec0 <_strtol_l.isra.0+0x84>
   e0e58:	f89c 4000 	ldrb.w	r4, [ip]
   e0e5c:	f04f 0801 	mov.w	r8, #1
   e0e60:	f100 0c02 	add.w	ip, r0, #2
   e0e64:	2b00      	cmp	r3, #0
   e0e66:	d05c      	beq.n	e0f22 <_strtol_l.isra.0+0xe6>
   e0e68:	2b10      	cmp	r3, #16
   e0e6a:	d10c      	bne.n	e0e86 <_strtol_l.isra.0+0x4a>
   e0e6c:	2c30      	cmp	r4, #48	; 0x30
   e0e6e:	d10a      	bne.n	e0e86 <_strtol_l.isra.0+0x4a>
   e0e70:	f89c 0000 	ldrb.w	r0, [ip]
   e0e74:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e0e78:	2858      	cmp	r0, #88	; 0x58
   e0e7a:	d14d      	bne.n	e0f18 <_strtol_l.isra.0+0xdc>
   e0e7c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   e0e80:	2310      	movs	r3, #16
   e0e82:	f10c 0c02 	add.w	ip, ip, #2
   e0e86:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   e0e8a:	3f01      	subs	r7, #1
   e0e8c:	2600      	movs	r6, #0
   e0e8e:	fbb7 f9f3 	udiv	r9, r7, r3
   e0e92:	4630      	mov	r0, r6
   e0e94:	fb03 7a19 	mls	sl, r3, r9, r7
   e0e98:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   e0e9c:	2d09      	cmp	r5, #9
   e0e9e:	d818      	bhi.n	e0ed2 <_strtol_l.isra.0+0x96>
   e0ea0:	462c      	mov	r4, r5
   e0ea2:	42a3      	cmp	r3, r4
   e0ea4:	dd24      	ble.n	e0ef0 <_strtol_l.isra.0+0xb4>
   e0ea6:	1c75      	adds	r5, r6, #1
   e0ea8:	d007      	beq.n	e0eba <_strtol_l.isra.0+0x7e>
   e0eaa:	4581      	cmp	r9, r0
   e0eac:	d31d      	bcc.n	e0eea <_strtol_l.isra.0+0xae>
   e0eae:	d101      	bne.n	e0eb4 <_strtol_l.isra.0+0x78>
   e0eb0:	45a2      	cmp	sl, r4
   e0eb2:	db1a      	blt.n	e0eea <_strtol_l.isra.0+0xae>
   e0eb4:	fb00 4003 	mla	r0, r0, r3, r4
   e0eb8:	2601      	movs	r6, #1
   e0eba:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e0ebe:	e7eb      	b.n	e0e98 <_strtol_l.isra.0+0x5c>
   e0ec0:	2c2b      	cmp	r4, #43	; 0x2b
   e0ec2:	bf08      	it	eq
   e0ec4:	f89c 4000 	ldrbeq.w	r4, [ip]
   e0ec8:	46a8      	mov	r8, r5
   e0eca:	bf08      	it	eq
   e0ecc:	f100 0c02 	addeq.w	ip, r0, #2
   e0ed0:	e7c8      	b.n	e0e64 <_strtol_l.isra.0+0x28>
   e0ed2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   e0ed6:	2d19      	cmp	r5, #25
   e0ed8:	d801      	bhi.n	e0ede <_strtol_l.isra.0+0xa2>
   e0eda:	3c37      	subs	r4, #55	; 0x37
   e0edc:	e7e1      	b.n	e0ea2 <_strtol_l.isra.0+0x66>
   e0ede:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   e0ee2:	2d19      	cmp	r5, #25
   e0ee4:	d804      	bhi.n	e0ef0 <_strtol_l.isra.0+0xb4>
   e0ee6:	3c57      	subs	r4, #87	; 0x57
   e0ee8:	e7db      	b.n	e0ea2 <_strtol_l.isra.0+0x66>
   e0eea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   e0eee:	e7e4      	b.n	e0eba <_strtol_l.isra.0+0x7e>
   e0ef0:	1c73      	adds	r3, r6, #1
   e0ef2:	d106      	bne.n	e0f02 <_strtol_l.isra.0+0xc6>
   e0ef4:	2322      	movs	r3, #34	; 0x22
   e0ef6:	f8ce 3000 	str.w	r3, [lr]
   e0efa:	4638      	mov	r0, r7
   e0efc:	b942      	cbnz	r2, e0f10 <_strtol_l.isra.0+0xd4>
   e0efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e0f02:	f1b8 0f00 	cmp.w	r8, #0
   e0f06:	d000      	beq.n	e0f0a <_strtol_l.isra.0+0xce>
   e0f08:	4240      	negs	r0, r0
   e0f0a:	2a00      	cmp	r2, #0
   e0f0c:	d0f7      	beq.n	e0efe <_strtol_l.isra.0+0xc2>
   e0f0e:	b10e      	cbz	r6, e0f14 <_strtol_l.isra.0+0xd8>
   e0f10:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   e0f14:	6011      	str	r1, [r2, #0]
   e0f16:	e7f2      	b.n	e0efe <_strtol_l.isra.0+0xc2>
   e0f18:	2430      	movs	r4, #48	; 0x30
   e0f1a:	2b00      	cmp	r3, #0
   e0f1c:	d1b3      	bne.n	e0e86 <_strtol_l.isra.0+0x4a>
   e0f1e:	2308      	movs	r3, #8
   e0f20:	e7b1      	b.n	e0e86 <_strtol_l.isra.0+0x4a>
   e0f22:	2c30      	cmp	r4, #48	; 0x30
   e0f24:	d0a4      	beq.n	e0e70 <_strtol_l.isra.0+0x34>
   e0f26:	230a      	movs	r3, #10
   e0f28:	e7ad      	b.n	e0e86 <_strtol_l.isra.0+0x4a>
   e0f2a:	bf00      	nop
   e0f2c:	000e2fe9 	.word	0x000e2fe9

000e0f30 <strtol>:
   e0f30:	4613      	mov	r3, r2
   e0f32:	460a      	mov	r2, r1
   e0f34:	4601      	mov	r1, r0
   e0f36:	4802      	ldr	r0, [pc, #8]	; (e0f40 <strtol+0x10>)
   e0f38:	6800      	ldr	r0, [r0, #0]
   e0f3a:	f7ff bf7f 	b.w	e0e3c <_strtol_l.isra.0>
   e0f3e:	bf00      	nop
   e0f40:	2003e218 	.word	0x2003e218

000e0f44 <close>:
   e0f44:	4b02      	ldr	r3, [pc, #8]	; (e0f50 <close+0xc>)
   e0f46:	4601      	mov	r1, r0
   e0f48:	6818      	ldr	r0, [r3, #0]
   e0f4a:	f000 b8c9 	b.w	e10e0 <_close_r>
   e0f4e:	bf00      	nop
   e0f50:	2003e218 	.word	0x2003e218

000e0f54 <fstat>:
   e0f54:	4b02      	ldr	r3, [pc, #8]	; (e0f60 <fstat+0xc>)
   e0f56:	460a      	mov	r2, r1
   e0f58:	4601      	mov	r1, r0
   e0f5a:	6818      	ldr	r0, [r3, #0]
   e0f5c:	f000 b8d0 	b.w	e1100 <_fstat_r>
   e0f60:	2003e218 	.word	0x2003e218

000e0f64 <lseek>:
   e0f64:	4613      	mov	r3, r2
   e0f66:	460a      	mov	r2, r1
   e0f68:	4601      	mov	r1, r0
   e0f6a:	4802      	ldr	r0, [pc, #8]	; (e0f74 <lseek+0x10>)
   e0f6c:	6800      	ldr	r0, [r0, #0]
   e0f6e:	f000 bc4d 	b.w	e180c <_lseek_r>
   e0f72:	bf00      	nop
   e0f74:	2003e218 	.word	0x2003e218

000e0f78 <open>:
   e0f78:	b40e      	push	{r1, r2, r3}
   e0f7a:	b503      	push	{r0, r1, lr}
   e0f7c:	ab03      	add	r3, sp, #12
   e0f7e:	4601      	mov	r1, r0
   e0f80:	4806      	ldr	r0, [pc, #24]	; (e0f9c <open+0x24>)
   e0f82:	f853 2b04 	ldr.w	r2, [r3], #4
   e0f86:	9301      	str	r3, [sp, #4]
   e0f88:	6800      	ldr	r0, [r0, #0]
   e0f8a:	9b04      	ldr	r3, [sp, #16]
   e0f8c:	f001 f8b0 	bl	e20f0 <_open_r>
   e0f90:	b002      	add	sp, #8
   e0f92:	f85d eb04 	ldr.w	lr, [sp], #4
   e0f96:	b003      	add	sp, #12
   e0f98:	4770      	bx	lr
   e0f9a:	bf00      	nop
   e0f9c:	2003e218 	.word	0x2003e218

000e0fa0 <read>:
   e0fa0:	4613      	mov	r3, r2
   e0fa2:	460a      	mov	r2, r1
   e0fa4:	4601      	mov	r1, r0
   e0fa6:	4802      	ldr	r0, [pc, #8]	; (e0fb0 <read+0x10>)
   e0fa8:	6800      	ldr	r0, [r0, #0]
   e0faa:	f001 b8b3 	b.w	e2114 <_read_r>
   e0fae:	bf00      	nop
   e0fb0:	2003e218 	.word	0x2003e218

000e0fb4 <unlink>:
   e0fb4:	4b02      	ldr	r3, [pc, #8]	; (e0fc0 <unlink+0xc>)
   e0fb6:	4601      	mov	r1, r0
   e0fb8:	6818      	ldr	r0, [r3, #0]
   e0fba:	f000 b80d 	b.w	e0fd8 <_unlink_r>
   e0fbe:	bf00      	nop
   e0fc0:	2003e218 	.word	0x2003e218

000e0fc4 <write>:
   e0fc4:	4613      	mov	r3, r2
   e0fc6:	460a      	mov	r2, r1
   e0fc8:	4601      	mov	r1, r0
   e0fca:	4802      	ldr	r0, [pc, #8]	; (e0fd4 <write+0x10>)
   e0fcc:	6800      	ldr	r0, [r0, #0]
   e0fce:	f000 b813 	b.w	e0ff8 <_write_r>
   e0fd2:	bf00      	nop
   e0fd4:	2003e218 	.word	0x2003e218

000e0fd8 <_unlink_r>:
   e0fd8:	b538      	push	{r3, r4, r5, lr}
   e0fda:	4d06      	ldr	r5, [pc, #24]	; (e0ff4 <_unlink_r+0x1c>)
   e0fdc:	2300      	movs	r3, #0
   e0fde:	4604      	mov	r4, r0
   e0fe0:	4608      	mov	r0, r1
   e0fe2:	602b      	str	r3, [r5, #0]
   e0fe4:	f7fa ffdc 	bl	dbfa0 <_unlink>
   e0fe8:	1c43      	adds	r3, r0, #1
   e0fea:	d102      	bne.n	e0ff2 <_unlink_r+0x1a>
   e0fec:	682b      	ldr	r3, [r5, #0]
   e0fee:	b103      	cbz	r3, e0ff2 <_unlink_r+0x1a>
   e0ff0:	6023      	str	r3, [r4, #0]
   e0ff2:	bd38      	pop	{r3, r4, r5, pc}
   e0ff4:	2003e7ec 	.word	0x2003e7ec

000e0ff8 <_write_r>:
   e0ff8:	b538      	push	{r3, r4, r5, lr}
   e0ffa:	4d07      	ldr	r5, [pc, #28]	; (e1018 <_write_r+0x20>)
   e0ffc:	4604      	mov	r4, r0
   e0ffe:	4608      	mov	r0, r1
   e1000:	4611      	mov	r1, r2
   e1002:	2200      	movs	r2, #0
   e1004:	602a      	str	r2, [r5, #0]
   e1006:	461a      	mov	r2, r3
   e1008:	f7fa ff92 	bl	dbf30 <_write>
   e100c:	1c43      	adds	r3, r0, #1
   e100e:	d102      	bne.n	e1016 <_write_r+0x1e>
   e1010:	682b      	ldr	r3, [r5, #0]
   e1012:	b103      	cbz	r3, e1016 <_write_r+0x1e>
   e1014:	6023      	str	r3, [r4, #0]
   e1016:	bd38      	pop	{r3, r4, r5, pc}
   e1018:	2003e7ec 	.word	0x2003e7ec

000e101c <__register_exitproc>:
   e101c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e1020:	f8df 80b8 	ldr.w	r8, [pc, #184]	; e10dc <__register_exitproc+0xc0>
   e1024:	4606      	mov	r6, r0
   e1026:	f8d8 0000 	ldr.w	r0, [r8]
   e102a:	461f      	mov	r7, r3
   e102c:	460d      	mov	r5, r1
   e102e:	4691      	mov	r9, r2
   e1030:	f000 fbe8 	bl	e1804 <__retarget_lock_acquire_recursive>
   e1034:	4b25      	ldr	r3, [pc, #148]	; (e10cc <__register_exitproc+0xb0>)
   e1036:	681c      	ldr	r4, [r3, #0]
   e1038:	b934      	cbnz	r4, e1048 <__register_exitproc+0x2c>
   e103a:	4c25      	ldr	r4, [pc, #148]	; (e10d0 <__register_exitproc+0xb4>)
   e103c:	601c      	str	r4, [r3, #0]
   e103e:	4b25      	ldr	r3, [pc, #148]	; (e10d4 <__register_exitproc+0xb8>)
   e1040:	b113      	cbz	r3, e1048 <__register_exitproc+0x2c>
   e1042:	681b      	ldr	r3, [r3, #0]
   e1044:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   e1048:	6863      	ldr	r3, [r4, #4]
   e104a:	2b1f      	cmp	r3, #31
   e104c:	dd07      	ble.n	e105e <__register_exitproc+0x42>
   e104e:	f8d8 0000 	ldr.w	r0, [r8]
   e1052:	f000 fbd9 	bl	e1808 <__retarget_lock_release_recursive>
   e1056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e105a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e105e:	b34e      	cbz	r6, e10b4 <__register_exitproc+0x98>
   e1060:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   e1064:	b988      	cbnz	r0, e108a <__register_exitproc+0x6e>
   e1066:	4b1c      	ldr	r3, [pc, #112]	; (e10d8 <__register_exitproc+0xbc>)
   e1068:	b923      	cbnz	r3, e1074 <__register_exitproc+0x58>
   e106a:	f8d8 0000 	ldr.w	r0, [r8]
   e106e:	f000 fbca 	bl	e1806 <__retarget_lock_release>
   e1072:	e7f0      	b.n	e1056 <__register_exitproc+0x3a>
   e1074:	f44f 7084 	mov.w	r0, #264	; 0x108
   e1078:	f7fb f9aa 	bl	dc3d0 <malloc>
   e107c:	2800      	cmp	r0, #0
   e107e:	d0f4      	beq.n	e106a <__register_exitproc+0x4e>
   e1080:	2300      	movs	r3, #0
   e1082:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   e1086:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   e108a:	6863      	ldr	r3, [r4, #4]
   e108c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   e1090:	2201      	movs	r2, #1
   e1092:	409a      	lsls	r2, r3
   e1094:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   e1098:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   e109c:	4313      	orrs	r3, r2
   e109e:	2e02      	cmp	r6, #2
   e10a0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   e10a4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   e10a8:	bf02      	ittt	eq
   e10aa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   e10ae:	431a      	orreq	r2, r3
   e10b0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   e10b4:	6863      	ldr	r3, [r4, #4]
   e10b6:	f8d8 0000 	ldr.w	r0, [r8]
   e10ba:	1c5a      	adds	r2, r3, #1
   e10bc:	3302      	adds	r3, #2
   e10be:	6062      	str	r2, [r4, #4]
   e10c0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   e10c4:	f000 fba0 	bl	e1808 <__retarget_lock_release_recursive>
   e10c8:	2000      	movs	r0, #0
   e10ca:	e7c6      	b.n	e105a <__register_exitproc+0x3e>
   e10cc:	2003e7dc 	.word	0x2003e7dc
   e10d0:	2003e750 	.word	0x2003e750
   e10d4:	00000000 	.word	0x00000000
   e10d8:	000dc3d1 	.word	0x000dc3d1
   e10dc:	2003e27c 	.word	0x2003e27c

000e10e0 <_close_r>:
   e10e0:	b538      	push	{r3, r4, r5, lr}
   e10e2:	4d06      	ldr	r5, [pc, #24]	; (e10fc <_close_r+0x1c>)
   e10e4:	2300      	movs	r3, #0
   e10e6:	4604      	mov	r4, r0
   e10e8:	4608      	mov	r0, r1
   e10ea:	602b      	str	r3, [r5, #0]
   e10ec:	f7fa ff30 	bl	dbf50 <_close>
   e10f0:	1c43      	adds	r3, r0, #1
   e10f2:	d102      	bne.n	e10fa <_close_r+0x1a>
   e10f4:	682b      	ldr	r3, [r5, #0]
   e10f6:	b103      	cbz	r3, e10fa <_close_r+0x1a>
   e10f8:	6023      	str	r3, [r4, #0]
   e10fa:	bd38      	pop	{r3, r4, r5, pc}
   e10fc:	2003e7ec 	.word	0x2003e7ec

000e1100 <_fstat_r>:
   e1100:	b538      	push	{r3, r4, r5, lr}
   e1102:	4d07      	ldr	r5, [pc, #28]	; (e1120 <_fstat_r+0x20>)
   e1104:	2300      	movs	r3, #0
   e1106:	4604      	mov	r4, r0
   e1108:	4608      	mov	r0, r1
   e110a:	4611      	mov	r1, r2
   e110c:	602b      	str	r3, [r5, #0]
   e110e:	f7fa ff27 	bl	dbf60 <_fstat>
   e1112:	1c43      	adds	r3, r0, #1
   e1114:	d102      	bne.n	e111c <_fstat_r+0x1c>
   e1116:	682b      	ldr	r3, [r5, #0]
   e1118:	b103      	cbz	r3, e111c <_fstat_r+0x1c>
   e111a:	6023      	str	r3, [r4, #0]
   e111c:	bd38      	pop	{r3, r4, r5, pc}
   e111e:	bf00      	nop
   e1120:	2003e7ec 	.word	0x2003e7ec

000e1124 <rshift>:
   e1124:	6903      	ldr	r3, [r0, #16]
   e1126:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   e112a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e112e:	ea4f 1261 	mov.w	r2, r1, asr #5
   e1132:	f100 0414 	add.w	r4, r0, #20
   e1136:	dd45      	ble.n	e11c4 <rshift+0xa0>
   e1138:	f011 011f 	ands.w	r1, r1, #31
   e113c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   e1140:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   e1144:	d10c      	bne.n	e1160 <rshift+0x3c>
   e1146:	f100 0710 	add.w	r7, r0, #16
   e114a:	4629      	mov	r1, r5
   e114c:	42b1      	cmp	r1, r6
   e114e:	d334      	bcc.n	e11ba <rshift+0x96>
   e1150:	1a9b      	subs	r3, r3, r2
   e1152:	009b      	lsls	r3, r3, #2
   e1154:	1eea      	subs	r2, r5, #3
   e1156:	4296      	cmp	r6, r2
   e1158:	bf38      	it	cc
   e115a:	2300      	movcc	r3, #0
   e115c:	4423      	add	r3, r4
   e115e:	e015      	b.n	e118c <rshift+0x68>
   e1160:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   e1164:	f1c1 0820 	rsb	r8, r1, #32
   e1168:	40cf      	lsrs	r7, r1
   e116a:	f105 0e04 	add.w	lr, r5, #4
   e116e:	46a1      	mov	r9, r4
   e1170:	4576      	cmp	r6, lr
   e1172:	46f4      	mov	ip, lr
   e1174:	d815      	bhi.n	e11a2 <rshift+0x7e>
   e1176:	1a9b      	subs	r3, r3, r2
   e1178:	009a      	lsls	r2, r3, #2
   e117a:	3a04      	subs	r2, #4
   e117c:	3501      	adds	r5, #1
   e117e:	42ae      	cmp	r6, r5
   e1180:	bf38      	it	cc
   e1182:	2200      	movcc	r2, #0
   e1184:	18a3      	adds	r3, r4, r2
   e1186:	50a7      	str	r7, [r4, r2]
   e1188:	b107      	cbz	r7, e118c <rshift+0x68>
   e118a:	3304      	adds	r3, #4
   e118c:	1b1a      	subs	r2, r3, r4
   e118e:	42a3      	cmp	r3, r4
   e1190:	ea4f 02a2 	mov.w	r2, r2, asr #2
   e1194:	bf08      	it	eq
   e1196:	2300      	moveq	r3, #0
   e1198:	6102      	str	r2, [r0, #16]
   e119a:	bf08      	it	eq
   e119c:	6143      	streq	r3, [r0, #20]
   e119e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e11a2:	f8dc c000 	ldr.w	ip, [ip]
   e11a6:	fa0c fc08 	lsl.w	ip, ip, r8
   e11aa:	ea4c 0707 	orr.w	r7, ip, r7
   e11ae:	f849 7b04 	str.w	r7, [r9], #4
   e11b2:	f85e 7b04 	ldr.w	r7, [lr], #4
   e11b6:	40cf      	lsrs	r7, r1
   e11b8:	e7da      	b.n	e1170 <rshift+0x4c>
   e11ba:	f851 cb04 	ldr.w	ip, [r1], #4
   e11be:	f847 cf04 	str.w	ip, [r7, #4]!
   e11c2:	e7c3      	b.n	e114c <rshift+0x28>
   e11c4:	4623      	mov	r3, r4
   e11c6:	e7e1      	b.n	e118c <rshift+0x68>

000e11c8 <__hexdig_fun>:
   e11c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e11cc:	2b09      	cmp	r3, #9
   e11ce:	d802      	bhi.n	e11d6 <__hexdig_fun+0xe>
   e11d0:	3820      	subs	r0, #32
   e11d2:	b2c0      	uxtb	r0, r0
   e11d4:	4770      	bx	lr
   e11d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e11da:	2b05      	cmp	r3, #5
   e11dc:	d801      	bhi.n	e11e2 <__hexdig_fun+0x1a>
   e11de:	3847      	subs	r0, #71	; 0x47
   e11e0:	e7f7      	b.n	e11d2 <__hexdig_fun+0xa>
   e11e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e11e6:	2b05      	cmp	r3, #5
   e11e8:	d801      	bhi.n	e11ee <__hexdig_fun+0x26>
   e11ea:	3827      	subs	r0, #39	; 0x27
   e11ec:	e7f1      	b.n	e11d2 <__hexdig_fun+0xa>
   e11ee:	2000      	movs	r0, #0
   e11f0:	4770      	bx	lr
	...

000e11f4 <__gethex>:
   e11f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e11f8:	ed2d 8b02 	vpush	{d8}
   e11fc:	b089      	sub	sp, #36	; 0x24
   e11fe:	ee08 0a10 	vmov	s16, r0
   e1202:	9304      	str	r3, [sp, #16]
   e1204:	4bbc      	ldr	r3, [pc, #752]	; (e14f8 <__gethex+0x304>)
   e1206:	681b      	ldr	r3, [r3, #0]
   e1208:	9301      	str	r3, [sp, #4]
   e120a:	4618      	mov	r0, r3
   e120c:	468b      	mov	fp, r1
   e120e:	4690      	mov	r8, r2
   e1210:	f7fe ff73 	bl	e00fa <strlen>
   e1214:	9b01      	ldr	r3, [sp, #4]
   e1216:	f8db 2000 	ldr.w	r2, [fp]
   e121a:	4403      	add	r3, r0
   e121c:	4682      	mov	sl, r0
   e121e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e1222:	9305      	str	r3, [sp, #20]
   e1224:	1c93      	adds	r3, r2, #2
   e1226:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   e122a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   e122e:	32fe      	adds	r2, #254	; 0xfe
   e1230:	18d1      	adds	r1, r2, r3
   e1232:	461f      	mov	r7, r3
   e1234:	f813 0b01 	ldrb.w	r0, [r3], #1
   e1238:	9100      	str	r1, [sp, #0]
   e123a:	2830      	cmp	r0, #48	; 0x30
   e123c:	d0f8      	beq.n	e1230 <__gethex+0x3c>
   e123e:	f7ff ffc3 	bl	e11c8 <__hexdig_fun>
   e1242:	4604      	mov	r4, r0
   e1244:	2800      	cmp	r0, #0
   e1246:	d13a      	bne.n	e12be <__gethex+0xca>
   e1248:	9901      	ldr	r1, [sp, #4]
   e124a:	4652      	mov	r2, sl
   e124c:	4638      	mov	r0, r7
   e124e:	f7fe ff5c 	bl	e010a <strncmp>
   e1252:	4605      	mov	r5, r0
   e1254:	2800      	cmp	r0, #0
   e1256:	d168      	bne.n	e132a <__gethex+0x136>
   e1258:	f817 000a 	ldrb.w	r0, [r7, sl]
   e125c:	eb07 060a 	add.w	r6, r7, sl
   e1260:	f7ff ffb2 	bl	e11c8 <__hexdig_fun>
   e1264:	2800      	cmp	r0, #0
   e1266:	d062      	beq.n	e132e <__gethex+0x13a>
   e1268:	4633      	mov	r3, r6
   e126a:	7818      	ldrb	r0, [r3, #0]
   e126c:	2830      	cmp	r0, #48	; 0x30
   e126e:	461f      	mov	r7, r3
   e1270:	f103 0301 	add.w	r3, r3, #1
   e1274:	d0f9      	beq.n	e126a <__gethex+0x76>
   e1276:	f7ff ffa7 	bl	e11c8 <__hexdig_fun>
   e127a:	2301      	movs	r3, #1
   e127c:	fab0 f480 	clz	r4, r0
   e1280:	0964      	lsrs	r4, r4, #5
   e1282:	4635      	mov	r5, r6
   e1284:	9300      	str	r3, [sp, #0]
   e1286:	463a      	mov	r2, r7
   e1288:	4616      	mov	r6, r2
   e128a:	3201      	adds	r2, #1
   e128c:	7830      	ldrb	r0, [r6, #0]
   e128e:	f7ff ff9b 	bl	e11c8 <__hexdig_fun>
   e1292:	2800      	cmp	r0, #0
   e1294:	d1f8      	bne.n	e1288 <__gethex+0x94>
   e1296:	9901      	ldr	r1, [sp, #4]
   e1298:	4652      	mov	r2, sl
   e129a:	4630      	mov	r0, r6
   e129c:	f7fe ff35 	bl	e010a <strncmp>
   e12a0:	b980      	cbnz	r0, e12c4 <__gethex+0xd0>
   e12a2:	b94d      	cbnz	r5, e12b8 <__gethex+0xc4>
   e12a4:	eb06 050a 	add.w	r5, r6, sl
   e12a8:	462a      	mov	r2, r5
   e12aa:	4616      	mov	r6, r2
   e12ac:	3201      	adds	r2, #1
   e12ae:	7830      	ldrb	r0, [r6, #0]
   e12b0:	f7ff ff8a 	bl	e11c8 <__hexdig_fun>
   e12b4:	2800      	cmp	r0, #0
   e12b6:	d1f8      	bne.n	e12aa <__gethex+0xb6>
   e12b8:	1bad      	subs	r5, r5, r6
   e12ba:	00ad      	lsls	r5, r5, #2
   e12bc:	e004      	b.n	e12c8 <__gethex+0xd4>
   e12be:	2400      	movs	r4, #0
   e12c0:	4625      	mov	r5, r4
   e12c2:	e7e0      	b.n	e1286 <__gethex+0x92>
   e12c4:	2d00      	cmp	r5, #0
   e12c6:	d1f7      	bne.n	e12b8 <__gethex+0xc4>
   e12c8:	7833      	ldrb	r3, [r6, #0]
   e12ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   e12ce:	2b50      	cmp	r3, #80	; 0x50
   e12d0:	d13b      	bne.n	e134a <__gethex+0x156>
   e12d2:	7873      	ldrb	r3, [r6, #1]
   e12d4:	2b2b      	cmp	r3, #43	; 0x2b
   e12d6:	d02c      	beq.n	e1332 <__gethex+0x13e>
   e12d8:	2b2d      	cmp	r3, #45	; 0x2d
   e12da:	d02e      	beq.n	e133a <__gethex+0x146>
   e12dc:	1c71      	adds	r1, r6, #1
   e12de:	f04f 0900 	mov.w	r9, #0
   e12e2:	7808      	ldrb	r0, [r1, #0]
   e12e4:	f7ff ff70 	bl	e11c8 <__hexdig_fun>
   e12e8:	1e43      	subs	r3, r0, #1
   e12ea:	b2db      	uxtb	r3, r3
   e12ec:	2b18      	cmp	r3, #24
   e12ee:	d82c      	bhi.n	e134a <__gethex+0x156>
   e12f0:	f1a0 0210 	sub.w	r2, r0, #16
   e12f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e12f8:	f7ff ff66 	bl	e11c8 <__hexdig_fun>
   e12fc:	1e43      	subs	r3, r0, #1
   e12fe:	b2db      	uxtb	r3, r3
   e1300:	2b18      	cmp	r3, #24
   e1302:	d91d      	bls.n	e1340 <__gethex+0x14c>
   e1304:	f1b9 0f00 	cmp.w	r9, #0
   e1308:	d000      	beq.n	e130c <__gethex+0x118>
   e130a:	4252      	negs	r2, r2
   e130c:	4415      	add	r5, r2
   e130e:	f8cb 1000 	str.w	r1, [fp]
   e1312:	b1e4      	cbz	r4, e134e <__gethex+0x15a>
   e1314:	9b00      	ldr	r3, [sp, #0]
   e1316:	2b00      	cmp	r3, #0
   e1318:	bf14      	ite	ne
   e131a:	2700      	movne	r7, #0
   e131c:	2706      	moveq	r7, #6
   e131e:	4638      	mov	r0, r7
   e1320:	b009      	add	sp, #36	; 0x24
   e1322:	ecbd 8b02 	vpop	{d8}
   e1326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e132a:	463e      	mov	r6, r7
   e132c:	4625      	mov	r5, r4
   e132e:	2401      	movs	r4, #1
   e1330:	e7ca      	b.n	e12c8 <__gethex+0xd4>
   e1332:	f04f 0900 	mov.w	r9, #0
   e1336:	1cb1      	adds	r1, r6, #2
   e1338:	e7d3      	b.n	e12e2 <__gethex+0xee>
   e133a:	f04f 0901 	mov.w	r9, #1
   e133e:	e7fa      	b.n	e1336 <__gethex+0x142>
   e1340:	230a      	movs	r3, #10
   e1342:	fb03 0202 	mla	r2, r3, r2, r0
   e1346:	3a10      	subs	r2, #16
   e1348:	e7d4      	b.n	e12f4 <__gethex+0x100>
   e134a:	4631      	mov	r1, r6
   e134c:	e7df      	b.n	e130e <__gethex+0x11a>
   e134e:	1bf3      	subs	r3, r6, r7
   e1350:	3b01      	subs	r3, #1
   e1352:	4621      	mov	r1, r4
   e1354:	2b07      	cmp	r3, #7
   e1356:	dc52      	bgt.n	e13fe <__gethex+0x20a>
   e1358:	ee18 0a10 	vmov	r0, s16
   e135c:	f000 fa7a 	bl	e1854 <_Balloc>
   e1360:	f04f 0b00 	mov.w	fp, #0
   e1364:	f100 0914 	add.w	r9, r0, #20
   e1368:	f1ca 0301 	rsb	r3, sl, #1
   e136c:	4604      	mov	r4, r0
   e136e:	f8cd 9008 	str.w	r9, [sp, #8]
   e1372:	f8cd b000 	str.w	fp, [sp]
   e1376:	9306      	str	r3, [sp, #24]
   e1378:	42b7      	cmp	r7, r6
   e137a:	d343      	bcc.n	e1404 <__gethex+0x210>
   e137c:	9802      	ldr	r0, [sp, #8]
   e137e:	9b00      	ldr	r3, [sp, #0]
   e1380:	f840 3b04 	str.w	r3, [r0], #4
   e1384:	eba0 0009 	sub.w	r0, r0, r9
   e1388:	1080      	asrs	r0, r0, #2
   e138a:	0146      	lsls	r6, r0, #5
   e138c:	6120      	str	r0, [r4, #16]
   e138e:	4618      	mov	r0, r3
   e1390:	f000 fb27 	bl	e19e2 <__hi0bits>
   e1394:	1a30      	subs	r0, r6, r0
   e1396:	f8d8 6000 	ldr.w	r6, [r8]
   e139a:	42b0      	cmp	r0, r6
   e139c:	dd66      	ble.n	e146c <__gethex+0x278>
   e139e:	1b87      	subs	r7, r0, r6
   e13a0:	4639      	mov	r1, r7
   e13a2:	4620      	mov	r0, r4
   e13a4:	f000 fe74 	bl	e2090 <__any_on>
   e13a8:	4682      	mov	sl, r0
   e13aa:	b1a8      	cbz	r0, e13d8 <__gethex+0x1e4>
   e13ac:	1e7b      	subs	r3, r7, #1
   e13ae:	1159      	asrs	r1, r3, #5
   e13b0:	f003 021f 	and.w	r2, r3, #31
   e13b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   e13b8:	f04f 0a01 	mov.w	sl, #1
   e13bc:	fa0a f202 	lsl.w	r2, sl, r2
   e13c0:	420a      	tst	r2, r1
   e13c2:	d009      	beq.n	e13d8 <__gethex+0x1e4>
   e13c4:	4553      	cmp	r3, sl
   e13c6:	dd05      	ble.n	e13d4 <__gethex+0x1e0>
   e13c8:	1eb9      	subs	r1, r7, #2
   e13ca:	4620      	mov	r0, r4
   e13cc:	f000 fe60 	bl	e2090 <__any_on>
   e13d0:	2800      	cmp	r0, #0
   e13d2:	d148      	bne.n	e1466 <__gethex+0x272>
   e13d4:	f04f 0a02 	mov.w	sl, #2
   e13d8:	4639      	mov	r1, r7
   e13da:	4620      	mov	r0, r4
   e13dc:	f7ff fea2 	bl	e1124 <rshift>
   e13e0:	443d      	add	r5, r7
   e13e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e13e6:	42ab      	cmp	r3, r5
   e13e8:	da4f      	bge.n	e148a <__gethex+0x296>
   e13ea:	ee18 0a10 	vmov	r0, s16
   e13ee:	4621      	mov	r1, r4
   e13f0:	f000 fa64 	bl	e18bc <_Bfree>
   e13f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e13f6:	2300      	movs	r3, #0
   e13f8:	6013      	str	r3, [r2, #0]
   e13fa:	27a3      	movs	r7, #163	; 0xa3
   e13fc:	e78f      	b.n	e131e <__gethex+0x12a>
   e13fe:	3101      	adds	r1, #1
   e1400:	105b      	asrs	r3, r3, #1
   e1402:	e7a7      	b.n	e1354 <__gethex+0x160>
   e1404:	1e73      	subs	r3, r6, #1
   e1406:	9a05      	ldr	r2, [sp, #20]
   e1408:	9303      	str	r3, [sp, #12]
   e140a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e140e:	4293      	cmp	r3, r2
   e1410:	d019      	beq.n	e1446 <__gethex+0x252>
   e1412:	f1bb 0f20 	cmp.w	fp, #32
   e1416:	d107      	bne.n	e1428 <__gethex+0x234>
   e1418:	9b02      	ldr	r3, [sp, #8]
   e141a:	9a00      	ldr	r2, [sp, #0]
   e141c:	f843 2b04 	str.w	r2, [r3], #4
   e1420:	9302      	str	r3, [sp, #8]
   e1422:	2300      	movs	r3, #0
   e1424:	9300      	str	r3, [sp, #0]
   e1426:	469b      	mov	fp, r3
   e1428:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e142c:	f7ff fecc 	bl	e11c8 <__hexdig_fun>
   e1430:	9b00      	ldr	r3, [sp, #0]
   e1432:	f000 000f 	and.w	r0, r0, #15
   e1436:	fa00 f00b 	lsl.w	r0, r0, fp
   e143a:	4303      	orrs	r3, r0
   e143c:	9300      	str	r3, [sp, #0]
   e143e:	f10b 0b04 	add.w	fp, fp, #4
   e1442:	9b03      	ldr	r3, [sp, #12]
   e1444:	e00d      	b.n	e1462 <__gethex+0x26e>
   e1446:	9b03      	ldr	r3, [sp, #12]
   e1448:	9a06      	ldr	r2, [sp, #24]
   e144a:	4413      	add	r3, r2
   e144c:	42bb      	cmp	r3, r7
   e144e:	d3e0      	bcc.n	e1412 <__gethex+0x21e>
   e1450:	4618      	mov	r0, r3
   e1452:	9901      	ldr	r1, [sp, #4]
   e1454:	9307      	str	r3, [sp, #28]
   e1456:	4652      	mov	r2, sl
   e1458:	f7fe fe57 	bl	e010a <strncmp>
   e145c:	9b07      	ldr	r3, [sp, #28]
   e145e:	2800      	cmp	r0, #0
   e1460:	d1d7      	bne.n	e1412 <__gethex+0x21e>
   e1462:	461e      	mov	r6, r3
   e1464:	e788      	b.n	e1378 <__gethex+0x184>
   e1466:	f04f 0a03 	mov.w	sl, #3
   e146a:	e7b5      	b.n	e13d8 <__gethex+0x1e4>
   e146c:	da0a      	bge.n	e1484 <__gethex+0x290>
   e146e:	1a37      	subs	r7, r6, r0
   e1470:	4621      	mov	r1, r4
   e1472:	ee18 0a10 	vmov	r0, s16
   e1476:	463a      	mov	r2, r7
   e1478:	f000 fbf6 	bl	e1c68 <__lshift>
   e147c:	1bed      	subs	r5, r5, r7
   e147e:	4604      	mov	r4, r0
   e1480:	f100 0914 	add.w	r9, r0, #20
   e1484:	f04f 0a00 	mov.w	sl, #0
   e1488:	e7ab      	b.n	e13e2 <__gethex+0x1ee>
   e148a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e148e:	42a8      	cmp	r0, r5
   e1490:	dd6d      	ble.n	e156e <__gethex+0x37a>
   e1492:	1b45      	subs	r5, r0, r5
   e1494:	42ae      	cmp	r6, r5
   e1496:	dc31      	bgt.n	e14fc <__gethex+0x308>
   e1498:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e149c:	2b02      	cmp	r3, #2
   e149e:	d023      	beq.n	e14e8 <__gethex+0x2f4>
   e14a0:	2b03      	cmp	r3, #3
   e14a2:	d025      	beq.n	e14f0 <__gethex+0x2fc>
   e14a4:	2b01      	cmp	r3, #1
   e14a6:	d115      	bne.n	e14d4 <__gethex+0x2e0>
   e14a8:	42ae      	cmp	r6, r5
   e14aa:	d113      	bne.n	e14d4 <__gethex+0x2e0>
   e14ac:	2e01      	cmp	r6, #1
   e14ae:	d10b      	bne.n	e14c8 <__gethex+0x2d4>
   e14b0:	9a04      	ldr	r2, [sp, #16]
   e14b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e14b6:	6013      	str	r3, [r2, #0]
   e14b8:	2301      	movs	r3, #1
   e14ba:	6123      	str	r3, [r4, #16]
   e14bc:	f8c9 3000 	str.w	r3, [r9]
   e14c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e14c2:	2762      	movs	r7, #98	; 0x62
   e14c4:	601c      	str	r4, [r3, #0]
   e14c6:	e72a      	b.n	e131e <__gethex+0x12a>
   e14c8:	1e71      	subs	r1, r6, #1
   e14ca:	4620      	mov	r0, r4
   e14cc:	f000 fde0 	bl	e2090 <__any_on>
   e14d0:	2800      	cmp	r0, #0
   e14d2:	d1ed      	bne.n	e14b0 <__gethex+0x2bc>
   e14d4:	ee18 0a10 	vmov	r0, s16
   e14d8:	4621      	mov	r1, r4
   e14da:	f000 f9ef 	bl	e18bc <_Bfree>
   e14de:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e14e0:	2300      	movs	r3, #0
   e14e2:	6013      	str	r3, [r2, #0]
   e14e4:	2750      	movs	r7, #80	; 0x50
   e14e6:	e71a      	b.n	e131e <__gethex+0x12a>
   e14e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e14ea:	2b00      	cmp	r3, #0
   e14ec:	d1f2      	bne.n	e14d4 <__gethex+0x2e0>
   e14ee:	e7df      	b.n	e14b0 <__gethex+0x2bc>
   e14f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e14f2:	2b00      	cmp	r3, #0
   e14f4:	d1dc      	bne.n	e14b0 <__gethex+0x2bc>
   e14f6:	e7ed      	b.n	e14d4 <__gethex+0x2e0>
   e14f8:	000e30ec 	.word	0x000e30ec
   e14fc:	1e6f      	subs	r7, r5, #1
   e14fe:	f1ba 0f00 	cmp.w	sl, #0
   e1502:	d131      	bne.n	e1568 <__gethex+0x374>
   e1504:	b127      	cbz	r7, e1510 <__gethex+0x31c>
   e1506:	4639      	mov	r1, r7
   e1508:	4620      	mov	r0, r4
   e150a:	f000 fdc1 	bl	e2090 <__any_on>
   e150e:	4682      	mov	sl, r0
   e1510:	117b      	asrs	r3, r7, #5
   e1512:	2101      	movs	r1, #1
   e1514:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   e1518:	f007 071f 	and.w	r7, r7, #31
   e151c:	fa01 f707 	lsl.w	r7, r1, r7
   e1520:	421f      	tst	r7, r3
   e1522:	4629      	mov	r1, r5
   e1524:	4620      	mov	r0, r4
   e1526:	bf18      	it	ne
   e1528:	f04a 0a02 	orrne.w	sl, sl, #2
   e152c:	1b76      	subs	r6, r6, r5
   e152e:	f7ff fdf9 	bl	e1124 <rshift>
   e1532:	f8d8 5004 	ldr.w	r5, [r8, #4]
   e1536:	2702      	movs	r7, #2
   e1538:	f1ba 0f00 	cmp.w	sl, #0
   e153c:	d048      	beq.n	e15d0 <__gethex+0x3dc>
   e153e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e1542:	2b02      	cmp	r3, #2
   e1544:	d015      	beq.n	e1572 <__gethex+0x37e>
   e1546:	2b03      	cmp	r3, #3
   e1548:	d017      	beq.n	e157a <__gethex+0x386>
   e154a:	2b01      	cmp	r3, #1
   e154c:	d109      	bne.n	e1562 <__gethex+0x36e>
   e154e:	f01a 0f02 	tst.w	sl, #2
   e1552:	d006      	beq.n	e1562 <__gethex+0x36e>
   e1554:	f8d9 0000 	ldr.w	r0, [r9]
   e1558:	ea4a 0a00 	orr.w	sl, sl, r0
   e155c:	f01a 0f01 	tst.w	sl, #1
   e1560:	d10e      	bne.n	e1580 <__gethex+0x38c>
   e1562:	f047 0710 	orr.w	r7, r7, #16
   e1566:	e033      	b.n	e15d0 <__gethex+0x3dc>
   e1568:	f04f 0a01 	mov.w	sl, #1
   e156c:	e7d0      	b.n	e1510 <__gethex+0x31c>
   e156e:	2701      	movs	r7, #1
   e1570:	e7e2      	b.n	e1538 <__gethex+0x344>
   e1572:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e1574:	f1c3 0301 	rsb	r3, r3, #1
   e1578:	9315      	str	r3, [sp, #84]	; 0x54
   e157a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e157c:	2b00      	cmp	r3, #0
   e157e:	d0f0      	beq.n	e1562 <__gethex+0x36e>
   e1580:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e1584:	f104 0314 	add.w	r3, r4, #20
   e1588:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   e158c:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   e1590:	f04f 0c00 	mov.w	ip, #0
   e1594:	4618      	mov	r0, r3
   e1596:	f853 2b04 	ldr.w	r2, [r3], #4
   e159a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   e159e:	d01c      	beq.n	e15da <__gethex+0x3e6>
   e15a0:	3201      	adds	r2, #1
   e15a2:	6002      	str	r2, [r0, #0]
   e15a4:	2f02      	cmp	r7, #2
   e15a6:	f104 0314 	add.w	r3, r4, #20
   e15aa:	d13a      	bne.n	e1622 <__gethex+0x42e>
   e15ac:	f8d8 2000 	ldr.w	r2, [r8]
   e15b0:	3a01      	subs	r2, #1
   e15b2:	42b2      	cmp	r2, r6
   e15b4:	d10a      	bne.n	e15cc <__gethex+0x3d8>
   e15b6:	1171      	asrs	r1, r6, #5
   e15b8:	2201      	movs	r2, #1
   e15ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   e15be:	f006 061f 	and.w	r6, r6, #31
   e15c2:	fa02 f606 	lsl.w	r6, r2, r6
   e15c6:	421e      	tst	r6, r3
   e15c8:	bf18      	it	ne
   e15ca:	4617      	movne	r7, r2
   e15cc:	f047 0720 	orr.w	r7, r7, #32
   e15d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e15d2:	601c      	str	r4, [r3, #0]
   e15d4:	9b04      	ldr	r3, [sp, #16]
   e15d6:	601d      	str	r5, [r3, #0]
   e15d8:	e6a1      	b.n	e131e <__gethex+0x12a>
   e15da:	4299      	cmp	r1, r3
   e15dc:	f843 cc04 	str.w	ip, [r3, #-4]
   e15e0:	d8d8      	bhi.n	e1594 <__gethex+0x3a0>
   e15e2:	68a3      	ldr	r3, [r4, #8]
   e15e4:	4599      	cmp	r9, r3
   e15e6:	db14      	blt.n	e1612 <__gethex+0x41e>
   e15e8:	6861      	ldr	r1, [r4, #4]
   e15ea:	ee18 0a10 	vmov	r0, s16
   e15ee:	3101      	adds	r1, #1
   e15f0:	f000 f930 	bl	e1854 <_Balloc>
   e15f4:	6922      	ldr	r2, [r4, #16]
   e15f6:	3202      	adds	r2, #2
   e15f8:	f104 010c 	add.w	r1, r4, #12
   e15fc:	4682      	mov	sl, r0
   e15fe:	0092      	lsls	r2, r2, #2
   e1600:	300c      	adds	r0, #12
   e1602:	f7fe fcc7 	bl	dff94 <memcpy>
   e1606:	4621      	mov	r1, r4
   e1608:	ee18 0a10 	vmov	r0, s16
   e160c:	f000 f956 	bl	e18bc <_Bfree>
   e1610:	4654      	mov	r4, sl
   e1612:	6923      	ldr	r3, [r4, #16]
   e1614:	1c5a      	adds	r2, r3, #1
   e1616:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   e161a:	6122      	str	r2, [r4, #16]
   e161c:	2201      	movs	r2, #1
   e161e:	615a      	str	r2, [r3, #20]
   e1620:	e7c0      	b.n	e15a4 <__gethex+0x3b0>
   e1622:	6922      	ldr	r2, [r4, #16]
   e1624:	454a      	cmp	r2, r9
   e1626:	dd0b      	ble.n	e1640 <__gethex+0x44c>
   e1628:	2101      	movs	r1, #1
   e162a:	4620      	mov	r0, r4
   e162c:	f7ff fd7a 	bl	e1124 <rshift>
   e1630:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e1634:	3501      	adds	r5, #1
   e1636:	42ab      	cmp	r3, r5
   e1638:	f6ff aed7 	blt.w	e13ea <__gethex+0x1f6>
   e163c:	2701      	movs	r7, #1
   e163e:	e7c5      	b.n	e15cc <__gethex+0x3d8>
   e1640:	f016 061f 	ands.w	r6, r6, #31
   e1644:	d0fa      	beq.n	e163c <__gethex+0x448>
   e1646:	449b      	add	fp, r3
   e1648:	f1c6 0620 	rsb	r6, r6, #32
   e164c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   e1650:	f000 f9c7 	bl	e19e2 <__hi0bits>
   e1654:	42b0      	cmp	r0, r6
   e1656:	dbe7      	blt.n	e1628 <__gethex+0x434>
   e1658:	e7f0      	b.n	e163c <__gethex+0x448>
   e165a:	bf00      	nop

000e165c <L_shift>:
   e165c:	f1c2 0208 	rsb	r2, r2, #8
   e1660:	0092      	lsls	r2, r2, #2
   e1662:	b570      	push	{r4, r5, r6, lr}
   e1664:	f1c2 0620 	rsb	r6, r2, #32
   e1668:	6843      	ldr	r3, [r0, #4]
   e166a:	6804      	ldr	r4, [r0, #0]
   e166c:	fa03 f506 	lsl.w	r5, r3, r6
   e1670:	432c      	orrs	r4, r5
   e1672:	40d3      	lsrs	r3, r2
   e1674:	6004      	str	r4, [r0, #0]
   e1676:	f840 3f04 	str.w	r3, [r0, #4]!
   e167a:	4288      	cmp	r0, r1
   e167c:	d3f4      	bcc.n	e1668 <L_shift+0xc>
   e167e:	bd70      	pop	{r4, r5, r6, pc}

000e1680 <__match>:
   e1680:	b530      	push	{r4, r5, lr}
   e1682:	6803      	ldr	r3, [r0, #0]
   e1684:	3301      	adds	r3, #1
   e1686:	f811 4b01 	ldrb.w	r4, [r1], #1
   e168a:	b914      	cbnz	r4, e1692 <__match+0x12>
   e168c:	6003      	str	r3, [r0, #0]
   e168e:	2001      	movs	r0, #1
   e1690:	bd30      	pop	{r4, r5, pc}
   e1692:	f813 2b01 	ldrb.w	r2, [r3], #1
   e1696:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e169a:	2d19      	cmp	r5, #25
   e169c:	bf98      	it	ls
   e169e:	3220      	addls	r2, #32
   e16a0:	42a2      	cmp	r2, r4
   e16a2:	d0f0      	beq.n	e1686 <__match+0x6>
   e16a4:	2000      	movs	r0, #0
   e16a6:	e7f3      	b.n	e1690 <__match+0x10>

000e16a8 <__hexnan>:
   e16a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e16ac:	680b      	ldr	r3, [r1, #0]
   e16ae:	6801      	ldr	r1, [r0, #0]
   e16b0:	115e      	asrs	r6, r3, #5
   e16b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e16b6:	f013 031f 	ands.w	r3, r3, #31
   e16ba:	b087      	sub	sp, #28
   e16bc:	bf18      	it	ne
   e16be:	3604      	addne	r6, #4
   e16c0:	2500      	movs	r5, #0
   e16c2:	1f37      	subs	r7, r6, #4
   e16c4:	4682      	mov	sl, r0
   e16c6:	4690      	mov	r8, r2
   e16c8:	9301      	str	r3, [sp, #4]
   e16ca:	f846 5c04 	str.w	r5, [r6, #-4]
   e16ce:	46b9      	mov	r9, r7
   e16d0:	463c      	mov	r4, r7
   e16d2:	9502      	str	r5, [sp, #8]
   e16d4:	46ab      	mov	fp, r5
   e16d6:	784a      	ldrb	r2, [r1, #1]
   e16d8:	1c4b      	adds	r3, r1, #1
   e16da:	9303      	str	r3, [sp, #12]
   e16dc:	b342      	cbz	r2, e1730 <__hexnan+0x88>
   e16de:	4610      	mov	r0, r2
   e16e0:	9105      	str	r1, [sp, #20]
   e16e2:	9204      	str	r2, [sp, #16]
   e16e4:	f7ff fd70 	bl	e11c8 <__hexdig_fun>
   e16e8:	2800      	cmp	r0, #0
   e16ea:	d14f      	bne.n	e178c <__hexnan+0xe4>
   e16ec:	9a04      	ldr	r2, [sp, #16]
   e16ee:	9905      	ldr	r1, [sp, #20]
   e16f0:	2a20      	cmp	r2, #32
   e16f2:	d818      	bhi.n	e1726 <__hexnan+0x7e>
   e16f4:	9b02      	ldr	r3, [sp, #8]
   e16f6:	459b      	cmp	fp, r3
   e16f8:	dd13      	ble.n	e1722 <__hexnan+0x7a>
   e16fa:	454c      	cmp	r4, r9
   e16fc:	d206      	bcs.n	e170c <__hexnan+0x64>
   e16fe:	2d07      	cmp	r5, #7
   e1700:	dc04      	bgt.n	e170c <__hexnan+0x64>
   e1702:	462a      	mov	r2, r5
   e1704:	4649      	mov	r1, r9
   e1706:	4620      	mov	r0, r4
   e1708:	f7ff ffa8 	bl	e165c <L_shift>
   e170c:	4544      	cmp	r4, r8
   e170e:	d950      	bls.n	e17b2 <__hexnan+0x10a>
   e1710:	2300      	movs	r3, #0
   e1712:	f1a4 0904 	sub.w	r9, r4, #4
   e1716:	f844 3c04 	str.w	r3, [r4, #-4]
   e171a:	f8cd b008 	str.w	fp, [sp, #8]
   e171e:	464c      	mov	r4, r9
   e1720:	461d      	mov	r5, r3
   e1722:	9903      	ldr	r1, [sp, #12]
   e1724:	e7d7      	b.n	e16d6 <__hexnan+0x2e>
   e1726:	2a29      	cmp	r2, #41	; 0x29
   e1728:	d156      	bne.n	e17d8 <__hexnan+0x130>
   e172a:	3102      	adds	r1, #2
   e172c:	f8ca 1000 	str.w	r1, [sl]
   e1730:	f1bb 0f00 	cmp.w	fp, #0
   e1734:	d050      	beq.n	e17d8 <__hexnan+0x130>
   e1736:	454c      	cmp	r4, r9
   e1738:	d206      	bcs.n	e1748 <__hexnan+0xa0>
   e173a:	2d07      	cmp	r5, #7
   e173c:	dc04      	bgt.n	e1748 <__hexnan+0xa0>
   e173e:	462a      	mov	r2, r5
   e1740:	4649      	mov	r1, r9
   e1742:	4620      	mov	r0, r4
   e1744:	f7ff ff8a 	bl	e165c <L_shift>
   e1748:	4544      	cmp	r4, r8
   e174a:	d934      	bls.n	e17b6 <__hexnan+0x10e>
   e174c:	f1a8 0204 	sub.w	r2, r8, #4
   e1750:	4623      	mov	r3, r4
   e1752:	f853 1b04 	ldr.w	r1, [r3], #4
   e1756:	f842 1f04 	str.w	r1, [r2, #4]!
   e175a:	429f      	cmp	r7, r3
   e175c:	d2f9      	bcs.n	e1752 <__hexnan+0xaa>
   e175e:	1b3b      	subs	r3, r7, r4
   e1760:	f023 0303 	bic.w	r3, r3, #3
   e1764:	3304      	adds	r3, #4
   e1766:	3401      	adds	r4, #1
   e1768:	3e03      	subs	r6, #3
   e176a:	42b4      	cmp	r4, r6
   e176c:	bf88      	it	hi
   e176e:	2304      	movhi	r3, #4
   e1770:	4443      	add	r3, r8
   e1772:	2200      	movs	r2, #0
   e1774:	f843 2b04 	str.w	r2, [r3], #4
   e1778:	429f      	cmp	r7, r3
   e177a:	d2fb      	bcs.n	e1774 <__hexnan+0xcc>
   e177c:	683b      	ldr	r3, [r7, #0]
   e177e:	b91b      	cbnz	r3, e1788 <__hexnan+0xe0>
   e1780:	4547      	cmp	r7, r8
   e1782:	d127      	bne.n	e17d4 <__hexnan+0x12c>
   e1784:	2301      	movs	r3, #1
   e1786:	603b      	str	r3, [r7, #0]
   e1788:	2005      	movs	r0, #5
   e178a:	e026      	b.n	e17da <__hexnan+0x132>
   e178c:	3501      	adds	r5, #1
   e178e:	2d08      	cmp	r5, #8
   e1790:	f10b 0b01 	add.w	fp, fp, #1
   e1794:	dd06      	ble.n	e17a4 <__hexnan+0xfc>
   e1796:	4544      	cmp	r4, r8
   e1798:	d9c3      	bls.n	e1722 <__hexnan+0x7a>
   e179a:	2300      	movs	r3, #0
   e179c:	f844 3c04 	str.w	r3, [r4, #-4]
   e17a0:	2501      	movs	r5, #1
   e17a2:	3c04      	subs	r4, #4
   e17a4:	6822      	ldr	r2, [r4, #0]
   e17a6:	f000 000f 	and.w	r0, r0, #15
   e17aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   e17ae:	6022      	str	r2, [r4, #0]
   e17b0:	e7b7      	b.n	e1722 <__hexnan+0x7a>
   e17b2:	2508      	movs	r5, #8
   e17b4:	e7b5      	b.n	e1722 <__hexnan+0x7a>
   e17b6:	9b01      	ldr	r3, [sp, #4]
   e17b8:	2b00      	cmp	r3, #0
   e17ba:	d0df      	beq.n	e177c <__hexnan+0xd4>
   e17bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e17c0:	f1c3 0320 	rsb	r3, r3, #32
   e17c4:	fa22 f303 	lsr.w	r3, r2, r3
   e17c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e17cc:	401a      	ands	r2, r3
   e17ce:	f846 2c04 	str.w	r2, [r6, #-4]
   e17d2:	e7d3      	b.n	e177c <__hexnan+0xd4>
   e17d4:	3f04      	subs	r7, #4
   e17d6:	e7d1      	b.n	e177c <__hexnan+0xd4>
   e17d8:	2004      	movs	r0, #4
   e17da:	b007      	add	sp, #28
   e17dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e17e0 <_link_r>:
   e17e0:	b538      	push	{r3, r4, r5, lr}
   e17e2:	4d07      	ldr	r5, [pc, #28]	; (e1800 <_link_r+0x20>)
   e17e4:	2300      	movs	r3, #0
   e17e6:	4604      	mov	r4, r0
   e17e8:	4608      	mov	r0, r1
   e17ea:	4611      	mov	r1, r2
   e17ec:	602b      	str	r3, [r5, #0]
   e17ee:	f7fa fbdf 	bl	dbfb0 <_link>
   e17f2:	1c43      	adds	r3, r0, #1
   e17f4:	d102      	bne.n	e17fc <_link_r+0x1c>
   e17f6:	682b      	ldr	r3, [r5, #0]
   e17f8:	b103      	cbz	r3, e17fc <_link_r+0x1c>
   e17fa:	6023      	str	r3, [r4, #0]
   e17fc:	bd38      	pop	{r3, r4, r5, pc}
   e17fe:	bf00      	nop
   e1800:	2003e7ec 	.word	0x2003e7ec

000e1804 <__retarget_lock_acquire_recursive>:
   e1804:	4770      	bx	lr

000e1806 <__retarget_lock_release>:
   e1806:	4770      	bx	lr

000e1808 <__retarget_lock_release_recursive>:
   e1808:	4770      	bx	lr
	...

000e180c <_lseek_r>:
   e180c:	b538      	push	{r3, r4, r5, lr}
   e180e:	4d07      	ldr	r5, [pc, #28]	; (e182c <_lseek_r+0x20>)
   e1810:	4604      	mov	r4, r0
   e1812:	4608      	mov	r0, r1
   e1814:	4611      	mov	r1, r2
   e1816:	2200      	movs	r2, #0
   e1818:	602a      	str	r2, [r5, #0]
   e181a:	461a      	mov	r2, r3
   e181c:	f7fa fba8 	bl	dbf70 <_lseek>
   e1820:	1c43      	adds	r3, r0, #1
   e1822:	d102      	bne.n	e182a <_lseek_r+0x1e>
   e1824:	682b      	ldr	r3, [r5, #0]
   e1826:	b103      	cbz	r3, e182a <_lseek_r+0x1e>
   e1828:	6023      	str	r3, [r4, #0]
   e182a:	bd38      	pop	{r3, r4, r5, pc}
   e182c:	2003e7ec 	.word	0x2003e7ec

000e1830 <__ascii_mbtowc>:
   e1830:	b082      	sub	sp, #8
   e1832:	b901      	cbnz	r1, e1836 <__ascii_mbtowc+0x6>
   e1834:	a901      	add	r1, sp, #4
   e1836:	b142      	cbz	r2, e184a <__ascii_mbtowc+0x1a>
   e1838:	b14b      	cbz	r3, e184e <__ascii_mbtowc+0x1e>
   e183a:	7813      	ldrb	r3, [r2, #0]
   e183c:	600b      	str	r3, [r1, #0]
   e183e:	7812      	ldrb	r2, [r2, #0]
   e1840:	1e10      	subs	r0, r2, #0
   e1842:	bf18      	it	ne
   e1844:	2001      	movne	r0, #1
   e1846:	b002      	add	sp, #8
   e1848:	4770      	bx	lr
   e184a:	4610      	mov	r0, r2
   e184c:	e7fb      	b.n	e1846 <__ascii_mbtowc+0x16>
   e184e:	f06f 0001 	mvn.w	r0, #1
   e1852:	e7f8      	b.n	e1846 <__ascii_mbtowc+0x16>

000e1854 <_Balloc>:
   e1854:	b570      	push	{r4, r5, r6, lr}
   e1856:	6a46      	ldr	r6, [r0, #36]	; 0x24
   e1858:	4604      	mov	r4, r0
   e185a:	460d      	mov	r5, r1
   e185c:	b93e      	cbnz	r6, e186e <_Balloc+0x1a>
   e185e:	2010      	movs	r0, #16
   e1860:	f7fa fdb6 	bl	dc3d0 <malloc>
   e1864:	e9c0 6601 	strd	r6, r6, [r0, #4]
   e1868:	6260      	str	r0, [r4, #36]	; 0x24
   e186a:	6006      	str	r6, [r0, #0]
   e186c:	60c6      	str	r6, [r0, #12]
   e186e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   e1870:	68f3      	ldr	r3, [r6, #12]
   e1872:	b183      	cbz	r3, e1896 <_Balloc+0x42>
   e1874:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e1876:	68db      	ldr	r3, [r3, #12]
   e1878:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   e187c:	b9b8      	cbnz	r0, e18ae <_Balloc+0x5a>
   e187e:	2101      	movs	r1, #1
   e1880:	fa01 f605 	lsl.w	r6, r1, r5
   e1884:	1d72      	adds	r2, r6, #5
   e1886:	0092      	lsls	r2, r2, #2
   e1888:	4620      	mov	r0, r4
   e188a:	f000 fc22 	bl	e20d2 <_calloc_r>
   e188e:	b160      	cbz	r0, e18aa <_Balloc+0x56>
   e1890:	e9c0 5601 	strd	r5, r6, [r0, #4]
   e1894:	e00e      	b.n	e18b4 <_Balloc+0x60>
   e1896:	2221      	movs	r2, #33	; 0x21
   e1898:	2104      	movs	r1, #4
   e189a:	4620      	mov	r0, r4
   e189c:	f000 fc19 	bl	e20d2 <_calloc_r>
   e18a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e18a2:	60f0      	str	r0, [r6, #12]
   e18a4:	68db      	ldr	r3, [r3, #12]
   e18a6:	2b00      	cmp	r3, #0
   e18a8:	d1e4      	bne.n	e1874 <_Balloc+0x20>
   e18aa:	2000      	movs	r0, #0
   e18ac:	bd70      	pop	{r4, r5, r6, pc}
   e18ae:	6802      	ldr	r2, [r0, #0]
   e18b0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   e18b4:	2300      	movs	r3, #0
   e18b6:	e9c0 3303 	strd	r3, r3, [r0, #12]
   e18ba:	e7f7      	b.n	e18ac <_Balloc+0x58>

000e18bc <_Bfree>:
   e18bc:	b570      	push	{r4, r5, r6, lr}
   e18be:	6a46      	ldr	r6, [r0, #36]	; 0x24
   e18c0:	4605      	mov	r5, r0
   e18c2:	460c      	mov	r4, r1
   e18c4:	b93e      	cbnz	r6, e18d6 <_Bfree+0x1a>
   e18c6:	2010      	movs	r0, #16
   e18c8:	f7fa fd82 	bl	dc3d0 <malloc>
   e18cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   e18d0:	6268      	str	r0, [r5, #36]	; 0x24
   e18d2:	6006      	str	r6, [r0, #0]
   e18d4:	60c6      	str	r6, [r0, #12]
   e18d6:	b13c      	cbz	r4, e18e8 <_Bfree+0x2c>
   e18d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   e18da:	6862      	ldr	r2, [r4, #4]
   e18dc:	68db      	ldr	r3, [r3, #12]
   e18de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e18e2:	6021      	str	r1, [r4, #0]
   e18e4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   e18e8:	bd70      	pop	{r4, r5, r6, pc}

000e18ea <__multadd>:
   e18ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e18ee:	690e      	ldr	r6, [r1, #16]
   e18f0:	4607      	mov	r7, r0
   e18f2:	4698      	mov	r8, r3
   e18f4:	460c      	mov	r4, r1
   e18f6:	f101 0014 	add.w	r0, r1, #20
   e18fa:	2300      	movs	r3, #0
   e18fc:	6805      	ldr	r5, [r0, #0]
   e18fe:	b2a9      	uxth	r1, r5
   e1900:	fb02 8101 	mla	r1, r2, r1, r8
   e1904:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   e1908:	0c2d      	lsrs	r5, r5, #16
   e190a:	fb02 c505 	mla	r5, r2, r5, ip
   e190e:	b289      	uxth	r1, r1
   e1910:	3301      	adds	r3, #1
   e1912:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   e1916:	429e      	cmp	r6, r3
   e1918:	f840 1b04 	str.w	r1, [r0], #4
   e191c:	ea4f 4815 	mov.w	r8, r5, lsr #16
   e1920:	dcec      	bgt.n	e18fc <__multadd+0x12>
   e1922:	f1b8 0f00 	cmp.w	r8, #0
   e1926:	d01b      	beq.n	e1960 <__multadd+0x76>
   e1928:	68a3      	ldr	r3, [r4, #8]
   e192a:	42b3      	cmp	r3, r6
   e192c:	dc12      	bgt.n	e1954 <__multadd+0x6a>
   e192e:	6861      	ldr	r1, [r4, #4]
   e1930:	4638      	mov	r0, r7
   e1932:	3101      	adds	r1, #1
   e1934:	f7ff ff8e 	bl	e1854 <_Balloc>
   e1938:	6922      	ldr	r2, [r4, #16]
   e193a:	3202      	adds	r2, #2
   e193c:	f104 010c 	add.w	r1, r4, #12
   e1940:	4605      	mov	r5, r0
   e1942:	0092      	lsls	r2, r2, #2
   e1944:	300c      	adds	r0, #12
   e1946:	f7fe fb25 	bl	dff94 <memcpy>
   e194a:	4621      	mov	r1, r4
   e194c:	4638      	mov	r0, r7
   e194e:	f7ff ffb5 	bl	e18bc <_Bfree>
   e1952:	462c      	mov	r4, r5
   e1954:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   e1958:	3601      	adds	r6, #1
   e195a:	f8c3 8014 	str.w	r8, [r3, #20]
   e195e:	6126      	str	r6, [r4, #16]
   e1960:	4620      	mov	r0, r4
   e1962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e1966 <__s2b>:
   e1966:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e196a:	460c      	mov	r4, r1
   e196c:	4615      	mov	r5, r2
   e196e:	461f      	mov	r7, r3
   e1970:	2209      	movs	r2, #9
   e1972:	3308      	adds	r3, #8
   e1974:	4606      	mov	r6, r0
   e1976:	fb93 f3f2 	sdiv	r3, r3, r2
   e197a:	2100      	movs	r1, #0
   e197c:	2201      	movs	r2, #1
   e197e:	429a      	cmp	r2, r3
   e1980:	db20      	blt.n	e19c4 <__s2b+0x5e>
   e1982:	4630      	mov	r0, r6
   e1984:	f7ff ff66 	bl	e1854 <_Balloc>
   e1988:	9b08      	ldr	r3, [sp, #32]
   e198a:	6143      	str	r3, [r0, #20]
   e198c:	2d09      	cmp	r5, #9
   e198e:	f04f 0301 	mov.w	r3, #1
   e1992:	6103      	str	r3, [r0, #16]
   e1994:	dd19      	ble.n	e19ca <__s2b+0x64>
   e1996:	f104 0909 	add.w	r9, r4, #9
   e199a:	46c8      	mov	r8, r9
   e199c:	442c      	add	r4, r5
   e199e:	f818 3b01 	ldrb.w	r3, [r8], #1
   e19a2:	4601      	mov	r1, r0
   e19a4:	3b30      	subs	r3, #48	; 0x30
   e19a6:	220a      	movs	r2, #10
   e19a8:	4630      	mov	r0, r6
   e19aa:	f7ff ff9e 	bl	e18ea <__multadd>
   e19ae:	45a0      	cmp	r8, r4
   e19b0:	d1f5      	bne.n	e199e <__s2b+0x38>
   e19b2:	f1a5 0408 	sub.w	r4, r5, #8
   e19b6:	444c      	add	r4, r9
   e19b8:	1b2d      	subs	r5, r5, r4
   e19ba:	1963      	adds	r3, r4, r5
   e19bc:	42bb      	cmp	r3, r7
   e19be:	db07      	blt.n	e19d0 <__s2b+0x6a>
   e19c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e19c4:	0052      	lsls	r2, r2, #1
   e19c6:	3101      	adds	r1, #1
   e19c8:	e7d9      	b.n	e197e <__s2b+0x18>
   e19ca:	340a      	adds	r4, #10
   e19cc:	2509      	movs	r5, #9
   e19ce:	e7f3      	b.n	e19b8 <__s2b+0x52>
   e19d0:	f814 3b01 	ldrb.w	r3, [r4], #1
   e19d4:	4601      	mov	r1, r0
   e19d6:	3b30      	subs	r3, #48	; 0x30
   e19d8:	220a      	movs	r2, #10
   e19da:	4630      	mov	r0, r6
   e19dc:	f7ff ff85 	bl	e18ea <__multadd>
   e19e0:	e7eb      	b.n	e19ba <__s2b+0x54>

000e19e2 <__hi0bits>:
   e19e2:	0c03      	lsrs	r3, r0, #16
   e19e4:	041b      	lsls	r3, r3, #16
   e19e6:	b9d3      	cbnz	r3, e1a1e <__hi0bits+0x3c>
   e19e8:	0400      	lsls	r0, r0, #16
   e19ea:	2310      	movs	r3, #16
   e19ec:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e19f0:	bf04      	itt	eq
   e19f2:	0200      	lsleq	r0, r0, #8
   e19f4:	3308      	addeq	r3, #8
   e19f6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e19fa:	bf04      	itt	eq
   e19fc:	0100      	lsleq	r0, r0, #4
   e19fe:	3304      	addeq	r3, #4
   e1a00:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e1a04:	bf04      	itt	eq
   e1a06:	0080      	lsleq	r0, r0, #2
   e1a08:	3302      	addeq	r3, #2
   e1a0a:	2800      	cmp	r0, #0
   e1a0c:	db05      	blt.n	e1a1a <__hi0bits+0x38>
   e1a0e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   e1a12:	f103 0301 	add.w	r3, r3, #1
   e1a16:	bf08      	it	eq
   e1a18:	2320      	moveq	r3, #32
   e1a1a:	4618      	mov	r0, r3
   e1a1c:	4770      	bx	lr
   e1a1e:	2300      	movs	r3, #0
   e1a20:	e7e4      	b.n	e19ec <__hi0bits+0xa>

000e1a22 <__lo0bits>:
   e1a22:	6803      	ldr	r3, [r0, #0]
   e1a24:	f013 0207 	ands.w	r2, r3, #7
   e1a28:	4601      	mov	r1, r0
   e1a2a:	d00b      	beq.n	e1a44 <__lo0bits+0x22>
   e1a2c:	07da      	lsls	r2, r3, #31
   e1a2e:	d424      	bmi.n	e1a7a <__lo0bits+0x58>
   e1a30:	0798      	lsls	r0, r3, #30
   e1a32:	bf49      	itett	mi
   e1a34:	085b      	lsrmi	r3, r3, #1
   e1a36:	089b      	lsrpl	r3, r3, #2
   e1a38:	2001      	movmi	r0, #1
   e1a3a:	600b      	strmi	r3, [r1, #0]
   e1a3c:	bf5c      	itt	pl
   e1a3e:	600b      	strpl	r3, [r1, #0]
   e1a40:	2002      	movpl	r0, #2
   e1a42:	4770      	bx	lr
   e1a44:	b298      	uxth	r0, r3
   e1a46:	b9b0      	cbnz	r0, e1a76 <__lo0bits+0x54>
   e1a48:	0c1b      	lsrs	r3, r3, #16
   e1a4a:	2010      	movs	r0, #16
   e1a4c:	f013 0fff 	tst.w	r3, #255	; 0xff
   e1a50:	bf04      	itt	eq
   e1a52:	0a1b      	lsreq	r3, r3, #8
   e1a54:	3008      	addeq	r0, #8
   e1a56:	071a      	lsls	r2, r3, #28
   e1a58:	bf04      	itt	eq
   e1a5a:	091b      	lsreq	r3, r3, #4
   e1a5c:	3004      	addeq	r0, #4
   e1a5e:	079a      	lsls	r2, r3, #30
   e1a60:	bf04      	itt	eq
   e1a62:	089b      	lsreq	r3, r3, #2
   e1a64:	3002      	addeq	r0, #2
   e1a66:	07da      	lsls	r2, r3, #31
   e1a68:	d403      	bmi.n	e1a72 <__lo0bits+0x50>
   e1a6a:	085b      	lsrs	r3, r3, #1
   e1a6c:	f100 0001 	add.w	r0, r0, #1
   e1a70:	d005      	beq.n	e1a7e <__lo0bits+0x5c>
   e1a72:	600b      	str	r3, [r1, #0]
   e1a74:	4770      	bx	lr
   e1a76:	4610      	mov	r0, r2
   e1a78:	e7e8      	b.n	e1a4c <__lo0bits+0x2a>
   e1a7a:	2000      	movs	r0, #0
   e1a7c:	4770      	bx	lr
   e1a7e:	2020      	movs	r0, #32
   e1a80:	4770      	bx	lr

000e1a82 <__i2b>:
   e1a82:	b510      	push	{r4, lr}
   e1a84:	460c      	mov	r4, r1
   e1a86:	2101      	movs	r1, #1
   e1a88:	f7ff fee4 	bl	e1854 <_Balloc>
   e1a8c:	2201      	movs	r2, #1
   e1a8e:	6144      	str	r4, [r0, #20]
   e1a90:	6102      	str	r2, [r0, #16]
   e1a92:	bd10      	pop	{r4, pc}

000e1a94 <__multiply>:
   e1a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1a98:	4615      	mov	r5, r2
   e1a9a:	690a      	ldr	r2, [r1, #16]
   e1a9c:	692b      	ldr	r3, [r5, #16]
   e1a9e:	429a      	cmp	r2, r3
   e1aa0:	bfb8      	it	lt
   e1aa2:	460b      	movlt	r3, r1
   e1aa4:	460c      	mov	r4, r1
   e1aa6:	bfbc      	itt	lt
   e1aa8:	462c      	movlt	r4, r5
   e1aaa:	461d      	movlt	r5, r3
   e1aac:	6927      	ldr	r7, [r4, #16]
   e1aae:	f8d5 9010 	ldr.w	r9, [r5, #16]
   e1ab2:	68a3      	ldr	r3, [r4, #8]
   e1ab4:	6861      	ldr	r1, [r4, #4]
   e1ab6:	eb07 0609 	add.w	r6, r7, r9
   e1aba:	42b3      	cmp	r3, r6
   e1abc:	bfb8      	it	lt
   e1abe:	3101      	addlt	r1, #1
   e1ac0:	b085      	sub	sp, #20
   e1ac2:	f7ff fec7 	bl	e1854 <_Balloc>
   e1ac6:	f100 0114 	add.w	r1, r0, #20
   e1aca:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   e1ace:	460b      	mov	r3, r1
   e1ad0:	2200      	movs	r2, #0
   e1ad2:	4543      	cmp	r3, r8
   e1ad4:	d31d      	bcc.n	e1b12 <__multiply+0x7e>
   e1ad6:	f104 0314 	add.w	r3, r4, #20
   e1ada:	f105 0214 	add.w	r2, r5, #20
   e1ade:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   e1ae2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e1ae6:	9302      	str	r3, [sp, #8]
   e1ae8:	1b3b      	subs	r3, r7, r4
   e1aea:	3b15      	subs	r3, #21
   e1aec:	f023 0303 	bic.w	r3, r3, #3
   e1af0:	3304      	adds	r3, #4
   e1af2:	f104 0515 	add.w	r5, r4, #21
   e1af6:	42af      	cmp	r7, r5
   e1af8:	bf38      	it	cc
   e1afa:	2304      	movcc	r3, #4
   e1afc:	9301      	str	r3, [sp, #4]
   e1afe:	9b02      	ldr	r3, [sp, #8]
   e1b00:	9203      	str	r2, [sp, #12]
   e1b02:	4293      	cmp	r3, r2
   e1b04:	d808      	bhi.n	e1b18 <__multiply+0x84>
   e1b06:	2e00      	cmp	r6, #0
   e1b08:	dc5a      	bgt.n	e1bc0 <__multiply+0x12c>
   e1b0a:	6106      	str	r6, [r0, #16]
   e1b0c:	b005      	add	sp, #20
   e1b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1b12:	f843 2b04 	str.w	r2, [r3], #4
   e1b16:	e7dc      	b.n	e1ad2 <__multiply+0x3e>
   e1b18:	f8b2 a000 	ldrh.w	sl, [r2]
   e1b1c:	f1ba 0f00 	cmp.w	sl, #0
   e1b20:	d024      	beq.n	e1b6c <__multiply+0xd8>
   e1b22:	f104 0e14 	add.w	lr, r4, #20
   e1b26:	4689      	mov	r9, r1
   e1b28:	f04f 0c00 	mov.w	ip, #0
   e1b2c:	f85e 5b04 	ldr.w	r5, [lr], #4
   e1b30:	f8d9 b000 	ldr.w	fp, [r9]
   e1b34:	b2ab      	uxth	r3, r5
   e1b36:	fa1f fb8b 	uxth.w	fp, fp
   e1b3a:	fb0a b303 	mla	r3, sl, r3, fp
   e1b3e:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   e1b42:	f8d9 5000 	ldr.w	r5, [r9]
   e1b46:	4463      	add	r3, ip
   e1b48:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   e1b4c:	fb0a c50b 	mla	r5, sl, fp, ip
   e1b50:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   e1b54:	b29b      	uxth	r3, r3
   e1b56:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   e1b5a:	4577      	cmp	r7, lr
   e1b5c:	f849 3b04 	str.w	r3, [r9], #4
   e1b60:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   e1b64:	d8e2      	bhi.n	e1b2c <__multiply+0x98>
   e1b66:	9b01      	ldr	r3, [sp, #4]
   e1b68:	f841 c003 	str.w	ip, [r1, r3]
   e1b6c:	9b03      	ldr	r3, [sp, #12]
   e1b6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   e1b72:	3204      	adds	r2, #4
   e1b74:	f1b9 0f00 	cmp.w	r9, #0
   e1b78:	d020      	beq.n	e1bbc <__multiply+0x128>
   e1b7a:	680b      	ldr	r3, [r1, #0]
   e1b7c:	f104 0c14 	add.w	ip, r4, #20
   e1b80:	468e      	mov	lr, r1
   e1b82:	f04f 0a00 	mov.w	sl, #0
   e1b86:	f8bc 5000 	ldrh.w	r5, [ip]
   e1b8a:	f8be b002 	ldrh.w	fp, [lr, #2]
   e1b8e:	fb09 b505 	mla	r5, r9, r5, fp
   e1b92:	44aa      	add	sl, r5
   e1b94:	b29b      	uxth	r3, r3
   e1b96:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   e1b9a:	f84e 3b04 	str.w	r3, [lr], #4
   e1b9e:	f85c 3b04 	ldr.w	r3, [ip], #4
   e1ba2:	f8be 5000 	ldrh.w	r5, [lr]
   e1ba6:	0c1b      	lsrs	r3, r3, #16
   e1ba8:	fb09 5303 	mla	r3, r9, r3, r5
   e1bac:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   e1bb0:	4567      	cmp	r7, ip
   e1bb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   e1bb6:	d8e6      	bhi.n	e1b86 <__multiply+0xf2>
   e1bb8:	9d01      	ldr	r5, [sp, #4]
   e1bba:	514b      	str	r3, [r1, r5]
   e1bbc:	3104      	adds	r1, #4
   e1bbe:	e79e      	b.n	e1afe <__multiply+0x6a>
   e1bc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   e1bc4:	2b00      	cmp	r3, #0
   e1bc6:	d1a0      	bne.n	e1b0a <__multiply+0x76>
   e1bc8:	3e01      	subs	r6, #1
   e1bca:	e79c      	b.n	e1b06 <__multiply+0x72>

000e1bcc <__pow5mult>:
   e1bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e1bd0:	4615      	mov	r5, r2
   e1bd2:	f012 0203 	ands.w	r2, r2, #3
   e1bd6:	4606      	mov	r6, r0
   e1bd8:	460f      	mov	r7, r1
   e1bda:	d007      	beq.n	e1bec <__pow5mult+0x20>
   e1bdc:	4c21      	ldr	r4, [pc, #132]	; (e1c64 <__pow5mult+0x98>)
   e1bde:	3a01      	subs	r2, #1
   e1be0:	2300      	movs	r3, #0
   e1be2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e1be6:	f7ff fe80 	bl	e18ea <__multadd>
   e1bea:	4607      	mov	r7, r0
   e1bec:	10ad      	asrs	r5, r5, #2
   e1bee:	d035      	beq.n	e1c5c <__pow5mult+0x90>
   e1bf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e1bf2:	b93c      	cbnz	r4, e1c04 <__pow5mult+0x38>
   e1bf4:	2010      	movs	r0, #16
   e1bf6:	f7fa fbeb 	bl	dc3d0 <malloc>
   e1bfa:	e9c0 4401 	strd	r4, r4, [r0, #4]
   e1bfe:	6270      	str	r0, [r6, #36]	; 0x24
   e1c00:	6004      	str	r4, [r0, #0]
   e1c02:	60c4      	str	r4, [r0, #12]
   e1c04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e1c08:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e1c0c:	b94c      	cbnz	r4, e1c22 <__pow5mult+0x56>
   e1c0e:	f240 2171 	movw	r1, #625	; 0x271
   e1c12:	4630      	mov	r0, r6
   e1c14:	f7ff ff35 	bl	e1a82 <__i2b>
   e1c18:	2300      	movs	r3, #0
   e1c1a:	f8c8 0008 	str.w	r0, [r8, #8]
   e1c1e:	4604      	mov	r4, r0
   e1c20:	6003      	str	r3, [r0, #0]
   e1c22:	f04f 0900 	mov.w	r9, #0
   e1c26:	07eb      	lsls	r3, r5, #31
   e1c28:	d50a      	bpl.n	e1c40 <__pow5mult+0x74>
   e1c2a:	4639      	mov	r1, r7
   e1c2c:	4622      	mov	r2, r4
   e1c2e:	4630      	mov	r0, r6
   e1c30:	f7ff ff30 	bl	e1a94 <__multiply>
   e1c34:	4639      	mov	r1, r7
   e1c36:	4680      	mov	r8, r0
   e1c38:	4630      	mov	r0, r6
   e1c3a:	f7ff fe3f 	bl	e18bc <_Bfree>
   e1c3e:	4647      	mov	r7, r8
   e1c40:	106d      	asrs	r5, r5, #1
   e1c42:	d00b      	beq.n	e1c5c <__pow5mult+0x90>
   e1c44:	6820      	ldr	r0, [r4, #0]
   e1c46:	b938      	cbnz	r0, e1c58 <__pow5mult+0x8c>
   e1c48:	4622      	mov	r2, r4
   e1c4a:	4621      	mov	r1, r4
   e1c4c:	4630      	mov	r0, r6
   e1c4e:	f7ff ff21 	bl	e1a94 <__multiply>
   e1c52:	6020      	str	r0, [r4, #0]
   e1c54:	f8c0 9000 	str.w	r9, [r0]
   e1c58:	4604      	mov	r4, r0
   e1c5a:	e7e4      	b.n	e1c26 <__pow5mult+0x5a>
   e1c5c:	4638      	mov	r0, r7
   e1c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e1c62:	bf00      	nop
   e1c64:	000e31f0 	.word	0x000e31f0

000e1c68 <__lshift>:
   e1c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e1c6c:	460c      	mov	r4, r1
   e1c6e:	6849      	ldr	r1, [r1, #4]
   e1c70:	6923      	ldr	r3, [r4, #16]
   e1c72:	eb03 1862 	add.w	r8, r3, r2, asr #5
   e1c76:	68a3      	ldr	r3, [r4, #8]
   e1c78:	4607      	mov	r7, r0
   e1c7a:	4691      	mov	r9, r2
   e1c7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e1c80:	f108 0601 	add.w	r6, r8, #1
   e1c84:	42b3      	cmp	r3, r6
   e1c86:	db3f      	blt.n	e1d08 <__lshift+0xa0>
   e1c88:	4638      	mov	r0, r7
   e1c8a:	f7ff fde3 	bl	e1854 <_Balloc>
   e1c8e:	2300      	movs	r3, #0
   e1c90:	4605      	mov	r5, r0
   e1c92:	f100 0114 	add.w	r1, r0, #20
   e1c96:	f100 0210 	add.w	r2, r0, #16
   e1c9a:	4618      	mov	r0, r3
   e1c9c:	4553      	cmp	r3, sl
   e1c9e:	db36      	blt.n	e1d0e <__lshift+0xa6>
   e1ca0:	6920      	ldr	r0, [r4, #16]
   e1ca2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   e1ca6:	f104 0314 	add.w	r3, r4, #20
   e1caa:	f019 091f 	ands.w	r9, r9, #31
   e1cae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   e1cb2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   e1cb6:	d02e      	beq.n	e1d16 <__lshift+0xae>
   e1cb8:	f1c9 0e20 	rsb	lr, r9, #32
   e1cbc:	468a      	mov	sl, r1
   e1cbe:	2200      	movs	r2, #0
   e1cc0:	6818      	ldr	r0, [r3, #0]
   e1cc2:	fa00 f009 	lsl.w	r0, r0, r9
   e1cc6:	4302      	orrs	r2, r0
   e1cc8:	f84a 2b04 	str.w	r2, [sl], #4
   e1ccc:	f853 2b04 	ldr.w	r2, [r3], #4
   e1cd0:	459c      	cmp	ip, r3
   e1cd2:	fa22 f20e 	lsr.w	r2, r2, lr
   e1cd6:	d8f3      	bhi.n	e1cc0 <__lshift+0x58>
   e1cd8:	ebac 0304 	sub.w	r3, ip, r4
   e1cdc:	3b15      	subs	r3, #21
   e1cde:	f023 0303 	bic.w	r3, r3, #3
   e1ce2:	3304      	adds	r3, #4
   e1ce4:	f104 0015 	add.w	r0, r4, #21
   e1ce8:	4560      	cmp	r0, ip
   e1cea:	bf88      	it	hi
   e1cec:	2304      	movhi	r3, #4
   e1cee:	50ca      	str	r2, [r1, r3]
   e1cf0:	b10a      	cbz	r2, e1cf6 <__lshift+0x8e>
   e1cf2:	f108 0602 	add.w	r6, r8, #2
   e1cf6:	3e01      	subs	r6, #1
   e1cf8:	4638      	mov	r0, r7
   e1cfa:	612e      	str	r6, [r5, #16]
   e1cfc:	4621      	mov	r1, r4
   e1cfe:	f7ff fddd 	bl	e18bc <_Bfree>
   e1d02:	4628      	mov	r0, r5
   e1d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1d08:	3101      	adds	r1, #1
   e1d0a:	005b      	lsls	r3, r3, #1
   e1d0c:	e7ba      	b.n	e1c84 <__lshift+0x1c>
   e1d0e:	f842 0f04 	str.w	r0, [r2, #4]!
   e1d12:	3301      	adds	r3, #1
   e1d14:	e7c2      	b.n	e1c9c <__lshift+0x34>
   e1d16:	3904      	subs	r1, #4
   e1d18:	f853 2b04 	ldr.w	r2, [r3], #4
   e1d1c:	f841 2f04 	str.w	r2, [r1, #4]!
   e1d20:	459c      	cmp	ip, r3
   e1d22:	d8f9      	bhi.n	e1d18 <__lshift+0xb0>
   e1d24:	e7e7      	b.n	e1cf6 <__lshift+0x8e>

000e1d26 <__mcmp>:
   e1d26:	b530      	push	{r4, r5, lr}
   e1d28:	6902      	ldr	r2, [r0, #16]
   e1d2a:	690c      	ldr	r4, [r1, #16]
   e1d2c:	1b12      	subs	r2, r2, r4
   e1d2e:	d10e      	bne.n	e1d4e <__mcmp+0x28>
   e1d30:	f100 0314 	add.w	r3, r0, #20
   e1d34:	3114      	adds	r1, #20
   e1d36:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   e1d3a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   e1d3e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   e1d42:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   e1d46:	42a5      	cmp	r5, r4
   e1d48:	d003      	beq.n	e1d52 <__mcmp+0x2c>
   e1d4a:	d305      	bcc.n	e1d58 <__mcmp+0x32>
   e1d4c:	2201      	movs	r2, #1
   e1d4e:	4610      	mov	r0, r2
   e1d50:	bd30      	pop	{r4, r5, pc}
   e1d52:	4283      	cmp	r3, r0
   e1d54:	d3f3      	bcc.n	e1d3e <__mcmp+0x18>
   e1d56:	e7fa      	b.n	e1d4e <__mcmp+0x28>
   e1d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e1d5c:	e7f7      	b.n	e1d4e <__mcmp+0x28>

000e1d5e <__mdiff>:
   e1d5e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1d62:	460c      	mov	r4, r1
   e1d64:	4606      	mov	r6, r0
   e1d66:	4611      	mov	r1, r2
   e1d68:	4620      	mov	r0, r4
   e1d6a:	4617      	mov	r7, r2
   e1d6c:	f7ff ffdb 	bl	e1d26 <__mcmp>
   e1d70:	1e05      	subs	r5, r0, #0
   e1d72:	d108      	bne.n	e1d86 <__mdiff+0x28>
   e1d74:	4629      	mov	r1, r5
   e1d76:	4630      	mov	r0, r6
   e1d78:	f7ff fd6c 	bl	e1854 <_Balloc>
   e1d7c:	2301      	movs	r3, #1
   e1d7e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   e1d82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1d86:	bfa4      	itt	ge
   e1d88:	463b      	movge	r3, r7
   e1d8a:	4627      	movge	r7, r4
   e1d8c:	4630      	mov	r0, r6
   e1d8e:	6879      	ldr	r1, [r7, #4]
   e1d90:	bfa6      	itte	ge
   e1d92:	461c      	movge	r4, r3
   e1d94:	2500      	movge	r5, #0
   e1d96:	2501      	movlt	r5, #1
   e1d98:	f7ff fd5c 	bl	e1854 <_Balloc>
   e1d9c:	693e      	ldr	r6, [r7, #16]
   e1d9e:	60c5      	str	r5, [r0, #12]
   e1da0:	6925      	ldr	r5, [r4, #16]
   e1da2:	f107 0114 	add.w	r1, r7, #20
   e1da6:	f104 0914 	add.w	r9, r4, #20
   e1daa:	f100 0e14 	add.w	lr, r0, #20
   e1dae:	f107 0210 	add.w	r2, r7, #16
   e1db2:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   e1db6:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   e1dba:	46f2      	mov	sl, lr
   e1dbc:	2700      	movs	r7, #0
   e1dbe:	f859 3b04 	ldr.w	r3, [r9], #4
   e1dc2:	f852 bf04 	ldr.w	fp, [r2, #4]!
   e1dc6:	fa1f f883 	uxth.w	r8, r3
   e1dca:	fa17 f78b 	uxtah	r7, r7, fp
   e1dce:	0c1b      	lsrs	r3, r3, #16
   e1dd0:	eba7 0808 	sub.w	r8, r7, r8
   e1dd4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   e1dd8:	eb03 4328 	add.w	r3, r3, r8, asr #16
   e1ddc:	fa1f f888 	uxth.w	r8, r8
   e1de0:	141f      	asrs	r7, r3, #16
   e1de2:	454d      	cmp	r5, r9
   e1de4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   e1de8:	f84a 3b04 	str.w	r3, [sl], #4
   e1dec:	d8e7      	bhi.n	e1dbe <__mdiff+0x60>
   e1dee:	1b2b      	subs	r3, r5, r4
   e1df0:	3b15      	subs	r3, #21
   e1df2:	f023 0303 	bic.w	r3, r3, #3
   e1df6:	3304      	adds	r3, #4
   e1df8:	3415      	adds	r4, #21
   e1dfa:	42a5      	cmp	r5, r4
   e1dfc:	bf38      	it	cc
   e1dfe:	2304      	movcc	r3, #4
   e1e00:	4419      	add	r1, r3
   e1e02:	4473      	add	r3, lr
   e1e04:	469e      	mov	lr, r3
   e1e06:	460d      	mov	r5, r1
   e1e08:	4565      	cmp	r5, ip
   e1e0a:	d30e      	bcc.n	e1e2a <__mdiff+0xcc>
   e1e0c:	f10c 0203 	add.w	r2, ip, #3
   e1e10:	1a52      	subs	r2, r2, r1
   e1e12:	f022 0203 	bic.w	r2, r2, #3
   e1e16:	3903      	subs	r1, #3
   e1e18:	458c      	cmp	ip, r1
   e1e1a:	bf38      	it	cc
   e1e1c:	2200      	movcc	r2, #0
   e1e1e:	441a      	add	r2, r3
   e1e20:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   e1e24:	b17b      	cbz	r3, e1e46 <__mdiff+0xe8>
   e1e26:	6106      	str	r6, [r0, #16]
   e1e28:	e7ab      	b.n	e1d82 <__mdiff+0x24>
   e1e2a:	f855 8b04 	ldr.w	r8, [r5], #4
   e1e2e:	fa17 f488 	uxtah	r4, r7, r8
   e1e32:	1422      	asrs	r2, r4, #16
   e1e34:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   e1e38:	b2a4      	uxth	r4, r4
   e1e3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   e1e3e:	f84e 4b04 	str.w	r4, [lr], #4
   e1e42:	1417      	asrs	r7, r2, #16
   e1e44:	e7e0      	b.n	e1e08 <__mdiff+0xaa>
   e1e46:	3e01      	subs	r6, #1
   e1e48:	e7ea      	b.n	e1e20 <__mdiff+0xc2>
	...

000e1e4c <__ulp>:
   e1e4c:	b082      	sub	sp, #8
   e1e4e:	ed8d 0b00 	vstr	d0, [sp]
   e1e52:	9b01      	ldr	r3, [sp, #4]
   e1e54:	4912      	ldr	r1, [pc, #72]	; (e1ea0 <__ulp+0x54>)
   e1e56:	4019      	ands	r1, r3
   e1e58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   e1e5c:	2900      	cmp	r1, #0
   e1e5e:	dd05      	ble.n	e1e6c <__ulp+0x20>
   e1e60:	2200      	movs	r2, #0
   e1e62:	460b      	mov	r3, r1
   e1e64:	ec43 2b10 	vmov	d0, r2, r3
   e1e68:	b002      	add	sp, #8
   e1e6a:	4770      	bx	lr
   e1e6c:	4249      	negs	r1, r1
   e1e6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   e1e72:	ea4f 5021 	mov.w	r0, r1, asr #20
   e1e76:	f04f 0200 	mov.w	r2, #0
   e1e7a:	f04f 0300 	mov.w	r3, #0
   e1e7e:	da04      	bge.n	e1e8a <__ulp+0x3e>
   e1e80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   e1e84:	fa41 f300 	asr.w	r3, r1, r0
   e1e88:	e7ec      	b.n	e1e64 <__ulp+0x18>
   e1e8a:	f1a0 0114 	sub.w	r1, r0, #20
   e1e8e:	291e      	cmp	r1, #30
   e1e90:	bfda      	itte	le
   e1e92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   e1e96:	fa20 f101 	lsrle.w	r1, r0, r1
   e1e9a:	2101      	movgt	r1, #1
   e1e9c:	460a      	mov	r2, r1
   e1e9e:	e7e1      	b.n	e1e64 <__ulp+0x18>
   e1ea0:	7ff00000 	.word	0x7ff00000

000e1ea4 <__b2d>:
   e1ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e1ea6:	6905      	ldr	r5, [r0, #16]
   e1ea8:	f100 0714 	add.w	r7, r0, #20
   e1eac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   e1eb0:	1f2e      	subs	r6, r5, #4
   e1eb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e1eb6:	4620      	mov	r0, r4
   e1eb8:	f7ff fd93 	bl	e19e2 <__hi0bits>
   e1ebc:	f1c0 0320 	rsb	r3, r0, #32
   e1ec0:	280a      	cmp	r0, #10
   e1ec2:	f8df c07c 	ldr.w	ip, [pc, #124]	; e1f40 <__b2d+0x9c>
   e1ec6:	600b      	str	r3, [r1, #0]
   e1ec8:	dc14      	bgt.n	e1ef4 <__b2d+0x50>
   e1eca:	f1c0 0e0b 	rsb	lr, r0, #11
   e1ece:	fa24 f10e 	lsr.w	r1, r4, lr
   e1ed2:	42b7      	cmp	r7, r6
   e1ed4:	ea41 030c 	orr.w	r3, r1, ip
   e1ed8:	bf34      	ite	cc
   e1eda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e1ede:	2100      	movcs	r1, #0
   e1ee0:	3015      	adds	r0, #21
   e1ee2:	fa04 f000 	lsl.w	r0, r4, r0
   e1ee6:	fa21 f10e 	lsr.w	r1, r1, lr
   e1eea:	ea40 0201 	orr.w	r2, r0, r1
   e1eee:	ec43 2b10 	vmov	d0, r2, r3
   e1ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e1ef4:	42b7      	cmp	r7, r6
   e1ef6:	bf3a      	itte	cc
   e1ef8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e1efc:	f1a5 0608 	subcc.w	r6, r5, #8
   e1f00:	2100      	movcs	r1, #0
   e1f02:	380b      	subs	r0, #11
   e1f04:	d017      	beq.n	e1f36 <__b2d+0x92>
   e1f06:	f1c0 0c20 	rsb	ip, r0, #32
   e1f0a:	fa04 f500 	lsl.w	r5, r4, r0
   e1f0e:	42be      	cmp	r6, r7
   e1f10:	fa21 f40c 	lsr.w	r4, r1, ip
   e1f14:	ea45 0504 	orr.w	r5, r5, r4
   e1f18:	bf8c      	ite	hi
   e1f1a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   e1f1e:	2400      	movls	r4, #0
   e1f20:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   e1f24:	fa01 f000 	lsl.w	r0, r1, r0
   e1f28:	fa24 f40c 	lsr.w	r4, r4, ip
   e1f2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e1f30:	ea40 0204 	orr.w	r2, r0, r4
   e1f34:	e7db      	b.n	e1eee <__b2d+0x4a>
   e1f36:	ea44 030c 	orr.w	r3, r4, ip
   e1f3a:	460a      	mov	r2, r1
   e1f3c:	e7d7      	b.n	e1eee <__b2d+0x4a>
   e1f3e:	bf00      	nop
   e1f40:	3ff00000 	.word	0x3ff00000

000e1f44 <__d2b>:
   e1f44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e1f48:	4689      	mov	r9, r1
   e1f4a:	2101      	movs	r1, #1
   e1f4c:	ec57 6b10 	vmov	r6, r7, d0
   e1f50:	4690      	mov	r8, r2
   e1f52:	f7ff fc7f 	bl	e1854 <_Balloc>
   e1f56:	f3c7 550a 	ubfx	r5, r7, #20, #11
   e1f5a:	4604      	mov	r4, r0
   e1f5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   e1f60:	bb35      	cbnz	r5, e1fb0 <__d2b+0x6c>
   e1f62:	2e00      	cmp	r6, #0
   e1f64:	9301      	str	r3, [sp, #4]
   e1f66:	d028      	beq.n	e1fba <__d2b+0x76>
   e1f68:	4668      	mov	r0, sp
   e1f6a:	9600      	str	r6, [sp, #0]
   e1f6c:	f7ff fd59 	bl	e1a22 <__lo0bits>
   e1f70:	9900      	ldr	r1, [sp, #0]
   e1f72:	b300      	cbz	r0, e1fb6 <__d2b+0x72>
   e1f74:	9a01      	ldr	r2, [sp, #4]
   e1f76:	f1c0 0320 	rsb	r3, r0, #32
   e1f7a:	fa02 f303 	lsl.w	r3, r2, r3
   e1f7e:	430b      	orrs	r3, r1
   e1f80:	40c2      	lsrs	r2, r0
   e1f82:	6163      	str	r3, [r4, #20]
   e1f84:	9201      	str	r2, [sp, #4]
   e1f86:	9b01      	ldr	r3, [sp, #4]
   e1f88:	61a3      	str	r3, [r4, #24]
   e1f8a:	2b00      	cmp	r3, #0
   e1f8c:	bf14      	ite	ne
   e1f8e:	2202      	movne	r2, #2
   e1f90:	2201      	moveq	r2, #1
   e1f92:	6122      	str	r2, [r4, #16]
   e1f94:	b1d5      	cbz	r5, e1fcc <__d2b+0x88>
   e1f96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   e1f9a:	4405      	add	r5, r0
   e1f9c:	f8c9 5000 	str.w	r5, [r9]
   e1fa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e1fa4:	f8c8 0000 	str.w	r0, [r8]
   e1fa8:	4620      	mov	r0, r4
   e1faa:	b003      	add	sp, #12
   e1fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e1fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e1fb4:	e7d5      	b.n	e1f62 <__d2b+0x1e>
   e1fb6:	6161      	str	r1, [r4, #20]
   e1fb8:	e7e5      	b.n	e1f86 <__d2b+0x42>
   e1fba:	a801      	add	r0, sp, #4
   e1fbc:	f7ff fd31 	bl	e1a22 <__lo0bits>
   e1fc0:	9b01      	ldr	r3, [sp, #4]
   e1fc2:	6163      	str	r3, [r4, #20]
   e1fc4:	2201      	movs	r2, #1
   e1fc6:	6122      	str	r2, [r4, #16]
   e1fc8:	3020      	adds	r0, #32
   e1fca:	e7e3      	b.n	e1f94 <__d2b+0x50>
   e1fcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   e1fd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e1fd4:	f8c9 0000 	str.w	r0, [r9]
   e1fd8:	6918      	ldr	r0, [r3, #16]
   e1fda:	f7ff fd02 	bl	e19e2 <__hi0bits>
   e1fde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   e1fe2:	e7df      	b.n	e1fa4 <__d2b+0x60>

000e1fe4 <__ratio>:
   e1fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1fe8:	4688      	mov	r8, r1
   e1fea:	4669      	mov	r1, sp
   e1fec:	4681      	mov	r9, r0
   e1fee:	f7ff ff59 	bl	e1ea4 <__b2d>
   e1ff2:	a901      	add	r1, sp, #4
   e1ff4:	4640      	mov	r0, r8
   e1ff6:	ec55 4b10 	vmov	r4, r5, d0
   e1ffa:	f7ff ff53 	bl	e1ea4 <__b2d>
   e1ffe:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e2002:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e2006:	eba3 0c02 	sub.w	ip, r3, r2
   e200a:	e9dd 3200 	ldrd	r3, r2, [sp]
   e200e:	1a9b      	subs	r3, r3, r2
   e2010:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   e2014:	ec51 0b10 	vmov	r0, r1, d0
   e2018:	2b00      	cmp	r3, #0
   e201a:	bfd6      	itet	le
   e201c:	460a      	movle	r2, r1
   e201e:	462a      	movgt	r2, r5
   e2020:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   e2024:	468b      	mov	fp, r1
   e2026:	462f      	mov	r7, r5
   e2028:	bfd4      	ite	le
   e202a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   e202e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   e2032:	4620      	mov	r0, r4
   e2034:	ee10 2a10 	vmov	r2, s0
   e2038:	465b      	mov	r3, fp
   e203a:	4639      	mov	r1, r7
   e203c:	f7fd fd96 	bl	dfb6c <__aeabi_ddiv>
   e2040:	ec41 0b10 	vmov	d0, r0, r1
   e2044:	b003      	add	sp, #12
   e2046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e204a <__copybits>:
   e204a:	3901      	subs	r1, #1
   e204c:	b570      	push	{r4, r5, r6, lr}
   e204e:	1149      	asrs	r1, r1, #5
   e2050:	6914      	ldr	r4, [r2, #16]
   e2052:	3101      	adds	r1, #1
   e2054:	f102 0314 	add.w	r3, r2, #20
   e2058:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e205c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e2060:	1f05      	subs	r5, r0, #4
   e2062:	42a3      	cmp	r3, r4
   e2064:	d30c      	bcc.n	e2080 <__copybits+0x36>
   e2066:	1aa3      	subs	r3, r4, r2
   e2068:	3b11      	subs	r3, #17
   e206a:	f023 0303 	bic.w	r3, r3, #3
   e206e:	3211      	adds	r2, #17
   e2070:	42a2      	cmp	r2, r4
   e2072:	bf88      	it	hi
   e2074:	2300      	movhi	r3, #0
   e2076:	4418      	add	r0, r3
   e2078:	2300      	movs	r3, #0
   e207a:	4288      	cmp	r0, r1
   e207c:	d305      	bcc.n	e208a <__copybits+0x40>
   e207e:	bd70      	pop	{r4, r5, r6, pc}
   e2080:	f853 6b04 	ldr.w	r6, [r3], #4
   e2084:	f845 6f04 	str.w	r6, [r5, #4]!
   e2088:	e7eb      	b.n	e2062 <__copybits+0x18>
   e208a:	f840 3b04 	str.w	r3, [r0], #4
   e208e:	e7f4      	b.n	e207a <__copybits+0x30>

000e2090 <__any_on>:
   e2090:	f100 0214 	add.w	r2, r0, #20
   e2094:	6900      	ldr	r0, [r0, #16]
   e2096:	114b      	asrs	r3, r1, #5
   e2098:	4298      	cmp	r0, r3
   e209a:	b510      	push	{r4, lr}
   e209c:	db11      	blt.n	e20c2 <__any_on+0x32>
   e209e:	dd0a      	ble.n	e20b6 <__any_on+0x26>
   e20a0:	f011 011f 	ands.w	r1, r1, #31
   e20a4:	d007      	beq.n	e20b6 <__any_on+0x26>
   e20a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e20aa:	fa24 f001 	lsr.w	r0, r4, r1
   e20ae:	fa00 f101 	lsl.w	r1, r0, r1
   e20b2:	428c      	cmp	r4, r1
   e20b4:	d10b      	bne.n	e20ce <__any_on+0x3e>
   e20b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e20ba:	4293      	cmp	r3, r2
   e20bc:	d803      	bhi.n	e20c6 <__any_on+0x36>
   e20be:	2000      	movs	r0, #0
   e20c0:	bd10      	pop	{r4, pc}
   e20c2:	4603      	mov	r3, r0
   e20c4:	e7f7      	b.n	e20b6 <__any_on+0x26>
   e20c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e20ca:	2900      	cmp	r1, #0
   e20cc:	d0f5      	beq.n	e20ba <__any_on+0x2a>
   e20ce:	2001      	movs	r0, #1
   e20d0:	e7f6      	b.n	e20c0 <__any_on+0x30>

000e20d2 <_calloc_r>:
   e20d2:	b513      	push	{r0, r1, r4, lr}
   e20d4:	434a      	muls	r2, r1
   e20d6:	4611      	mov	r1, r2
   e20d8:	9201      	str	r2, [sp, #4]
   e20da:	f7fa f9b9 	bl	dc450 <_malloc_r>
   e20de:	4604      	mov	r4, r0
   e20e0:	b118      	cbz	r0, e20ea <_calloc_r+0x18>
   e20e2:	9a01      	ldr	r2, [sp, #4]
   e20e4:	2100      	movs	r1, #0
   e20e6:	f7fd ff7d 	bl	dffe4 <memset>
   e20ea:	4620      	mov	r0, r4
   e20ec:	b002      	add	sp, #8
   e20ee:	bd10      	pop	{r4, pc}

000e20f0 <_open_r>:
   e20f0:	b538      	push	{r3, r4, r5, lr}
   e20f2:	4d07      	ldr	r5, [pc, #28]	; (e2110 <_open_r+0x20>)
   e20f4:	4604      	mov	r4, r0
   e20f6:	4608      	mov	r0, r1
   e20f8:	4611      	mov	r1, r2
   e20fa:	2200      	movs	r2, #0
   e20fc:	602a      	str	r2, [r5, #0]
   e20fe:	461a      	mov	r2, r3
   e2100:	f7f9 ff0e 	bl	dbf20 <_open>
   e2104:	1c43      	adds	r3, r0, #1
   e2106:	d102      	bne.n	e210e <_open_r+0x1e>
   e2108:	682b      	ldr	r3, [r5, #0]
   e210a:	b103      	cbz	r3, e210e <_open_r+0x1e>
   e210c:	6023      	str	r3, [r4, #0]
   e210e:	bd38      	pop	{r3, r4, r5, pc}
   e2110:	2003e7ec 	.word	0x2003e7ec

000e2114 <_read_r>:
   e2114:	b538      	push	{r3, r4, r5, lr}
   e2116:	4d07      	ldr	r5, [pc, #28]	; (e2134 <_read_r+0x20>)
   e2118:	4604      	mov	r4, r0
   e211a:	4608      	mov	r0, r1
   e211c:	4611      	mov	r1, r2
   e211e:	2200      	movs	r2, #0
   e2120:	602a      	str	r2, [r5, #0]
   e2122:	461a      	mov	r2, r3
   e2124:	f7f9 ff0c 	bl	dbf40 <_read>
   e2128:	1c43      	adds	r3, r0, #1
   e212a:	d102      	bne.n	e2132 <_read_r+0x1e>
   e212c:	682b      	ldr	r3, [r5, #0]
   e212e:	b103      	cbz	r3, e2132 <_read_r+0x1e>
   e2130:	6023      	str	r3, [r4, #0]
   e2132:	bd38      	pop	{r3, r4, r5, pc}
   e2134:	2003e7ec 	.word	0x2003e7ec

000e2138 <nan>:
   e2138:	ed9f 0b01 	vldr	d0, [pc, #4]	; e2140 <nan+0x8>
   e213c:	4770      	bx	lr
   e213e:	bf00      	nop
   e2140:	00000000 	.word	0x00000000
   e2144:	7ff80000 	.word	0x7ff80000

000e2148 <__ascii_wctomb>:
   e2148:	b149      	cbz	r1, e215e <__ascii_wctomb+0x16>
   e214a:	2aff      	cmp	r2, #255	; 0xff
   e214c:	bf85      	ittet	hi
   e214e:	238a      	movhi	r3, #138	; 0x8a
   e2150:	6003      	strhi	r3, [r0, #0]
   e2152:	700a      	strbls	r2, [r1, #0]
   e2154:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   e2158:	bf98      	it	ls
   e215a:	2001      	movls	r0, #1
   e215c:	4770      	bx	lr
   e215e:	4608      	mov	r0, r1
   e2160:	4770      	bx	lr
	...

000e2164 <__aeabi_d2lz>:
   e2164:	b538      	push	{r3, r4, r5, lr}
   e2166:	2200      	movs	r2, #0
   e2168:	2300      	movs	r3, #0
   e216a:	4604      	mov	r4, r0
   e216c:	460d      	mov	r5, r1
   e216e:	f7fd fe45 	bl	dfdfc <__aeabi_dcmplt>
   e2172:	b928      	cbnz	r0, e2180 <__aeabi_d2lz+0x1c>
   e2174:	4620      	mov	r0, r4
   e2176:	4629      	mov	r1, r5
   e2178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e217c:	f7fd beae 	b.w	dfedc <__aeabi_d2ulz>
   e2180:	4620      	mov	r0, r4
   e2182:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   e2186:	f7fd fea9 	bl	dfedc <__aeabi_d2ulz>
   e218a:	4240      	negs	r0, r0
   e218c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e2190:	bd38      	pop	{r3, r4, r5, pc}
   e2192:	bf00      	nop

000e2194 <dynalib_user>:
   e2194:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   e21a4:	0000 0000 6574 706d 0043 6553 2074 6f4d     ....tempC.Set Mo
   e21b4:	6564 5300 7465 5720 6b61 2065 6954 656d     de.Set Wake Time
   e21c4:	5300 7465 5320 656c 7065 5420 6d69 0065     .Set Sleep Time.
   e21d4:	7061 2e70 7570 7162 6100 7070 732e 7165     app.pubq.app.seq
   e21e4:	6966 656c 0000 0000                         file....

000e21ec <_ZTVN5spark10LogHandlerE>:
	...
   e21fc:	40a9 000d 40cd 000d                         .@...@..

000e2204 <_ZTVN5spark16SerialLogHandlerE>:
	...
   e220c:	40d9 000d 410d 000d e2d5 000d 40cf 000d     .@...A.......@..
   e221c:	704f 6e65 7420 6d69 2065 6573 2074 6f74     Open time set to
   e222c:	2520 0069 6c43 736f 6e69 2067 6974 656d      %i.Closing time
   e223c:	7320 7465 7420 206f 6925 4300 656c 7261      set to %i.Clear
   e224c:	6465 4c20 776f 5020 776f 7265 4d20 646f     ed Low Power Mod
   e225c:	0065 3425 322e 2066 0043 6166 6c69 6465     e.%4.2f C.failed
   e226c:	7420 206f 6572 6461 7220 6765 6441 7264      to read regAddr
   e227c:	253d 3230 2078 6f63 6e75 3d74 7525 6600     =%02x count=%u.f
   e228c:	6961 656c 2064 6f74 7220 6165 2064 6572     ailed to read re
   e229c:	4167 6464 3d72 3025 7832 7320 6174 3d74     gAddr=%02x stat=
   e22ac:	6425 4600 554f 2054 6964 2064 6f6e 2074     %d.FOUT did not 
   e22bc:	6f67 4820 4749 0048 6f6e 2074 6564 6574     go HIGH.not dete
   e22cc:	7463 6465 6600 6961 656c 2064 6f74 7720     cted.failed to w
   e22dc:	6972 6574 7220 6765 6441 7264 253d 3230     rite regAddr=%02
   e22ec:	2078 7473 7461 253d 0064 6573 5774 5444     x stat=%d.setWDT
   e22fc:	2520 0064 6177 6374 6468 676f 6320 656c      %d.watchdog cle
   e230c:	7261 6465 6220 6552 7573 746c 253d 0064     ared bResult=%d.
   e231c:	6177 6374 6468 676f 7320 7465 6620 756f     watchdog set fou
   e232c:	5372 6365 3d73 6425 6220 6552 7573 746c     rSecs=%d bResult
   e233c:	253d 0064 6572 6573 4374 6e6f 6966 2867     =%d.resetConfig(
   e234c:	7830 3025 6c38 2978 5700 5441 4843 4f44     0x%08lx).WATCHDO
   e235c:	0047 4544 5045 505f 574f 5245 445f 574f     G.DEEP_POWER_DOW
   e236c:	004e 4f43 4e55 4454 574f 5f4e 4954 454d     N.COUNTDOWN_TIME
   e237c:	0052 4c41 5241 004d 6166 6c69 7275 2065     R.ALARM.failure 
   e238c:	6e69 7520 6470 7461 5765 6b61 5265 6165     in updateWakeRea
   e239c:	6f73 206e 6425 7700 6b61 2065 6572 7361     son %d.wake reas
   e23ac:	6e6f 3d20 2520 0073 3025 6434 252d 3230     on = %s.%04d-%02
   e23bc:	2d64 3025 6432 2520 3230 3a64 3025 6432     d-%02d %02d:%02d
   e23cc:	253a 3230 0064 6567 5274 6374 7341 6d54     :%02d.getRtcAsTm
   e23dc:	2520 0073 6573 2074 7973 7473 6d65 6320      %s.set system c
   e23ec:	6f6c 6b63 6620 6f72 206d 5452 2043 7325     lock from RTC %s
   e23fc:	6600 6961 656c 2064 6f74 6420 7465 6365     .failed to detec
   e240c:	2074 4241 3831 3530 7300 7465 7452 4163     t AB1805.setRtcA
   e241c:	5473 206d 7325 6600 6961 756c 6572 6920     sTm %s.failure i
   e242c:	206e 6573 5274 6374 7246 6d6f 6d54 2520     n setRtcFromTm %
   e243c:	0064 6573 2074 5452 2043 7266 6d6f 6320     d.set RTC from c
   e244c:	6f6c 6475 2520 0073 7061 2e70 6261 3831     loud %s.app.ab18
   e245c:	3530 0000                                   05..

000e2460 <_ZTV6AB1805>:
	...
   e2468:	4695 000d 4697 000d 4c03 000d 4c89 000d     .F...F...L...L..
   e2478:	6142 6b63 7267 756f 646e 7550 6c62 7369     BackgroundPublis
   e2488:	5268 004b                                   hRK.

000e248c <_ZTV19BackgroundPublishRK>:
	...
   e2494:	51b9 000d 51d5 000d                         .Q...Q..

000e249c <_ZTV10JsonBuffer>:
	...
   e24a4:	54b5 000d 54d1 000d                         .T...T..

000e24ac <_ZTV10JsonParser>:
	...
   e24b4:	54e5 000d 5509 000d 6425 253a 3a64 6425     .T...U..%d:%d:%d
   e24c4:	3000 3a30 3030 303a 0030 3332 353a 3a39     .00:00:00.23:59:
   e24d4:	3935 4d00 6425 252e 2e64 6425 2c00 7600     59.M%d.%d.%d.,.v
   e24e4:	6365 6f74 3a72 5f3a 5f4d 6572 6c61 6f6c     ector::_M_reallo
   e24f4:	5f63 6e69 6573 7472 0000 0000               c_insert....

000e2500 <_ZTV9LocalTime>:
	...
   e2508:	559d 000d 55b5 000d                         .U...U..

000e2510 <_ZTV12LocalTimeHMS>:
	...
   e2518:	553d 000d 554f 000d                         =U..OU..

000e2520 <_ZTV15LocalTimeChange>:
	...
   e2528:	553f 000d 555d 000d                         ?U..]U..

000e2530 <_ZTV22LocalTimePosixTimezone>:
	...
   e2538:	556d 000d 5589 000d 6966 656c 754e 3d6d     mU...U..fileNum=
   e2548:	6425 7320 7a69 3d65 6c25 0064 6572 6461     %d size=%ld.read
   e2558:	7551 7565 4665 6c69 2065 6425 6520 6576     QueueFile %d eve
   e2568:	746e 253d 2073 6164 6174 253d 0073 6572     nt=%s data=%s.re
   e2578:	6461 7551 7565 4665 6c69 2065 6425 6320     adQueueFile %d c
   e2588:	726f 7572 7470 6465 6520 6576 746e 6e20     orrupted event n
   e2598:	6d61 2065 726f 6420 7461 0061 6572 6461     ame or data.read
   e25a8:	7551 7565 4665 6c69 2065 6425 6220 6461     QueueFile %d bad
   e25b8:	6d20 6761 6369 253d 3830 786c 7620 7265      magic=%08lx ver
   e25c8:	6973 6e6f 253d 2075 6568 6461 7265 6953     sion=%u headerSi
   e25d8:	657a 253d 2075 616e 656d 654c 3d6e 7525     ze=%u nameLen=%u
   e25e8:	2f00 7375 2f72 7570 7162 6575 6575 7700     ./usr/pubqueue.w
   e25f8:	6972 6574 7551 7565 5465 466f 6c69 7365     riteQueueToFiles
   e2608:	6620 6c69 4e65 6d75 253d 0064 6572 6573      fileNum=%d.rese
   e2618:	2074 726f 6420 7369 6f63 6e6e 6365 2074     t or disconnect 
   e2628:	7665 6e65 2c74 7320 7661 2065 6966 656c     event, save file
   e2638:	2073 6f74 7120 6575 6575 7200 6d61 6400     s to queue.ram.d
   e2648:	7369 6163 6472 6e69 2067 6f63 7272 7075     iscarding corrup
   e2658:	6574 2064 6966 656c 2520 0064 7570 6c62     ted file %d.publ
   e2668:	7369 6968 676e 2520 2073 7665 6e65 3d74     ishing %s event=
   e2678:	7325 6420 7461 3d61 7325 6400 7369 6163     %s data=%s.disca
   e2688:	6472 6465 6520 6576 746e 2520 0064 5953     rded event %d.SY
   e2698:	5453 4d45 545f 5248 4145 2844 4e45 4241     STEM_THREAD(ENAB
   e26a8:	454c 2944 6920 2073 6572 7571 7269 6465     LED) is required
   e26b8:	7000 6275 696c 6873 6f43 6d6d 6e6f 6520     .publishCommon e
   e26c8:	6576 746e 614e 656d 253d 2073 7665 6e65     ventName=%s even
   e26d8:	4474 7461 3d61 7325 6300 6e61 6f6e 2074     tData=%s.cannot 
   e26e8:	7263 6165 6574 7320 6474 3a3a 6564 7571     create std::dequ
   e26f8:	2065 616c 6772 7265 7420 6168 206e 616d     e larger than ma
   e2708:	5f78 6973 657a 2928 6600 6c69 5165 6575     x_size().fileQue
   e2718:	6575 654c 3d6e 7525 7220 6d61 7551 7565     ueLen=%u ramQueu
   e2728:	4c65 6e65 253d 2075 6f63 6e6e 6365 6574     eLen=%u connecte
   e2738:	3d64 6425 7100 6575 6575 2064 6f74 7220     d=%d.queued to r
   e2748:	6d61 7551 7565 0065 7570 6c62 7369 2068     amQueue.publish 
   e2758:	7573 6363 7365 2073 6425 7200 6d65 766f     success %d.remov
   e2768:	6465 6620 6c69 2065 6425 7000 6275 696c     ed file %d.publi
   e2778:	6873 6620 6961 656c 2064 6425 7700 6972     sh failed %d.wri
   e2788:	6974 676e 7420 206f 6966 656c 2073 6661     ting to files af
   e2798:	6574 2072 7570 6c62 7369 2068 6166 6c69     ter publish fail
   e27a8:	7275 0065                                   ure.

000e27ac <_ZTV17PublishQueuePosix>:
	...
   e27b4:	73a5 000d 767d 000d 76a1 000d 3025 6438     .s..}v...v..%08d
   e27c4:	2f00 7200 6d65 766f 6465 2520 0073 7325     ./.removed %s.%s
   e27d4:	6520 6978 7473 2073 6e61 2064 7369 6120      exists and is a
   e27e4:	6420 7269 6365 6f74 7972 6600 6c69 2065      directory.file 
   e27f4:	6e69 7420 6568 7720 7961 202c 6564 656c     in the way, dele
   e2804:	6974 676e 2520 0073 7473 7461 6620 6c69     ting %s.stat fil
   e2814:	6465 6520 7272 6f6e 253d 0064 7263 6165     ed errno=%d.crea
   e2824:	6574 2064 6964 2072 7325 6d00 646b 7269     ted dir %s.mkdir
   e2834:	6620 6961 656c 2064 7265 6e72 3d6f 6425      failed errno=%d
   e2844:	7500 636e 6e6f 6966 7567 6572 2064 6964     .unconfigured di
   e2854:	5072 7461 0068 6373 6e61 696e 676e 2520     rPath.scanning %
   e2864:	2073 6977 6874 7020 7461 6574 6e72 2520     s with pattern %
   e2874:	0073 6461 6964 676e 7420 206f 7571 7565     s.adding to queu
   e2884:	2065 6425 2520 0073 6567 4674 6c69 4665     e %d %s.getFileF
   e2894:	6f72 516d 6575 6575 7220 7465 7275 656e     romQueue returne
   e28a4:	2064 6425 0000 0000                         d %d....

000e28ac <_ZTV14SequentialFile>:
	...
   e28b4:	79fd 000d 7a29 000d 76b5 000d 742e 706d     .y..)z...v...tmp
   e28c4:	7300 656c 7065 6548 706c 7265 6100 7070     .sleepHelper.app
   e28d4:	732e 656c 7065 2f00 7375 2f72 6c73 6565     .sleep./usr/slee
   e28e4:	5370 7465 6974 676e 2e73 736a 6e6f 2f00     pSettings.json./
   e28f4:	7375 2f72 6c73 6565 4470 7461 2e61 6164     usr/sleepData.da
   e2904:	0074 7645 6e65 4874 7369 6f74 7972 3a3a     t.EventHistory::
   e2914:	6461 4564 6576 746e 0d00 000a 6944 6373     addEvent....Disc
   e2924:	6e6f 656e 7463 6e69 2067 6563 6c6c 6c75     onnecting cellul
   e2934:	7261 7300 6174 6574 6148 646e 656c 5372     ar.stateHandlerS
   e2944:	6174 7472 7200 6e75 696e 676e 6920 206e     tart.running in 
   e2954:	6f6e 6320 6e6f 656e 7463 6f69 206e 6f6d     no connection mo
   e2964:	6564 6300 6e6f 656e 7463 6465 7420 206f     de.connected to 
   e2974:	656e 7774 726f 206b 6e69 2520 756c 6d20     network in %lu m
   e2984:	0073 6974 656d 2064 756f 2074 6f63 6e6e     s.timed out conn
   e2994:	6365 6974 676e 7420 206f 6c63 756f 0064     ecting to cloud.
   e29a4:	6974 656d 2064 756f 2074 6572 6f63 6e6e     timed out reconn
   e29b4:	6365 6974 676e 7420 206f 6c63 756f 0064     ecting to cloud.
   e29c4:	7473 7461 4865 6e61 6c64 7265 6c53 6565     stateHandlerSlee
   e29d4:	0070 6c73 6565 6970 676e 6620 726f 2520     p.sleeping for %
   e29e4:	2064 6573 2063 6461 756a 7473 656d 746e     d sec adjustment
   e29f4:	734d 253d 0064 6570 6972 646f 7420 6f6f     Ms=%d.period too
   e2a04:	7320 6f68 7472 7420 206f 6c73 6565 2070      short to sleep 
   e2a14:	6425 7200 6d65 766f 6e69 2067 7469 6d65     %d.removing item
   e2a24:	6620 6f72 206d 7570 6c62 7369 4468 7461      from publishDat
   e2a34:	0061 6f63 6e6e 6365 6574 2064 6f74 6320     a.connected to c
   e2a44:	6f6c 6475 6920 206e 6c25 2075 736d 7100     loud in %lu ms.q
   e2a54:	6975 6b63 6600 6c75 006c 7570 6c62 7369     uick.full.publis
   e2a64:	6968 676e 6e20 6d61 3d65 7325 6620 616c     hing name=%s fla
   e2a74:	7367 303d 2578 0078 7277 7400 6374 7200     gs=0x%x.wr.ttc.r
   e2a84:	0072 6f73 0063 6f6e 5220 4354 7420 6d69     r.soc.no RTC tim
   e2a94:	2c65 6420 696f 676e 6620 6c75 206c 6177     e, doing full wa
   e2aa4:	656b 7400 6d69 2065 6f74 6420 206f 7566     ke.time to do fu
   e2ab4:	6c6c 7720 6b61 0065 6f64 656e 7720 7469     ll wake.done wit
   e2ac4:	2068 6f6e 6320 6e6f 656e 7463 6f69 206e     h no connection 
   e2ad4:	6f6d 6564 202c 7270 7065 7261 6e69 2067     mode, preparing 
   e2ae4:	6f74 7320 656c 7065 7300 656c 7065 6320     to sleep.sleep c
   e2af4:	6379 656c 6920 2073 6873 726f 2c74 7520     ycle is short, u
   e2b04:	6973 676e 6320 6c65 756c 616c 2072 7473     sing cellular st
   e2b14:	6e61 6264 0079 6964 6373 6e6f 656e 7463     andby.disconnect
   e2b24:	6e69 2067 7266 6d6f 6320 6f6c 6475 0000     ing from cloud..

000e2b34 <_ZTV16JsonParserStaticILj622ELj50EE>:
	...
   e2b3c:	7e35 000d 7e49 000d                         5~..I~..

000e2b44 <_ZTVN11SleepHelper12SettingsFileE>:
	...
   e2b4c:	8055 000d 809d 000d                         U.......

000e2b54 <_ZTVN11SleepHelper14PersistentDataE>:
	...
   e2b5c:	9909 000d 822f 000d 8279 000d 7e5f 000d     ..../...y..._~..
   e2b6c:	7ec3 000d 7ea1 000d 7f3f 000d 8019 000d     .~...~..?.......
   e2b7c:	8041 000d                                   A...

000e2b80 <_ZTV11SleepHelper>:
	...
   e2b88:	abdd 000d add1 000d                         ........

000e2b90 <_ZTVN11SleepHelper18PersistentDataBaseE>:
	...
   e2b98:	7d59 000d 8207 000d 7d55 000d 7d57 000d     Y}......U}..W}..
   e2ba8:	7ec3 000d 7ea1 000d                         .~...~..

000e2bb0 <_ZTVN11SleepHelper18PersistentDataFileE>:
	...
   e2bb8:	9909 000d 822f 000d 8279 000d 7e5f 000d     ..../...y..._~..
   e2bc8:	7ec3 000d 7ea1 000d 7f3f 000d               .~...~..?...

000e2bd4 <TMP36_POWER_PIN>:
   e2bd4:	0012                                        ..

000e2bd6 <TMP36_SENSE_PIN>:
   e2bd6:	000f 3a74 2520 2e34 6632 5400 7365 0074     ..t: %4.2f.Test.
   e2be6:	5345 3554 4445 2c54 334d 322e 302e 302f     EST5EDT,M3.2.0/0
   e2bf6:	3a32 3030 303a 2c30 314d 2e31 2e31 2f30     2:00:00,M11.1.0/
   e2c06:	3230 303a 3a30 3030 2f00 7375 2f72 7665     02:00:00./usr/ev
   e2c16:	6e65 7374 742e 7478 6500 0068 3930 303a     ents.txt.eh.09:0
   e2c26:	3a30 3030 3100 3a36 3935 353a 0039          0:00.16:59:59.

000e2c34 <_ZTVN5spark13CellularClassE>:
	...
   e2c3c:	c55f 000d c555 000d c54b 000d c501 000d     _...U...K.......
   e2c4c:	c53f 000d c533 000d e62d 000d e635 000d     ?...3...-...5...
   e2c5c:	c527 000d c51f 000d c515 000d c50b 000d     '...............
   e2c6c:	e665 000d                                   e...

000e2c70 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e2c78:	c599 000d c59f 000d c5dd 000d c5ad 000d     ................
   e2c88:	c59b 000d                                   ....

000e2c8c <_ZTVN5spark13EthernetClassE>:
	...
   e2c94:	cbb3 000d cba9 000d cb9f 000d cb95 000d     ................
   e2ca4:	cb89 000d cb7d 000d e62d 000d e635 000d     ....}...-...5...
   e2cb4:	cb71 000d cb69 000d cb5f 000d cb55 000d     q...i..._...U...
   e2cc4:	e665 000d                                   e...

000e2cc8 <_ZTV7TwoWire>:
	...
   e2cd0:	cbd1 000d cc1b 000d cbf3 000d cbd3 000d     ................
   e2ce0:	cbfb 000d cc03 000d cc0b 000d cc13 000d     ................

000e2cf0 <_ZTV9IPAddress>:
	...
   e2cf8:	ccef 000d ccdf 000d cce1 000d 2e30 0030     ............0.0.
   e2d08:	6166 736c 0065 7274 6575 2500 2a2e 666c     false.true.%.*lf
   e2d18:	2500 0067 756e 6c6c 7500 3025 7834 0000     .%g.null.u%04x..

000e2d28 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e2d30:	cdf1 000d ce07 000d ce1d 000d ce15 000d     ................
   e2d40:	cdf5 000d                                   ....

000e2d44 <_ZTVN5spark16JSONBufferWriterE>:
	...
   e2d4c:	cdf3 000d cdf9 000d ce45 000d ce6b 000d     ........E...k...
   e2d5c:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   e2d6c:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   e2d7c:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   e2d8c:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   e2d9c:	005b 6f63 6564 3d20 0020 6564 6174 6c69     [.code = .detail
   e2dac:	2073 203d 6c00 006e 6e66 6300 646f 0065     s = .ln.fn.code.
   e2dbc:	6564 6174 6c69 0000                         detail..

000e2dc4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   e2dcc:	d715 000d d73b 000d d6f9 000d cea1 000d     ....;...........

000e2ddc <_ZTVN5spark16StreamLogHandlerE>:
	...
   e2de4:	daf1 000d db09 000d e2d5 000d 40cf 000d     .............@..

000e2df4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   e2dfc:	db1d 000d db31 000d e479 000d d701 000d     ....1...y.......

000e2e0c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   e2e14:	d713 000d d749 000d e211 000d d703 000d     ....I...........

000e2e24 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   e2e2c:	d711 000d d757 000d da39 000d d775 000d     ....W...9...u...

000e2e3c <_ZTVN5spark12NetworkClassE>:
	...
   e2e44:	e5ed 000d e5f7 000d e601 000d e60b 000d     ................
   e2e54:	e615 000d e621 000d e62d 000d e635 000d     ....!...-...5...
   e2e64:	e63d 000d e649 000d e651 000d e65b 000d     =...I...Q...[...
   e2e74:	e665 000d 6977 6972 676e 5300 7379 6574     e...wiring.Syste
   e2e84:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   e2e94:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   e2ea4:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   e2eb4:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   e2ec4:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000e2ed0 <_ZTV11USARTSerial>:
	...
   e2ed8:	ef79 000d efe7 000d efbf 000d e74d 000d     y...........M...
   e2ee8:	ef8f 000d efab 000d ef9d 000d efb9 000d     ................
   e2ef8:	ef7b 000d ef81 000d                         {.......

000e2f00 <_ZTV9USBSerial>:
	...
   e2f08:	f087 000d f0ef 000d f0c5 000d e74d 000d     ............M...
   e2f18:	f0b7 000d f089 000d f099 000d f0e9 000d     ................
   e2f28:	f0a9 000d f081 000d                         ........

000e2f30 <_ZSt7nothrow>:
   e2f30:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   e2f40:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000e2f51 <day_name.6145>:
   e2f51:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e2f61:	6972 6153                                    riSat

000e2f66 <mon_name.6146>:
   e2f66:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e2f76:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e2f86:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000e2f98 <fpi.7566>:
   e2f98:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e2fa8:	0000 0000                                   ....

000e2fac <fpinan.7602>:
   e2fac:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e2fbc:	0000 0000                                   ....

000e2fc0 <tinytens>:
   e2fc0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e2fd0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e2fe0:	6f43 64ac 0628 1168                         Co.d(.h.

000e2fe8 <_ctype_>:
   e2fe8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e2ff8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e3008:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e3018:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e3028:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e3038:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e3048:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e3058:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e3068:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e30ec <_C_numeric_locale>:
   e30ec:	2ea4 000e 291f 000e e280 2003 4f50 4953     .....)..... POSI
   e30fc:	0058 0000                                   X...

000e3100 <__mprec_bigtens>:
   e3100:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e3110:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e3120:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e3128 <__mprec_tens>:
   e3128:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e3138:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e3148:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e3158:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e3168:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e3178:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e3188:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e3198:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e31a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e31b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e31c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e31d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e31e8:	9db4 79d9 7843 44ea                         ...yCx.D

000e31f0 <p05.7490>:
   e31f0:	0005 0000 0019 0000 007d 0000               ........}...

000e31fc <link_const_variable_data_end>:
   e31fc:	000d42c9 	.word	0x000d42c9
   e3200:	000d45f1 	.word	0x000d45f1
   e3204:	000d5085 	.word	0x000d5085
   e3208:	000d766d 	.word	0x000d766d
   e320c:	000d7d45 	.word	0x000d7d45
   e3210:	000dab69 	.word	0x000dab69
   e3214:	000db9e9 	.word	0x000db9e9
   e3218:	000dc4f1 	.word	0x000dc4f1
   e321c:	000dc569 	.word	0x000dc569
   e3220:	000dcbbd 	.word	0x000dcbbd
   e3224:	000de2c5 	.word	0x000de2c5
   e3228:	000de739 	.word	0x000de739
   e322c:	000de859 	.word	0x000de859
   e3230:	000decd9 	.word	0x000decd9
   e3234:	000def65 	.word	0x000def65

000e3238 <link_constructors_end>:
	...
